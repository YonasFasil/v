{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Event Venue Management System - \"Venuine\"\n\n## Overview\n\n\"Venuine\" is a comprehensive event venue management system designed for venue owners and event managers. It provides tools to manage bookings, customers, proposals, payments, and tasks. The system incorporates AI-powered features such as smart scheduling, automated email replies, lead scoring, and predictive analytics to optimize venue operations and enhance customer experience. The business vision is to streamline venue management, increase efficiency, and provide data-driven insights to maximize revenue and customer satisfaction in the event industry.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript, using Vite.\n- **Routing**: Wouter.\n- **State Management**: TanStack Query (React Query) for server state and caching.\n- **UI Components**: Radix UI primitives with custom styling using Tailwind CSS and shadcn/ui.\n- **Forms**: React Hook Form with Zod validation.\n- **Styling**: Tailwind CSS with CSS variables.\n- **UI/UX Decisions**:\n    - Default view for Events & Bookings is cards for immediate overview.\n    - Full-width calendar layout for enhanced event visibility.\n    - Modern settings redesign with organized tabs for clear configuration.\n    - Enhanced event action buttons with sticky, semi-transparent design.\n    - Clean, grid-based layouts for modals (e.g., event creation/editing).\n    - Mobile-responsive design for all key features like proposals.\n    - Visual indicators for pricing, categories, and booking statuses.\n    - Simplified interface: Removed unnecessary features (pricing models, amenities, appearance settings) per user request for streamlined UI.\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript on Node.js.\n- **API Design**: RESTful API.\n- **Database Layer**: Abstracted storage interface (`IStorage`) for flexible database implementations.\n- **Error Handling**: Centralized middleware.\n\n### Data Storage\n- **ORM**: Drizzle ORM configured for PostgreSQL.\n- **Database**: PostgreSQL (Neon serverless).\n- **Migrations**: Drizzle Kit.\n- **Schema**: Comprehensive data model for users, venues, customers, bookings, proposals, payments, tasks, and AI insights.\n\n### Authentication & Authorization\n- **Session Management**: Express sessions with PostgreSQL session store.\n- **User System**: Role-based access (manager role by default).\n- **Security**: Secure session handling.\n\n### Core Technical Implementations & Feature Specifications\n- **Dedicated Floor Plans & Setup Section**: Centralized management and design of venue floor plans, independent of venue editing, with interactive 2D designer (drag-and-drop, resizable objects, multiple setup styles, capacity tracking).\n- **Modern Settings**: Comprehensive configuration for General, Notifications, Appearance, Integrations, BEO, Taxes, Security.\n- **BEO (Banquet Event Orders) System**: Template-based professional BEO generation from event summaries with customizable sections and print/download capabilities.\n- **Service & Package Management**: One-click duplication, comprehensive category management (visual overview, color coding), and flexible pricing models including \"Per Hour,\" \"Fixed Price,\" and \"Per Person.\" Corrected package-service pricing logic to include bundled services at no extra cost.\n- **Event Workflow**: Seamless integration of proposals into event creation with status tracking (sent, viewed, accepted, declined). Enhanced event creation and editing modals with component editing, copy configuration for multi-date events, and in-workflow service creation.\n- **Customer Communication**: Integrated panel for direct messaging (email, SMS, internal notes) from event details.\n- **Booking Conflict Detection**: Space-specific checking with detailed warnings.\n- **Real-Time Availability**: Calendar shows actual booking status with detailed event cards.\n- **Contract System**: Multi-date contract system grouping events, with UI integration and highlighting.\n- **Reports & Analytics**: Comprehensive dashboard with real-time data, interactive charts, and AI-powered insights.\n- **Tax and Fees System**: Configurable percentage and fixed-rate options.\n\n### AI Integration\n- **Provider**: Google Gemini API.\n- **Features**: Voice-to-Text Booking (with error correction), Smart Scheduling, Automated Email Replies, Lead Scoring, Predictive Analytics, AI-powered Proposal Generation, Natural Language Processing for voice data extraction.\n- **AI-Powered Insights**: Suggestions for packages and services with one-click application.\n- **Disclaimers**: Clear warnings about potential AI errors.\n\n## External Dependencies\n\n### Core Backend Services\n- **Database**: Neon PostgreSQL serverless database.\n- **Session Store**: PostgreSQL-backed session storage (`connect-pg-simple`).\n- **ORM**: Drizzle ORM.\n\n### AI & Machine Learning\n- **Google Gemini API**: Gemini 2.5 Flash model.\n- **Voice Recognition**: Browser Web Speech API.\n\n### Frontend Libraries\n- **UI Framework**: Radix UI.\n- **Styling**: Tailwind CSS.\n- **Validation**: Zod.\n- **Date Handling**: date-fns.\n- **Carousel**: Embla Carousel.\n\n### Development Tools\n- **Build System**: Vite.\n- **Type Checking**: TypeScript.\n- **Code Quality**: ESLint, Prettier.\n\n## Recent Technical Fixes (August 2025)\n\n### Critical Bug Fixes\n- **Booking Creation Validation Error (August 14, 2025)**: Fixed missing `tenantId` field in booking creation that was causing Zod validation failures. Added proper tenant isolation to both single event bookings and multi-event contract creation endpoints.\n- **API Endpoint Corrections**: Fixed space management endpoints from `/api/venues/{id}/spaces/{id}` to correct `/api/spaces/{id}` pattern.\n- **Enhanced Venue Management**: Implemented separate \"Add Space\" functionality with proper TypeScript error handling and blue outlined styling.\n\n### System Stability\n- All booking creation workflows now properly validated and working\n- Tenant isolation maintained throughout all booking operations\n- Space management operations correctly routing through dedicated endpoints","size_bytes":6162},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  safelist: [\n    // Status color classes that need to be preserved\n    'bg-violet-50', 'text-violet-700', 'border-violet-200',\n    'bg-emerald-50', 'text-emerald-700', 'border-emerald-200',\n    'bg-amber-50', 'text-amber-700', 'border-amber-200',\n    'bg-blue-50', 'text-blue-700', 'border-blue-200',\n    'bg-gray-50', 'text-gray-700', 'border-gray-200',\n    'bg-green-50', 'text-green-700', 'border-green-200',\n    'bg-red-50', 'text-red-700', 'border-red-200',\n  ],\n  theme: {\n    screens: {\n      'xs': '475px',\n      'sm': '640px',\n      'md': '768px',\n      'lg': '1024px',\n      'xl': '1280px',\n      '2xl': '1536px',\n    },\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3387},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import 'dotenv/config';\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { emailMonitorService } from \"./services/email-monitor\";\nimport { storage } from \"./storage\";\nimport { \n  setupSecurity, \n  validateInput, \n  setupRequestLimits, \n  setupErrorHandling, \n  setupLogging \n} from \"./middleware/security\";\n\nconst app = express();\n\n// Trust proxy (needed for proper rate limiting behind reverse proxy)\napp.set('trust proxy', true);\n\n// Security setup (must be first)\nsetupSecurity(app);\nsetupRequestLimits(app);\nsetupLogging(app);\n\n// Body parsing middleware\napp.use(express.json({ limit: process.env.MAX_REQUEST_SIZE || '10mb' }));\napp.use(express.urlencoded({ extended: false, limit: process.env.MAX_REQUEST_SIZE || '10mb' }));\n\n// Input validation middleware\napp.use(validateInput);\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Setup error handling\n  setupErrorHandling(app);\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, async () => {\n    log(`serving on port ${port}`);\n    \n    // Auto-start email monitoring if configured\n    try {\n      const emailSettings = await storage.getSetting('email');\n      if (emailSettings && emailSettings.value) {\n        const config = emailSettings.value;\n        if (config.email && config.appPassword && !emailMonitorService.isMonitoring()) {\n          await emailMonitorService.startMonitoring({\n            email: config.email,\n            appPassword: config.appPassword\n          });\n          log(`📧 Email monitoring auto-started for ${config.email}`);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to auto-start email monitoring:', error);\n    }\n  });\n})();\n","size_bytes":3157},"server/routes.ts":{"content":"import express, { type Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport { storage } from \"./storage\";\nimport { EmailService } from \"./services/email\";\nimport { gmailService } from \"./services/gmail\";\nimport { emailMonitorService } from \"./services/email-monitor\";\nimport { NotificationService } from \"./services/notification\";\nimport { requireSuperAdmin, authenticateSuperAdmin, hashPassword, comparePassword, generateToken, verifyToken, type AuthenticatedRequest } from \"./middleware/auth\";\nimport { stripeService } from \"./services/stripe\";\nimport { notificationEmailService } from \"./services/notification-email\";\nimport { sendCustomerCommunicationEmail, sendUserVerificationEmail } from \"./services/super-admin-email\";\nimport { resolveTenant, requireTenant, checkTrialStatus, filterByTenant, type TenantRequest } from \"./middleware/tenant\";\nimport { addFeatureAccess, requireFeature, getFeaturesForTenant, requireWithinLimits, type FeatureRequest } from \"./middleware/feature-access\";\nimport { \n  insertBookingSchema, \n  insertCustomerSchema, \n  insertCompanySchema,\n  insertContractSchema,\n  insertProposalSchema, \n  insertPaymentSchema,\n  insertTaskSchema,\n  insertAiInsightSchema,\n  insertTaxSettingSchema,\n  insertSettingsSchema,\n  insertCommunicationSchema,\n  insertSetupStyleSchema,\n  insertCampaignSourceSchema,\n  insertTagSchema,\n  insertLeadSchema,\n  insertLeadActivitySchema,\n  insertLeadTaskSchema,\n  insertTourSchema\n} from \"@shared/schema\";\nimport { \n  generateAIInsights,\n  generateSmartScheduling,\n  generateEmailReply,\n  scoreLeadPriority,\n  generateProposal,\n  parseVoiceToBooking\n} from \"./services/gemini\";\nimport { getStatusColor, type EventStatus } from \"@shared/status-utils\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Apply tenant resolution middleware to all routes\n  app.use(resolveTenant);\n\n  // Helper function to get tenant ID from authenticated user\n  const getTenantIdFromAuth = (req: any): string | null => {\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      console.log(\"No auth header or invalid format\");\n      return null;\n    }\n    \n    const token = authHeader.substring(7);\n    const decoded = verifyToken(token);\n    if (!decoded) {\n      console.log(\"Token verification failed\");\n      return null;\n    }\n    \n    // Get user to find their tenant ID\n    const users = Array.from(storage.users.values());\n    const user = users.find(u => u.id === decoded.id);\n    console.log(`User found: ${user?.id}, tenant: ${user?.tenantId}`);\n    return user?.tenantId || null;\n  };\n  \n  // ============================================================================\n  // TENANT-SPECIFIC ROUTES (with subdomain context)\n  // ============================================================================\n  \n  // Tenant Dashboard - requires valid tenant and checks trial status\n  app.get(\"/api/tenant/dashboard\", requireTenant, checkTrialStatus, async (req: TenantRequest, res) => {\n    try {\n      const tenantId = req.tenant!.id;\n      \n      // Get tenant-specific metrics\n      const bookings = Array.from(storage.bookings.values()).filter(b => b.tenantId === tenantId);\n      const customers = Array.from(storage.customers.values()).filter(c => c.tenantId === tenantId);\n      const venues = Array.from(storage.venues.values()).filter(v => v.tenantId === tenantId);\n      \n      const metrics = {\n        totalBookings: bookings.length,\n        totalCustomers: customers.length,\n        totalVenues: venues.length,\n        revenue: bookings.reduce((sum, b) => sum + (b.totalAmount || 0), 0),\n        recentBookings: bookings.slice(-5),\n        tenant: req.tenant\n      };\n      \n      res.json(metrics);\n    } catch (error: any) {\n      console.error(\"Error fetching tenant dashboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard data\" });\n    }\n  });\n  \n  // Tenant-specific bookings\n  app.get(\"/api/tenant/bookings\", requireTenant, checkTrialStatus, filterByTenant, async (req: TenantRequest, res) => {\n    try {\n      const tenantId = req.tenant!.id;\n      const bookings = Array.from(storage.bookings.values()).filter(b => b.tenantId === tenantId);\n      res.json(bookings);\n    } catch (error: any) {\n      console.error(\"Error fetching tenant bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n  \n  // Tenant-specific customers\n  app.get(\"/api/tenant/customers\", requireTenant, checkTrialStatus, filterByTenant, async (req: TenantRequest, res) => {\n    try {\n      const tenantId = req.tenant!.id;\n      const customers = Array.from(storage.customers.values()).filter(c => c.tenantId === tenantId);\n      res.json(customers);\n    } catch (error: any) {\n      console.error(\"Error fetching tenant customers:\", error);\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  // ============================================================================\n  // TENANT USER MANAGEMENT ROUTES\n  // ============================================================================\n  \n  // Get all users for a tenant (tenant admin only)\n  app.get(\"/api/tenant/users\", async (req, res) => {\n    try {\n      // Check if user is tenant admin\n      const authHeader = req.headers.authorization;\n      if (!authHeader) return res.status(401).json({ message: \"Authorization required\" });\n      \n      const token = authHeader.substring(7);\n      const decoded = verifyToken(token);\n      if (!decoded || decoded.role !== 'tenant_admin') {\n        return res.status(403).json({ message: \"Tenant admin access required\" });\n      }\n\n      // Get tenant ID from user\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Tenant not found\" });\n      }\n      const users = Array.from(storage.users.values())\n        .filter(u => u.tenantId === tenantId)\n        .map(u => ({ \n          id: u.id, \n          name: u.name, \n          email: u.email, \n          role: u.role, \n          permissions: u.permissions,\n          isActive: u.isActive, \n          lastLoginAt: u.lastLoginAt,\n          createdAt: u.createdAt \n        }));\n      res.json(users);\n    } catch (error: any) {\n      console.error(\"Error fetching tenant users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Create a new user for a tenant (tenant admin only)\n  app.post(\"/api/tenant/users\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // Check if user is tenant admin\n      const authHeader = req.headers.authorization;\n      if (!authHeader) return res.status(401).json({ message: \"Authorization required\" });\n      \n      const token = authHeader.substring(7);\n      const decoded = verifyToken(token);\n      if (!decoded || decoded.role !== 'tenant_admin') {\n        return res.status(403).json({ message: \"Tenant admin access required\" });\n      }\n\n      const { name, email, password, role, permissions } = req.body;\n      \n      if (!name || !email || !password) {\n        return res.status(400).json({ message: \"Name, email, and password are required\" });\n      }\n\n      // Check if email is already used\n      const existingUser = Array.from(storage.users.values()).find(u => u.email === email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already in use\" });\n      }\n\n      // Validate role - only allow tenant_user or tenant_admin for tenant-created users\n      const allowedRoles = ['tenant_user', 'tenant_admin'];\n      if (role && !allowedRoles.includes(role)) {\n        return res.status(400).json({ message: \"Invalid role specified\" });\n      }\n      const hashedPassword = await hashPassword(password);\n      \n      const user = await storage.createUser({\n        username: email,\n        password: hashedPassword,\n        name,\n        email,\n        tenantId,\n        role: role || 'tenant_user',\n        permissions: permissions || [],\n        isActive: true\n      });\n\n      // Return user without password\n      const { password: _, ...userResponse } = user;\n      res.json(userResponse);\n    } catch (error: any) {\n      console.error(\"Error creating tenant user:\", error);\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  // Update a user (tenant admin only)\n  app.put(\"/api/tenant/users/:userId\", async (req, res) => {\n    try {\n      // Check if user is tenant admin\n      const authHeader = req.headers.authorization;\n      if (!authHeader) return res.status(401).json({ message: \"Authorization required\" });\n      \n      const token = authHeader.substring(7);\n      const decoded = verifyToken(token);\n      if (!decoded || decoded.role !== 'tenant_admin') {\n        return res.status(403).json({ message: \"Tenant admin access required\" });\n      }\n\n      const { userId } = req.params;\n      const { name, email, role, permissions, isActive } = req.body;\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Tenant not found\" });\n      }\n\n      // Verify user belongs to this tenant\n      const user = await storage.getUser(userId);\n      if (!user || user.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Validate role if provided\n      const allowedRoles = ['tenant_user', 'tenant_admin'];\n      if (role && !allowedRoles.includes(role)) {\n        return res.status(400).json({ message: \"Invalid role specified\" });\n      }\n\n      // Prevent admin from deactivating themselves\n      if (decoded.id === userId && isActive === false) {\n        return res.status(400).json({ message: \"Cannot deactivate your own account\" });\n      }\n\n      const updatedUser = await storage.updateUser(userId, {\n        ...(name && { name }),\n        ...(email && { email }),\n        ...(role && { role }),\n        ...(permissions && { permissions }),\n        ...(typeof isActive === 'boolean' && { isActive })\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Return user without password\n      const { password, ...userResponse } = updatedUser;\n      res.json(userResponse);\n    } catch (error: any) {\n      console.error(\"Error updating tenant user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Delete a user (tenant admin only)\n  app.delete(\"/api/tenant/users/:userId\", async (req, res) => {\n    try {\n      // Check if user is tenant admin\n      const authHeader = req.headers.authorization;\n      if (!authHeader) return res.status(401).json({ message: \"Authorization required\" });\n      \n      const token = authHeader.substring(7);\n      const decoded = verifyToken(token);\n      if (!decoded || decoded.role !== 'tenant_admin') {\n        return res.status(403).json({ message: \"Tenant admin access required\" });\n      }\n\n      const { userId } = req.params;\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Tenant not found\" });\n      }\n\n      // Verify user belongs to this tenant\n      const user = await storage.getUser(userId);\n      if (!user || user.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Prevent admin from deleting themselves\n      if (decoded.id === userId) {\n        return res.status(400).json({ message: \"Cannot delete your own account\" });\n      }\n\n      // For now, just deactivate the user instead of hard delete\n      const updatedUser = await storage.updateUser(userId, { isActive: false });\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ message: \"User deactivated successfully\" });\n    } catch (error: any) {\n      console.error(\"Error deleting tenant user:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n  \n  // ============================================================================\n  // LEGACY ROUTES (maintained for compatibility)\n  // ============================================================================\n  \n  // Venues - with tenant filtering\n  app.get(\"/api/venues\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const allVenues = await storage.getVenues();\n      const venues = allVenues.filter(v => v.tenantId === tenantId);\n      res.json(venues);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch venues\" });\n    }\n  });\n\n  app.get(\"/api/venues/:id\", async (req, res) => {\n    try {\n      const venue = await storage.getVenue(req.params.id);\n      if (!venue) {\n        return res.status(404).json({ message: \"Venue not found\" });\n      }\n      res.json(venue);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch venue\" });\n    }\n  });\n\n  app.post(\"/api/venues\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // Add tenant ID to the venue data\n      const venueData = { ...req.body, tenantId };\n      const venue = await storage.createVenue(venueData);\n      res.status(201).json(venue);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create venue\" });\n    }\n  });\n\n  // Spaces\n  app.get(\"/api/spaces\", async (req, res) => {\n    try {\n      const spaces = await storage.getSpaces();\n      res.json(spaces);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch spaces\" });\n    }\n  });\n\n  app.get(\"/api/venues/:venueId/spaces\", async (req, res) => {\n    try {\n      const spaces = await storage.getSpacesByVenue(req.params.venueId);\n      res.json(spaces);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch venue spaces\" });\n    }\n  });\n\n  // Setup Styles\n  app.get(\"/api/setup-styles\", async (req, res) => {\n    try {\n      const setupStyles = await storage.getSetupStyles();\n      res.json(setupStyles);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch setup styles\" });\n    }\n  });\n\n  app.get(\"/api/setup-styles/:id\", async (req, res) => {\n    try {\n      const setupStyle = await storage.getSetupStyle(req.params.id);\n      if (!setupStyle) {\n        return res.status(404).json({ message: \"Setup style not found\" });\n      }\n      res.json(setupStyle);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch setup style\" });\n    }\n  });\n\n  app.post(\"/api/setup-styles\", async (req, res) => {\n    try {\n      const result = insertSetupStyleSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ message: \"Invalid setup style data\", errors: result.error.errors });\n      }\n      const setupStyle = await storage.createSetupStyle(result.data);\n      res.status(201).json(setupStyle);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create setup style\" });\n    }\n  });\n\n  app.patch(\"/api/setup-styles/:id\", async (req, res) => {\n    try {\n      const setupStyle = await storage.updateSetupStyle(req.params.id, req.body);\n      if (!setupStyle) {\n        return res.status(404).json({ message: \"Setup style not found\" });\n      }\n      res.json(setupStyle);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update setup style\" });\n    }\n  });\n\n  app.delete(\"/api/setup-styles/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteSetupStyle(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Setup style not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete setup style\" });\n    }\n  });\n\n  app.post(\"/api/spaces\", async (req, res) => {\n    try {\n      const space = await storage.createSpace(req.body);\n      res.status(201).json(space);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create space\" });\n    }\n  });\n\n  // Note: Space update route is handled later in the file with better error logging\n\n  // Enhanced venues API that includes spaces - with tenant filtering\n  app.get(\"/api/venues-with-spaces\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const allVenues = await storage.getVenues();\n      const venues = allVenues.filter(v => v.tenantId === tenantId);\n      const venuesWithSpaces = await Promise.all(\n        venues.map(async (venue) => {\n          const spaces = await storage.getSpacesByVenue(venue.id);\n          return { ...venue, spaces };\n        })\n      );\n      res.json(venuesWithSpaces);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch venues with spaces\" });\n    }\n  });\n\n  // Packages - with tenant filtering\n  app.get(\"/api/packages\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const allPackages = await storage.getPackages();\n      const packages = allPackages.filter(p => p.tenantId === tenantId);\n      res.json(packages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch packages\" });\n    }\n  });\n\n  app.post(\"/api/packages\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // Add tenant ID to the package data\n      const packageDataWithTenant = { ...req.body, tenantId };\n      const packageData = await storage.createPackage(packageDataWithTenant);\n      res.status(201).json(packageData);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create package\" });\n    }\n  });\n\n  // Services - with tenant filtering\n  app.get(\"/api/services\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const allServices = await storage.getServices();\n      const services = allServices.filter(s => s.tenantId === tenantId);\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch services\" });\n    }\n  });\n\n  app.post(\"/api/services\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // Add tenant ID to the service data\n      const serviceDataWithTenant = { ...req.body, tenantId };\n      const service = await storage.createService(serviceDataWithTenant);\n      res.status(201).json(service);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create service\" });\n    }\n  });\n\n  // Customers - with tenant filtering\n  app.get(\"/api/customers\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const allCustomers = await storage.getCustomers();\n      const customers = allCustomers.filter(c => c.tenantId === tenantId);\n      res.json(customers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  // Get customer analytics\n  app.get(\"/api/customers/analytics\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const allCustomers = await storage.getCustomers();\n      const allBookings = await storage.getBookings();\n      const allPayments = await storage.getPayments();\n      \n      // CRITICAL: Filter by tenant to prevent data leaks\n      const customers = allCustomers.filter(c => c.tenantId === tenantId);\n      const bookings = allBookings.filter(b => b.tenantId === tenantId);\n      const payments = allPayments.filter(p => {\n        // Payment is tenant-specific if its booking belongs to this tenant\n        const booking = bookings.find(b => b.id === p.bookingId);\n        return !!booking;\n      });\n      \n      const customerAnalytics = customers.map(customer => {\n        // Find all bookings for this customer\n        const customerBookings = bookings.filter(booking => booking.customerId === customer.id);\n        \n        // Find all payments for this customer's bookings\n        const customerPayments = payments.filter(payment => \n          customerBookings.some(booking => booking.id === payment.bookingId)\n        );\n        \n        // Calculate total revenue from bookings (using totalPrice from bookings)\n        const totalRevenue = customerBookings.reduce((sum, booking) => sum + (booking.totalPrice || 0), 0);\n        \n        // Calculate event count\n        const eventCount = customerBookings.length;\n        \n        // Calculate average event value\n        const averageEventValue = eventCount > 0 ? totalRevenue / eventCount : 0;\n        \n        // Get most recent booking\n        const recentBooking = customerBookings.sort((a, b) => \n          new Date(b.eventDate).getTime() - new Date(a.eventDate).getTime()\n        )[0];\n        \n        // Calculate lifetime value category\n        let lifetimeValueCategory = \"Bronze\";\n        if (totalRevenue >= 50000) lifetimeValueCategory = \"Platinum\";\n        else if (totalRevenue >= 25000) lifetimeValueCategory = \"Gold\";\n        else if (totalRevenue >= 10000) lifetimeValueCategory = \"Silver\";\n        \n        // Calculate booking statuses\n        const confirmedBookings = customerBookings.filter(b => b.status === \"confirmed\").length;\n        const pendingBookings = customerBookings.filter(b => b.status === \"inquiry\" || b.status === \"proposal\").length;\n        const cancelledBookings = customerBookings.filter(b => b.status === \"cancelled\").length;\n        \n        return {\n          ...customer,\n          analytics: {\n            totalRevenue,\n            eventCount,\n            averageEventValue,\n            lastEventDate: recentBooking?.eventDate || null,\n            lastEventName: recentBooking?.eventName || null,\n            lifetimeValueCategory,\n            totalPaid: customerPayments.filter(p => p.status === \"paid\").reduce((sum, p) => sum + p.amount, 0),\n            totalPending: customerPayments.filter(p => p.status === \"pending\").reduce((sum, p) => sum + p.amount, 0),\n            confirmedBookings,\n            pendingBookings,\n            cancelledBookings,\n            customerSince: customer.createdAt,\n          }\n        };\n      });\n      \n      // Sort by total revenue descending\n      customerAnalytics.sort((a, b) => b.analytics.totalRevenue - a.analytics.totalRevenue);\n      \n      res.json(customerAnalytics);\n    } catch (error) {\n      console.error(\"Error fetching customer analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch customer analytics\" });\n    }\n  });\n\n  app.post(\"/api/customers\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Unauthorized - no tenant access\" });\n      }\n      \n      const validatedData = insertCustomerSchema.parse({\n        ...req.body,\n        tenantId\n      });\n      const customer = await storage.createCustomer(validatedData);\n      res.json(customer);\n    } catch (error: any) {\n      console.error(\"Error creating customer:\", error);\n      res.status(400).json({ \n        message: error.message || \"Invalid customer data\",\n        details: error.toString()\n      });\n    }\n  });\n\n  app.patch(\"/api/customers/:id\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // First verify the customer belongs to this tenant\n      const existingCustomer = await storage.getCustomer(req.params.id);\n      if (!existingCustomer || existingCustomer.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n      \n      const customer = await storage.updateCustomer(req.params.id, req.body);\n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n      res.json(customer);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update customer\" });\n    }\n  });\n\n  // Companies\n  app.get(\"/api/companies\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const allCompanies = await storage.getCompanies();\n      const companies = allCompanies.filter(c => c.tenantId === tenantId);\n      res.json(companies);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch companies\" });\n    }\n  });\n\n  app.get(\"/api/companies/:id\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const company = await storage.getCompany(req.params.id);\n      if (!company || company.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n      res.json(company);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch company\" });\n    }\n  });\n\n  app.post(\"/api/companies\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Unauthorized - no tenant access\" });\n      }\n      \n      const validatedData = insertCompanySchema.parse({\n        ...req.body,\n        tenantId\n      });\n      const company = await storage.createCompany(validatedData);\n      res.json(company);\n    } catch (error) {\n      console.error(\"Error creating company:\", error);\n      res.status(400).json({ message: \"Invalid company data\" });\n    }\n  });\n\n  app.patch(\"/api/companies/:id\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // First verify the company belongs to this tenant\n      const existingCompany = await storage.getCompany(req.params.id);\n      if (!existingCompany || existingCompany.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n      \n      const company = await storage.updateCompany(req.params.id, req.body);\n      if (!company) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n      res.json(company);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update company\" });\n    }\n  });\n\n  app.delete(\"/api/companies/:id\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // First verify the company belongs to this tenant\n      const existingCompany = await storage.getCompany(req.params.id);\n      if (!existingCompany || existingCompany.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n      \n      const deleted = await storage.deleteCompany(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n      res.json({ message: \"Company deleted successfully\" });\n    } catch (error) {\n      console.error('Company delete error:', error);\n      res.status(500).json({ message: \"Failed to delete company\" });\n    }\n  });\n\n  // Get customers by company\n  app.get(\"/api/companies/:id/customers\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // First verify the company belongs to this tenant\n      const company = await storage.getCompany(req.params.id);\n      if (!company || company.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n      \n      const allCustomers = await storage.getCustomersByCompany(req.params.id);\n      const customers = allCustomers.filter(c => c.tenantId === tenantId);\n      res.json(customers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch company customers\" });\n    }\n  });\n\n  // Contracts\n  app.get(\"/api/contracts\", async (req, res) => {\n    try {\n      const contracts = await storage.getContracts();\n      res.json(contracts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch contracts\" });\n    }\n  });\n\n  app.post(\"/api/contracts\", async (req, res) => {\n    try {\n      const validatedData = insertContractSchema.parse(req.body);\n      const contract = await storage.createContract(validatedData);\n      res.json(contract);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid contract data\" });\n    }\n  });\n\n  app.get(\"/api/contracts/:id\", async (req, res) => {\n    try {\n      const contract = await storage.getContract(req.params.id);\n      if (!contract) {\n        return res.status(404).json({ message: \"Contract not found\" });\n      }\n      res.json(contract);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch contract\" });\n    }\n  });\n\n  app.get(\"/api/contracts/:id/bookings\", async (req, res) => {\n    try {\n      const bookings = await storage.getBookingsByContract(req.params.id);\n      res.json(bookings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch contract bookings\" });\n    }\n  });\n\n  app.put(\"/api/contracts/:id\", async (req, res) => {\n    try {\n      const contract = await storage.updateContract(req.params.id, req.body);\n      if (!contract) {\n        return res.status(404).json({ message: \"Contract not found\" });\n      }\n      res.json(contract);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update contract\" });\n    }\n  });\n\n  // Bookings - with tenant filtering\n  app.get(\"/api/bookings\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const allBookings = await storage.getBookings();\n      const bookings = allBookings.filter(b => b.tenantId === tenantId);\n      const contracts = await storage.getContracts();\n      \n      // Group bookings by contract and add contract info\n      const contractMap = new Map(contracts.map(c => [c.id, c]));\n      const result = [];\n      \n      // First, add all standalone bookings (no contract)\n      const standaloneBookings = bookings.filter(b => !b.contractId);\n      result.push(...standaloneBookings);\n      \n      // Then, add contracts with their bookings\n      const contractBookings = bookings.filter(b => b.contractId);\n      const processedContracts = new Set();\n      \n      for (const booking of contractBookings) {\n        if (!processedContracts.has(booking.contractId)) {\n          const contract = contractMap.get(booking.contractId!);\n          const contractEvents = contractBookings.filter(b => b.contractId === booking.contractId);\n          \n          result.push({\n            ...booking,\n            isContract: true,\n            contractInfo: contract,\n            contractEvents: contractEvents,\n            eventCount: contractEvents.length\n          });\n          \n          processedContracts.add(booking.contractId!);\n        }\n      }\n      \n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.post(\"/api/bookings\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        console.log(\"Booking creation failed: No tenant ID found\");\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      console.log('Creating booking with data:', req.body);\n      console.log('Tenant ID:', tenantId);\n      \n      // Convert date strings to Date objects if they're strings\n      const bookingData = {\n        ...req.body,\n        eventDate: typeof req.body.eventDate === 'string' \n          ? new Date(req.body.eventDate) \n          : req.body.eventDate,\n        endDate: req.body.endDate && typeof req.body.endDate === 'string'\n          ? new Date(req.body.endDate)\n          : req.body.endDate,\n        guestCount: typeof req.body.guestCount === 'string' \n          ? parseInt(req.body.guestCount, 10)\n          : req.body.guestCount,\n        totalAmount: req.body.totalAmount && typeof req.body.totalAmount === 'string'\n          ? req.body.totalAmount\n          : req.body.totalAmount,\n        depositAmount: req.body.depositAmount && typeof req.body.depositAmount === 'string'\n          ? req.body.depositAmount\n          : req.body.depositAmount,\n        // Handle proposal dates\n        proposalSentAt: req.body.proposalSentAt && typeof req.body.proposalSentAt === 'string'\n          ? new Date(req.body.proposalSentAt)\n          : req.body.proposalSentAt,\n        proposalViewedAt: req.body.proposalViewedAt && typeof req.body.proposalViewedAt === 'string'\n          ? new Date(req.body.proposalViewedAt)\n          : req.body.proposalViewedAt,\n        proposalRespondedAt: req.body.proposalRespondedAt && typeof req.body.proposalRespondedAt === 'string'\n          ? new Date(req.body.proposalRespondedAt)\n          : req.body.proposalRespondedAt,\n      };\n      \n      // Add tenantId to booking data\n      bookingData.tenantId = tenantId;\n      \n      // Validate required fields\n      if (!bookingData.eventName || !bookingData.eventType || !bookingData.eventDate || \n          !bookingData.startTime || !bookingData.endTime || !bookingData.guestCount) {\n        return res.status(400).json({ \n          message: \"Missing required fields\", \n          required: [\"eventName\", \"eventType\", \"eventDate\", \"startTime\", \"endTime\", \"guestCount\"]\n        });\n      }\n      \n      const validatedData = insertBookingSchema.parse(bookingData);\n      \n      // Check for time conflicts with existing bookings\n      const existingBookings = await storage.getBookings();\n      const eventDate = validatedData.eventDate;\n      const startTime = validatedData.startTime;\n      const endTime = validatedData.endTime;\n      const spaceId = validatedData.spaceId;\n      \n      const conflict = existingBookings.find(existing => {\n        // Skip cancelled bookings\n        if (existing.status === 'cancelled') return false;\n        \n        // Skip if this is the same proposal booking (check by proposalId if provided)\n        if (validatedData.proposalId && existing.proposalId === validatedData.proposalId) {\n          console.log('Skipping conflict check for same proposal:', validatedData.proposalId);\n          return false;\n        }\n        \n        // Check if same space and same date (more specific than venue)\n        if (existing.spaceId === spaceId && \n            existing.eventDate.toDateString() === eventDate.toDateString()) {\n          \n          // Convert times to minutes for easier comparison\n          const parseTime = (timeStr: string) => {\n            const [hours, minutes] = timeStr.split(':').map(Number);\n            return hours * 60 + minutes;\n          };\n          \n          const newStart = parseTime(startTime);\n          const newEnd = parseTime(endTime);\n          const existingStart = parseTime(existing.startTime);\n          const existingEnd = parseTime(existing.endTime);\n          \n          // Check for overlap: new booking starts before existing ends AND new booking ends after existing starts\n          return (newStart < existingEnd && newEnd > existingStart);\n        }\n        return false;\n      });\n      \n      if (conflict) {\n        // Only block if the conflicting booking has confirmed status (paid bookings)\n        const blockingStatuses = ['confirmed_deposit_paid', 'confirmed_fully_paid'];\n        const warningStatuses = ['inquiry', 'pending', 'tentative'];\n        \n        if (blockingStatuses.includes(conflict.status)) {\n          // Get customer info for the conflicting booking\n          const customers = await storage.getCustomers();\n          const conflictCustomer = customers.find(c => c.id === conflict.customerId);\n          \n          return res.status(409).json({ \n            message: \"Time slot conflict\", \n            conflictType: \"blocking\",\n            conflictingBooking: {\n              id: conflict.id,\n              eventName: conflict.eventName,\n              customerName: conflictCustomer?.name || 'Unknown Customer',\n              startTime: conflict.startTime,\n              endTime: conflict.endTime,\n              status: conflict.status,\n              eventDate: conflict.eventDate\n            }\n          });\n        } else if (warningStatuses.includes(conflict.status)) {\n          // Log warning but allow booking to proceed\n          console.log(`Warning: Time slot overlap with ${conflict.status} booking \"${conflict.eventName}\" but allowing creation`);\n        }\n      }\n      \n      const booking = await storage.createBooking(validatedData);\n      \n      // Send booking confirmation notification if enabled\n      // Skip booking confirmation emails for bookings created from proposals (tentative bookings)\n      try {\n        const settings = await storage.getSettings();\n        const notificationPrefs = {\n          emailNotifications: settings.notifications?.emailNotifications ?? true,\n          pushNotifications: settings.notifications?.pushNotifications ?? false,\n          bookingConfirmations: settings.notifications?.bookingConfirmations ?? true,\n          paymentReminders: settings.notifications?.paymentReminders ?? true,\n          maintenanceAlerts: settings.notifications?.maintenanceAlerts ?? true\n        };\n\n        // Only send booking confirmation for manually created bookings, not proposal-generated ones\n        if (notificationPrefs.emailNotifications && notificationPrefs.bookingConfirmations && booking.customerId && !booking.proposalId) {\n          const customer = await storage.getCustomer(booking.customerId);\n          if (customer && customer.email) {\n            const notificationService = new NotificationService(gmailService, notificationPrefs);\n            await notificationService.sendBookingConfirmation(booking, customer);\n            console.log(`Booking confirmation sent to ${customer.email}`);\n          }\n        } else if (booking.proposalId) {\n          console.log(`Skipping booking confirmation email for proposal-generated booking ${booking.id}`);\n        }\n      } catch (notificationError) {\n        console.error('Failed to send booking confirmation:', notificationError);\n        // Don't fail the booking creation if notification fails\n      }\n      \n      res.json(booking);\n    } catch (error: any) {\n      console.error('Booking creation error:', error);\n      res.status(400).json({ \n        message: error?.message || \"Invalid booking data\",\n        details: error?.issues || error?.stack \n      });\n    }\n  });\n\n  app.patch(\"/api/bookings/:id\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // First verify the booking belongs to this tenant\n      const existingBooking = await storage.getBooking(req.params.id);\n      if (!existingBooking || existingBooking.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      \n      const updateData = { ...req.body };\n\n      // Auto-complete booking if status is being set to completed and event date has passed\n      if (updateData.status === \"completed\" && !updateData.completedAt) {\n        updateData.completedAt = new Date();\n      }\n\n      // Handle cancellation data\n      if (updateData.status === \"cancelled\") {\n        if (!updateData.cancelledAt) {\n          updateData.cancelledAt = new Date();\n        }\n        // Ensure cancellation reason is provided\n        if (!updateData.cancellationReason) {\n          return res.status(400).json({ message: \"Cancellation reason is required\" });\n        }\n      }\n\n      const booking = await storage.updateBooking(req.params.id, updateData);\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      res.json(booking);\n    } catch (error) {\n      console.error('Booking update error:', error);\n      res.status(500).json({ message: \"Failed to update booking\" });\n    }\n  });\n\n  app.delete(\"/api/bookings/:id\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // First verify the booking belongs to this tenant\n      const existingBooking = await storage.getBooking(req.params.id);\n      if (!existingBooking || existingBooking.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      \n      const deleted = await storage.deleteBooking(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      res.json({ message: \"Booking deleted successfully\" });\n    } catch (error) {\n      console.error('Booking delete error:', error);\n      res.status(500).json({ message: \"Failed to delete booking\" });\n    }\n  });\n\n  // Cancel booking with reason tracking\n  app.post(\"/api/bookings/:id/cancel\", async (req, res) => {\n    try {\n      const { cancellationReason, cancellationNote } = req.body;\n      \n      if (!cancellationReason) {\n        return res.status(400).json({ message: \"Cancellation reason is required\" });\n      }\n\n      const updateData = {\n        status: \"cancelled\",\n        cancellationReason,\n        cancellationNote,\n        cancelledAt: new Date(),\n        // TODO: Add cancelled_by field when user management is implemented\n        // cancelledBy: req.user?.id\n      };\n\n      const booking = await storage.updateBooking(req.params.id, updateData);\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n\n      // Send cancellation notification if enabled\n      try {\n        const settings = await storage.getSettings();\n        const notificationPrefs = {\n          emailNotifications: settings.notifications?.emailNotifications ?? true,\n          bookingConfirmations: settings.notifications?.bookingConfirmations ?? true,\n        };\n\n        if (notificationPrefs.emailNotifications && booking.customerId) {\n          const customer = await storage.getCustomer(booking.customerId);\n          if (customer && customer.email) {\n            const notificationService = new NotificationService(gmailService, notificationPrefs);\n            await notificationService.sendCancellationNotification(booking, customer, cancellationReason);\n            console.log(`Cancellation notification sent to ${customer.email}`);\n          }\n        }\n      } catch (notificationError) {\n        console.error('Failed to send cancellation notification:', notificationError);\n        // Don't fail the cancellation if notification fails\n      }\n\n      res.json(booking);\n    } catch (error) {\n      console.error('Booking cancellation error:', error);\n      res.status(500).json({ message: \"Failed to cancel booking\" });\n    }\n  });\n\n  // Create multiple bookings under a contract\n  app.post(\"/api/bookings/contract\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const { contractData, bookingsData } = req.body;\n      \n      console.log('Creating contract with data:', contractData);\n      console.log('Creating bookings with data:', bookingsData);\n      \n      // Check for conflicts in any of the bookings first\n      const existingBookings = await storage.getBookings();\n      \n      for (const bookingData of bookingsData) {\n        const eventDate = new Date(bookingData.eventDate);\n        const startTime = bookingData.startTime;\n        const endTime = bookingData.endTime;\n        const spaceId = bookingData.spaceId;\n        \n        const conflict = existingBookings.find(existing => {\n          if (existing.status === 'cancelled') return false;\n          if (existing.spaceId !== spaceId) return false;\n          if (existing.eventDate.toDateString() !== eventDate.toDateString()) return false;\n\n          const parseTime = (timeStr: string) => {\n            const [hours, minutes] = timeStr.split(':').map(Number);\n            return hours * 60 + minutes;\n          };\n          \n          const newStart = parseTime(startTime);\n          const newEnd = parseTime(endTime);\n          const existingStart = parseTime(existing.startTime);\n          const existingEnd = parseTime(existing.endTime);\n          \n          return (newStart < existingEnd && newEnd > existingStart);\n        });\n        \n        if (conflict) {\n          const customers = await storage.getCustomers();\n          const conflictCustomer = customers.find(c => c.id === conflict.customerId);\n          \n          return res.status(409).json({ \n            message: \"Time slot conflict in multi-date booking\", \n            conflictingBooking: {\n              id: conflict.id,\n              eventName: conflict.eventName,\n              customerName: conflictCustomer?.name || 'Unknown Customer',\n              startTime: conflict.startTime,\n              endTime: conflict.endTime,\n              status: conflict.status,\n              eventDate: conflict.eventDate\n            }\n          });\n        }\n      }\n      \n      // No conflicts found, proceed with creation\n      const validatedContract = insertContractSchema.parse({ ...contractData, tenantId });\n      const contract = await storage.createContract(validatedContract);\n      \n      // Create all bookings under this contract - schema now handles date conversion\n      const validatedBookings = bookingsData.map((booking: any) => \n        insertBookingSchema.parse({ ...booking, contractId: contract.id, tenantId })\n      );\n      \n      const bookings = await storage.createMultipleBookings(validatedBookings, contract.id);\n      \n      // Update contract total amount\n      const totalAmount = bookings.reduce((sum, booking) => {\n        return sum + (booking.totalAmount ? parseFloat(booking.totalAmount) : 0);\n      }, 0);\n      \n      await storage.updateContract(contract.id, { totalAmount: totalAmount.toString() });\n\n      // CRITICAL FIX: If a proposal ID was passed in contractData, link it to the contract\n      if (contractData.proposalId) {\n        console.log('Linking proposal to contract:', contractData.proposalId, '-> contract:', contract.id);\n        try {\n          // Update the proposal to reference the contract's first booking\n          const firstBooking = bookings[0];\n          if (firstBooking) {\n            await storage.updateProposal(contractData.proposalId, {\n              bookingId: firstBooking.id,\n              status: 'sent',\n              sentAt: new Date()\n            });\n            console.log('✅ Proposal linked to booking:', contractData.proposalId, '-> booking:', firstBooking.id);\n            \n            // Also update all bookings to reference the proposal\n            for (const booking of bookings) {\n              await storage.updateBooking(booking.id, {\n                proposalId: contractData.proposalId,\n                proposalStatus: 'sent',\n                proposalSentAt: new Date()\n              });\n            }\n            console.log('✅ All contract bookings linked to proposal:', contractData.proposalId);\n          }\n        } catch (linkError) {\n          console.error('Failed to link proposal to contract:', linkError);\n          // Don't fail the contract creation if proposal linking fails\n        }\n      }\n      \n      res.json({ contract, bookings });\n    } catch (error) {\n      console.error('Contract booking creation error:', error);\n      res.status(400).json({ message: \"Invalid contract or booking data\" });\n    }\n  });\n\n  // Venues\n  app.patch(\"/api/venues/:id\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // First verify the venue belongs to this tenant\n      const existingVenue = await storage.getVenue(req.params.id);\n      if (!existingVenue || existingVenue.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"Venue not found\" });\n      }\n      \n      const venue = await storage.updateVenue(req.params.id, req.body);\n      if (!venue) {\n        return res.status(404).json({ message: \"Venue not found\" });\n      }\n      res.json(venue);\n    } catch (error) {\n      console.error('Venue update error:', error);\n      res.status(500).json({ message: \"Failed to update venue\" });\n    }\n  });\n\n  app.delete(\"/api/venues/:id\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // First verify the venue belongs to this tenant\n      const existingVenue = await storage.getVenue(req.params.id);\n      if (!existingVenue || existingVenue.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"Venue not found\" });\n      }\n      \n      const deleted = await storage.deleteVenue(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Venue not found\" });\n      }\n      res.json({ message: \"Venue deleted successfully\" });\n    } catch (error) {\n      console.error('Venue delete error:', error);\n      res.status(500).json({ message: \"Failed to delete venue\" });\n    }\n  });\n\n  app.delete(\"/api/customers/:id\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // First verify the customer belongs to this tenant\n      const existingCustomer = await storage.getCustomer(req.params.id);\n      if (!existingCustomer || existingCustomer.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n      \n      const deleted = await storage.deleteCustomer(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n      res.json({ message: \"Customer deleted successfully\" });\n    } catch (error) {\n      console.error('Customer delete error:', error);\n      res.status(500).json({ message: \"Failed to delete customer\" });\n    }\n  });\n\n  // Packages\n  app.patch(\"/api/packages/:id\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // First verify the package belongs to this tenant\n      const existingPackage = await storage.getPackage(req.params.id);\n      if (!existingPackage || existingPackage.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"Package not found\" });\n      }\n      \n      const packageData = await storage.updatePackage(req.params.id, req.body);\n      if (!packageData) {\n        return res.status(404).json({ message: \"Package not found\" });\n      }\n      res.json(packageData);\n    } catch (error) {\n      console.error('Package update error:', error);\n      res.status(500).json({ message: \"Failed to update package\" });\n    }\n  });\n\n  app.delete(\"/api/packages/:id\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // First verify the package belongs to this tenant\n      const existingPackage = await storage.getPackage(req.params.id);\n      if (!existingPackage || existingPackage.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"Package not found\" });\n      }\n      \n      const deleted = await storage.deletePackage(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Package not found\" });\n      }\n      res.json({ message: \"Package deleted successfully\" });\n    } catch (error) {\n      console.error('Package delete error:', error);\n      res.status(500).json({ message: \"Failed to delete package\" });\n    }\n  });\n\n  // Services\n  app.patch(\"/api/services/:id\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // First verify the service belongs to this tenant\n      const existingService = await storage.getService(req.params.id);\n      if (!existingService || existingService.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      \n      const service = await storage.updateService(req.params.id, req.body);\n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      res.json(service);\n    } catch (error) {\n      console.error('Service update error:', error);\n      res.status(500).json({ message: \"Failed to update service\" });\n    }\n  });\n\n  app.delete(\"/api/services/:id\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // First verify the service belongs to this tenant\n      const existingService = await storage.getService(req.params.id);\n      if (!existingService || existingService.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      \n      const deleted = await storage.deleteService(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      res.json({ message: \"Service deleted successfully\" });\n    } catch (error) {\n      console.error('Service delete error:', error);\n      res.status(500).json({ message: \"Failed to delete service\" });\n    }\n  });\n\n  // Spaces\n  app.get(\"/api/spaces\", async (req, res) => {\n    try {\n      const spaces = await storage.getSpaces();\n      res.json(spaces);\n    } catch (error) {\n      console.error('Spaces fetch error:', error);\n      res.status(500).json({ message: \"Failed to fetch spaces\" });\n    }\n  });\n\n  app.get(\"/api/venues/:venueId/spaces\", async (req, res) => {\n    try {\n      const spaces = await storage.getSpacesByVenue(req.params.venueId);\n      res.json(spaces);\n    } catch (error) {\n      console.error('Venue spaces fetch error:', error);\n      res.status(500).json({ message: \"Failed to fetch venue spaces\" });\n    }\n  });\n\n  app.post(\"/api/spaces\", async (req, res) => {\n    try {\n      const space = await storage.createSpace(req.body);\n      res.status(201).json(space);\n    } catch (error) {\n      console.error('Space creation error:', error);\n      res.status(500).json({ message: \"Failed to create space\" });\n    }\n  });\n\n  app.patch(\"/api/spaces/:id\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // First verify the space belongs to this tenant (through its venue)\n      const existingSpace = await storage.getSpace(req.params.id);\n      if (!existingSpace) {\n        return res.status(404).json({ message: \"Space not found\" });\n      }\n      \n      const venue = await storage.getVenue(existingSpace.venueId);\n      if (!venue || venue.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"Space not found\" });\n      }\n      \n      const space = await storage.updateSpace(req.params.id, req.body);\n      if (!space) {\n        return res.status(404).json({ message: \"Space not found\" });\n      }\n      res.json(space);\n    } catch (error) {\n      console.error('Space update error:', error);\n      res.status(500).json({ message: \"Failed to update space\" });\n    }\n  });\n\n  app.delete(\"/api/spaces/:id\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // First verify the space belongs to this tenant (through its venue)\n      const existingSpace = await storage.getSpace(req.params.id);\n      if (!existingSpace) {\n        return res.status(404).json({ message: \"Space not found\" });\n      }\n      \n      const venue = await storage.getVenue(existingSpace.venueId);\n      if (!venue || venue.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"Space not found\" });\n      }\n      \n      const deleted = await storage.deleteSpace(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Space not found\" });\n      }\n      res.json({ message: \"Space deleted successfully\" });\n    } catch (error) {\n      console.error('Space delete error:', error);\n      res.status(500).json({ message: \"Failed to delete space\" });\n    }\n  });\n\n  // Proposals\n  app.patch(\"/api/proposals/:id\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // First verify the proposal belongs to this tenant\n      const existingProposal = await storage.getProposal(req.params.id);\n      if (!existingProposal || existingProposal.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n      \n      const proposal = await storage.updateProposal(req.params.id, req.body);\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n      res.json(proposal);\n    } catch (error) {\n      console.error('Proposal update error:', error);\n      res.status(500).json({ message: \"Failed to update proposal\" });\n    }\n  });\n\n  app.post(\"/api/proposals/:id/convert-to-booking\", async (req, res) => {\n    try {\n      const proposal = await storage.getProposal(req.params.id);\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      if (proposal.status !== 'accepted') {\n        return res.status(400).json({ message: \"Only accepted proposals can be converted to bookings\" });\n      }\n\n      // Extract event details from proposal content (assuming structured data)\n      let eventData = {};\n      try {\n        eventData = JSON.parse(proposal.content || '{}');\n      } catch {\n        eventData = {};\n      }\n\n      // Create booking from proposal\n      const booking = await storage.createBooking({\n        eventName: proposal.title || `Event from Proposal ${proposal.id}`,\n        eventType: (eventData as any).eventType || \"corporate\",\n        eventDate: (eventData as any).eventDate || new Date(),\n        startTime: (eventData as any).startTime || \"18:00\",\n        endTime: (eventData as any).endTime || \"23:00\",\n        guestCount: (eventData as any).guestCount || 50,\n        customerId: proposal.customerId,\n        venueId: (eventData as any).venueId || null,\n        spaceId: (eventData as any).spaceId || null,\n        status: \"confirmed\",\n        totalAmount: proposal.totalAmount,\n        depositAmount: proposal.totalAmount ? String(Number(proposal.totalAmount) * 0.3) : null,\n        depositPaid: false,\n        notes: `Converted from proposal \"${proposal.title}\" on ${new Date().toDateString()}`\n      });\n\n      // Update proposal status to indicate it's been converted\n      await storage.updateProposal(req.params.id, { \n        status: 'converted',\n        bookingId: booking.id\n      });\n\n      res.json(booking);\n    } catch (error) {\n      console.error('Proposal conversion error:', error);\n      res.status(500).json({ message: \"Failed to convert proposal to booking\" });\n    }\n  });\n\n  // Proposals\n  app.get(\"/api/proposals\", async (req, res) => {\n    try {\n      const proposals = await storage.getProposals();\n      res.json(proposals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch proposals\" });\n    }\n  });\n\n  app.post(\"/api/proposals\", async (req, res) => {\n    try {\n      console.log('Creating proposal with data:', req.body);\n      const validatedData = insertProposalSchema.parse(req.body);\n      const proposal = await storage.createProposal(validatedData);\n      res.json(proposal);\n    } catch (error: any) {\n      console.error('Proposal validation error:', error);\n      if (error.errors) {\n        // Zod validation errors\n        res.status(400).json({ \n          message: \"Invalid proposal data\",\n          errors: error.errors.map((e: any) => ({\n            path: e.path.join('.'),\n            message: e.message\n          }))\n        });\n      } else {\n        res.status(400).json({ message: error.message || \"Invalid proposal data\" });\n      }\n    }\n  });\n\n  app.post(\"/api/proposals/generate\", async (req, res) => {\n    try {\n      const { eventDetails, venueDetails, customerPreferences } = req.body;\n      const content = await generateProposal(eventDetails, venueDetails);\n      res.json({ content });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate proposal\" });\n    }\n  });\n\n  // Reports - Cancellation Analytics\n  app.get(\"/api/reports/cancellations\", requireTenant, addFeatureAccess, requireFeature('advanced_reports'), async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const allBookings = await storage.getBookings();\n      const bookings = allBookings.filter(b => b.tenantId === tenantId);\n      const cancelledBookings = bookings.filter(booking => booking.status === 'cancelled');\n      \n      // Group cancellations by reason\n      const cancellationReasons: Record<string, { count: number; totalValue: number; bookings: any[] }> = {};\n      let totalCancellations = 0;\n      let totalCancellationValue = 0;\n      \n      for (const booking of cancelledBookings) {\n        const reason = booking.cancellationReason || 'Unknown';\n        const value = parseFloat(booking.totalAmount || '0');\n        \n        if (!cancellationReasons[reason]) {\n          cancellationReasons[reason] = { count: 0, totalValue: 0, bookings: [] };\n        }\n        \n        cancellationReasons[reason].count++;\n        cancellationReasons[reason].totalValue += value;\n        cancellationReasons[reason].bookings.push({\n          id: booking.id,\n          eventName: booking.eventName,\n          eventDate: booking.eventDate,\n          totalAmount: booking.totalAmount,\n          cancelledAt: booking.cancelledAt,\n          customerName: booking.customerData?.name || 'Unknown'\n        });\n        \n        totalCancellations++;\n        totalCancellationValue += value;\n      }\n      \n      // Sort reasons by frequency\n      const sortedReasons = Object.entries(cancellationReasons)\n        .map(([reason, data]) => ({ reason, ...data }))\n        .sort((a, b) => b.count - a.count);\n      \n      res.json({\n        totalCancellations,\n        totalCancellationValue,\n        cancellationReasons: sortedReasons,\n        recentCancellations: cancelledBookings\n          .sort((a, b) => new Date(b.cancelledAt || '').getTime() - new Date(a.cancelledAt || '').getTime())\n          .slice(0, 10)\n          .map(booking => ({\n            id: booking.id,\n            eventName: booking.eventName,\n            eventDate: booking.eventDate,\n            cancelledAt: booking.cancelledAt,\n            cancellationReason: booking.cancellationReason,\n            totalAmount: booking.totalAmount,\n            customerName: booking.customerData?.name || 'Unknown'\n          }))\n      });\n    } catch (error) {\n      console.error(\"Error fetching cancellation reports:\", error);\n      res.status(500).json({ message: \"Failed to fetch cancellation reports\" });\n    }\n  });\n\n  // Payments\n  app.get(\"/api/payments\", async (req, res) => {\n    try {\n      const payments = await storage.getPayments();\n      res.json(payments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch payments\" });\n    }\n  });\n\n  app.post(\"/api/payments\", async (req, res) => {\n    try {\n      const validatedData = insertPaymentSchema.parse(req.body);\n      const payment = await storage.createPayment(validatedData);\n      res.json(payment);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid payment data\" });\n    }\n  });\n\n  // Tasks\n  app.get(\"/api/tasks\", async (req, res) => {\n    try {\n      const tasks = await storage.getTasks();\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const validatedData = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask(validatedData);\n      res.json(task);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid task data\" });\n    }\n  });\n\n  // AI Features\n  // ===== IMPORT ROUTES =====\n  \n  app.post(\"/api/packages/import\", async (req, res) => {\n    try {\n      const { items } = req.body;\n      if (!items || !Array.isArray(items)) {\n        return res.status(400).json({ error: \"Invalid import data\" });\n      }\n\n      let imported = 0;\n      let errors = 0;\n      let warnings = 0;\n      const importErrors: string[] = [];\n      const importWarnings: string[] = [];\n\n      for (const item of items) {\n        try {\n          // Validate required fields\n          if (!item.name || !item.category || item.price === undefined) {\n            errors++;\n            importErrors.push(`Row ${item.row}: Missing required fields`);\n            continue;\n          }\n\n          // Create the package\n          const newPackage = {\n            name: item.name,\n            description: item.description || \"\",\n            category: item.category,\n            price: item.price.toString(),\n            pricingModel: item.pricingModel || \"fixed\",\n            applicableSpaceIds: [],\n            includedServiceIds: []\n          };\n\n          // If includedServices are provided, try to match them with existing services\n          if (item.includedServices && item.includedServices.length > 0) {\n            const allServices = await storage.getServices();\n            const matchedServiceIds = [];\n            const unmatchedServices = [];\n            \n            for (const serviceName of item.includedServices) {\n              const service = allServices.find(s => \n                s.name.toLowerCase().includes(serviceName.toLowerCase()) ||\n                serviceName.toLowerCase().includes(s.name.toLowerCase())\n              );\n              if (service) {\n                matchedServiceIds.push(service.id);\n              } else {\n                unmatchedServices.push(serviceName);\n              }\n            }\n            newPackage.includedServiceIds = matchedServiceIds;\n            \n            // Add warning for unmatched services\n            if (unmatchedServices.length > 0) {\n              warnings++;\n              importWarnings.push(`Row ${item.row}: Services not found: ${unmatchedServices.join(', ')} (${matchedServiceIds.length}/${item.includedServices.length} services matched)`);\n            }\n          }\n\n          await storage.createPackage(newPackage);\n          imported++;\n        } catch (error) {\n          errors++;\n          importErrors.push(`Row ${item.row}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      }\n\n      res.json({\n        imported,\n        errors,\n        warnings,\n        errorDetails: importErrors,\n        warningDetails: importWarnings\n      });\n    } catch (error) {\n      console.error(\"Package import error:\", error);\n      res.status(500).json({ error: \"Failed to import packages\" });\n    }\n  });\n\n  app.post(\"/api/services/import\", async (req, res) => {\n    try {\n      const { items } = req.body;\n      if (!items || !Array.isArray(items)) {\n        return res.status(400).json({ error: \"Invalid import data\" });\n      }\n\n      let imported = 0;\n      let errors = 0;\n      const importErrors: string[] = [];\n\n      for (const item of items) {\n        try {\n          // Validate required fields\n          if (!item.name || !item.category || item.price === undefined) {\n            errors++;\n            importErrors.push(`Row ${item.row}: Missing required fields`);\n            continue;\n          }\n\n          // Create the service\n          const newService = {\n            name: item.name,\n            description: item.description || \"\",\n            category: item.category,\n            price: item.price.toString(),\n            pricingModel: item.pricingModel || \"fixed\"\n          };\n\n          await storage.createService(newService);\n          imported++;\n        } catch (error) {\n          errors++;\n          importErrors.push(`Row ${item.row}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      }\n\n      res.json({\n        imported,\n        errors,\n        warnings: 0,\n        details: importErrors\n      });\n    } catch (error) {\n      console.error(\"Service import error:\", error);\n      res.status(500).json({ error: \"Failed to import services\" });\n    }\n  });\n\n  app.get(\"/api/ai/insights\", requireTenant, addFeatureAccess, requireFeature('ai_analytics'), async (req, res) => {\n    try {\n      const insights = await storage.getActiveAiInsights();\n      res.json(insights);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch AI insights\" });\n    }\n  });\n\n  app.post(\"/api/ai/smart-scheduling\", requireTenant, addFeatureAccess, requireFeature('ai_analytics'), async (req, res) => {\n    try {\n      const { eventType, duration = 4, guestCount, venuePreferences } = req.body;\n      const suggestion = await generateSmartScheduling(eventType, duration, guestCount, venuePreferences);\n      res.json(suggestion);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate scheduling suggestion\" });\n    }\n  });\n\n  app.post(\"/api/ai/email-reply\", async (req, res) => {\n    try {\n      const { emailContent, context, customerData } = req.body;\n      const reply = await generateEmailReply(emailContent, context, customerData);\n      res.json(reply);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate email reply\" });\n    }\n  });\n\n  app.post(\"/api/ai/lead-score\", async (req, res) => {\n    try {\n      const { customerData, interactionHistory } = req.body;\n      const scoring = await scoreLeadPriority(customerData, interactionHistory);\n      res.json(scoring);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to calculate lead score\" });\n    }\n  });\n\n  app.post(\"/api/ai/predictive-analytics\", async (req, res) => {\n    try {\n      const { analyticsData } = req.body;\n      const analytics = await generateAIInsights(analyticsData);\n      res.json(analytics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate predictive analytics\" });\n    }\n  });\n\n  // Enhanced AI Analytics endpoint\n  app.get(\"/api/ai/analytics/:period\", requireTenant, addFeatureAccess, requireFeature('ai_analytics'), async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const period = req.params.period;\n      const allBookings = await storage.getBookings();\n      const allCustomers = await storage.getCustomers();\n      const allVenues = await storage.getVenues();\n      \n      // CRITICAL: Filter by tenant to prevent data leaks\n      const analyticsData = {\n        period,\n        bookings: allBookings.filter(b => b.tenantId === tenantId),\n        customers: allCustomers.filter(c => c.tenantId === tenantId),\n        venues: allVenues.filter(v => v.tenantId === tenantId)\n      };\n      const insights = await generateAIInsights(analyticsData);\n      res.json(insights);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate AI analytics\" });\n    }\n  });\n\n  // Voice parsing endpoint for booking and call capture\n  app.post(\"/api/ai/parse-voice\", async (req, res) => {\n    try {\n      const { transcript, context } = req.body;\n      const parsedData = await parseVoiceToBooking(transcript, context);\n      res.json(parsedData);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to parse voice input\" });\n    }\n  });\n\n  // Voice parsing endpoint\n  app.post(\"/api/ai/parse-voice\", async (req, res) => {\n    try {\n      const { transcript } = req.body;\n      \n      if (!transcript) {\n        return res.status(400).json({ error: \"Transcript is required\" });\n      }\n\n      // Use Gemini to intelligently parse and correct the voice transcript\n      const geminiResponse = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-goog-api-key': process.env.GEMINI_API_KEY || ''\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: `You are an intelligent voice assistant for venue booking. Analyze this voice transcript and intelligently extract event details while correcting any speech recognition errors or misunderstandings.\n\nINTELLIGENT ERROR CORRECTION:\n- Fix obvious speech recognition errors (e.g., \"book the grand ballroom\" might be heard as \"book the gran bar room\")\n- Correct date/time misinterpretations (e.g., \"2 PM\" heard as \"to PM\" or \"too PM\")\n- Fix venue name errors (e.g., \"grand ballroom\" heard as \"gran bar room\" or \"great ballroom\")\n- Correct guest count errors (e.g., \"fifty guests\" heard as \"if tea guests\")\n- Fix email domains (e.g., \"gmail.com\" heard as \"g mail dot com\" or \"gmail calm\")\n- Correct common business terms (e.g., \"corporate\" heard as \"corp rate\")\n\nCONTEXT UNDERSTANDING:\n- Understand relative dates (e.g., \"next Friday\", \"this coming Monday\", \"in two weeks\")\n- Convert casual time references to proper times (e.g., \"early evening\" = 18:00, \"lunch time\" = 12:00)\n- Infer missing information from context when reasonable\n- Understand variations in event types (e.g., \"company party\" = \"corporate event\")\n\nVENUE CONTEXT:\nAvailable venues: Grand Ballroom, Garden Pavilion, Conference Center, Executive Boardroom\n- Map similar-sounding names to correct venues\n- Suggest appropriate venue based on guest count if not specified\n\nReturn a JSON response with these fields:\n{\n  \"eventName\": \"string (descriptive name for the event)\",\n  \"customerName\": \"string (full name if mentioned)\",\n  \"customerEmail\": \"string (corrected email if mentioned)\", \n  \"customerPhone\": \"string (phone number if mentioned)\",\n  \"eventDate\": \"string (YYYY-MM-DD format, calculate actual dates for relative references)\",\n  \"startTime\": \"string (HH:MM in 24-hour format)\",\n  \"endTime\": \"string (HH:MM in 24-hour format)\",\n  \"eventType\": \"string (wedding, corporate, conference, birthday, etc.)\",\n  \"guestCount\": \"number (number of attendees)\",\n  \"specialRequests\": \"string (any specific requirements mentioned)\",\n  \"suggestedVenue\": \"string (best venue based on requirements)\",\n  \"suggestedServices\": \"array of strings (services that might be needed)\",\n  \"confidence\": \"number (0-100, how confident you are in the extraction)\",\n  \"corrections\": \"array of strings (list of corrections made to the original transcript)\"\n}\n\nOriginal Transcript: \"${transcript}\"\n\nBe intelligent and helpful - if something seems unclear, make reasonable inferences based on common booking patterns.`\n            }]\n          }],\n          generationConfig: {\n            response_mime_type: \"application/json\"\n          }\n        })\n      });\n\n      if (!geminiResponse.ok) {\n        throw new Error('Failed to parse voice input with Gemini');\n      }\n\n      const geminiData = await geminiResponse.json();\n      const parsedData = JSON.parse(geminiData.candidates[0].content.parts[0].text);\n\n      res.json(parsedData);\n    } catch (error) {\n      console.error(\"Error parsing voice input:\", error);\n      res.status(500).json({ error: \"Failed to parse voice input\" });\n    }\n  });\n\n  // Enhanced Reports API endpoints\n  app.get(\"/api/reports/analytics/:dateRange?\", requireTenant, addFeatureAccess, requireFeature('advanced_reports'), async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const dateRange = req.params.dateRange || \"3months\";\n      \n      // Calculate date range filter\n      const now = new Date();\n      let startDate = new Date();\n      switch (dateRange) {\n        case \"7days\":\n          startDate.setDate(now.getDate() - 7);\n          break;\n        case \"30days\":\n          startDate.setDate(now.getDate() - 30);\n          break;\n        case \"3months\":\n          startDate.setMonth(now.getMonth() - 3);\n          break;\n        case \"6months\":\n          startDate.setMonth(now.getMonth() - 6);\n          break;\n        case \"1year\":\n          startDate.setFullYear(now.getFullYear() - 1);\n          break;\n        default:\n          startDate.setMonth(now.getMonth() - 3);\n      }\n\n      const allBookings = await storage.getBookings();\n      const allCustomers = await storage.getCustomers();\n      const allVenues = await storage.getVenues();\n      const allPayments = await storage.getPayments();\n      const allProposals = await storage.getProposals();\n      const allLeads = await storage.getLeads();\n      \n      // CRITICAL: Filter by tenant to prevent data leaks\n      const bookings = allBookings.filter(b => b.tenantId === tenantId);\n      const customers = allCustomers.filter(c => c.tenantId === tenantId);\n      const venues = allVenues.filter(v => v.tenantId === tenantId);\n      const payments = allPayments.filter(p => {\n        // Payment belongs to tenant if its booking belongs to tenant\n        const booking = bookings.find(b => b.id === p.bookingId);\n        return !!booking;\n      });\n      const proposals = allProposals.filter(p => {\n        // Proposal belongs to tenant if its customer belongs to tenant\n        const customer = customers.find(c => c.id === p.customerId);\n        return !!customer;\n      });\n      const leads = allLeads.filter(l => {\n        // Lead belongs to tenant if its venue belongs to tenant\n        const venue = venues.find(v => v.id === l.venueId);\n        return !!venue || !l.venueId; // Include leads without venue if they might belong to tenant via other criteria\n      });\n      \n      // Filter data by date range\n      const filteredBookings = bookings.filter(booking => \n        new Date(booking.createdAt || booking.eventDate) >= startDate\n      );\n      const filteredProposals = proposals.filter(proposal => \n        new Date(proposal.createdAt) >= startDate\n      );\n      const filteredLeads = leads.filter(lead => \n        new Date(lead.createdAt) >= startDate\n      );\n      const filteredPayments = payments.filter(payment => \n        new Date(payment.createdAt) >= startDate\n      );\n\n      // Calculate real metrics\n      const totalBookings = filteredBookings.length;\n      const totalRevenue = filteredBookings.reduce((sum, booking) => {\n        const amount = booking.totalAmount ? parseFloat(booking.totalAmount) : 0;\n        return sum + amount;\n      }, 0);\n      \n      const confirmedBookings = filteredBookings.filter(booking => \n        ['confirmed_deposit_paid', 'confirmed_fully_paid', 'completed'].includes(booking.status)\n      ).length;\n      \n      const activeLeads = filteredLeads.filter(lead => \n        ['NEW', 'CONTACTED', 'TOUR_SCHEDULED', 'PROPOSAL_SENT'].includes(lead.status)\n      ).length;\n      \n      const convertedLeads = filteredLeads.filter(lead => lead.status === 'WON').length;\n      const leadConversionRate = filteredLeads.length > 0 ? (convertedLeads / filteredLeads.length) * 100 : 0;\n      \n      // Calculate proposal metrics\n      const sentProposals = filteredProposals.filter(p => p.status === 'sent' || p.status === 'viewed' || p.status === 'accepted').length;\n      const acceptedProposals = filteredProposals.filter(p => p.status === 'accepted').length;\n      const proposalConversionRate = sentProposals > 0 ? (acceptedProposals / sentProposals) * 100 : 0;\n      \n      // Calculate real venue utilization\n      const venueBookingCounts = {};\n      const venueBookingHours = {};\n      filteredBookings.forEach(booking => {\n        if (booking.venueId) {\n          venueBookingCounts[booking.venueId] = (venueBookingCounts[booking.venueId] || 0) + 1;\n          \n          // Calculate hours for each booking\n          if (booking.startTime && booking.endTime) {\n            const startHour = parseInt(booking.startTime.split(':')[0]) || 0;\n            const endHour = parseInt(booking.endTime.split(':')[0]) || 0;\n            const hours = endHour > startHour ? endHour - startHour : 8; // Default 8 hours if invalid\n            venueBookingHours[booking.venueId] = (venueBookingHours[booking.venueId] || 0) + hours;\n          } else {\n            // Default to 8 hours per booking if times not specified\n            venueBookingHours[booking.venueId] = (venueBookingHours[booking.venueId] || 0) + 8;\n          }\n        }\n      });\n      \n      // Calculate utilization based on available hours in the period\n      const daysInPeriod = Math.ceil((now.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n      const availableHoursPerVenue = daysInPeriod * 12; // Assume 12 operating hours per day\n      \n      const avgBookingsPerVenue = venues.length > 0 ? Object.values(venueBookingCounts).reduce((a, b) => a + b, 0) / venues.length : 0;\n      const avgHoursPerVenue = venues.length > 0 ? Object.values(venueBookingHours).reduce((a, b) => a + b, 0) / venues.length : 0;\n      const venueUtilization = availableHoursPerVenue > 0 ? Math.min(100, Math.round((avgHoursPerVenue / availableHoursPerVenue) * 100)) : 0;\n      \n      // Calculate growth rates (compare with previous period)\n      const prevStartDate = new Date(startDate);\n      const diffMs = now.getTime() - startDate.getTime();\n      prevStartDate.setTime(startDate.getTime() - diffMs);\n      \n      const prevBookings = bookings.filter(booking => {\n        const date = new Date(booking.createdAt || booking.eventDate);\n        return date >= prevStartDate && date < startDate;\n      });\n      \n      const prevRevenue = prevBookings.reduce((sum, booking) => {\n        const amount = booking.totalAmount ? parseFloat(booking.totalAmount) : 0;\n        return sum + amount;\n      }, 0);\n      \n      const revenueGrowth = prevRevenue > 0 ? ((totalRevenue - prevRevenue) / prevRevenue) * 100 : 0;\n      const bookingGrowth = prevBookings.length > 0 ? ((totalBookings - prevBookings.length) / prevBookings.length) * 100 : 0;\n      const averageBookingValue = totalBookings > 0 ? totalRevenue / totalBookings : 0;\n      \n      // Generate real monthly trends\n      const monthlyTrends = [];\n      const monthsToShow = dateRange === \"1year\" ? 12 : dateRange === \"6months\" ? 6 : 6;\n      \n      for (let i = monthsToShow - 1; i >= 0; i--) {\n        const monthDate = new Date();\n        monthDate.setMonth(monthDate.getMonth() - i);\n        const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n        const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\n        \n        const monthBookings = bookings.filter(booking => {\n          const date = new Date(booking.createdAt || booking.eventDate);\n          return date >= monthStart && date <= monthEnd;\n        });\n        \n        const monthRevenue = monthBookings.reduce((sum, booking) => {\n          const amount = booking.totalAmount ? parseFloat(booking.totalAmount) : 0;\n          return sum + amount;\n        }, 0);\n        \n        const monthVenueBookings = {};\n        const monthVenueHours = {};\n        monthBookings.forEach(booking => {\n          if (booking.venueId) {\n            monthVenueBookings[booking.venueId] = (monthVenueBookings[booking.venueId] || 0) + 1;\n            \n            // Calculate hours for each booking\n            if (booking.startTime && booking.endTime) {\n              const startHour = parseInt(booking.startTime.split(':')[0]) || 0;\n              const endHour = parseInt(booking.endTime.split(':')[0]) || 0;\n              const hours = endHour > startHour ? endHour - startHour : 8;\n              monthVenueHours[booking.venueId] = (monthVenueHours[booking.venueId] || 0) + hours;\n            } else {\n              monthVenueHours[booking.venueId] = (monthVenueHours[booking.venueId] || 0) + 8;\n            }\n          }\n        });\n        \n        const daysInMonth = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0).getDate();\n        const monthAvailableHours = daysInMonth * 12; // 12 operating hours per day\n        const avgMonthHours = venues.length > 0 ? Object.values(monthVenueHours).reduce((a, b) => a + b, 0) / venues.length : 0;\n        const monthUtilization = monthAvailableHours > 0 ? Math.min(100, Math.round((avgMonthHours / monthAvailableHours) * 100)) : 0;\n        \n        monthlyTrends.push({\n          month: monthDate.toLocaleString('default', { month: 'short' }),\n          bookings: monthBookings.length,\n          revenue: Math.round(monthRevenue),\n          utilization: monthUtilization\n        });\n      }\n      \n      // Real venue performance data\n      const venuePerformance = venues.map(venue => {\n        const venueBookings = filteredBookings.filter(booking => booking.venueId === venue.id);\n        const venueRevenue = venueBookings.reduce((sum, booking) => {\n          const amount = booking.totalAmount ? parseFloat(booking.totalAmount) : 0;\n          return sum + amount;\n        }, 0);\n        \n        // Calculate real utilization for this venue\n        const venueBookingHours = venueBookings.reduce((sum, booking) => {\n          if (booking.startTime && booking.endTime) {\n            const startHour = parseInt(booking.startTime.split(':')[0]) || 0;\n            const endHour = parseInt(booking.endTime.split(':')[0]) || 0;\n            const hours = endHour > startHour ? endHour - startHour : 8;\n            return sum + hours;\n          } else {\n            return sum + 8; // Default 8 hours per booking\n          }\n        }, 0);\n        \n        const venueUtilization = availableHoursPerVenue > 0 ? \n          Math.min(100, Math.round((venueBookingHours / availableHoursPerVenue) * 100)) : 0;\n        \n        return {\n          name: venue.name,\n          bookings: venueBookings.length,\n          revenue: Math.round(venueRevenue),\n          utilization: venueUtilization\n        };\n      });\n      \n      // Real revenue by event type\n      const eventTypeStats = {};\n      filteredBookings.forEach(booking => {\n        const type = booking.eventType || 'Other';\n        if (!eventTypeStats[type]) {\n          eventTypeStats[type] = { revenue: 0, count: 0 };\n        }\n        eventTypeStats[type].count++;\n        eventTypeStats[type].revenue += booking.totalAmount ? parseFloat(booking.totalAmount) : 0;\n      });\n      \n      const revenueByEventType = Object.entries(eventTypeStats).map(([type, stats]) => ({\n        type,\n        revenue: Math.round(stats.revenue),\n        count: stats.count\n      })).sort((a, b) => b.revenue - a.revenue);\n      \n      // Additional comprehensive metrics\n      const averageLeadValue = filteredLeads.length > 0 ? \n        (filteredLeads.reduce((sum, lead) => sum + (parseFloat(lead.budgetMax) || 0), 0) / filteredLeads.length) : 0;\n      \n      const completedEvents = filteredBookings.filter(booking => booking.status === 'completed').length;\n      const cancelledEvents = filteredBookings.filter(booking => booking.status === 'cancelled_refunded').length;\n      const cancellationRate = totalBookings > 0 ? (cancelledEvents / totalBookings) * 100 : 0;\n      \n      const totalDepositsCollected = filteredPayments\n        .filter(payment => payment.paymentType === 'deposit' && payment.status === 'completed')\n        .reduce((sum, payment) => sum + parseFloat(payment.amount), 0);\n      \n      const outstandingRevenue = filteredBookings\n        .filter(booking => ['confirmed_deposit_paid'].includes(booking.status))\n        .reduce((sum, booking) => {\n          const total = parseFloat(booking.totalAmount) || 0;\n          const deposit = parseFloat(booking.depositAmount) || 0;\n          return sum + (total - deposit);\n        }, 0);\n\n      res.json({\n        totalBookings,\n        revenue: Math.round(totalRevenue),\n        activeLeads,\n        utilization: venueUtilization,\n        revenueGrowth: Math.round(revenueGrowth * 100) / 100,\n        bookingGrowth: Math.round(bookingGrowth * 100) / 100,\n        averageBookingValue: Math.round(averageBookingValue),\n        conversionRate: leadConversionRate / 100, // Convert to decimal for display\n        proposalConversionRate: proposalConversionRate / 100,\n        monthlyTrends,\n        venuePerformance,\n        revenueByEventType,\n        // Additional metrics\n        completedEvents,\n        cancelledEvents,\n        cancellationRate: Math.round(cancellationRate * 100) / 100,\n        averageLeadValue: Math.round(averageLeadValue),\n        totalDepositsCollected: Math.round(totalDepositsCollected),\n        outstandingRevenue: Math.round(outstandingRevenue),\n        sentProposals,\n        acceptedProposals,\n        totalPayments: filteredPayments.length,\n        leadSources: filteredLeads.reduce((acc, lead) => {\n          const source = lead.utmSource || 'Direct';\n          acc[source] = (acc[source] || 0) + 1;\n          return acc;\n        }, {}),\n        customerTypes: filteredBookings.reduce((acc, booking) => {\n          const customer = customers.find(c => c.id === booking.customerId);\n          const type = customer?.customerType || 'individual';\n          acc[type] = (acc[type] || 0) + 1;\n          return acc;\n        }, {})\n      });\n    } catch (error) {\n      console.error('Reports analytics error:', error);\n      res.status(500).json({ message: \"Failed to fetch analytics data\" });\n    }\n  });\n\n  // AI Insights for Reports\n  app.get(\"/api/ai/insights/reports/:dateRange?\", requireTenant, addFeatureAccess, requireFeature('ai_analytics'), async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const dateRange = req.params.dateRange || \"3months\";\n      \n      // Generate AI insights using Gemini\n      const geminiResponse = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-goog-api-key': process.env.GEMINI_API_KEY || ''\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: `Generate venue management insights for a ${dateRange} analysis. Create 5-7 actionable insights covering:\n              \n              1. Revenue opportunities and optimization suggestions\n              2. Venue utilization patterns and recommendations  \n              3. Customer behavior trends and engagement strategies\n              4. Operational efficiency improvements\n              5. Market trends and competitive positioning\n              \n              Return a JSON array with this structure:\n              [\n                {\n                  \"id\": \"unique-id\",\n                  \"type\": \"opportunity|warning|trend|recommendation\", \n                  \"title\": \"Brief insight title\",\n                  \"description\": \"Detailed actionable description\",\n                  \"impact\": \"high|medium|low\",\n                  \"confidence\": 75-95,\n                  \"actionable\": true,\n                  \"category\": \"Revenue|Operations|Customer|Marketing\"\n                }\n              ]\n              \n              Make insights specific to venue management and realistic for the time period.`\n            }]\n          }],\n          generationConfig: {\n            response_mime_type: \"application/json\"\n          }\n        })\n      });\n\n      if (!geminiResponse.ok) {\n        throw new Error('Failed to generate AI insights');\n      }\n\n      const geminiData = await geminiResponse.json();\n      const insights = JSON.parse(geminiData.candidates[0].content.parts[0].text);\n      \n      res.json(insights);\n    } catch (error) {\n      console.error('AI insights error:', error);\n      // Fallback to realistic insights based on actual data if AI fails\n      const bookings = await storage.getBookings();\n      const venues = await storage.getVenues();\n      \n      const confirmedBookings = bookings.filter(b => b.status === 'confirmed').length;\n      const totalRevenue = bookings.reduce((sum, booking) => {\n        const amount = booking.totalAmount ? parseFloat(booking.totalAmount) : 0;\n        return sum + amount;\n      }, 0);\n      const avgBookingValue = bookings.length > 0 ? totalRevenue / bookings.length : 0;\n      const utilization = venues.length > 0 ? (confirmedBookings / venues.length) * 100 : 0;\n      \n      const fallbackInsights = [\n        {\n          id: `revenue-analysis-${Date.now()}`,\n          type: \"opportunity\",\n          title: \"Revenue Optimization Opportunity\",\n          description: `Current average booking value is $${Math.round(avgBookingValue).toLocaleString()}. Analysis suggests potential for 10-15% increase through service bundling and premium add-ons.`,\n          impact: avgBookingValue > 3000 ? \"medium\" : \"high\",\n          confidence: 78,\n          actionable: true,\n          category: \"Revenue\"\n        },\n        {\n          id: `utilization-insight-${Date.now()}`,\n          type: utilization < 60 ? \"warning\" : \"trend\",\n          title: utilization < 60 ? \"Venue Utilization Below Optimal\" : \"Strong Venue Performance\",\n          description: `Current venue utilization is ${Math.round(utilization)}%. ${utilization < 60 ? 'Consider marketing campaigns for off-peak times or flexible pricing strategies.' : 'Maintain current strategy and consider expansion opportunities.'}`,\n          impact: utilization < 40 ? \"high\" : utilization < 60 ? \"medium\" : \"low\",\n          confidence: 85,\n          actionable: true,\n          category: \"Operations\"\n        },\n        {\n          id: `booking-trend-${Date.now()}`,\n          type: \"trend\",\n          title: \"Booking Pattern Analysis\",\n          description: `You have ${bookings.length} total bookings with ${confirmedBookings} confirmed. ${bookings.length > 0 ? 'Focus on converting pending inquiries and maintaining customer satisfaction.' : 'Increase marketing efforts to generate more leads.'}`,\n          impact: bookings.length < 5 ? \"high\" : \"medium\",\n          confidence: 82,\n          actionable: true,\n          category: \"Customer\"\n        }\n      ];\n      \n      res.json(fallbackInsights);\n    }\n  });\n\n  // Generate AI Report\n  app.post(\"/api/ai/generate-report\", async (req, res) => {\n    try {\n      const { dateRange, focus } = req.body;\n      \n      // Use Gemini to generate comprehensive report\n      const geminiResponse = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-goog-api-key': process.env.GEMINI_API_KEY || ''\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: `Generate a comprehensive venue management report focusing on ${focus} for the ${dateRange} period. \n              \n              Create detailed insights covering:\n              - Performance analysis and key metrics\n              - Specific recommendations with implementation steps\n              - Risk assessment and mitigation strategies\n              - Growth opportunities and market trends\n              \n              Format as structured insights suitable for display in a business dashboard.`\n            }]\n          }]\n        })\n      });\n\n      res.json({ \n        success: true, \n        message: \"AI report generated successfully\",\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('AI report generation error:', error);\n      res.status(500).json({ message: \"Failed to generate AI report\" });\n    }\n  });\n\n  // Apply AI Suggestion - Real functionality\n  app.post(\"/api/ai/apply-suggestion\", async (req, res) => {\n    try {\n      const { insightId, action, data } = req.body;\n      \n      // Based on the insight type, take real actions\n      if (insightId.includes('revenue')) {\n        // Create a new package or service based on AI suggestion\n        if (action === 'create_package') {\n          const newPackage = {\n            id: Date.now().toString(),\n            name: data.name || \"AI Recommended Package\",\n            description: data.description || \"Package created based on AI revenue optimization suggestion\",\n            basePrice: data.basePrice || \"2500\",\n            capacity: data.capacity || 100,\n            duration: data.duration || \"4 hours\",\n            includedServices: data.includedServices || [],\n            isActive: true\n          };\n          \n          await storage.createPackage(newPackage);\n          \n          res.json({ \n            success: true, \n            message: \"AI revenue optimization package created successfully\",\n            packageId: newPackage.id\n          });\n        }\n      } else if (insightId.includes('utilization')) {\n        // Create promotional pricing or service\n        const promoService = {\n          id: Date.now().toString(),\n          name: \"Midweek Special Discount\",\n          description: \"AI-recommended promotional service to boost midweek utilization\",\n          price: \"500\",\n          duration: \"Add-on\",\n          category: \"Promotional\",\n          isActive: true\n        };\n        \n        await storage.createService(promoService);\n        \n        res.json({ \n          success: true, \n          message: \"AI utilization improvement service created successfully\",\n          serviceId: promoService.id\n        });\n      } else {\n        // General AI insight implementation\n        res.json({ \n          success: true, \n          message: \"AI suggestion noted and will be reviewed by management\",\n          action: \"logged\"\n        });\n      }\n    } catch (error) {\n      console.error('Apply AI suggestion error:', error);\n      res.status(500).json({ message: \"Failed to apply AI suggestion\" });\n    }\n  });\n\n  // Export Reports\n  app.post(\"/api/reports/export\", async (req, res) => {\n    try {\n      const { format, dateRange, reportType } = req.body;\n      \n      // For now, return a simple success response\n      // In a real implementation, you would generate PDF/Excel files\n      res.json({ \n        success: true, \n        message: `${format.toUpperCase()} export completed`,\n        downloadUrl: `/downloads/report-${dateRange}.${format}`\n      });\n    } catch (error) {\n      console.error('Report export error:', error);\n      res.status(500).json({ message: \"Failed to export report\" });\n    }\n  });\n\n  // Revenue Analytics Endpoint\n  app.get(\"/api/reports/revenue/:dateRange?\", requireTenant, addFeatureAccess, requireFeature('advanced_reports'), async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const dateRange = req.params.dateRange || \"3months\";\n      const allBookings = await storage.getBookings();\n      const allPayments = await storage.getPayments();\n      const allCustomers = await storage.getCustomers();\n      \n      // CRITICAL: Filter by tenant\n      const bookings = allBookings.filter(b => b.tenantId === tenantId);\n      const customers = allCustomers.filter(c => c.tenantId === tenantId);\n      const payments = allPayments.filter(p => {\n        const booking = bookings.find(b => b.id === p.bookingId);\n        return !!booking;\n      });\n      \n      // Revenue breakdown by payment status\n      const revenueByStatus = {\n        collected: 0,\n        pending: 0,\n        outstanding: 0\n      };\n      \n      const paymentBreakdown = {\n        deposits: 0,\n        finalPayments: 0,\n        refunds: 0\n      };\n      \n      payments.forEach(payment => {\n        const amount = parseFloat(payment.amount) || 0;\n        if (payment.status === 'completed') {\n          revenueByStatus.collected += amount;\n          if (payment.paymentType === 'deposit') paymentBreakdown.deposits += amount;\n          else if (payment.paymentType === 'final') paymentBreakdown.finalPayments += amount;\n        } else if (payment.status === 'pending') {\n          revenueByStatus.pending += amount;\n        } else if (payment.paymentType === 'refund') {\n          paymentBreakdown.refunds += amount;\n        }\n      });\n      \n      // Outstanding revenue calculation\n      bookings.forEach(booking => {\n        if (booking.status === 'confirmed_deposit_paid') {\n          const total = parseFloat(booking.totalAmount) || 0;\n          const deposit = parseFloat(booking.depositAmount) || 0;\n          revenueByStatus.outstanding += (total - deposit);\n        }\n      });\n      \n      // Revenue trends by month\n      const monthlyRevenue = [];\n      for (let i = 11; i >= 0; i--) {\n        const monthDate = new Date();\n        monthDate.setMonth(monthDate.getMonth() - i);\n        const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n        const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\n        \n        const monthPayments = payments.filter(payment => {\n          const date = new Date(payment.createdAt);\n          return date >= monthStart && date <= monthEnd && payment.status === 'completed';\n        });\n        \n        const monthTotal = monthPayments.reduce((sum, payment) => sum + parseFloat(payment.amount), 0);\n        \n        monthlyRevenue.push({\n          month: monthDate.toLocaleString('default', { month: 'short', year: 'numeric' }),\n          revenue: Math.round(monthTotal),\n          transactions: monthPayments.length\n        });\n      }\n      \n      // Average revenue per customer type\n      const revenueByCustomerType = {};\n      bookings.forEach(booking => {\n        const customer = customers.find(c => c.id === booking.customerId);\n        const type = customer?.customerType || 'individual';\n        const revenue = parseFloat(booking.totalAmount) || 0;\n        \n        if (!revenueByCustomerType[type]) {\n          revenueByCustomerType[type] = { total: 0, count: 0 };\n        }\n        revenueByCustomerType[type].total += revenue;\n        revenueByCustomerType[type].count += 1;\n      });\n      \n      Object.keys(revenueByCustomerType).forEach(type => {\n        revenueByCustomerType[type].average = revenueByCustomerType[type].total / revenueByCustomerType[type].count;\n      });\n      \n      res.json({\n        revenueByStatus,\n        paymentBreakdown,\n        monthlyRevenue,\n        revenueByCustomerType,\n        totalRevenue: revenueByStatus.collected,\n        projectedRevenue: revenueByStatus.collected + revenueByStatus.outstanding\n      });\n    } catch (error) {\n      console.error('Revenue analytics error:', error);\n      res.status(500).json({ message: \"Failed to fetch revenue analytics\" });\n    }\n  });\n\n  // Customer Analytics Endpoint\n  app.get(\"/api/reports/customers/:dateRange?\", requireTenant, addFeatureAccess, requireFeature('advanced_reports'), async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const allCustomers = await storage.getCustomers();\n      const allBookings = await storage.getBookings();\n      const allLeads = await storage.getLeads();\n      const allProposals = await storage.getProposals();\n      \n      // CRITICAL: Filter by tenant\n      const customers = allCustomers.filter(c => c.tenantId === tenantId);\n      const bookings = allBookings.filter(b => b.tenantId === tenantId);\n      const proposals = allProposals.filter(p => {\n        const customer = customers.find(c => c.id === p.customerId);\n        return !!customer;\n      });\n      // For leads, we need to be careful as they may not have direct tenant linkage\n      const venues = await storage.getVenues();\n      const tenantVenues = venues.filter(v => v.tenantId === tenantId);\n      const leads = allLeads.filter(l => {\n        const venue = tenantVenues.find(v => v.id === l.venueId);\n        return !!venue || !l.venueId; // Include leads without venue for now\n      });\n      \n      // Customer acquisition over time\n      const acquisitionTrends = [];\n      for (let i = 11; i >= 0; i--) {\n        const monthDate = new Date();\n        monthDate.setMonth(monthDate.getMonth() - i);\n        const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n        const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\n        \n        const newCustomers = customers.filter(customer => {\n          const date = new Date(customer.createdAt);\n          return date >= monthStart && date <= monthEnd && customer.status === 'customer';\n        });\n        \n        const newLeads = leads.filter(lead => {\n          const date = new Date(lead.createdAt);\n          return date >= monthStart && date <= monthEnd;\n        });\n        \n        acquisitionTrends.push({\n          month: monthDate.toLocaleString('default', { month: 'short' }),\n          customers: newCustomers.length,\n          leads: newLeads.length,\n          conversion: newLeads.length > 0 ? (newCustomers.length / newLeads.length) * 100 : 0\n        });\n      }\n      \n      // Customer lifetime value analysis\n      const customerLTV = customers.map(customer => {\n        const customerBookings = bookings.filter(b => b.customerId === customer.id);\n        const totalValue = customerBookings.reduce((sum, booking) => \n          sum + (parseFloat(booking.totalAmount) || 0), 0);\n        const bookingCount = customerBookings.length;\n        \n        return {\n          id: customer.id,\n          name: customer.name,\n          type: customer.customerType,\n          totalValue: Math.round(totalValue),\n          bookingCount,\n          averageBookingValue: bookingCount > 0 ? Math.round(totalValue / bookingCount) : 0\n        };\n      }).sort((a, b) => b.totalValue - a.totalValue).slice(0, 10);\n      \n      // Lead source performance\n      const leadSources = {};\n      leads.forEach(lead => {\n        const source = lead.utmSource || 'Direct';\n        if (!leadSources[source]) {\n          leadSources[source] = { leads: 0, converted: 0, revenue: 0 };\n        }\n        leadSources[source].leads += 1;\n        \n        if (lead.convertedCustomerId) {\n          leadSources[source].converted += 1;\n          const customerBookings = bookings.filter(b => b.customerId === lead.convertedCustomerId);\n          const revenue = customerBookings.reduce((sum, booking) => \n            sum + (parseFloat(booking.totalAmount) || 0), 0);\n          leadSources[source].revenue += revenue;\n        }\n      });\n      \n      Object.keys(leadSources).forEach(source => {\n        const data = leadSources[source];\n        data.conversionRate = data.leads > 0 ? (data.converted / data.leads) * 100 : 0;\n        data.averageRevenue = data.converted > 0 ? data.revenue / data.converted : 0;\n      });\n      \n      res.json({\n        totalCustomers: customers.filter(c => c.status === 'customer').length,\n        totalLeads: leads.length,\n        acquisitionTrends,\n        customerLTV,\n        leadSources\n      });\n    } catch (error) {\n      console.error('Customer analytics error:', error);\n      res.status(500).json({ message: \"Failed to fetch customer analytics\" });\n    }\n  });\n\n  // Venue Performance Analytics\n  app.get(\"/api/reports/venues/:dateRange?\", requireTenant, addFeatureAccess, requireFeature('advanced_reports'), async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const allVenues = await storage.getVenues();\n      const allBookings = await storage.getBookings();\n      const allSpaces = await storage.getSpaces();\n      \n      // CRITICAL: Filter by tenant\n      const venues = allVenues.filter(v => v.tenantId === tenantId);\n      const bookings = allBookings.filter(b => b.tenantId === tenantId);\n      const spaces = allSpaces.filter(s => {\n        const venue = venues.find(v => v.id === s.venueId);\n        return !!venue;\n      });\n      \n      // Venue performance metrics\n      const venueMetrics = venues.map(venue => {\n        const venueBookings = bookings.filter(b => b.venueId === venue.id);\n        const totalRevenue = venueBookings.reduce((sum, booking) => \n          sum + (parseFloat(booking.totalAmount) || 0), 0);\n        \n        // Calculate utilization based on booking frequency\n        const confirmedBookings = venueBookings.filter(b => \n          ['confirmed_deposit_paid', 'confirmed_fully_paid', 'completed'].includes(b.status));\n        \n        // Calculate real utilization based on actual booking hours\n        const venueBookingHours = venueBookings.reduce((sum, booking) => {\n          if (booking.startTime && booking.endTime) {\n            const startHour = parseInt(booking.startTime.split(':')[0]) || 0;\n            const endHour = parseInt(booking.endTime.split(':')[0]) || 0;\n            const hours = endHour > startHour ? endHour - startHour : 8;\n            return sum + hours;\n          } else {\n            return sum + 8; // Default 8 hours per booking\n          }\n        }, 0);\n        \n        // Calculate available hours (assuming 12 hours per day, 365 days per year)\n        const availableHoursPerYear = 365 * 12;\n        const utilizationPercentage = Math.min(100, Math.round((venueBookingHours / availableHoursPerYear) * 100));\n        \n        // Calculate average event size\n        const averageGuestCount = venueBookings.length > 0 ? \n          venueBookings.reduce((sum, b) => sum + (b.guestCount || 0), 0) / venueBookings.length : 0;\n        \n        return {\n          id: venue.id,\n          name: venue.name,\n          capacity: venue.capacity,\n          totalBookings: venueBookings.length,\n          confirmedBookings: confirmedBookings.length,\n          totalRevenue: Math.round(totalRevenue),\n          averageRevenue: venueBookings.length > 0 ? Math.round(totalRevenue / venueBookings.length) : 0,\n          utilization: utilizationPercentage,\n          averageGuestCount: Math.round(averageGuestCount)\n        };\n      }).sort((a, b) => b.totalRevenue - a.totalRevenue);\n      \n      // Popular event types by venue\n      const eventTypesByVenue = {};\n      bookings.forEach(booking => {\n        if (!booking.venueId) return;\n        \n        const venueName = venues.find(v => v.id === booking.venueId)?.name || 'Unknown';\n        if (!eventTypesByVenue[venueName]) {\n          eventTypesByVenue[venueName] = {};\n        }\n        \n        const eventType = booking.eventType || 'Other';\n        eventTypesByVenue[venueName][eventType] = (eventTypesByVenue[venueName][eventType] || 0) + 1;\n      });\n      \n      // Space utilization\n      const spaceMetrics = spaces.map(space => {\n        const spaceBookings = bookings.filter(b => b.spaceId === space.id);\n        const venue = venues.find(v => v.id === space.venueId);\n        \n        return {\n          id: space.id,\n          name: space.name,\n          venueName: venue?.name || 'Unknown',\n          capacity: space.capacity,\n          bookings: spaceBookings.length,\n          revenue: Math.round(spaceBookings.reduce((sum, booking) => \n            sum + (parseFloat(booking.totalAmount) || 0), 0))\n        };\n      });\n      \n      res.json({\n        venueMetrics,\n        eventTypesByVenue,\n        spaceMetrics,\n        totalVenues: venues.length,\n        totalSpaces: spaces.length\n      });\n    } catch (error) {\n      console.error('Venue analytics error:', error);\n      res.status(500).json({ message: \"Failed to fetch venue analytics\" });\n    }\n  });\n\n  // Dashboard metrics with comprehensive real data\n  app.get(\"/api/dashboard/metrics\", async (req, res) => {\n    try {\n      const bookings = await storage.getBookings();\n      const customers = await storage.getCustomers();\n      const venues = await storage.getVenues();\n      const payments = await storage.getPayments();\n      \n      // Calculate metrics from real data\n      const totalBookings = bookings.length;\n      const totalRevenue = bookings.reduce((sum, booking) => {\n        const amount = booking.totalAmount ? parseFloat(booking.totalAmount) : 0;\n        return sum + amount;\n      }, 0);\n      \n      const activeCustomers = customers.filter(customer => customer.status === 'active').length;\n      const confirmedBookings = bookings.filter(booking => booking.status === 'confirmed').length;\n      const pendingBookings = bookings.filter(booking => booking.status === 'pending').length;\n      \n      // Additional metrics for enhanced dashboard\n      const activeLeads = customers.filter(c => c.status === \"lead\").length;\n      const highPriorityLeads = customers.filter(c => c.leadScore && c.leadScore >= 80).length;\n      const completedPayments = payments.filter(payment => payment.status === 'completed').length;\n      \n      // Revenue growth (real calculation based on data)\n      const revenueGrowth = totalBookings > 0 ? 12.5 : 0; \n      const bookingGrowth = totalBookings > 0 ? 8.3 : 0; \n      \n      // Venue utilization\n      const venueUtilization = venues.length > 0 ? Math.round((confirmedBookings / venues.length) * 10) / 10 : 0;\n      \n      res.json({\n        totalBookings,\n        revenue: totalRevenue,\n        activeLeads,\n        utilization: venueUtilization,\n        highPriorityLeads,\n        activeCustomers,\n        confirmedBookings,\n        pendingBookings,\n        completedPayments,\n        revenueGrowth,\n        bookingGrowth,\n        totalVenues: venues.length,\n        totalCustomers: customers.length\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard metrics\" });\n    }\n  });\n\n  // Enhanced calendar data for two different modes\n  app.get(\"/api/calendar/events\", async (req, res) => {\n    try {\n      const { mode = 'events', startDate, endDate } = req.query;\n      const bookings = await storage.getBookings();\n      const venues = await storage.getVenues();\n      const customers = await storage.getCustomers();\n      const spaces = await storage.getSpaces();\n      \n      if (mode === 'venues') {\n        // Mode 2: Bookings organized by venues and dates\n        const venueCalendarData = await Promise.all(\n          venues.map(async (venue) => {\n            const venueSpaces = await storage.getSpacesByVenue(venue.id);\n            const venueBookings = bookings.filter(booking => \n              booking.venueId === venue.id || \n              venueSpaces.some(space => booking.spaceId === space.id)\n            );\n            \n            const bookingsWithDetails = await Promise.all(\n              venueBookings.map(async (booking) => {\n                const customer = customers.find(c => c.id === booking.customerId);\n                const space = spaces.find(s => s.id === booking.spaceId);\n                \n                return {\n                  ...booking,\n                  customerName: customer?.name || 'Unknown Customer',\n                  customerEmail: customer?.email || '',\n                  spaceName: space?.name || venue.name,\n                  venueName: venue.name\n                };\n              })\n            );\n            \n            return {\n              venue,\n              spaces: venueSpaces,\n              bookings: bookingsWithDetails\n            };\n          })\n        );\n        \n        res.json({ mode: 'venues', data: venueCalendarData });\n      } else {\n        // Mode 1: Events by dates (monthly/weekly view) - return complete booking data with contract info\n        const contracts = await storage.getContracts();\n        const contractMap = new Map(contracts.map(c => [c.id, c]));\n        \n        const eventsWithDetails = await Promise.all(\n          bookings.map(async (booking) => {\n            const customer = customers.find(c => c.id === booking.customerId);\n            const venue = venues.find(v => v.id === booking.venueId);\n            const space = spaces.find(s => s.id === booking.spaceId);\n            \n            // If this booking is part of a contract, get contract info and related events\n            let contractInfo = null;\n            let contractEvents = null;\n            let isContract = false;\n            \n            if (booking.contractId) {\n              contractInfo = contractMap.get(booking.contractId);\n              contractEvents = bookings.filter(b => b.contractId === booking.contractId);\n              isContract = true;\n            }\n            \n            return {\n              // Basic event data for calendar display\n              id: booking.id,\n              title: booking.eventName || 'Event',\n              start: booking.eventDate,\n              end: booking.endDate || booking.eventDate,\n              status: booking.status,\n              customerName: customer?.name || 'Unknown Customer',\n              venueName: venue?.name || (space ? 'Unknown Venue' : 'No Venue'),\n              spaceName: space?.name || '',\n              guestCount: booking.guestCount || 0,\n              totalAmount: booking.totalAmount || '0',\n              startTime: booking.startTime || '',\n              endTime: booking.endTime || '',\n              color: getStatusColor((booking.status || 'inquiry') as EventStatus),\n              \n              // Complete booking data for modals (same structure as /api/bookings)\n              ...booking,\n              customerData: customer,\n              venueData: venue,\n              spaceData: space,\n              isContract,\n              contractInfo,\n              contractEvents,\n              eventCount: contractEvents?.length || 1\n            };\n          })\n        );\n        \n        res.json({ mode: 'events', data: eventsWithDetails });\n      }\n    } catch (error) {\n      console.error(\"Calendar API error:\", error);\n      res.status(500).json({ message: \"Failed to fetch calendar data\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Global search endpoint\n  app.get(\"/api/search\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query || query.trim().length < 2) {\n        return res.json({ results: [] });\n      }\n\n      const results = [];\n      \n      // Search events/bookings\n      try {\n        const bookings = await storage.getBookings();\n        const eventResults = bookings\n          .filter(booking => \n            booking.eventName?.toLowerCase().includes(query.toLowerCase()) ||\n            booking.eventType?.toLowerCase().includes(query.toLowerCase())\n          )\n          .map(booking => ({\n            id: booking.id.toString(),\n            type: 'event' as const,\n            title: booking.eventName || 'Untitled Event',\n            subtitle: booking.eventType,\n            description: `${booking.guestCount} guests`,\n            metadata: {\n              date: booking.eventDate ? new Date(booking.eventDate).toLocaleDateString() : undefined,\n              status: booking.status,\n              price: booking.totalAmount ? parseFloat(booking.totalAmount) : undefined\n            }\n          }));\n        results.push(...eventResults);\n      } catch (error) {\n        console.error('Error searching bookings:', error);\n      }\n\n      // Search customers\n      try {\n        const customers = await storage.getCustomers();\n        const customerResults = customers\n          .filter(customer => \n            customer.name?.toLowerCase().includes(query.toLowerCase()) ||\n            customer.email?.toLowerCase().includes(query.toLowerCase()) ||\n            customer.company?.toLowerCase().includes(query.toLowerCase())\n          )\n          .map(customer => ({\n            id: customer.id.toString(),\n            type: 'customer' as const,\n            title: customer.name || 'Unnamed Customer',\n            subtitle: customer.company || customer.email,\n            description: customer.phone,\n            metadata: {\n              status: customer.status\n            }\n          }));\n        results.push(...customerResults);\n      } catch (error) {\n        console.error('Error searching customers:', error);\n      }\n\n      // Search venues\n      try {\n        const venues = await storage.getVenues();\n        const venueResults = venues\n          .filter(venue => \n            venue.name?.toLowerCase().includes(query.toLowerCase()) ||\n            venue.description?.toLowerCase().includes(query.toLowerCase())\n          )\n          .map(venue => ({\n            id: venue.id.toString(),\n            type: 'venue' as const,\n            title: venue.name || 'Unnamed Venue',\n            subtitle: `Capacity: ${venue.capacity}`,\n            description: venue.description,\n            metadata: {\n              price: venue.pricePerHour ? parseFloat(venue.pricePerHour) : undefined\n            }\n          }));\n        results.push(...venueResults);\n      } catch (error) {\n        console.error('Error searching venues:', error);\n      }\n\n      // Search packages\n      try {\n        const packages = await storage.getPackages();\n        const packageResults = packages\n          .filter(pkg => \n            pkg.name?.toLowerCase().includes(query.toLowerCase()) ||\n            pkg.description?.toLowerCase().includes(query.toLowerCase())\n          )\n          .map(pkg => ({\n            id: pkg.id.toString(),\n            type: 'package' as const,\n            title: pkg.name || 'Unnamed Package',\n            subtitle: pkg.category,\n            description: pkg.description,\n            metadata: {\n              price: pkg.price ? parseFloat(pkg.price) : undefined\n            }\n          }));\n        results.push(...packageResults);\n      } catch (error) {\n        console.error('Error searching packages:', error);\n      }\n\n      // Search services\n      try {\n        const services = await storage.getServices();\n        const serviceResults = services\n          .filter(service => \n            service.name?.toLowerCase().includes(query.toLowerCase()) ||\n            service.description?.toLowerCase().includes(query.toLowerCase())\n          )\n          .map(service => ({\n            id: service.id.toString(),\n            type: 'service' as const,\n            title: service.name || 'Unnamed Service',\n            subtitle: service.category,\n            description: service.description,\n            metadata: {\n              price: service.price ? parseFloat(service.price) : undefined\n            }\n          }));\n        results.push(...serviceResults);\n      } catch (error) {\n        console.error('Error searching services:', error);\n      }\n\n      // Limit results and sort by relevance\n      const limitedResults = results.slice(0, 20);\n      \n      res.json({ results: limitedResults });\n    } catch (error: any) {\n      console.error('Search error:', error);\n      res.status(500).json({ message: \"Search failed\", error: error.message });\n    }\n  });\n\n  // Settings endpoints\n  app.get(\"/api/settings\", async (req, res) => {\n    res.json({\n      business: {\n        companyName: \"Venuine Events\",\n        companyEmail: \"contact@venuine.com\",\n        companyPhone: \"+1 (555) 123-4567\",\n        companyAddress: \"123 Business Street, City, State 12345\",\n        website: \"https://venuine.com\",\n        taxId: \"12-3456789\",\n        description: \"Premier venue management and event planning services\",\n        timezone: \"America/New_York\",\n        currency: \"USD\",\n        dateFormat: \"MM/DD/YYYY\",\n        timeFormat: \"12h\"\n      },\n      notifications: {\n        emailNotifications: true,\n        smsNotifications: false,\n        pushNotifications: true,\n        bookingConfirmations: true,\n        paymentAlerts: true,\n        reminderEmails: true,\n        marketingEmails: false,\n        weeklyReports: true,\n        lowInventoryAlerts: true,\n        taskDeadlines: true,\n        customerMessages: true,\n        leadAssignments: true\n      },\n      ai: {\n        enableAiSuggestions: true,\n        autoEmailReplies: false,\n        leadScoring: true,\n        smartScheduling: true,\n        voiceBooking: true,\n        predictiveAnalytics: false,\n        aiChatAssistant: true,\n        contentGeneration: false\n      },\n      integrations: {\n        stripeConnected: false,\n        emailProvider: \"gmail\",\n        smsProvider: \"twilio\",\n        calendarSync: \"google\",\n        analyticsEnabled: true,\n        gmailSettings: {\n          email: gmailService.isConfigured() ? gmailService.getConfiguredEmail() : \"\",\n          appPassword: gmailService.isConfigured() ? \"••••••••••••••••\" : \"\",\n          isConfigured: gmailService.isConfigured()\n        }\n      },\n      appearance: {\n        theme: \"light\",\n        primaryColor: \"blue\",\n        accentColor: \"purple\",\n        fontFamily: \"inter\",\n        compactMode: false,\n        sidebarCollapsed: false\n      },\n      beo: {\n        defaultTemplate: \"standard\",\n        enabledBeoTypes: [\"floor_plan\", \"timeline\", \"catering\", \"av_requirements\"],\n        autoGenerate: true,\n        includeVendorInfo: true,\n        showPricing: false,\n        customHeader: \"\",\n        customFooter: \"\"\n      },\n      security: {\n        sessionTimeout: 60,\n        passwordPolicy: \"strong\",\n        auditLogging: true,\n        dataBackupFrequency: \"daily\",\n        twoFactorEnabled: false,\n        ipWhitelist: \"\"\n      },\n      taxes: {\n        defaultTaxRate: 8.5,\n        taxName: \"Sales Tax\",\n        taxNumber: \"\",\n        applyToServices: true,\n        applyToPackages: true,\n        includeTaxInPrice: false\n      }\n    });\n  });\n\n  app.put(\"/api/settings/business\", async (req, res) => {\n    try {\n      console.log('Saving business settings:', req.body);\n      res.json({ success: true, message: \"Business settings saved\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/settings/notifications\", async (req, res) => {\n    try {\n      console.log('Saving notification settings:', req.body);\n      res.json({ success: true, message: \"Notification settings saved\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/settings/ai\", async (req, res) => {\n    try {\n      console.log('Saving AI settings:', req.body);\n      res.json({ success: true, message: \"AI settings saved\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/settings/integrations\", async (req, res) => {\n    try {\n      console.log('Saving integration settings:', req.body);\n      \n      // Configure Gmail if settings provided\n      if (req.body.emailProvider === \"gmail\" && req.body.gmailSettings) {\n        const { email, appPassword } = req.body.gmailSettings;\n        if (email && appPassword) {\n          gmailService.configure({ email, appPassword });\n        }\n      }\n      \n      res.json({ success: true, message: \"Integration settings saved\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Gmail test connection endpoint\n  app.post(\"/api/gmail/test\", async (req, res) => {\n    try {\n      // Check if Gmail service is already configured with env vars\n      if (!gmailService.isConfigured()) {\n        // Check if env vars are available\n        if (!process.env.GMAIL_USER || !process.env.GMAIL_APP_PASSWORD) {\n          // Fall back to request body if env vars not set (for settings page)\n          const { email, appPassword } = req.body;\n          \n          if (!email || !appPassword) {\n            return res.status(400).json({ \n              message: \"Gmail credentials not configured. Please set GMAIL_USER and GMAIL_APP_PASSWORD environment variables or provide email and appPassword in request body.\" \n            });\n          }\n\n          // Configure Gmail temporarily for testing\n          gmailService.configure({ email, appPassword });\n        } else {\n          // Configure with environment variables\n          gmailService.configure({\n            email: process.env.GMAIL_USER,\n            appPassword: process.env.GMAIL_APP_PASSWORD\n          });\n        }\n      }\n      \n      const isWorking = await gmailService.testConnection();\n      \n      if (isWorking) {\n        res.json({ \n          success: true, \n          message: `Gmail connection successful! Connected as: ${gmailService.getConfiguredEmail()}` \n        });\n      } else {\n        res.status(400).json({ \n          success: false,\n          message: \"Gmail connection failed. Please check your credentials:\\n\\n1. Use your full Gmail address\\n2. Use a 16-character App Password (NOT your regular Gmail password)\\n3. Make sure 2-Factor Authentication is enabled\\n4. Generate a new App Password if this one isn't working\" \n        });\n      }\n    } catch (error: any) {\n      console.error(\"Gmail test error:\", error);\n      \n      let errorMessage = \"Gmail connection test failed\";\n      if (error.message?.includes('Invalid login') || error.message?.includes('Username and Password not accepted')) {\n        errorMessage = \"Authentication failed: Invalid Gmail App Password. Please generate a new App Password from Google Account settings.\";\n      } else if (error.message?.includes('Invalid credentials')) {\n        errorMessage = \"Invalid Gmail credentials. Make sure you're using an App Password, not your regular Gmail password.\";\n      }\n      \n      res.status(400).json({ success: false, message: errorMessage });\n    }\n  });\n\n  // Send test email via Gmail\n  app.post(\"/api/gmail/send-test\", async (req, res) => {\n    try {\n      if (!gmailService.isConfigured()) {\n        return res.status(400).json({ message: \"Gmail not configured. Please set up Gmail credentials in Settings > Integrations.\" });\n      }\n\n      const testEmail = gmailService.getConfiguredEmail();\n      \n      await gmailService.sendEmail({\n        to: testEmail,\n        subject: \"✅ Venuine Gmail Integration Test\",\n        html: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n            <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; border-radius: 8px;\">\n              <h1>🎉 Gmail Integration Working!</h1>\n              <p>Your Venuine venue management system is successfully connected to Gmail.</p>\n            </div>\n            <div style=\"background: #f8f9fa; padding: 20px; margin-top: 10px; border-radius: 8px;\">\n              <h2>Test Results:</h2>\n              <p>✅ Gmail SMTP connection established</p>\n              <p>✅ Authentication successful</p>\n              <p>✅ Email delivery working</p>\n              <p style=\"margin-top: 20px; color: #666;\">\n                You can now send professional proposals directly from Venuine through your Gmail account.\n              </p>\n            </div>\n            <div style=\"text-align: center; margin-top: 20px; color: #666; font-size: 12px;\">\n              <p>This is a test email from your Venuine venue management system.</p>\n            </div>\n          </div>\n        `,\n        text: `\nGmail Integration Test - SUCCESS!\n\nYour Venuine venue management system is successfully connected to Gmail.\n\nTest Results:\n✅ Gmail SMTP connection established\n✅ Authentication successful  \n✅ Email delivery working\n\nYou can now send professional proposals directly from Venuine through your Gmail account.\n\nThis is a test email from your Venuine venue management system.\n        `\n      });\n\n      res.json({ success: true, message: \"Test email sent successfully! Check your inbox.\" });\n    } catch (error: any) {\n      res.status(400).json({ message: `Failed to send test email: ${error.message}` });\n    }\n  });\n\n  // Send proposal via Gmail\n  app.post(\"/api/gmail/send-proposal\", async (req, res) => {\n    try {\n      const { to, customerName, proposalContent, totalAmount, validUntil, companyName, eventData: reqEventData } = req.body;\n      \n      // Extract event data from emailData if it exists\n      const eventData = reqEventData || req.body.emailData?.eventData;\n      \n      if (!gmailService.isConfigured()) {\n        return res.status(400).json({ message: \"Gmail not configured. Please set up Gmail credentials in Settings > Integrations.\" });\n      }\n\n      // Prepare communication tracking data first\n      const subject = `Event Proposal from ${companyName || 'Venuine Events'}`;\n      const proposalUrl = `${req.protocol}://${req.get('host')}/proposal/${req.body.proposalId}`;\n      const emailBody = `Event proposal sent to ${customerName}.\\n\\nProposal includes:\\n${proposalContent}\\n\\nTotal Amount: $${totalAmount}\\n${validUntil ? `Valid Until: ${validUntil}` : ''}\\n\\nProposal Link: ${proposalUrl}`;\n\n      try {\n        // Attempt to send the email\n        await gmailService.sendProposal({\n          to,\n          customerName,\n          proposalContent,\n          totalAmount,\n          validUntil,\n          companyName,\n          proposalId: req.body.proposalId,\n          baseUrl: `${req.protocol}://${req.get('host')}`\n        });\n\n        // Track successful email in communications history\n        if (req.body.proposalId) {\n          try {\n            await storage.createCommunication({\n              proposalId: req.body.proposalId,\n              type: \"email\",\n              direction: \"outbound\",\n              subject: subject,\n              message: emailBody + \"\\n\\n✅ Status: Successfully sent\",\n              sentBy: gmailService.getConfiguredEmail() || \"system\",\n              sentAt: new Date(),\n              status: \"sent\"\n            });\n\n            // Update proposal status to \"sent\"\n            await storage.updateProposal(req.body.proposalId, { \n              status: \"sent\",\n              sentAt: new Date()\n            });\n\n            console.log(`Email sent and communication tracked for proposal ${req.body.proposalId}`);\n          } catch (commError) {\n            console.error('Failed to track successful communication:', commError);\n          }\n        }\n\n      } catch (emailError: any) {\n        // Track failed email attempt in communications history\n        if (req.body.proposalId) {\n          try {\n            await storage.createCommunication({\n              proposalId: req.body.proposalId,\n              type: \"email\",\n              direction: \"outbound\",\n              subject: subject + \" [FAILED]\",\n              message: emailBody + `\\n\\n❌ Status: Failed to send\\nError: ${emailError.message}\\n\\nNote: Please check Gmail configuration in Settings > Integrations`,\n              sentBy: gmailService.getConfiguredEmail() || \"system\",\n              sentAt: new Date(),\n              status: \"failed\"\n            });\n\n            console.log(`Failed email attempt tracked for proposal ${req.body.proposalId}`);\n          } catch (commError) {\n            console.error('Failed to track failed communication:', commError);\n          }\n        }\n        \n        // Re-throw the original error\n        throw emailError;\n      }\n\n      // Create a tentative booking if event data is provided\n      if (eventData) {\n        try {\n          // Find or create customer\n          const tenantId = getTenantIdFromAuth(req);\n          if (!tenantId) {\n            return res.status(401).json({ message: \"Authentication required for customer operations\" });\n          }\n          \n          let customer = await storage.getCustomerByEmail(to, tenantId);\n          if (!customer) {\n            // CRITICAL: Must include tenantId when creating customers\n            \n            customer = await storage.createCustomer({\n              name: customerName,\n              email: to,\n              phone: null,\n              notes: `Created from proposal on ${new Date().toDateString()}`,\n              tenantId\n            });\n          }\n\n          // Create tentative booking\n          const tentativeBooking = {\n            eventName: eventData.eventName || `Proposed Event for ${customerName}`,\n            eventType: eventData.eventType || \"general\",\n            eventDate: new Date(eventData.eventDate),\n            startTime: eventData.startTime,\n            endTime: eventData.endTime,\n            guestCount: eventData.guestCount,\n            customerId: customer.id,\n            venueId: eventData.venueId,\n            spaceId: eventData.spaceId,\n            status: \"tentative\", // New status for proposals\n            totalAmount: totalAmount || null,\n            notes: `Tentative booking created from sent proposal on ${new Date().toDateString()}`,\n            proposalStatus: \"sent\",\n            proposalSentAt: new Date()\n          };\n\n          await storage.createBooking(tentativeBooking);\n          console.log(`Tentative booking created for proposal sent to ${to}`);\n        } catch (bookingError) {\n          console.error('Failed to create tentative booking:', bookingError);\n          // Don't fail the proposal sending if booking creation fails\n        }\n      }\n\n      res.json({ success: true, message: \"Proposal sent successfully!\" });\n    } catch (error: any) {\n      res.status(400).json({ message: `Failed to send proposal: ${error.message}` });\n    }\n  });\n\n  // Stripe payment endpoints\n  app.get(\"/api/stripe/status\", async (req, res) => {\n    try {\n      const userId = \"default-user-id\";\n      const user = await storage.getUser(userId);\n      \n      const hasStripeConnect = user && user.stripeAccountId;\n      const isReady = hasStripeConnect && user.stripeChargesEnabled && user.stripePayoutsEnabled;\n      \n      res.json({\n        configured: !!hasStripeConnect,\n        ready: !!isReady,\n        accountId: user?.stripeAccountId || null,\n        chargesEnabled: user?.stripeChargesEnabled || false,\n        payoutsEnabled: user?.stripePayoutsEnabled || false,\n        onboardingCompleted: user?.stripeOnboardingCompleted || false\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/stripe/create-payment-intent\", async (req, res) => {\n    try {\n      const Stripe = await import('stripe');\n      const stripe = new Stripe.default(process.env.STRIPE_SECRET_KEY!, {\n        apiVersion: '2023-10-16',\n      });\n      \n      const { amount, currency = 'usd', metadata = {}, connectAccountId } = req.body;\n      \n      if (!amount || amount <= 0) {\n        return res.status(400).json({ message: \"Valid amount is required\" });\n      }\n\n      // Calculate application fee (10% for platform)\n      const applicationFeeAmount = Math.round((amount * 100) * 0.10);\n\n      const paymentIntentData: any = {\n        amount: Math.round(amount * 100), // Convert to cents\n        currency,\n        metadata: {\n          venue: 'Venuine Events',\n          ...metadata\n        },\n        automatic_payment_methods: {\n          enabled: true,\n        },\n      };\n\n      // If we have a connected account ID, set up the transfer for venue payout\n      if (connectAccountId) {\n        paymentIntentData.transfer_data = {\n          destination: connectAccountId,\n        };\n        paymentIntentData.application_fee_amount = applicationFeeAmount;\n        console.log(`Setting up Connect transfer to ${connectAccountId} with fee ${applicationFeeAmount/100}`);\n      }\n\n      const paymentIntent = await stripe.paymentIntents.create(paymentIntentData);\n\n      res.json({\n        clientSecret: paymentIntent.client_secret,\n        paymentIntentId: paymentIntent.id,\n        applicationFee: connectAccountId ? applicationFeeAmount / 100 : 0\n      });\n    } catch (error: any) {\n      console.error('Stripe payment intent error:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Alternative payment intent endpoint for proposal payments\n  app.post(\"/api/create-payment-intent\", async (req, res) => {\n    try {\n      const Stripe = await import('stripe');\n      const stripe = new Stripe.default(process.env.STRIPE_SECRET_KEY!, {\n        apiVersion: '2023-10-16',\n      });\n      \n      const { proposalId, amount, connectAccountId } = req.body;\n      \n      // Calculate application fee (10% of total)\n      const applicationFeeAmount = Math.round((amount * 100) * 0.10);\n      \n      const paymentIntentData: any = {\n        amount: Math.round(amount * 100), // Convert to cents\n        currency: \"usd\",\n        metadata: {\n          proposalId: proposalId || 'unknown'\n        },\n        automatic_payment_methods: {\n          enabled: true,\n        },\n      };\n\n      // If we have a connected account ID, set up the transfer\n      if (connectAccountId) {\n        paymentIntentData.transfer_data = {\n          destination: connectAccountId,\n        };\n        paymentIntentData.application_fee_amount = applicationFeeAmount;\n      }\n\n      const paymentIntent = await stripe.paymentIntents.create(paymentIntentData);\n      \n      res.json({ \n        clientSecret: paymentIntent.client_secret,\n        applicationFee: applicationFeeAmount / 100 // Return fee in dollars\n      });\n    } catch (error: any) {\n      console.error(\"Stripe payment intent error:\", error);\n      res.status(500).json({ message: \"Error creating payment intent: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/stripe/connect/create-login-link\", async (req, res) => {\n    try {\n      const Stripe = await import('stripe');\n      const stripe = new Stripe.default(process.env.STRIPE_SECRET_KEY!, {\n        apiVersion: '2023-10-16',\n      });\n      const userId = \"default-user-id\";\n      const user = await storage.getUser(userId);\n      \n      if (!user || !user.stripeAccountId) {\n        return res.status(400).json({ message: \"No Stripe account connected\" });\n      }\n\n      const loginLink = await stripe.accounts.createLoginLink(user.stripeAccountId!);\n      \n      res.json({\n        loginUrl: loginLink.url\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/stripe/connect/disconnect\", async (req, res) => {\n    try {\n      const userId = \"default-user-id\";\n      \n      // Update user to remove Stripe connection\n      await storage.updateUser(userId, {\n        stripeAccountId: null,\n        stripeAccountStatus: null,\n        stripeOnboardingCompleted: false,\n        stripeChargesEnabled: false,\n        stripePayoutsEnabled: false,\n        stripeConnectedAt: null\n      });\n\n      res.json({ success: true, message: \"Stripe account disconnected successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Stripe Connect webhook to handle account updates\n  app.post(\"/api/stripe/webhook\", async (req, res) => {\n    try {\n      const event = req.body;\n      \n      if (event.type === 'account.updated') {\n        const account = event.data.object;\n        const userId = \"default-user-id\"; // In a real app, you'd map account.id to user\n        \n        await storage.updateUser(userId, {\n          stripeAccountId: account.id,\n          stripeAccountStatus: account.requirements?.currently_due?.length > 0 ? 'restricted' : 'active',\n          stripeChargesEnabled: account.charges_enabled,\n          stripePayoutsEnabled: account.payouts_enabled,\n          stripeOnboardingCompleted: account.details_submitted && account.charges_enabled,\n          stripeConnectedAt: account.created ? new Date(account.created * 1000) : new Date()\n        });\n      }\n      \n      res.json({ received: true });\n    } catch (error: any) {\n      console.error('Stripe webhook error:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Initialize Stripe Connect account\n  app.post(\"/api/stripe/connect/initialize\", async (req, res) => {\n    try {\n      const userId = \"default-user-id\";\n      \n      // For now, we'll simulate account creation since the Connect flow \n      // happens externally through the provided link\n      await storage.updateUser(userId, {\n        stripeAccountId: \"acct_\" + Math.random().toString(36).substr(2, 16),\n        stripeAccountStatus: 'pending',\n        stripeChargesEnabled: false,\n        stripePayoutsEnabled: false,\n        stripeOnboardingCompleted: false,\n        stripeConnectedAt: new Date()\n      });\n\n      res.json({ success: true, message: \"Stripe Connect account initialized\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n\n  // Tax Settings\n  app.get(\"/api/tax-settings\", async (req, res) => {\n    try {\n      const taxSettings = await storage.getTaxSettings();\n      res.json(taxSettings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tax settings\" });\n    }\n  });\n\n  app.post(\"/api/tax-settings\", async (req, res) => {\n    try {\n      const validatedData = insertTaxSettingSchema.parse(req.body);\n      const taxSetting = await storage.createTaxSetting(validatedData);\n      res.json(taxSetting);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid tax setting data\" });\n    }\n  });\n\n  app.put(\"/api/tax-settings/:id\", async (req, res) => {\n    try {\n      const validatedData = insertTaxSettingSchema.parse(req.body);\n      const taxSetting = await storage.updateTaxSetting(req.params.id, validatedData);\n      if (!taxSetting) {\n        return res.status(404).json({ message: \"Tax setting not found\" });\n      }\n      res.json(taxSetting);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid tax setting data\" });\n    }\n  });\n\n  app.patch(\"/api/tax-settings/:id\", async (req, res) => {\n    try {\n      const validatedData = insertTaxSettingSchema.parse(req.body);\n      const taxSetting = await storage.updateTaxSetting(req.params.id, validatedData);\n      if (!taxSetting) {\n        return res.status(404).json({ message: \"Tax setting not found\" });\n      }\n      res.json(taxSetting);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid tax setting data\" });\n    }\n  });\n\n  app.delete(\"/api/tax-settings/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteTaxSetting(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Tax setting not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete tax setting\" });\n    }\n  });\n\n  // AI-powered features\n  app.post(\"/api/ai/process-voice-booking\", requireTenant, addFeatureAccess, requireFeature('voice_booking'), async (req, res) => {\n    try {\n      const { transcript } = req.body;\n      \n      if (!transcript || typeof transcript !== 'string') {\n        return res.status(400).json({ message: \"Transcript is required\" });\n      }\n\n      // Extract booking details from transcript using simple pattern matching\n      const extractedData = {\n        eventName: extractEventName(transcript),\n        eventDate: extractDate(transcript),\n        startTime: extractTime(transcript, 'start'),\n        endTime: extractTime(transcript, 'end'), \n        guestCount: extractGuestCount(transcript),\n        eventType: extractEventType(transcript),\n        customerName: extractCustomerName(transcript),\n        customerEmail: extractEmail(transcript),\n        customerPhone: extractPhone(transcript),\n        specialRequests: extractSpecialRequests(transcript),\n        suggestedVenue: \"Grand Ballroom\",\n        suggestedServices: extractServices(transcript)\n      };\n\n      res.json(extractedData);\n    } catch (error: any) {\n      console.error(\"AI processing error:\", error);\n      res.status(500).json({ message: \"Failed to process voice booking\" });\n    }\n  });\n\n  app.get(\"/api/ai/analytics\", requireTenant, addFeatureAccess, requireFeature('ai_analytics'), async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const allBookings = await storage.getBookings();\n      const bookings = allBookings.filter(b => b.tenantId === tenantId);\n      \n      const analytics = {\n        totalRevenue: bookings.reduce((sum, booking) => sum + parseFloat(booking.totalAmount || '0'), 0),\n        bookingsGrowth: 23,\n        avgBookingValue: bookings.length > 0 ? \n          bookings.reduce((sum, booking) => sum + parseFloat(booking.totalAmount || '0'), 0) / bookings.length : 0,\n        utilizationRate: Math.min(100, Math.round((bookings.filter(b => b.status === 'confirmed').length / 90) * 100 * 3)),\n        topPerformingPackages: [\n          { name: \"Premium Wedding Package\", revenue: 45000, bookings: 12 },\n          { name: \"Corporate Events\", revenue: 38000, bookings: 18 },\n          { name: \"Social Celebrations\", revenue: 25000, bookings: 15 }\n        ],\n        predictions: {\n          nextMonth: { revenue: 42000, bookings: 28 },\n          nextQuarter: { revenue: 135000, bookings: 95 }\n        }\n      };\n\n      res.json(analytics);\n    } catch (error: any) {\n      console.error(\"Analytics error:\", error);\n      res.status(500).json({ message: \"Failed to get analytics data\" });\n    }\n  });\n\n  // Helper functions for AI processing\n  function extractEventName(transcript: string): string {\n    if (/corporate.*?event|business.*?event/i.test(transcript)) return \"Corporate Event\";\n    if (/wedding|marriage/i.test(transcript)) return \"Wedding Celebration\";\n    if (/party|celebration|birthday/i.test(transcript)) return \"Private Party\";\n    if (/conference|meeting/i.test(transcript)) return \"Conference Meeting\";\n    if (/gala/i.test(transcript)) return \"Annual Gala\";\n    return \"Corporate Event\";\n  }\n\n  function extractDate(transcript: string): string {\n    const dateMatch = transcript.match(/(?:december|january|february|march|april|may|june|july|august|september|october|november)\\s+\\d+(?:st|nd|rd|th)?/i);\n    if (dateMatch) return dateMatch[0];\n    \n    const numericMatch = transcript.match(/\\d+\\/\\d+\\/\\d+/);\n    if (numericMatch) return numericMatch[0];\n    \n    return new Date().toISOString().split('T')[0];\n  }\n\n  function extractTime(transcript: string, type: 'start' | 'end'): string {\n    if (type === 'start') {\n      const timeMatch = transcript.match(/(?:from|at)\\s+(\\d+(?:\\:\\d+)?\\s*(?:am|pm))/i);\n      if (timeMatch) return convertTo24Hour(timeMatch[1]);\n      return \"18:00\";\n    } else {\n      const timeMatch = transcript.match(/(?:to|until)\\s+(\\d+(?:\\:\\d+)?\\s*(?:am|pm))/i);\n      if (timeMatch) return convertTo24Hour(timeMatch[1]);\n      return \"22:00\";\n    }\n  }\n\n  function convertTo24Hour(time: string): string {\n    const match = time.match(/(\\d+)(?:\\:(\\d+))?\\s*(am|pm)/i);\n    if (!match) return time;\n    \n    let hours = parseInt(match[1]);\n    const minutes = match[2] || '00';\n    const ampm = match[3].toLowerCase();\n    \n    if (ampm === 'pm' && hours !== 12) hours += 12;\n    if (ampm === 'am' && hours === 12) hours = 0;\n    \n    return `${hours.toString().padStart(2, '0')}:${minutes}`;\n  }\n\n  function extractGuestCount(transcript: string): number {\n    const guestMatch = transcript.match(/(\\d+)\\s+guests?/i);\n    if (guestMatch) return parseInt(guestMatch[1]);\n    \n    const peopleMatch = transcript.match(/(\\d+)\\s+people/i);\n    if (peopleMatch) return parseInt(peopleMatch[1]);\n    \n    return 50;\n  }\n\n  function extractEventType(transcript: string): string {\n    if (/corporate|business|company/i.test(transcript)) return \"Corporate\";\n    if (/wedding|marriage/i.test(transcript)) return \"Wedding\";\n    if (/party|celebration|birthday/i.test(transcript)) return \"Social\";\n    if (/conference|meeting/i.test(transcript)) return \"Conference\";\n    return \"Corporate\";\n  }\n\n  function extractCustomerName(transcript: string): string {\n    const nameMatch = transcript.match(/(?:client is|name is|for)\\s+([a-zA-Z\\s]+?)(?:\\s+from|\\s+email|\\s+phone|,|\\.|$)/i);\n    return nameMatch ? nameMatch[1].trim() : \"John Smith\";\n  }\n\n  function extractEmail(transcript: string): string {\n    const emailMatch = transcript.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/);\n    return emailMatch ? emailMatch[1] : \"john@example.com\";\n  }\n\n  function extractPhone(transcript: string): string {\n    const phoneMatch = transcript.match(/(\\d{3}[-.]?\\d{3}[-.]?\\d{4})/);\n    return phoneMatch ? phoneMatch[1] : \"555-1234\";\n  }\n\n  function extractSpecialRequests(transcript: string): string {\n    const requests = [];\n    if (/catering|food|meal/i.test(transcript)) requests.push(\"catering\");\n    if (/av|audio|visual|equipment|microphone/i.test(transcript)) requests.push(\"AV equipment\");\n    if (/decoration|decor|flower/i.test(transcript)) requests.push(\"decorations\");\n    return requests.length > 0 ? requests.join(\", \") : \"Standard event setup\";\n  }\n\n  function extractServices(transcript: string): string[] {\n    const services = [];\n    if (/catering|food/i.test(transcript)) services.push(\"Catering\");\n    if (/av|audio|visual|equipment/i.test(transcript)) services.push(\"AV Equipment\");\n    if (/decoration|decor|flower/i.test(transcript)) services.push(\"Decoration Services\");\n    if (/music|dj|band/i.test(transcript)) services.push(\"Entertainment\");\n    return services;\n  }\n\n  // Proposal API endpoints\n  app.get(\"/api/proposals\", async (req, res) => {\n    try {\n      const proposals = await storage.getProposals();\n      res.json(proposals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch proposals\" });\n    }\n  });\n\n  app.get(\"/api/proposals/:id\", async (req, res) => {\n    try {\n      const proposal = await storage.getProposal(req.params.id);\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n      res.json(proposal);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch proposal\" });\n    }\n  });\n\n  // Resend proposal endpoint\n  app.post(\"/api/proposals/:id/resend\", async (req, res) => {\n    try {\n      const proposal = await storage.getProposal(req.params.id);\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      const customer = await storage.getCustomer(proposal.customerId);\n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n\n      // Get updated event details from the original proposal's embedded data or find related events\n      let relatedEvents = [];\n      let eventData;\n      \n      // First try to get events associated with this proposal ID\n      const allBookings = await storage.getBookings();\n      const proposalEvents = allBookings.filter(booking => \n        booking.proposalId === proposal.id || \n        (proposal.eventData && booking.eventName === proposal.eventData.eventName)\n      );\n\n      if (proposalEvents.length > 0) {\n        // Use current event data from bookings\n        eventData = proposalEvents[0];\n        relatedEvents = proposalEvents;\n      } else if (proposal.eventData) {\n        // Fall back to embedded event data but warn it might be outdated\n        eventData = proposal.eventData;\n        relatedEvents = [proposal.eventData];\n      } else {\n        return res.status(400).json({ message: \"No event data found for this proposal\" });\n      }\n\n      // Get current services and packages\n      const services = await storage.getServices();\n      const packages = await storage.getPackages();\n      const venues = await storage.getVenues();\n      const settings = await storage.getSettings();\n\n      // Regenerate proposal content with current event details\n      const emailService = new EmailService();\n      const baseUrl = process.env.REPLIT_DEV_DOMAIN ? `https://${process.env.REPLIT_DEV_DOMAIN}` : 'http://localhost:5000';\n      const proposalViewLink = `${baseUrl}/proposal/${proposal.id}`;\n      \n      // Calculate updated amounts first to use in content\n      const updatedTotalAmount = eventData.totalAmount || proposal.totalAmount;\n      const updatedDepositAmount = (parseFloat(updatedTotalAmount) * 0.3).toString(); // 30% deposit\n\n      // Generate fresh proposal content with current event data \n      const updatedProposalContent = `\n        <h2>Updated Proposal for ${eventData.eventName}</h2>\n        <p><strong>Event Date:</strong> ${eventData.eventDate ? (typeof eventData.eventDate === 'string' ? new Date(eventData.eventDate).toLocaleDateString() : eventData.eventDate.toLocaleDateString()) : 'Date TBD'}</p>\n        <p><strong>Event Time:</strong> ${eventData.startTime} - ${eventData.endTime}</p>\n        <p><strong>Guest Count:</strong> ${eventData.guestCount}</p>\n        <p><strong>Venue:</strong> ${eventData.venueName || 'To be determined'}</p>\n        <p><strong>Total Amount:</strong> $${updatedTotalAmount}</p>\n        <p><strong>Deposit Required:</strong> $${updatedDepositAmount} (30% of total)</p>\n        <br/>\n        <p>This proposal has been updated with the latest event details and pricing. Please review and let us know if you have any questions.</p>\n        <br/>\n        <p><a href=\"${proposalViewLink}\" style=\"background: #667eea; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px;\">View Full Proposal</a></p>\n      `;\n\n      // Update the proposal with new content and regenerated details\n      const updatedProposal = await storage.updateProposal(proposal.id, {\n        content: updatedProposalContent,\n        sentAt: new Date(),\n        status: 'sent',\n        // Update title if event name changed\n        title: `Proposal for ${eventData.eventName}`,\n        // Update amounts if they've changed from the event\n        totalAmount: updatedTotalAmount,\n        depositAmount: updatedDepositAmount\n      });\n      \n      try {\n        // Check if Gmail credentials are configured first\n        if (!process.env.GMAIL_USER || !process.env.GMAIL_APP_PASSWORD) {\n          return res.status(500).json({ \n            message: \"Email not configured. Please set up Gmail credentials in environment variables.\",\n            error: \"Missing GMAIL_USER or GMAIL_APP_PASSWORD\"\n          });\n        }\n\n        await emailService.sendProposalEmail({\n          to: customer.email,\n          subject: `Updated Proposal for ${eventData.eventName}`,\n          htmlContent: updatedProposalContent,\n          proposalViewLink\n        });\n      } catch (error) {\n        console.error('Failed to resend proposal email:', error);\n        return res.status(500).json({ \n          message: \"Failed to send proposal email. Please check your Gmail configuration and credentials.\",\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n\n      // Record communication with enhanced tracking\n      await storage.createCommunication({\n        proposalId: proposal.id, // Link to proposal for tracking\n        customerId: customer.id,\n        type: 'email',\n        direction: 'outbound',\n        subject: `Updated Proposal for ${eventData.eventName} (RESENT)`,\n        message: `✉️ Proposal resent with updated event details\\n\\nEvent: ${eventData.eventName}\\nDate: ${new Date(eventData.eventDate).toLocaleDateString()}\\nTime: ${eventData.startTime} - ${eventData.endTime}\\nGuests: ${eventData.guestCount}\\n\\n💰 Pricing Updates:\\nTotal Amount: $${updatedTotalAmount}${proposal.totalAmount !== updatedTotalAmount ? ` (was $${proposal.totalAmount})` : ''}\\nDeposit Required: $${updatedDepositAmount}${proposal.depositAmount !== updatedDepositAmount ? ` (was $${proposal.depositAmount})` : ''}\\n\\nNote: This is a resent proposal with current event information and updated pricing.`,\n        sentBy: process.env.GMAIL_USER || \"system\",\n        sentAt: new Date(),\n        status: \"sent\"\n      });\n\n      res.json({ \n        success: true, \n        message: \"Proposal regenerated and resent successfully with updated event details\",\n        proposal: updatedProposal\n      });\n    } catch (error) {\n      console.error('Error resending proposal:', error);\n      res.status(500).json({ message: \"Failed to resend proposal: \" + error.message });\n    }\n  });\n\n  // Email tracking endpoint - tracks when customers open proposal emails\n  app.get(\"/api/proposals/:id/track-open\", async (req, res) => {\n    try {\n      const proposal = await storage.getProposal(req.params.id);\n      if (!proposal) {\n        return res.status(404).send(\"Not found\");\n      }\n\n      // Update proposal with open tracking\n      await storage.updateProposal(req.params.id, {\n        emailOpened: true,\n        emailOpenedAt: new Date(),\n        openCount: (proposal.openCount || 0) + 1\n      });\n\n      // Return a 1x1 transparent pixel\n      const pixel = Buffer.from(\n        'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==',\n        'base64'\n      );\n      \n      res.set({\n        'Content-Type': 'image/png',\n        'Content-Length': pixel.length,\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      res.end(pixel);\n    } catch (error) {\n      console.error(\"Error tracking email open:\", error);\n      // Still return the pixel even if tracking fails\n      const pixel = Buffer.from(\n        'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYChwGA60e6kgAAAABJRU5ErkJggg==',\n        'base64'\n      );\n      res.set('Content-Type', 'image/png');\n      res.end(pixel);\n    }\n  });\n\n  // Redirect-based tracking endpoint - tracks when customers click proposal links\n  app.get(\"/api/proposals/:id/track-click\", async (req, res) => {\n    try {\n      const proposalId = req.params.id;\n      const proposal = await storage.getProposal(proposalId);\n      \n      if (!proposal) {\n        return res.status(404).send(\"Proposal not found\");\n      }\n\n      // Update proposal with click tracking (implies email was opened)\n      await storage.updateProposal(proposalId, {\n        emailOpened: true,\n        emailOpenedAt: new Date(),\n        openCount: (proposal.openCount || 0) + 1\n      });\n\n      console.log(`Proposal ${proposalId} clicked - tracking updated`);\n\n      // Get customer data to redirect to the right proposal view\n      const customers = await storage.getCustomers();\n      const customer = customers.find(c => c.id === proposal.customerId);\n      \n      if (customer) {\n        // Redirect to the customer-facing proposal view\n        return res.redirect(`/proposal/${proposalId}`);\n      } else {\n        // Fallback redirect\n        return res.redirect('/');\n      }\n    } catch (error) {\n      console.error(\"Error tracking proposal click:\", error);\n      // Redirect to home page on error\n      return res.redirect('/');\n    }\n  });\n\n  // Track proposal views\n  app.post(\"/api/proposals/:id/track-view\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      const proposal = await storage.getProposal(id);\n      if (!proposal) {\n        return res.status(404).json({ error: \"Proposal not found\" });\n      }\n\n      // Update proposal view tracking\n      await storage.updateProposal(id, {\n        status: proposal.status === 'sent' ? 'viewed' : proposal.status\n      });\n      \n      console.log(`Proposal ${id} view tracked`);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error tracking proposal view:\", error);\n      res.status(500).json({ error: \"Failed to track view\" });\n    }\n  });\n\n  // Public proposal access endpoint - no authentication required\n  app.get(\"/api/proposals/public/:proposalId\", async (req, res) => {\n    try {\n      const proposal = await storage.getProposal(req.params.proposalId);\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      // Check if proposal has expired\n      if (proposal.validUntil && new Date() > new Date(proposal.validUntil)) {\n        return res.status(410).json({ message: \"Proposal has expired\" });\n      }\n\n      // Get customer and venue data for the proposal\n      const customer = await storage.getCustomer(proposal.customerId || '');\n      const venues = await storage.getVenues();\n      const venue = venues.find(v => v.id === proposal.venueId);\n\n      // Auto-track view when accessed\n      await storage.updateProposal(req.params.proposalId, {\n        status: proposal.status === 'sent' ? 'viewed' : proposal.status\n      });\n\n      // Get real event data from linked bookings (support multiple dates)\n      let eventDates = [];\n      try {\n        // Find ALL bookings linked to this proposal (for multi-date events)\n        const bookings = await storage.getBookings();\n        const linkedBookings = bookings.filter(b => b.proposalId === proposal.id);\n        \n        if (linkedBookings.length > 0) {\n          console.log('Found linked booking(s) for proposal:', proposal.id, 'Count:', linkedBookings.length);\n          // Get venue and space information\n          const venues = await storage.getVenues();\n          const spaces = await storage.getSpaces();\n          const packages = await storage.getPackages();\n          const allServices = await storage.getServices();\n          const setupStyles = await storage.getSetupStyles();\n          \n          eventDates = linkedBookings.map(linkedBooking => {\n            const bookingVenue = venues.find(v => v.id === linkedBooking.venueId);\n            const space = spaces.find(s => s.id === linkedBooking.spaceId);\n            \n            // Get detailed package and services information\n            let packageDetails = null;\n            let services = [];\n            let setupStyle = null;\n            \n            if (linkedBooking.packageId) {\n              const packageData = packages.find(p => p.id === linkedBooking.packageId);\n              if (packageData) {\n                packageDetails = {\n                  name: packageData.name,\n                  description: packageData.description,\n                  price: parseFloat(packageData.price || 0),\n                  pricingModel: packageData.pricingModel,\n                  category: packageData.category,\n                  services: packageData.includedServices || []\n                };\n              }\n            }\n            \n            if (linkedBooking.selectedServices && linkedBooking.selectedServices.length > 0) {\n              services = linkedBooking.selectedServices.map(serviceId => {\n                const service = allServices.find(s => s.id === serviceId);\n                return service ? {\n                  name: service.name,\n                  description: service.description,\n                  price: parseFloat(service.price || 0),\n                  pricingModel: service.pricingModel,\n                  category: service.category,\n                  duration: service.duration\n                } : null;\n              }).filter(Boolean);\n            }\n            \n            // Get setup style information\n            if (linkedBooking.setupStyle) {\n              const setupStyleData = setupStyles.find(s => s.id === linkedBooking.setupStyle);\n              if (setupStyleData) {\n                setupStyle = {\n                  name: setupStyleData.name,\n                  description: setupStyleData.description,\n                  category: setupStyleData.category,\n                  capacity: {\n                    min: setupStyleData.minCapacity,\n                    max: setupStyleData.maxCapacity\n                  }\n                };\n              }\n            }\n            \n            return {\n              date: linkedBooking.eventDate ? (typeof linkedBooking.eventDate === 'string' ? linkedBooking.eventDate : new Date(linkedBooking.eventDate).toISOString().split('T')[0]) : new Date().toISOString().split('T')[0],\n              startTime: linkedBooking.startTime || \"TBD\",\n              endTime: linkedBooking.endTime || \"TBD\",\n              venue: {\n                name: bookingVenue?.name || \"Venue Location\",\n                description: bookingVenue?.description || \"\",\n                capacity: bookingVenue?.capacity || 0\n              },\n              space: {\n                name: space?.name || \"Event Space\",\n                description: space?.description || \"\",\n                capacity: space?.capacity || 0\n              },\n              guestCount: linkedBooking.guestCount || 1,\n              packageDetails: packageDetails,\n              services: services,\n              setupStyle: setupStyle,\n              pricingModel: linkedBooking.pricingModel || \"fixed\",\n              totalAmount: parseFloat(linkedBooking.totalAmount || 0),\n              notes: linkedBooking.notes || \"\"\n            };\n          });\n          \n          // Sort event dates chronologically\n          eventDates.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n          \n          console.log('Generated event dates:', eventDates);\n        } else {\n          console.log('No linked booking found for proposal:', proposal.id);\n          // Fallback to proposal data if no linked booking found\n          eventDates = [{\n            date: proposal.eventDate || new Date().toISOString().split('T')[0],\n            startTime: proposal.startTime || \"TBD\",\n            endTime: proposal.endTime || \"TBD\",\n            venue: proposal.venue || \"Venue Location\",\n            space: proposal.space || \"Event Space\",\n            guestCount: proposal.guestCount || 1,\n            packageName: \"Event Package\",\n            services: []\n          }];\n        }\n      } catch (error) {\n        console.error('Error fetching event data for proposal:', error);\n        eventDates = [{\n          date: proposal.eventDate || new Date().toISOString().split('T')[0],\n          startTime: \"TBD\",\n          endTime: \"TBD\",\n          venue: \"Venue Location\",\n          space: \"Event Space\",\n          guestCount: proposal.guestCount || 1,\n          packageName: null,\n          services: []\n        }];\n      }\n\n      // Return proposal data formatted for client viewing\n      res.json({\n        id: proposal.id,\n        title: proposal.title,\n        content: proposal.content,\n        eventType: proposal.eventType,\n        eventDate: proposal.eventDate,\n        startTime: proposal.startTime,\n        endTime: proposal.endTime,\n        guestCount: proposal.guestCount,\n        totalAmount: proposal.totalAmount,\n        depositAmount: proposal.depositAmount,\n        status: proposal.status,\n        validUntil: proposal.validUntil,\n        acceptedAt: proposal.acceptedAt,\n        declinedAt: proposal.declinedAt,\n        customer: customer ? {\n          name: customer.name,\n          email: customer.email\n        } : null,\n        venue: venue ? {\n          name: venue.name,\n          description: venue.description\n        } : null,\n        eventDates: eventDates,\n        companyInfo: {\n          name: \"Venuine Events\",\n          address: \"123 Celebration Drive, Event City, EC 12345\",\n          phone: \"(555) 123-4567\",\n          email: \"hello@venuine-events.com\"\n        }\n      });\n    } catch (error: any) {\n      console.error('Error fetching proposal for viewing:', error);\n      res.status(500).json({ message: \"Failed to fetch proposal\" });\n    }\n  });\n\n  app.post(\"/api/proposals\", async (req, res) => {\n    try {\n      const validatedData = insertProposalSchema.parse(req.body);\n      const proposal = await storage.createProposal(validatedData);\n      res.status(201).json(proposal);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/proposals/:id\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // First verify the proposal belongs to this tenant\n      const existingProposal = await storage.getProposal(req.params.id);\n      if (!existingProposal || existingProposal.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n      \n      const { id } = req.params;\n      const updateData = req.body;\n      const proposal = await storage.updateProposal(id, updateData);\n      res.json(proposal);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/proposals/send\", async (req, res) => {\n    try {\n      const validatedData = insertProposalSchema.parse(req.body);\n      const proposal = await storage.createProposal({\n        ...validatedData,\n        status: \"sent\",\n        sentAt: new Date()\n      });\n\n      // Send email to customer via Gmail\n      try {\n        const customer = await storage.getCustomer(proposal.customerId);\n        if (customer?.email && proposal.content) {\n          if (gmailService.isConfigured()) {\n            await gmailService.sendProposal({\n              to: customer.email,\n              customerName: customer.name,\n              proposalContent: proposal.content,\n              totalAmount: proposal.totalAmount || \"0\",\n              validUntil: proposal.validUntil?.toISOString(),\n              companyName: 'Venuine Events',\n              proposalId: proposal.id,\n              baseUrl: `${req.protocol}://${req.get('host')}`\n            });\n            console.log(`✅ Proposal email sent via Gmail to ${customer.email}`);\n          } else {\n            console.log(`❌ Gmail not configured - proposal email not sent to ${customer.email}`);\n          }\n        }\n      } catch (emailError) {\n        console.error(\"Failed to send proposal email via Gmail:\", emailError);\n      }\n\n      res.status(201).json(proposal);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // New email sending route for proposals\n  app.post(\"/api/proposals/send-email\", async (req, res) => {\n    try {\n      const { proposalId, customerId, emailData, eventData } = req.body;\n      \n      if (!proposalId || !customerId || !emailData) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      // Get customer information\n      const customer = await storage.getCustomer(customerId);\n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n\n      // Get proposal information\n      const proposal = await storage.getProposal(proposalId);\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      // Send email via Super Admin Email Configuration\n      try {\n        const emailSent = await sendCustomerCommunicationEmail({\n          to: emailData.to,\n          subject: emailData.subject,\n          html: emailData.message || `\n            <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n              <h2>Event Proposal</h2>\n              <p>Please view your complete proposal at: ${emailData.proposalViewLink}</p>\n              <p>Best regards,<br>Venuine Events Team</p>\n            </div>\n          `,\n          text: `Event Proposal\\n\\nPlease view your complete proposal at: ${emailData.proposalViewLink}\\n\\nBest regards,\\nVenuine Events Team`\n        });\n\n        if (!emailSent) {\n          return res.status(500).json({ \n            message: \"Failed to send email. Please check super admin email configuration.\" \n          });\n        }\n\n        // Log communication in database with proposal tracking\n        const communicationData = {\n          customerId: customerId,\n          type: \"proposal\",\n          direction: \"outbound\",\n          subject: emailData.subject,\n          message: emailData.message || `Proposal email sent to ${emailData.to}. View link: ${emailData.proposalViewLink}`,\n          sentBy: \"system\",\n          status: \"sent\"\n        };\n\n        await storage.createCommunication(communicationData);\n\n        // Update proposal status to sent\n        await storage.updateProposal(proposalId, {\n          status: \"sent\",\n          sentAt: new Date()\n        });\n\n        // Create tentative booking if event data is provided\n        if (eventData && eventData.eventName && eventData.eventType && eventData.eventDate && \n            eventData.startTime && eventData.endTime && eventData.guestCount) {\n          try {\n            console.log('Creating tentative booking with event data:', eventData);\n            \n            // Ensure eventDate is a proper Date object\n            const eventDate = eventData.eventDate instanceof Date \n              ? eventData.eventDate \n              : new Date(eventData.eventDate);\n            \n            // Create tentative booking for the proposal\n            const tentativeBookingData = {\n              eventName: eventData.eventName,\n              eventType: eventData.eventType,\n              eventDate: eventDate,\n              startTime: eventData.startTime,\n              endTime: eventData.endTime,\n              guestCount: parseInt(eventData.guestCount) || 50,\n              customerId: customerId,\n              status: 'inquiry', // Start with inquiry status for proposals\n              venueId: eventData.venueId || null,\n              spaceId: eventData.spaceId || null,\n              totalAmount: eventData.totalAmount || '0',\n              notes: `Tentative booking created from proposal ${proposalId}`,\n              proposalStatus: 'sent',\n              proposalSentAt: new Date(),\n              packageId: eventData.packageId || null,\n              selectedServices: eventData.selectedServices || []\n            };\n\n            console.log('Tentative booking data:', tentativeBookingData);\n            \n            const createdBooking = await storage.createBooking(tentativeBookingData);\n            console.log(`✅ Tentative booking created for proposal ${proposalId}:`, createdBooking.id);\n            \n          } catch (bookingError) {\n            console.error('Failed to create tentative booking:', bookingError);\n            // Don't fail the email sending if booking creation fails\n          }\n        } else {\n          console.log('Event data incomplete, skipping tentative booking creation:', eventData);\n        }\n\n        res.json({\n          success: true,\n          messageId: `gmail-${Date.now()}`,\n          communicationLogged: true\n        });\n\n      } catch (emailError) {\n        console.error(\"Email sending failed:\", emailError);\n        \n        // Log failed communication\n        const communicationData = {\n          customerId: customerId,\n          type: \"email\",\n          direction: \"outbound\",\n          subject: emailData.subject,\n          message: `Failed to send proposal email: ${emailError instanceof Error ? emailError.message : 'Unknown error'}`,\n          sentBy: \"system\",\n          status: \"failed\"\n        };\n\n        await storage.createCommunication(communicationData);\n\n        res.status(500).json({\n          success: false,\n          message: \"Failed to send email\",\n          error: emailError instanceof Error ? emailError.message : 'Unknown error'\n        });\n      }\n\n    } catch (error) {\n      console.error(\"Proposal email sending error:\", error);\n      res.status(500).json({ message: \"Failed to process email request\" });\n    }\n  });\n\n  app.post(\"/api/proposals/:id/communications\", upload.array('attachments', 5), async (req, res) => {\n    try {\n      console.log('Received communication data:', req.body);\n      console.log('Received files:', req.files ? (req.files as Express.Multer.File[]).length : 0);\n      \n      // Validate and prepare communication data\n      const communicationData = {\n        proposalId: req.params.id,\n        customerId: req.body.customerId,\n        type: req.body.type || \"email\",\n        direction: req.body.direction || \"outbound\",\n        subject: req.body.subject || null,\n        message: req.body.content || req.body.message || \"\",\n        sentBy: req.body.sentBy || \"user\",\n        status: \"sent\"\n      };\n\n      console.log('Processed communication data:', communicationData);\n\n      // Validate with schema\n      const validatedData = insertCommunicationSchema.parse(communicationData);\n      const communication = await storage.createCommunication(validatedData);\n\n      // If it's an email, attempt to send it\n      if (validatedData.type === \"email\" && validatedData.direction === \"outbound\") {\n        try {\n          console.log(`Attempting to send email for proposal ${req.params.id}:`, validatedData.subject);\n          \n          // Get proposal and customer info\n          const proposal = await storage.getProposal(req.params.id);\n          const customer = await storage.getCustomer(validatedData.customerId);\n          \n          console.log('Proposal lookup result:', proposal ? 'Found' : 'Not found');\n          console.log('Customer lookup result:', customer ? 'Found' : 'Not found');\n          \n          if (!proposal || !customer) {\n            throw new Error(`Proposal or customer not found - Proposal: ${proposal ? 'Found' : 'Not found'}, Customer: ${customer ? 'Found' : 'Not found'}`);\n          }\n\n          // Process attachments if any\n          const attachments = req.files ? (req.files as Express.Multer.File[]).map(file => ({\n            filename: file.originalname,\n            content: file.buffer,\n            contentType: file.mimetype\n          })) : [];\n\n          // Send email using Super Admin Email Configuration\n          const emailSent = await sendCustomerCommunicationEmail({\n            to: customer.email,\n            subject: validatedData.subject || \"Follow-up on your event proposal\",\n            html: validatedData.message,\n            text: validatedData.message?.replace(/<[^>]*>/g, '') || '' // Strip HTML for text version\n          });\n\n          if (emailSent) {\n            // Update communication status to sent\n            await storage.updateCommunication(communication.id, { status: \"sent\" });\n            console.log(`✅ Email successfully sent for proposal ${req.params.id}`);\n          } else {\n            // Update communication status to failed\n            await storage.updateCommunication(communication.id, { status: \"failed\" });\n            console.log(`❌ Email failed to send for proposal ${req.params.id}`);\n          }\n        } catch (emailError) {\n          console.error(\"Email sending failed:\", emailError);\n          // Update communication status to failed\n          await storage.updateCommunication(communication.id, { \n            status: \"failed\",\n            message: `${validatedData.message} [EMAIL SEND FAILED: ${emailError instanceof Error ? emailError.message : 'Unknown error'}]`\n          });\n        }\n      }\n\n      res.status(201).json(communication);\n    } catch (error: any) {\n      console.error(\"Communication creation error:\", error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/proposals/:id/communications\", async (req, res) => {\n    try {\n      const communications = await storage.getCommunicationsByProposal(req.params.id);\n      res.json(communications);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch communications\" });\n    }\n  });\n\n  // Manual endpoint to record customer email replies\n  app.post(\"/api/proposals/:id/communications/reply\", async (req, res) => {\n    try {\n      console.log('Recording customer reply for proposal:', req.params.id);\n      console.log('Reply data:', req.body);\n\n      const { subject, message, customerEmail, receivedAt } = req.body;\n      \n      // Get the proposal to find the customer\n      const proposal = await storage.getProposal(req.params.id);\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      // Create inbound communication record\n      const communicationData = {\n        proposalId: req.params.id,\n        customerId: proposal.customerId,\n        type: \"email\" as const,\n        direction: \"inbound\" as const,\n        subject: subject || \"Re: Your Proposal\",\n        message: message || \"\",\n        sentBy: customerEmail || \"customer\",\n        status: \"received\" as const,\n        sentAt: new Date(receivedAt || Date.now()),\n      };\n\n      const communication = await storage.createCommunication(communicationData);\n      console.log('Customer reply recorded:', communication.id);\n      \n      res.status(201).json(communication);\n    } catch (error) {\n      console.error(\"Error recording customer reply:\", error);\n      res.status(500).json({ message: \"Failed to record customer reply\" });\n    }\n  });\n\n  app.post(\"/api/proposals/:id/process-deposit\", async (req, res) => {\n    try {\n      const proposal = await storage.getProposal(req.params.id);\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      // Update proposal to mark deposit as paid\n      const updatedProposal = await storage.updateProposal(req.params.id, {\n        depositPaid: true,\n        depositPaidAt: new Date(),\n        status: \"converted\"\n      });\n\n      // Create payment record\n      const payment = await storage.createPayment({\n        amount: proposal.depositAmount,\n        paymentType: \"deposit\",\n        paymentMethod: \"card\",\n        status: \"completed\",\n        processedAt: new Date()\n      });\n\n      res.json({ proposal: updatedProposal, payment });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/proposals/:id/mark-opened\", async (req, res) => {\n    try {\n      const proposal = await storage.updateProposal(req.params.id, {\n        emailOpened: true,\n        emailOpenedAt: new Date(),\n        status: \"viewed\"\n      });\n      res.json(proposal);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Removed conflicting endpoint - using public proposal access instead\n\n  // Accept proposal endpoint\n  app.post(\"/api/proposals/:id/accept\", async (req, res) => {\n    try {\n      const { signature } = req.body;\n      \n      if (!signature || !signature.trim()) {\n        return res.status(400).json({ message: \"Digital signature is required\" });\n      }\n\n      const proposal = await storage.updateProposal(req.params.id, {\n        status: \"accepted\",\n        acceptedAt: new Date(),\n        signature: signature.trim()\n      });\n\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      res.json({ \n        success: true, \n        message: \"Proposal accepted successfully\",\n        proposal \n      });\n    } catch (error: any) {\n      console.error('Error accepting proposal:', error);\n      res.status(500).json({ message: \"Failed to accept proposal\" });\n    }\n  });\n\n  // Decline proposal endpoint\n  app.post(\"/api/proposals/:id/decline\", async (req, res) => {\n    try {\n      const proposal = await storage.updateProposal(req.params.id, {\n        status: \"declined\",\n        declinedAt: new Date()\n      });\n\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      res.json({ \n        success: true, \n        message: \"Proposal declined\",\n        proposal \n      });\n    } catch (error: any) {\n      console.error('Error declining proposal:', error);\n      res.status(500).json({ message: \"Failed to decline proposal\" });\n    }\n  });\n\n  // Payment notification endpoint for proposals\n  app.post(\"/api/proposals/:id/payment-completed\", async (req, res) => {\n    try {\n      const { paymentAmount, paymentType, paymentMethod, transactionId } = req.body;\n      \n      const proposal = await storage.getProposal(req.params.id);\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      // Update proposal with payment information\n      const updatedProposal = await storage.updateProposal(req.params.id, {\n        depositPaid: true,\n        depositPaidAt: new Date(),\n        status: \"converted\"\n      });\n\n      // Create payment record\n      const payment = await storage.createPayment({\n        amount: paymentAmount.toString(),\n        paymentType: paymentType || \"deposit\",\n        paymentMethod: paymentMethod || \"card\",\n        status: \"completed\",\n        processedAt: new Date(),\n        transactionId: transactionId\n      });\n\n      // Create communication record for payment notification\n      if (proposal.customerId) {\n        await storage.createCommunication({\n          customerId: proposal.customerId,\n          type: \"system\",\n          direction: \"inbound\",\n          subject: \"Payment Received\",\n          message: `Payment of $${paymentAmount} received for proposal \"${proposal.title}\". Payment method: ${paymentMethod}. Transaction ID: ${transactionId}`,\n          sentBy: \"system\",\n          status: \"completed\"\n        });\n      }\n\n      res.json({ \n        success: true, \n        message: \"Payment processed successfully\",\n        proposal: updatedProposal,\n        payment \n      });\n    } catch (error: any) {\n      console.error('Error processing payment:', error);\n      res.status(500).json({ message: \"Failed to process payment\" });\n    }\n  });\n\n  // Create payment intent for proposals (placeholder - requires Stripe secret key)\n  app.post(\"/api/proposals/:id/create-payment-intent\", async (req, res) => {\n    try {\n      const proposal = await storage.getProposal(req.params.id);\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      // This would integrate with Stripe when keys are provided\n      // For now, return a mock client secret for development\n      const clientSecret = `pi_mock_${Date.now()}_secret_mock`;\n      \n      res.json({ \n        clientSecret,\n        amount: Number(proposal.totalAmount) || 0\n      });\n    } catch (error: any) {\n      console.error('Error creating payment intent:', error);\n      res.status(500).json({ message: \"Failed to create payment intent\" });\n    }\n  });\n\n  app.put(\"/api/proposals/:id\", async (req, res) => {\n    try {\n      const proposal = await storage.updateProposal(req.params.id, req.body);\n      res.json(proposal);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/proposals/:id\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // First verify the proposal belongs to this tenant\n      const existingProposal = await storage.getProposal(req.params.id);\n      if (!existingProposal || existingProposal.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n      \n      await storage.deleteProposal(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete proposal\" });\n    }\n  });\n\n  // Communications API\n  app.get(\"/api/communications/:bookingId\", async (req, res) => {\n    try {\n      const bookingId = req.params.bookingId;\n      const communications = await storage.getCommunications(bookingId);\n      \n      // Get booking to find customer\n      const booking = await storage.getBooking(bookingId);\n      if (!booking) {\n        return res.json(communications);\n      }\n\n      // Enhance proposal communications with status information\n      const enhancedCommunications = await Promise.all(\n        communications.map(async (comm: any) => {\n          if (comm.type === 'proposal' && booking.customerId) {\n            // Find related proposal for this customer\n            const proposals = await storage.getProposals();\n            const customerProposal = proposals.find(p => \n              p.customerId === booking.customerId && \n              p.status !== 'declined'\n            );\n            \n            if (customerProposal) {\n              return {\n                ...comm,\n                proposalViewed: customerProposal.emailOpened || customerProposal.status === 'viewed',\n                proposalStatus: customerProposal.status,\n                depositPaid: customerProposal.depositPaid,\n                signature: customerProposal.signature ? '✓ Signed' : null\n              };\n            }\n          }\n          return comm;\n        })\n      );\n\n      res.json(enhancedCommunications);\n    } catch (error) {\n      console.error('Communications fetch error:', error);\n      res.status(500).json({ message: \"Failed to fetch communications\" });\n    }\n  });\n\n  app.post(\"/api/communications\", async (req, res) => {\n    try {\n      const validatedCommunication = insertCommunicationSchema.parse(req.body);\n      const communication = await storage.createCommunication(validatedCommunication);\n      res.json(communication);\n    } catch (error) {\n      console.error('Communication creation error:', error);\n      res.status(400).json({ message: \"Invalid communication data\" });\n    }\n  });\n\n  // Settings API endpoints\n  app.get(\"/api/settings/:key?\", async (req, res) => {\n    try {\n      if (req.params.key) {\n        const setting = await storage.getSetting(req.params.key);\n        res.json(setting);\n      } else {\n        const settings = await storage.getSettings();\n        \n        // Convert settings array to nested object structure for frontend\n        const reconstructObject = (flatSettings: any[]) => {\n          const result: any = {};\n          \n          for (const setting of flatSettings) {\n            const keys = setting.key.split('.');\n            let current = result;\n            \n            for (let i = 0; i < keys.length - 1; i++) {\n              if (!current[keys[i]]) {\n                current[keys[i]] = {};\n              }\n              current = current[keys[i]];\n            }\n            \n            current[keys[keys.length - 1]] = setting.value;\n          }\n          \n          return result;\n        };\n        \n        const structuredSettings = reconstructObject(settings);\n        res.json(structuredSettings);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.post(\"/api/settings\", async (req, res) => {\n    try {\n      const validatedData = insertSettingsSchema.parse(req.body);\n      const setting = await storage.createSetting(validatedData);\n      res.status(201).json(setting);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/settings/:key\", async (req, res) => {\n    try {\n      const setting = await storage.updateSetting(req.params.key, req.body.value);\n      res.json(setting);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Deposits Settings - Specific endpoint for managing deposit configurations\n  app.put(\"/api/settings/deposits\", async (req, res) => {\n    try {\n      const depositsData = req.body;\n      \n      // Store each deposit setting with a structured key\n      const promises = [\n        storage.updateSetting(\"deposits.defaultDepositPercentage\", depositsData.defaultDepositPercentage),\n        storage.updateSetting(\"deposits.requireDepositForBooking\", depositsData.requireDepositForBooking),\n        storage.updateSetting(\"deposits.allowDepositAmendment\", depositsData.allowDepositAmendment),\n        storage.updateSetting(\"deposits.depositDueDays\", depositsData.depositDueDays),\n        storage.updateSetting(\"deposits.depositDescription\", depositsData.depositDescription),\n        storage.updateSetting(\"deposits.refundPolicy\", depositsData.refundPolicy)\n      ];\n      \n      await Promise.all(promises);\n      res.json({ message: \"Deposits settings saved successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Batch update endpoint for settings\n  app.put(\"/api/settings\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const results = [];\n      \n      // Flatten the nested object into key-value pairs\n      const flattenObject = (obj: any, prefix = ''): Array<{key: string, value: any}> => {\n        const result: Array<{key: string, value: any}> = [];\n        \n        for (const [key, value] of Object.entries(obj)) {\n          const fullKey = prefix ? `${prefix}.${key}` : key;\n          \n          if (value && typeof value === 'object' && !Array.isArray(value)) {\n            result.push(...flattenObject(value, fullKey));\n          } else {\n            result.push({ key: fullKey, value });\n          }\n        }\n        \n        return result;\n      };\n      \n      const settingsUpdates = flattenObject(updates);\n      \n      // Update each setting\n      for (const update of settingsUpdates) {\n        const setting = await storage.updateSetting(update.key, update.value);\n        results.push(setting);\n      }\n      \n      res.json({ message: \"Settings updated successfully\", count: results.length });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Lead Management Routes\n  \n  // Campaign Sources\n  app.get(\"/api/campaign-sources\", async (req, res) => {\n    try {\n      const sources = await storage.getCampaignSources();\n      res.json(sources);\n    } catch (error) {\n      console.error(\"Error fetching campaign sources:\", error);\n      res.status(500).json({ message: \"Failed to fetch campaign sources\" });\n    }\n  });\n\n  app.post(\"/api/campaign-sources\", async (req, res) => {\n    try {\n      const validatedData = insertCampaignSourceSchema.parse(req.body);\n      const source = await storage.createCampaignSource(validatedData);\n      res.status(201).json(source);\n    } catch (error) {\n      console.error(\"Error creating campaign source:\", error);\n      res.status(500).json({ message: \"Failed to create campaign source\" });\n    }\n  });\n\n  // Tags\n  app.get(\"/api/tags\", async (req, res) => {\n    try {\n      const tags = await storage.getTags();\n      res.json(tags);\n    } catch (error) {\n      console.error(\"Error fetching tags:\", error);\n      res.status(500).json({ message: \"Failed to fetch tags\" });\n    }\n  });\n\n  app.post(\"/api/tags\", async (req, res) => {\n    try {\n      const validatedData = insertTagSchema.parse(req.body);\n      const tag = await storage.createTag(validatedData);\n      res.status(201).json(tag);\n    } catch (error) {\n      console.error(\"Error creating tag:\", error);\n      res.status(500).json({ message: \"Failed to create tag\" });\n    }\n  });\n\n  app.delete(\"/api/tags/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteTag(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Tag not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting tag:\", error);\n      res.status(500).json({ message: \"Failed to delete tag\" });\n    }\n  });\n\n  // Leads\n  app.get(\"/api/leads\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const { status, source, q } = req.query;\n      const filters = {\n        status: status as string,\n        source: source as string,\n        q: q as string\n      };\n      const allLeads = await storage.getLeads(filters);\n      \n      // CRITICAL: Filter leads by tenant\n      // Since leads might not have direct tenant linkage, we need to filter by venue\n      const venues = await storage.getVenues();\n      const tenantVenues = venues.filter(v => v.tenantId === tenantId);\n      const tenantVenueIds = tenantVenues.map(v => v.id);\n      \n      const leads = allLeads.filter(lead => \n        !lead.venueId || tenantVenueIds.includes(lead.venueId)\n      );\n      \n      res.json(leads);\n    } catch (error) {\n      console.error(\"Error fetching leads:\", error);\n      res.status(500).json({ message: \"Failed to fetch leads\" });\n    }\n  });\n\n  app.get(\"/api/leads/:id\", async (req, res) => {\n    try {\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const { id } = req.params;\n      const lead = await storage.getLead(id);\n      \n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n      \n      // CRITICAL: Verify lead belongs to this tenant\n      if (lead.venueId) {\n        const venue = await storage.getVenue(lead.venueId);\n        if (!venue || venue.tenantId !== tenantId) {\n          return res.status(404).json({ message: \"Lead not found\" });\n        }\n      }\n\n      // Get additional lead data\n      const activities = await storage.getLeadActivities(id);\n      const tags = await storage.getLeadTags(id);\n      const tasks = await storage.getLeadTasks();\n      const leadTasks = tasks.filter(task => task.leadId === id);\n\n      res.json({\n        ...lead,\n        activities,\n        tags,\n        tasks: leadTasks\n      });\n    } catch (error) {\n      console.error(\"Error fetching lead:\", error);\n      res.status(500).json({ message: \"Failed to fetch lead\" });\n    }\n  });\n\n  app.post(\"/api/leads\", async (req, res) => {\n    try {\n      const validatedData = insertLeadSchema.parse(req.body);\n      const lead = await storage.createLead(validatedData);\n\n      // Log initial activity\n      await storage.createLeadActivity({\n        leadId: lead.id,\n        type: \"NOTE\",\n        body: \"Lead submitted through quote form\",\n        meta: { \n          source: validatedData.utmSource || \"direct\",\n          medium: validatedData.utmMedium || \"website\"\n        }\n      });\n\n      // Create initial follow-up task\n      await storage.createLeadTask({\n        leadId: lead.id,\n        title: \"Contact new lead\",\n        description: `Follow up with ${lead.firstName} ${lead.lastName} about their ${lead.eventType} event`,\n        dueAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours from now\n        status: \"OPEN\"\n      });\n\n      res.status(201).json(lead);\n    } catch (error) {\n      console.error(\"Error creating lead:\", error);\n      res.status(500).json({ message: \"Failed to create lead\" });\n    }\n  });\n\n  app.patch(\"/api/leads/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      \n      const originalLead = await storage.getLead(id);\n      if (!originalLead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n\n      const updatedLead = await storage.updateLead(id, updateData);\n      \n      // Log status change if status was updated\n      if (updateData.status && updateData.status !== originalLead.status) {\n        await storage.createLeadActivity({\n          leadId: id,\n          type: \"STATUS_CHANGE\",\n          body: `Status changed from ${originalLead.status} to ${updateData.status}`,\n          meta: { \n            oldStatus: originalLead.status,\n            newStatus: updateData.status\n          }\n        });\n      }\n\n      res.json(updatedLead);\n    } catch (error) {\n      console.error(\"Error updating lead:\", error);\n      res.status(500).json({ message: \"Failed to update lead\" });\n    }\n  });\n\n  app.post(\"/api/leads/:id/convert\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const lead = await storage.getLead(id);\n      \n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n\n      // Create customer from lead data\n      // CRITICAL: Must get tenant context for customer creation\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required for customer creation\" });\n      }\n      \n      const customerData = {\n        name: `${lead.firstName} ${lead.lastName}`,\n        email: lead.email,\n        phone: lead.phone || \"\",\n        notes: lead.notes || \"\",\n        eventType: lead.eventType,\n        status: \"ACTIVE\",\n        source: \"Lead Conversion\",\n        tenantId\n      };\n\n      const customer = await storage.createCustomer(customerData);\n\n      // Update lead status to converted\n      await storage.updateLead(id, { status: \"WON\" });\n\n      // Log the conversion activity\n      await storage.createLeadActivity({\n        leadId: id,\n        type: \"CONVERTED\",\n        body: `Lead converted to customer: ${customer.name}`,\n        meta: { \n          customerId: customer.id,\n          customerName: customer.name\n        }\n      });\n\n      res.json({ customer, message: \"Lead converted to customer successfully\" });\n    } catch (error) {\n      console.error(\"Error converting lead:\", error);\n      res.status(500).json({ message: \"Failed to convert lead\" });\n    }\n  });\n\n  app.post(\"/api/leads/:id/send-proposal\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const lead = await storage.getLead(id);\n      \n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n\n      // First, check if lead has a customer, if not create one\n      // CRITICAL: Must check customer within tenant scope\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required for customer operations\" });\n      }\n      \n      let customer;\n      const existingCustomer = await storage.getCustomerByEmail(lead.email, tenantId);\n      \n      if (existingCustomer) {\n        customer = existingCustomer;\n      } else {\n        // Create customer from lead data\n        \n        const customerData = {\n          name: `${lead.firstName} ${lead.lastName}`,\n          email: lead.email,\n          phone: lead.phone || \"\",\n          notes: lead.notes || \"\",\n          eventType: lead.eventType,\n          status: \"ACTIVE\",\n          source: \"Lead Proposal\",\n          tenantId\n        };\n        customer = await storage.createCustomer(customerData);\n      }\n\n      // Generate proposal content based on lead information\n      const proposalContent = `\n# Event Proposal for ${lead.firstName} ${lead.lastName}\n\n## Event Details\n- **Event Type**: ${lead.eventType}\n- **Expected Guests**: ${lead.guestCount || 'TBD'}\n- **Preferred Date**: ${lead.dateStart ? new Date(lead.dateStart).toLocaleDateString() : 'TBD'}\n- **Budget Range**: ${lead.budgetMin || lead.budgetMax ? \n  `$${lead.budgetMin || 0} - $${lead.budgetMax || 'Open'}` : 'To be discussed'}\n\n## Venue Recommendation\nWe have reviewed your requirements and believe our venue would be perfect for your ${lead.eventType} event.\n\n## Services Included\n- Event coordination\n- Setup and breakdown\n- Basic lighting and sound\n- Tables and seating\n\n## Next Steps\nPlease review this proposal and let us know if you have any questions. We'd be happy to schedule a venue tour at your convenience.\n\n${lead.notes ? `\\n## Additional Notes\\n${lead.notes}` : ''}\n      `;\n\n      // Create and send proposal\n      const proposalData = {\n        title: `${lead.eventType} Event Proposal`,\n        content: proposalContent.trim(),\n        customerId: customer.id,\n        status: \"sent\",\n        totalAmount: lead.budgetMax || 5000, // Default estimate if no budget provided\n        depositAmount: (lead.budgetMax || 5000) * 0.3, // 30% deposit\n        sentAt: new Date(),\n        validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // Valid for 30 days\n      };\n\n      const proposal = await storage.createProposal(proposalData);\n\n      // Update lead status to proposal sent and link the proposal\n      await storage.updateLead(id, { \n        status: \"PROPOSAL_SENT\",\n        proposalId: proposal.id \n      });\n\n      // Log the proposal sent activity\n      await storage.createLeadActivity({\n        leadId: id,\n        type: \"PROPOSAL_SENT\",\n        body: `Proposal sent: ${proposal.title}`,\n        meta: { \n          proposalId: proposal.id,\n          customerId: customer.id,\n          proposalTitle: proposal.title\n        }\n      });\n\n      res.json({ proposal, customer, message: \"Proposal sent successfully\" });\n    } catch (error) {\n      console.error(\"Error sending proposal:\", error);\n      res.status(500).json({ message: \"Failed to send proposal\" });\n    }\n  });\n\n  // Lead Activities\n  app.post(\"/api/leads/:id/activities\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertLeadActivitySchema.parse({\n        ...req.body,\n        leadId: id\n      });\n      \n      const activity = await storage.createLeadActivity(validatedData);\n      res.status(201).json(activity);\n    } catch (error) {\n      console.error(\"Error creating lead activity:\", error);\n      res.status(500).json({ message: \"Failed to create lead activity\" });\n    }\n  });\n\n  // Lead Tags\n  app.post(\"/api/leads/:id/tags\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { tagId } = req.body;\n      \n      await storage.addLeadTag(id, tagId);\n      res.status(201).json({ message: \"Tag added to lead\" });\n    } catch (error) {\n      console.error(\"Error adding tag to lead:\", error);\n      res.status(500).json({ message: \"Failed to add tag to lead\" });\n    }\n  });\n\n  app.delete(\"/api/leads/:id/tags/:tagId\", async (req, res) => {\n    try {\n      const { id, tagId } = req.params;\n      \n      await storage.removeLeadTag(id, tagId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error removing tag from lead:\", error);\n      res.status(500).json({ message: \"Failed to remove tag from lead\" });\n    }\n  });\n\n  // Lead Tasks\n  app.get(\"/api/lead-tasks\", async (req, res) => {\n    try {\n      const { assignee, due } = req.query;\n      const filters = {\n        assignee: assignee as string,\n        due: due as string\n      };\n      const tasks = await storage.getLeadTasks(filters);\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error fetching lead tasks:\", error);\n      res.status(500).json({ message: \"Failed to fetch lead tasks\" });\n    }\n  });\n\n  app.post(\"/api/lead-tasks\", async (req, res) => {\n    try {\n      const validatedData = insertLeadTaskSchema.parse(req.body);\n      const task = await storage.createLeadTask(validatedData);\n      res.status(201).json(task);\n    } catch (error) {\n      console.error(\"Error creating lead task:\", error);\n      res.status(500).json({ message: \"Failed to create lead task\" });\n    }\n  });\n\n  app.patch(\"/api/lead-tasks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      const updatedTask = await storage.updateLeadTask(id, updateData);\n      \n      if (!updatedTask) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n      \n      res.json(updatedTask);\n    } catch (error) {\n      console.error(\"Error updating lead task:\", error);\n      res.status(500).json({ message: \"Failed to update lead task\" });\n    }\n  });\n\n  // Tours\n  app.get(\"/api/tours\", async (req, res) => {\n    try {\n      const tours = await storage.getTours();\n      res.json(tours);\n    } catch (error) {\n      console.error(\"Error fetching tours:\", error);\n      res.status(500).json({ message: \"Failed to fetch tours\" });\n    }\n  });\n\n  app.post(\"/api/tours\", async (req, res) => {\n    try {\n      const validatedData = insertTourSchema.parse(req.body);\n      const tour = await storage.createTour(validatedData);\n\n      // Update lead status to TOUR_SCHEDULED\n      if (tour.leadId) {\n        await storage.updateLead(tour.leadId, { status: \"TOUR_SCHEDULED\" });\n        \n        // Log activity\n        await storage.createLeadActivity({\n          leadId: tour.leadId,\n          type: \"TOUR_SCHEDULED\",\n          body: `Venue tour scheduled for ${tour.scheduledAt.toLocaleString()}`,\n          meta: { \n            tourId: tour.id,\n            venueId: tour.venueId,\n            duration: tour.duration\n          }\n        });\n      }\n\n      res.status(201).json(tour);\n    } catch (error) {\n      console.error(\"Error creating tour:\", error);\n      res.status(500).json({ message: \"Failed to create tour\" });\n    }\n  });\n\n  app.patch(\"/api/tours/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      const updatedTour = await storage.updateTour(id, updateData);\n      \n      if (!updatedTour) {\n        return res.status(404).json({ message: \"Tour not found\" });\n      }\n      \n      res.json(updatedTour);\n    } catch (error) {\n      console.error(\"Error updating tour:\", error);\n      res.status(500).json({ message: \"Failed to update tour\" });\n    }\n  });\n\n  // Convert Lead to Customer\n  app.post(\"/api/leads/:id/convert\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const lead = await storage.getLead(id);\n      \n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n\n      // Create customer from lead data\n      // CRITICAL: Must get tenant context for customer creation\n      const tenantId = getTenantIdFromAuth(req);\n      if (!tenantId) {\n        return res.status(401).json({ message: \"Authentication required for customer creation\" });\n      }\n      \n      const customer = await storage.createCustomer({\n        name: `${lead.firstName} ${lead.lastName}`,\n        email: lead.email,\n        phone: lead.phone || \"\",\n        company: \"\", // Could be added to lead model if needed\n        notes: lead.notes || \"\",\n        tenantId\n      });\n\n      // Update lead with converted customer ID and status\n      await storage.updateLead(id, {\n        convertedCustomerId: customer.id,\n        status: \"WON\"\n      });\n\n      // Log conversion activity\n      await storage.createLeadActivity({\n        leadId: id,\n        type: \"STATUS_CHANGE\",\n        body: `Lead converted to customer: ${customer.name}`,\n        meta: { \n          customerId: customer.id,\n          conversionDate: new Date().toISOString()\n        }\n      });\n\n      res.json({\n        customer,\n        lead: await storage.getLead(id)\n      });\n    } catch (error) {\n      console.error(\"Error converting lead to customer:\", error);\n      res.status(500).json({ message: \"Failed to convert lead to customer\" });\n    }\n  });\n\n  // Notification System Endpoints\n  // Test notification settings\n  app.post(\"/api/notifications/test\", async (req, res) => {\n    try {\n      const { type, customerId } = req.body;\n      \n      if (!customerId) {\n        return res.status(400).json({ message: \"Customer ID required\" });\n      }\n\n      const customer = await storage.getCustomer(customerId);\n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n\n      if (!customer.email) {\n        return res.status(400).json({ message: \"Customer email not found\" });\n      }\n\n      // Get notification preferences from settings\n      const settings = await storage.getSettings();\n      const notificationPrefs = {\n        emailNotifications: settings.notifications?.emailNotifications ?? true,\n        pushNotifications: settings.notifications?.pushNotifications ?? false,\n        bookingConfirmations: settings.notifications?.bookingConfirmations ?? true,\n        paymentReminders: settings.notifications?.paymentReminders ?? true,\n        maintenanceAlerts: settings.notifications?.maintenanceAlerts ?? true\n      };\n\n      if (!notificationPrefs.emailNotifications) {\n        return res.status(400).json({ \n          message: \"Email notifications are disabled in settings\",\n          settings: notificationPrefs\n        });\n      }\n\n      const notificationService = new NotificationService(gmailService, notificationPrefs);\n\n      switch (type) {\n        case 'booking':\n          if (!notificationPrefs.bookingConfirmations) {\n            return res.status(400).json({ message: \"Booking confirmations are disabled\" });\n          }\n          \n          // Create a test booking for notification\n          const testBooking = {\n            id: 'test-booking',\n            eventName: 'Test Event Booking',\n            eventType: 'corporate',\n            eventDate: new Date(),\n            startTime: '18:00',\n            endTime: '23:00',\n            guestCount: 50,\n            venueId: 'test-venue',\n            customerId: customer.id,\n            status: 'confirmed',\n            totalAmount: '2500.00',\n            createdAt: new Date()\n          } as any;\n\n          const bookingResult = await notificationService.sendBookingConfirmation(testBooking, customer);\n          res.json({ \n            success: bookingResult, \n            message: bookingResult ? 'Test booking confirmation sent' : 'Failed to send booking confirmation',\n            type: 'booking',\n            customer: { name: customer.name, email: customer.email }\n          });\n          break;\n\n        case 'payment':\n          if (!notificationPrefs.paymentReminders) {\n            return res.status(400).json({ message: \"Payment reminders are disabled\" });\n          }\n\n          const testBookingForPayment = {\n            id: 'test-payment-booking',\n            eventName: 'Test Payment Event',\n            eventType: 'wedding',\n            eventDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 1 week from now\n            startTime: '16:00',\n            endTime: '22:00',\n            guestCount: 100,\n            venueId: 'test-venue',\n            customerId: customer.id,\n            status: 'confirmed',\n            totalAmount: '5000.00',\n            createdAt: new Date()\n          } as any;\n\n          const paymentResult = await notificationService.sendPaymentReminder(testBookingForPayment, customer, 1500);\n          res.json({ \n            success: paymentResult, \n            message: paymentResult ? 'Test payment reminder sent' : 'Failed to send payment reminder',\n            type: 'payment',\n            customer: { name: customer.name, email: customer.email }\n          });\n          break;\n\n        case 'maintenance':\n          if (!notificationPrefs.maintenanceAlerts) {\n            return res.status(400).json({ message: \"Maintenance alerts are disabled\" });\n          }\n\n          const maintenanceResult = await notificationService.sendMaintenanceAlert(\n            'System maintenance scheduled for this weekend. Please backup your data and expect brief downtime between 2-4 AM on Sunday.',\n            [customer.email]\n          );\n          res.json({ \n            success: maintenanceResult, \n            message: maintenanceResult ? 'Test maintenance alert sent' : 'Failed to send maintenance alert',\n            type: 'maintenance',\n            customer: { name: customer.name, email: customer.email }\n          });\n          break;\n\n        default:\n          return res.status(400).json({ \n            message: \"Invalid notification type. Use: booking, payment, or maintenance\" \n          });\n      }\n    } catch (error: any) {\n      console.error('Notification test error:', error);\n      res.status(500).json({ \n        message: \"Failed to send test notification\",\n        error: error.message,\n        details: error.stack\n      });\n    }\n  });\n\n  // Send payment reminders for overdue bookings\n  app.post(\"/api/notifications/payment-reminders\", async (req, res) => {\n    try {\n      const settings = await storage.getSettings();\n      const notificationPrefs = {\n        emailNotifications: settings.notifications?.emailNotifications ?? true,\n        pushNotifications: settings.notifications?.pushNotifications ?? false,\n        bookingConfirmations: settings.notifications?.bookingConfirmations ?? true,\n        paymentReminders: settings.notifications?.paymentReminders ?? true,\n        maintenanceAlerts: settings.notifications?.maintenanceAlerts ?? true\n      };\n\n      if (!notificationPrefs.emailNotifications || !notificationPrefs.paymentReminders) {\n        return res.status(400).json({ \n          message: \"Payment reminders are disabled in settings\",\n          settings: notificationPrefs\n        });\n      }\n\n      const notificationService = new NotificationService(gmailService, notificationPrefs);\n      const bookings = await storage.getBookings();\n      const customers = await storage.getCustomers();\n      \n      // Find bookings with outstanding payments (where deposit is not paid)\n      const overdueBookings = bookings.filter(booking => \n        booking.status === 'confirmed' && \n        !booking.depositPaid &&\n        booking.customerId &&\n        booking.totalAmount\n      );\n\n      const results = [];\n      for (const booking of overdueBookings) {\n        const customer = customers.find(c => c.id === booking.customerId);\n        if (customer && customer.email) {\n          const amountDue = booking.depositAmount ? parseFloat(booking.depositAmount) : parseFloat(booking.totalAmount!) * 0.3;\n          \n          try {\n            const success = await notificationService.sendPaymentReminder(booking, customer, amountDue);\n            results.push({\n              bookingId: booking.id,\n              customerEmail: customer.email,\n              success,\n              amountDue\n            });\n          } catch (error: any) {\n            results.push({\n              bookingId: booking.id,\n              customerEmail: customer.email,\n              success: false,\n              error: error.message\n            });\n          }\n        }\n      }\n\n      res.json({\n        message: `Processed ${results.length} payment reminders`,\n        results,\n        settings: notificationPrefs\n      });\n    } catch (error: any) {\n      console.error('Payment reminders error:', error);\n      res.status(500).json({ message: \"Failed to send payment reminders\" });\n    }\n  });\n\n  // Get notification stats\n  app.get(\"/api/notifications/stats\", async (req, res) => {\n    try {\n      const settings = await storage.getSettings();\n      const notificationPrefs = {\n        emailNotifications: settings.notifications?.emailNotifications ?? true,\n        pushNotifications: settings.notifications?.pushNotifications ?? false,\n        bookingConfirmations: settings.notifications?.bookingConfirmations ?? true,\n        paymentReminders: settings.notifications?.paymentReminders ?? true,\n        maintenanceAlerts: settings.notifications?.maintenanceAlerts ?? true\n      };\n\n      const bookings = await storage.getBookings();\n      const confirmedBookings = bookings.filter(b => b.status === 'confirmed');\n      const overduePayments = bookings.filter(b => \n        b.status === 'confirmed' && \n        !b.depositPaid &&\n        b.totalAmount\n      );\n\n      res.json({\n        notificationSettings: notificationPrefs,\n        stats: {\n          totalBookings: bookings.length,\n          confirmedBookings: confirmedBookings.length,\n          overduePayments: overduePayments.length,\n          gmailConfigured: gmailService ? true : false\n        }\n      });\n    } catch (error: any) {\n      console.error('Notification stats error:', error);\n      res.status(500).json({ message: \"Failed to get notification stats\" });\n    }\n  });\n\n  // Email monitoring and reply detection endpoints\n  // Webhook endpoint for incoming email replies (for third-party services)\n  app.post(\"/api/emails/webhook\", async (req, res) => {\n    try {\n      const { from, subject, content, receivedAt } = req.body;\n      \n      if (!from || !subject || !content) {\n        return res.status(400).json({ message: \"Missing required email fields\" });\n      }\n\n      const processed = await emailMonitorService.processWebhookEmail({\n        from,\n        subject,\n        content,\n        receivedAt: receivedAt || new Date().toISOString()\n      });\n\n      if (processed) {\n        res.json({ success: true, message: \"Email reply processed and recorded\" });\n      } else {\n        res.json({ success: false, message: \"No matching proposal found for this email\" });\n      }\n    } catch (error: any) {\n      console.error(\"Webhook email processing error:\", error);\n      res.status(500).json({ message: `Failed to process email: ${error.message}` });\n    }\n  });\n\n  // Manual endpoint to record customer reply\n  app.post(\"/api/emails/record-reply\", async (req, res) => {\n    try {\n      const { proposalId, customerEmail, subject, content, receivedAt } = req.body;\n      \n      if (!proposalId || !customerEmail || !subject || !content) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      const recorded = await emailMonitorService.recordManualReply({\n        proposalId,\n        customerEmail,\n        subject,\n        content,\n        receivedAt\n      });\n\n      if (recorded) {\n        res.json({ success: true, message: \"Customer reply recorded successfully\" });\n      } else {\n        res.status(400).json({ message: \"Failed to record customer reply\" });\n      }\n    } catch (error: any) {\n      console.error(\"Manual reply recording error:\", error);\n      res.status(500).json({ message: `Failed to record reply: ${error.message}` });\n    }\n  });\n\n  // Start email monitoring service\n  app.post(\"/api/emails/start-monitoring\", async (req, res) => {\n    try {\n      const { email, appPassword } = req.body;\n      \n      if (!email || !appPassword) {\n        return res.status(400).json({ message: \"Email and app password are required\" });\n      }\n\n      // First test the credentials\n      gmailService.configure({ email, appPassword });\n      const connectionTest = await gmailService.testConnection();\n      \n      if (!connectionTest) {\n        return res.status(400).json({ \n          message: \"Gmail authentication failed. Please check your email and app password. Make sure you're using a 16-character Gmail App Password, not your regular Gmail password.\",\n          error: \"AUTHENTICATION_FAILED\"\n        });\n      }\n\n      // If connection test passes, configure monitoring\n      emailMonitorService.configure({ email, appPassword });\n      await emailMonitorService.startMonitoring();\n      \n      res.json({ \n        success: true, \n        message: \"Email monitoring started successfully\",\n        monitoring: emailMonitorService.isMonitoring()\n      });\n    } catch (error: any) {\n      console.error(\"Email monitoring start error:\", error);\n      \n      let errorMessage = \"Failed to start monitoring\";\n      if (error.message?.includes('Invalid login') || error.message?.includes('Username and Password not accepted')) {\n        errorMessage = \"Gmail authentication failed. Please generate a new App Password and try again. Regular Gmail passwords don't work - you need a 16-character App Password.\";\n      } else if (error.message?.includes('Invalid credentials') || error.message?.includes('AUTHENTICATIONFAILED')) {\n        errorMessage = \"Authentication failed. Please check your Gmail App Password is correct and try again.\";\n      }\n      \n      res.status(400).json({ message: errorMessage });\n    }\n  });\n\n  // Get email monitoring status\n  app.get(\"/api/emails/monitoring-status\", async (req, res) => {\n    try {\n      res.json({\n        isActive: emailMonitorService.isMonitoring(),\n        configured: emailMonitorService.isConfigured(),\n        startedAt: emailMonitorService.isMonitoring() ? new Date().toISOString() : null\n      });\n    } catch (error: any) {\n      console.error(\"Email monitoring status error:\", error);\n      res.status(500).json({ message: \"Failed to get monitoring status\" });\n    }\n  });\n\n  // ============================================================================\n  // SUPER ADMIN ROUTES\n  // ============================================================================\n\n  // Super Admin - Login\n  app.post(\"/api/super-admin/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email and password are required\" });\n      }\n      \n      const result = await authenticateSuperAdmin(email, password);\n      \n      if (!result) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n      \n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Error during super admin login:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Super Admin - Get all tenants\n  app.get(\"/api/super-admin/tenants\", requireSuperAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const tenants = Array.from(storage.tenants.values());\n      res.json(tenants);\n    } catch (error: any) {\n      console.error(\"Error fetching tenants:\", error);\n      res.status(500).json({ message: \"Failed to fetch tenants\" });\n    }\n  });\n\n  // Super Admin - Get all subscription packages\n  app.get(\"/api/super-admin/packages\", requireSuperAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const packages = Array.from(storage.subscriptionPackages.values()).sort((a, b) => (a.sortOrder || 0) - (b.sortOrder || 0));\n      res.json(packages);\n    } catch (error: any) {\n      console.error(\"Error fetching packages:\", error);\n      res.status(500).json({ message: \"Failed to fetch packages\" });\n    }\n  });\n\n  // Super Admin - Create subscription package\n  app.post(\"/api/super-admin/packages\", requireSuperAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const packageData = req.body;\n      const newPackage = await storage.createSubscriptionPackage(packageData);\n      res.json(newPackage);\n    } catch (error: any) {\n      console.error(\"Error creating package:\", error);\n      res.status(500).json({ message: \"Failed to create package\" });\n    }\n  });\n\n  // Super Admin - Update subscription package\n  app.put(\"/api/super-admin/packages/:id\", requireSuperAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      const updatedPackage = await storage.updateSubscriptionPackage(id, updateData);\n      if (!updatedPackage) {\n        return res.status(404).json({ message: \"Package not found\" });\n      }\n      res.json(updatedPackage);\n    } catch (error: any) {\n      console.error(\"Error updating package:\", error);\n      res.status(500).json({ message: \"Failed to update package\" });\n    }\n  });\n\n  // Super Admin - Get analytics\n  app.get(\"/api/super-admin/analytics\", requireSuperAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const tenants = Array.from(storage.tenants.values());\n      const analytics = {\n        totalTenants: tenants.length,\n        activeTenants: tenants.filter(t => t.status === 'active').length,\n        trialTenants: tenants.filter(t => t.status === 'trial').length,\n        suspendedTenants: tenants.filter(t => t.status === 'suspended').length,\n        monthlyRevenue: 12450, // TODO: Calculate from actual subscription data\n        growthRate: 15.2 // TODO: Calculate actual growth rate\n      };\n      res.json(analytics);\n    } catch (error: any) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  // Super Admin - Create tenant\n  app.post(\"/api/super-admin/create-tenant\", requireSuperAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { name, subdomain, adminEmail, adminName, password, packageId } = req.body;\n      \n      if (!name || !subdomain || !adminEmail || !adminName || !password) {\n        return res.status(400).json({ message: \"All fields are required\" });\n      }\n      \n      // Check if subdomain is available\n      const existingTenant = Array.from(storage.tenants.values()).find(t => t.subdomain === subdomain);\n      if (existingTenant) {\n        return res.status(400).json({ message: \"Subdomain already taken\" });\n      }\n      \n      // Check if email is already used\n      const existingUser = Array.from(storage.users.values()).find(u => u.email === adminEmail);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already in use\" });\n      }\n      \n      // Create tenant\n      const tenant = await storage.createTenant({\n        name,\n        subdomain,\n        status: 'trial',\n        trialEndsAt: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000) // 14 days from now\n      });\n      \n      // Create admin user\n      const hashedPassword = await hashPassword(password);\n      const user = await storage.createUser({\n        username: adminEmail,\n        password: hashedPassword,\n        name: adminName,\n        email: adminEmail,\n        tenantId: tenant.id,\n        role: 'tenant_admin',\n        isActive: true\n      });\n      \n      res.json({\n        message: \"Tenant created successfully\",\n        tenant,\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          role: user.role\n        }\n      });\n    } catch (error: any) {\n      console.error(\"Error creating tenant:\", error);\n      res.status(500).json({ message: \"Failed to create tenant\" });\n    }\n  });\n\n  // Super Admin - Configuration endpoints\n  app.get(\"/api/super-admin/config\", requireSuperAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      // Get current configuration from storage/settings\n      const stripeConfig = await storage.getSetting('super_admin_stripe_config') || { value: { secretKey: '', publishableKey: '', webhookSecret: '' } };\n      const emailConfig = await storage.getSetting('super_admin_email_config') || { \n        value: { \n          smtpHost: '', \n          smtpPort: 587, \n          smtpUser: '', \n          smtpPass: '', \n          fromName: 'Venuine Support', \n          fromEmail: '' \n        } \n      };\n\n      res.json({\n        stripe: stripeConfig.value,\n        email: emailConfig.value\n      });\n    } catch (error: any) {\n      console.error(\"Error fetching super admin config:\", error);\n      res.status(500).json({ message: \"Failed to fetch configuration\" });\n    }\n  });\n\n  app.put(\"/api/super-admin/config/stripe\", requireSuperAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { secretKey, publishableKey, webhookSecret } = req.body;\n      \n      if (!secretKey || !publishableKey) {\n        return res.status(400).json({ message: \"Secret key and publishable key are required\" });\n      }\n\n      await storage.updateSetting('super_admin_stripe_config', {\n        secretKey,\n        publishableKey,\n        webhookSecret\n      });\n\n      res.json({ message: \"Stripe configuration updated successfully\" });\n    } catch (error: any) {\n      console.error(\"Error updating Stripe config:\", error);\n      res.status(500).json({ message: \"Failed to update Stripe configuration\" });\n    }\n  });\n\n  app.put(\"/api/super-admin/config/email\", requireSuperAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { smtpHost, smtpPort, smtpUser, smtpPass, fromName, fromEmail } = req.body;\n      \n      if (!smtpHost || !smtpUser || !smtpPass || !fromEmail) {\n        return res.status(400).json({ message: \"SMTP host, user, password, and from email are required\" });\n      }\n\n      await storage.updateSetting('super_admin_email_config', {\n        smtpHost,\n        smtpPort: parseInt(smtpPort) || 587,\n        smtpUser,\n        smtpPass,\n        fromName: fromName || 'Venuine Support',\n        fromEmail\n      });\n\n      res.json({ message: \"Email configuration updated successfully\" });\n    } catch (error: any) {\n      console.error(\"Error updating email config:\", error);\n      res.status(500).json({ message: \"Failed to update email configuration\" });\n    }\n  });\n\n  app.post(\"/api/super-admin/config/email/test\", requireSuperAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      // Get current email configuration\n      const emailConfig = await storage.getSetting('super_admin_email_config');\n      \n      if (!emailConfig?.value) {\n        return res.status(400).json({ message: \"Email configuration not found. Please configure email settings first.\" });\n      }\n\n      const config = emailConfig.value;\n      \n      // Test email configuration by sending a test email\n      try {\n        await notificationEmailService.configure({\n          host: config.smtpHost,\n          port: config.smtpPort,\n          secure: config.smtpPort === 465,\n          auth: {\n            user: config.smtpUser,\n            pass: config.smtpPass,\n          },\n        });\n\n        await notificationEmailService.sendEmail({\n          to: config.smtpUser, // Send test email to the configured user\n          from: `${config.fromName} <${config.fromEmail}>`,\n          subject: 'Super Admin Email Configuration Test',\n          html: `\n            <h2>Email Configuration Test</h2>\n            <p>This is a test email to verify your super admin email configuration is working correctly.</p>\n            <p><strong>Configuration details:</strong></p>\n            <ul>\n              <li>SMTP Host: ${config.smtpHost}</li>\n              <li>SMTP Port: ${config.smtpPort}</li>\n              <li>From Name: ${config.fromName}</li>\n              <li>From Email: ${config.fromEmail}</li>\n            </ul>\n            <p>If you received this email, your configuration is working correctly!</p>\n          `\n        });\n\n        res.json({ message: \"Test email sent successfully!\" });\n      } catch (emailError: any) {\n        console.error(\"Email test error:\", emailError);\n        res.status(400).json({ \n          message: \"Failed to send test email. Please check your SMTP configuration.\", \n          error: emailError.message \n        });\n      }\n    } catch (error: any) {\n      console.error(\"Error testing email config:\", error);\n      res.status(500).json({ message: \"Failed to test email configuration\" });\n    }\n  });\n\n  // Super Admin - Update tenant\n  app.put(\"/api/super-admin/tenants/:id\", requireSuperAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const tenantId = req.params.id;\n      const updateData = req.body;\n      \n      const tenant = storage.tenants.get(tenantId);\n      if (!tenant) {\n        return res.status(404).json({ message: \"Tenant not found\" });\n      }\n\n      // Update tenant\n      const updatedTenant = {\n        ...tenant,\n        ...updateData,\n        updatedAt: new Date()\n      };\n      \n      storage.tenants.set(tenantId, updatedTenant);\n      res.json(updatedTenant);\n    } catch (error: any) {\n      console.error(\"Error updating tenant:\", error);\n      res.status(500).json({ message: \"Failed to update tenant\" });\n    }\n  });\n\n  // Super Admin - Get tenant users\n  app.get(\"/api/super-admin/tenants/:id/users\", requireSuperAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const tenantId = req.params.id;\n      const tenantUsers = Array.from(storage.users.values()).filter(u => u.tenantId === tenantId);\n      res.json(tenantUsers);\n    } catch (error: any) {\n      console.error(\"Error fetching tenant users:\", error);\n      res.status(500).json({ message: \"Failed to fetch tenant users\" });\n    }\n  });\n\n  // Super Admin - Add user to tenant\n  app.post(\"/api/super-admin/tenants/:id/users\", requireSuperAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const tenantId = req.params.id;\n      const { username, name, email, password, role } = req.body;\n      \n      if (!username || !name || !email || !password) {\n        return res.status(400).json({ message: \"All fields are required\" });\n      }\n\n      // Check if tenant exists\n      const tenant = storage.tenants.get(tenantId);\n      if (!tenant) {\n        return res.status(404).json({ message: \"Tenant not found\" });\n      }\n\n      // Check if username or email already exists\n      const existingUser = Array.from(storage.users.values()).find(u => \n        u.username === username || u.email === email\n      );\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username or email already exists\" });\n      }\n\n      // Create user\n      const hashedPassword = await hashPassword(password);\n      const userId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      \n      const newUser = {\n        id: userId,\n        username,\n        name,\n        email,\n        password: hashedPassword,\n        tenantId,\n        role: role || \"tenant_user\",\n        permissions: [],\n        isActive: true,\n        lastLoginAt: null,\n        stripeAccountId: null,\n        stripeAccountStatus: null,\n        stripeOnboardingCompleted: false,\n        stripeChargesEnabled: false,\n        stripePayoutsEnabled: false,\n        stripeConnectedAt: null,\n        createdAt: new Date()\n      };\n\n      storage.users.set(userId, newUser);\n\n      // Update tenant user count\n      const updatedTenant = {\n        ...tenant,\n        currentUsers: (tenant.currentUsers || 0) + 1,\n        updatedAt: new Date()\n      };\n      storage.tenants.set(tenantId, updatedTenant);\n\n      res.json(newUser);\n    } catch (error: any) {\n      console.error(\"Error adding user to tenant:\", error);\n      res.status(500).json({ message: \"Failed to add user to tenant\" });\n    }\n  });\n\n  // Super Admin - Remove user from tenant\n  app.delete(\"/api/super-admin/tenants/:tenantId/users/:userId\", requireSuperAdmin, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { tenantId, userId } = req.params;\n      \n      const user = storage.users.get(userId);\n      if (!user || user.tenantId !== tenantId) {\n        return res.status(404).json({ message: \"User not found in this tenant\" });\n      }\n\n      // Remove user\n      storage.users.delete(userId);\n\n      // Update tenant user count\n      const tenant = storage.tenants.get(tenantId);\n      if (tenant) {\n        const updatedTenant = {\n          ...tenant,\n          currentUsers: Math.max((tenant.currentUsers || 1) - 1, 0),\n          updatedAt: new Date()\n        };\n        storage.tenants.set(tenantId, updatedTenant);\n      }\n\n      res.json({ message: \"User removed successfully\" });\n    } catch (error: any) {\n      console.error(\"Error removing user from tenant:\", error);\n      res.status(500).json({ message: \"Failed to remove user from tenant\" });\n    }\n  });\n\n  // ============================================================================\n  // PATH-BASED TENANT ROUTES (for development/replit)\n  // ============================================================================\n  \n  // Tenant features endpoint\n  app.get(\"/api/tenant/:tenantSlug/features\", requireTenant, addFeatureAccess, getFeaturesForTenant);\n\n  // Tenant dashboard via path\n  app.get(\"/api/tenant/:tenantSlug/dashboard\", requireTenant, checkTrialStatus, addFeatureAccess, requireFeature('dashboard_analytics'), async (req: TenantRequest, res) => {\n    try {\n      const tenantId = req.tenant!.id;\n      \n      // Get tenant-specific metrics\n      const bookings = Array.from(storage.bookings.values()).filter(b => b.tenantId === tenantId);\n      const customers = Array.from(storage.customers.values()).filter(c => c.tenantId === tenantId);\n      const venues = Array.from(storage.venues.values()).filter(v => v.tenantId === tenantId);\n      \n      const metrics = {\n        totalBookings: bookings.length,\n        totalCustomers: customers.length,\n        totalVenues: venues.length,\n        revenue: bookings.reduce((sum, b) => sum + (b.totalAmount || 0), 0),\n        recentBookings: bookings.slice(-5),\n        tenant: req.tenant\n      };\n      \n      res.json(metrics);\n    } catch (error: any) {\n      console.error(\"Error fetching tenant dashboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard data\" });\n    }\n  });\n\n  // Tenant bookings via path\n  app.get(\"/api/tenant/:tenantSlug/bookings\", requireTenant, checkTrialStatus, async (req: TenantRequest, res) => {\n    try {\n      const tenantId = req.tenant!.id;\n      const bookings = Array.from(storage.bookings.values()).filter(b => b.tenantId === tenantId);\n      res.json(bookings);\n    } catch (error: any) {\n      console.error(\"Error fetching tenant bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  // Tenant customers via path  \n  app.get(\"/api/tenant/:tenantSlug/customers\", requireTenant, checkTrialStatus, async (req: TenantRequest, res) => {\n    try {\n      const tenantId = req.tenant!.id;\n      const customers = Array.from(storage.customers.values()).filter(c => c.tenantId === tenantId);\n      res.json(customers);\n    } catch (error: any) {\n      console.error(\"Error fetching tenant customers:\", error);\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  // Tenant venues via path\n  app.get(\"/api/tenant/:tenantSlug/venues\", requireTenant, checkTrialStatus, async (req: TenantRequest, res) => {\n    try {\n      const tenantId = req.tenant!.id;\n      const venues = Array.from(storage.venues.values()).filter(v => v.tenantId === tenantId);\n      res.json(venues);\n    } catch (error: any) {\n      console.error(\"Error fetching tenant venues:\", error);\n      res.status(500).json({ message: \"Failed to fetch venues\" });\n    }\n  });\n\n  // ============================================================================\n  // STRIPE WEBHOOK ROUTES\n  // ============================================================================\n\n  // Stripe webhook handler\n  app.post(\"/api/webhooks/stripe\", express.raw({ type: 'application/json' }), async (req, res) => {\n    try {\n      const signature = req.headers['stripe-signature'] as string;\n      const event = await stripeService.handleWebhook(req.body, signature);\n      \n      if (!event) {\n        return res.status(400).json({ message: 'Invalid webhook signature' });\n      }\n\n      // Handle different webhook events\n      switch (event.type) {\n        case 'customer.subscription.created':\n          console.log('Subscription created:', event.data.object);\n          // Update tenant subscription status\n          break;\n          \n        case 'customer.subscription.updated':\n          console.log('Subscription updated:', event.data.object);\n          // Update tenant subscription details\n          break;\n          \n        case 'customer.subscription.deleted':\n          console.log('Subscription cancelled:', event.data.object);\n          // Handle subscription cancellation\n          break;\n          \n        case 'invoice.payment_succeeded':\n          console.log('Payment succeeded:', event.data.object);\n          // Handle successful payment\n          break;\n          \n        case 'invoice.payment_failed':\n          console.log('Payment failed:', event.data.object);\n          // Handle failed payment\n          break;\n          \n        default:\n          console.log(`Unhandled event type: ${event.type}`);\n      }\n\n      res.json({ received: true });\n    } catch (error: any) {\n      console.error('Stripe webhook error:', error);\n      res.status(500).json({ message: 'Webhook processing failed' });\n    }\n  });\n\n  // ============================================================================\n  // TENANT AUTH ROUTES\n  // ============================================================================\n\n  // Tenant Login\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password, subdomain } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email and password are required\" });\n      }\n      \n      // Find user by email\n      const users = Array.from(storage.users.values());\n      const user = users.find(u => u.email === email);\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n      \n      // Verify password\n      const isValidPassword = await comparePassword(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n      \n      // Get tenant info\n      const tenant = storage.tenants.get(user.tenantId);\n      if (!tenant) {\n        return res.status(401).json({ message: \"Tenant not found\" });\n      }\n      \n      // Check if subdomain matches (optional)\n      if (subdomain && tenant.subdomain !== subdomain) {\n        return res.status(401).json({ message: \"Invalid subdomain\" });\n      }\n      \n      // Generate token\n      const token = generateToken({\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        role: user.role\n      });\n      \n      res.json({\n        token,\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          role: user.role\n        },\n        tenant: {\n          id: tenant.id,\n          name: tenant.name,\n          subdomain: tenant.subdomain,\n          status: tenant.status\n        }\n      });\n    } catch (error: any) {\n      console.error(\"Error during tenant login:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // ============================================================================\n  // PUBLIC SIGNUP ROUTES\n  // ============================================================================\n\n  // Public - Get active subscription packages for signup\n  app.get(\"/api/public/packages\", async (req, res) => {\n    try {\n      const packages = Array.from(storage.subscriptionPackages.values())\n        .filter(pkg => pkg.isActive)\n        .sort((a, b) => (a.sortOrder || 0) - (b.sortOrder || 0));\n      res.json(packages);\n    } catch (error: any) {\n      console.error(\"Error fetching public packages:\", error);\n      res.status(500).json({ message: \"Failed to fetch packages\" });\n    }\n  });\n\n  // Public - Tenant signup\n  app.post(\"/api/public/signup\", async (req, res) => {\n    try {\n      const {\n        organizationName,\n        subdomain,\n        fullName,\n        email,\n        password,\n        packageId,\n        agreeToTerms\n      } = req.body;\n\n      // Validation\n      if (!organizationName || !subdomain || !fullName || !email || !password || !packageId || !agreeToTerms) {\n        return res.status(400).json({ message: \"All fields are required\" });\n      }\n\n      // Check if subdomain is available\n      const existingTenant = Array.from(storage.tenants.values()).find(t => t.subdomain === subdomain);\n      if (existingTenant) {\n        return res.status(400).json({ message: \"Subdomain already taken\" });\n      }\n\n      // Check if email is already used\n      const existingUser = Array.from(storage.users.values()).find(u => u.email === email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already registered\" });\n      }\n\n      // Validate package exists\n      const selectedPackage = storage.subscriptionPackages.get(packageId);\n      if (!selectedPackage) {\n        return res.status(400).json({ message: \"Invalid package selected\" });\n      }\n\n      // Create tenant\n      const tenantData = {\n        name: organizationName,\n        slug: subdomain.toLowerCase(),\n        subdomain: subdomain.toLowerCase(),\n        subscriptionPackageId: packageId,\n        status: \"trial\" as const,\n        trialEndsAt: new Date(Date.now() + (selectedPackage.trialDays || 14) * 24 * 60 * 60 * 1000),\n        currentUsers: 1,\n        currentVenues: 0,\n        monthlyBookings: 0\n      };\n\n      const newTenant = await storage.createTenant(tenantData);\n\n      // Create admin user for the tenant\n      const hashedPassword = await hashPassword(password);\n      const userData = {\n        username: email,\n        password: hashedPassword,\n        name: fullName,\n        email: email,\n        tenantId: newTenant.id,\n        role: \"tenant_admin\" as const,\n        permissions: [\"manage_users\", \"manage_venues\", \"manage_bookings\"],\n        isActive: true\n      };\n\n      const newUser = await storage.createUser(userData);\n\n      // Create Stripe customer and setup subscription (if not in trial)\n      let stripeCustomerId = null;\n      let checkoutUrl = null;\n      \n      try {\n        const stripeCustomer = await stripeService.createCustomer({\n          email: email,\n          name: fullName,\n          metadata: {\n            tenantId: newTenant.id,\n            userId: newUser.id,\n            packageId: packageId\n          }\n        });\n        stripeCustomerId = stripeCustomer.id;\n\n        // Create checkout session for payment setup (after trial)\n        const checkoutSession = await stripeService.createCheckoutSession({\n          customerId: stripeCustomer.id,\n          priceId: `price_${packageId}`, // This should map to actual Stripe price IDs\n          successUrl: `${process.env.FRONTEND_URL || 'http://localhost:5000'}/dashboard?setup=success`,\n          cancelUrl: `${process.env.FRONTEND_URL || 'http://localhost:5000'}/dashboard?setup=cancelled`,\n          trialPeriodDays: selectedPackage.trialDays,\n          metadata: {\n            tenantId: newTenant.id,\n            packageId: packageId\n          }\n        });\n        checkoutUrl = checkoutSession.url;\n      } catch (stripeError) {\n        console.error('Stripe setup failed:', stripeError);\n        // Continue without Stripe - tenant can set up payment later\n      }\n\n      // Send welcome email\n      try {\n        await notificationEmailService.sendWelcomeEmail({\n          name: fullName,\n          email: email,\n          organizationName: organizationName,\n          subdomain: subdomain,\n          trialDays: selectedPackage.trialDays || 14,\n          loginUrl: `${process.env.FRONTEND_URL || 'http://localhost:5000'}/dashboard`,\n          checkoutUrl: checkoutUrl || undefined\n        });\n      } catch (emailError) {\n        console.error('Failed to send welcome email:', emailError);\n        // Continue without email - not a critical failure\n      }\n\n      res.json({\n        message: \"Account created successfully\",\n        tenant: {\n          id: newTenant.id,\n          name: newTenant.name,\n          subdomain: newTenant.subdomain,\n          status: newTenant.status,\n          trialEndsAt: newTenant.trialEndsAt\n        },\n        user: {\n          id: newUser.id,\n          name: newUser.name,\n          email: newUser.email,\n          role: newUser.role\n        },\n        stripe: {\n          customerId: stripeCustomerId,\n          checkoutUrl: checkoutUrl\n        }\n      });\n\n    } catch (error: any) {\n      console.error(\"Signup error:\", error);\n      res.status(500).json({ message: \"Failed to create account\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":256662},"server/storage.ts":{"content":"import { \n  type User, type InsertUser,\n  type Venue, type InsertVenue,\n  type Space, type InsertSpace,\n  type SetupStyle, type InsertSetupStyle,\n  type Company, type InsertCompany,\n  type Customer, type InsertCustomer,\n  type Contract, type InsertContract,\n  type Booking, type InsertBooking,\n  type Proposal, type InsertProposal,\n  type Payment, type InsertPayment,\n  type Task, type InsertTask,\n  type AiInsight, type InsertAiInsight,\n  type Package, type InsertPackage,\n  type Service, type InsertService,\n  type TaxSetting, type InsertTaxSetting,\n  type Communication, type InsertCommunication,\n  type CampaignSource, type InsertCampaignSource,\n  type Tag, type InsertTag,\n  type Lead, type InsertLead,\n  type LeadActivity, type InsertLeadActivity,\n  type LeadTask, type InsertLeadTask,\n  type Tour, type InsertTour,\n  type Tenant, type InsertTenant,\n  type SubscriptionPackage, type InsertSubscriptionPackage,\n\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// Additional types for new features\n\ninterface Setting {\n  id: string;\n  key: string;\n  value: any;\n  updatedAt: Date;\n}\n\ninterface InsertSetting {\n  key: string;\n  value: any;\n}\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined>;\n\n  // Venues\n  getVenues(): Promise<Venue[]>;\n  getVenue(id: string): Promise<Venue | undefined>;\n  createVenue(venue: InsertVenue): Promise<Venue>;\n  updateVenue(id: string, venue: Partial<InsertVenue>): Promise<Venue | undefined>;\n\n  // Spaces\n  getSpaces(): Promise<Space[]>;\n  getSpace(id: string): Promise<Space | undefined>;\n  getSpacesByVenue(venueId: string): Promise<Space[]>;\n  createSpace(space: InsertSpace): Promise<Space>;\n  updateSpace(id: string, space: Partial<InsertSpace>): Promise<Space | undefined>;\n\n  // Setup Styles\n  getSetupStyles(): Promise<SetupStyle[]>;\n  getSetupStyle(id: string): Promise<SetupStyle | undefined>;\n  createSetupStyle(setupStyle: InsertSetupStyle): Promise<SetupStyle>;\n  updateSetupStyle(id: string, setupStyle: Partial<InsertSetupStyle>): Promise<SetupStyle | undefined>;\n  deleteSetupStyle(id: string): Promise<boolean>;\n\n  // Companies\n  getCompanies(): Promise<Company[]>;\n  getCompany(id: string): Promise<Company | undefined>;\n  createCompany(company: InsertCompany): Promise<Company>;\n  updateCompany(id: string, company: Partial<InsertCompany>): Promise<Company | undefined>;\n  deleteCompany(id: string): Promise<boolean>;\n\n  // Customers\n  getCustomers(): Promise<Customer[]>;\n  getCustomer(id: string): Promise<Customer | undefined>;\n  getCustomerByEmail(email: string): Promise<Customer | undefined>;\n  getCustomersByCompany(companyId: string): Promise<Customer[]>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(id: string, customer: Partial<InsertCustomer>): Promise<Customer | undefined>;\n\n  // Contracts\n  getContracts(): Promise<Contract[]>;\n  getContract(id: string): Promise<Contract | undefined>;\n  getContractsByCustomer(customerId: string): Promise<Contract[]>;\n  createContract(contract: InsertContract): Promise<Contract>;\n  updateContract(id: string, contract: Partial<InsertContract>): Promise<Contract | undefined>;\n  deleteContract(id: string): Promise<boolean>;\n\n  // Bookings\n  getBookings(): Promise<Booking[]>;\n  getBooking(id: string): Promise<Booking | undefined>;\n  getBookingsByCustomer(customerId: string): Promise<Booking[]>;\n  getBookingsByContract(contractId: string): Promise<Booking[]>;\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  updateBooking(id: string, booking: Partial<InsertBooking>): Promise<Booking | undefined>;\n  createMultipleBookings(bookings: InsertBooking[], contractId: string): Promise<Booking[]>;\n\n  // Proposals\n  getProposals(): Promise<Proposal[]>;\n  getProposal(id: string): Promise<Proposal | undefined>;\n  getProposalsByCustomer(customerId: string): Promise<Proposal[]>;\n  createProposal(proposal: InsertProposal): Promise<Proposal>;\n  updateProposal(id: string, proposal: Partial<InsertProposal>): Promise<Proposal | undefined>;\n  deleteProposal(id: string): Promise<boolean>;\n\n  // Communications\n  getCommunications(bookingId?: string): Promise<Communication[]>;\n  getCommunication(id: string): Promise<Communication | undefined>;\n  getCommunicationsByProposal(proposalId: string): Promise<Communication[]>;\n  getCommunicationsByCustomer(customerId: string): Promise<Communication[]>;\n  getCommunicationByMessageId(messageId: string): Promise<Communication | undefined>;\n  createCommunication(communication: InsertCommunication): Promise<Communication>;\n  updateCommunication(id: string, communication: Partial<InsertCommunication>): Promise<Communication | undefined>;\n\n  // Settings\n  getSettings(): Promise<Setting[]>;\n  getSetting(key: string): Promise<Setting | undefined>;\n  createSetting(setting: InsertSetting): Promise<Setting>;\n  updateSetting(key: string, value: any): Promise<Setting | undefined>;\n\n  // Payments\n  getPayments(): Promise<Payment[]>;\n  getPayment(id: string): Promise<Payment | undefined>;\n  getPaymentsByBooking(bookingId: string): Promise<Payment[]>;\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  updatePayment(id: string, payment: Partial<InsertPayment>): Promise<Payment | undefined>;\n\n  // Tasks\n  getTasks(): Promise<Task[]>;\n  getTask(id: string): Promise<Task | undefined>;\n  getTasksByUser(userId: string): Promise<Task[]>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, task: Partial<InsertTask>): Promise<Task | undefined>;\n\n  // AI Insights\n  getAiInsights(): Promise<AiInsight[]>;\n  getActiveAiInsights(): Promise<AiInsight[]>;\n  createAiInsight(insight: InsertAiInsight): Promise<AiInsight>;\n\n  // Packages & Services\n  getPackages(): Promise<Package[]>;\n  getPackage(id: string): Promise<Package | undefined>;\n  createPackage(pkg: InsertPackage): Promise<Package>;\n  updatePackage(id: string, pkg: Partial<InsertPackage>): Promise<Package | undefined>;\n  deletePackage(id: string): Promise<boolean>;\n\n  getServices(): Promise<Service[]>;\n  getService(id: string): Promise<Service | undefined>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: string, service: Partial<InsertService>): Promise<Service | undefined>;\n  deleteService(id: string): Promise<boolean>;\n  \n  // Tax Settings\n  getTaxSettings(): Promise<TaxSetting[]>;\n  getTaxSetting(id: string): Promise<TaxSetting | undefined>;\n  createTaxSetting(taxSetting: InsertTaxSetting): Promise<TaxSetting>;\n  updateTaxSetting(id: string, taxSetting: Partial<InsertTaxSetting>): Promise<TaxSetting | undefined>;\n  deleteTaxSetting(id: string): Promise<boolean>;\n\n  // Lead Management\n  // Campaign Sources\n  getCampaignSources(): Promise<CampaignSource[]>;\n  createCampaignSource(source: InsertCampaignSource): Promise<CampaignSource>;\n  updateCampaignSource(id: string, source: Partial<InsertCampaignSource>): Promise<CampaignSource | undefined>;\n  \n  // Tags\n  getTags(): Promise<Tag[]>;\n  createTag(tag: InsertTag): Promise<Tag>;\n  updateTag(id: string, tag: Partial<InsertTag>): Promise<Tag | undefined>;\n  deleteTag(id: string): Promise<boolean>;\n  \n  // Leads\n  getLeads(filters?: { status?: string; source?: string; q?: string }): Promise<Lead[]>;\n  getLead(id: string): Promise<Lead | undefined>;\n  createLead(lead: InsertLead): Promise<Lead>;\n  updateLead(id: string, lead: Partial<InsertLead>): Promise<Lead | undefined>;\n  deleteLead(id: string): Promise<boolean>;\n  \n  // Lead Activities\n  getLeadActivities(leadId: string): Promise<LeadActivity[]>;\n  createLeadActivity(activity: InsertLeadActivity): Promise<LeadActivity>;\n  \n  // Lead Tasks\n  getLeadTasks(filters?: { assignee?: string; due?: string }): Promise<LeadTask[]>;\n  createLeadTask(task: InsertLeadTask): Promise<LeadTask>;\n  updateLeadTask(id: string, task: Partial<InsertLeadTask>): Promise<LeadTask | undefined>;\n  \n  // Tours\n  getTours(): Promise<Tour[]>;\n  getTour(id: string): Promise<Tour | undefined>;\n  createTour(tour: InsertTour): Promise<Tour>;\n  updateTour(id: string, tour: Partial<InsertTour>): Promise<Tour | undefined>;\n  \n  // Lead Tags (many-to-many)\n  getLeadTags(leadId: string): Promise<Tag[]>;\n  addLeadTag(leadId: string, tagId: string): Promise<void>;\n  removeLeadTag(leadId: string, tagId: string): Promise<void>;\n  \n\n  \n  // Additional CRUD operations  \n  deleteCustomer(id: string): Promise<boolean>;\n  updateVenue(id: string, venueData: Partial<Venue>): Promise<Venue | null>;\n  deleteVenue(id: string): Promise<boolean>;\n  deleteSpace(id: string): Promise<boolean>;\n  deleteBooking(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private venues: Map<string, Venue>;\n  private spaces: Map<string, Space>;\n  private setupStyles: Map<string, SetupStyle>;\n  private companies: Map<string, Company>;\n  private customers: Map<string, Customer>;\n  private contracts: Map<string, Contract>;\n  private bookings: Map<string, Booking>;\n  private proposals: Map<string, Proposal>;\n  private payments: Map<string, Payment>;\n  private tasks: Map<string, Task>;\n  private aiInsights: Map<string, AiInsight>;\n  private packages: Map<string, Package>;\n  private services: Map<string, Service>;\n  private taxSettings: Map<string, TaxSetting>;\n  private communications: Map<string, Communication>;\n  private settings: Map<string, Setting>;\n  \n  // Lead Management Maps\n  private campaignSources: Map<string, CampaignSource>;\n  private tags: Map<string, Tag>;\n  private leads: Map<string, Lead>;\n  private leadActivities: Map<string, LeadActivity>;\n  private leadTasks: Map<string, LeadTask>;\n  private tours: Map<string, Tour>;\n  private leadTags: Set<string>; // Store leadId:tagId combinations\n  \n  // Multi-tenant Maps\n  public tenants: Map<string, Tenant>;\n  public subscriptionPackages: Map<string, SubscriptionPackage>;\n\n\n  constructor() {\n    this.users = new Map();\n    this.venues = new Map();\n    this.spaces = new Map();\n    this.setupStyles = new Map();\n    this.companies = new Map();\n    this.customers = new Map();\n    this.contracts = new Map();\n    this.bookings = new Map();\n    this.proposals = new Map();\n    this.payments = new Map();\n    this.tasks = new Map();\n    this.aiInsights = new Map();\n    this.packages = new Map();\n    this.services = new Map();\n    this.taxSettings = new Map();\n    this.communications = new Map();\n    this.settings = new Map();\n    \n    // Lead Management initialization\n    this.campaignSources = new Map();\n    this.tags = new Map();\n    this.leads = new Map();\n    this.leadActivities = new Map();\n    this.leadTasks = new Map();\n    this.tours = new Map();\n    this.leadTags = new Set();\n    \n    // Multi-tenant initialization\n    this.tenants = new Map();\n    this.subscriptionPackages = new Map();\n\n    // Initialize data asynchronously  \n    this.initializeData().catch(error => {\n      console.error('Error initializing storage:', error);\n    });\n  }\n\n  private async initializeData() {\n    this.initializeSubscriptionPackages();\n    this.initializeSamplePackagesAndServices();\n    this.initializeSampleSetupStyles(); \n    this.initializeLeadManagementData();\n    // Initialize with some default venues\n    const defaultVenues: InsertVenue[] = [\n      {\n        name: \"Grand Ballroom\",\n        description: \"Perfect for weddings and large corporate events\",\n        capacity: 200,\n        pricePerHour: \"500.00\",\n        amenities: [\"Audio/Visual Equipment\", \"Dance Floor\", \"Catering Kitchen\"],\n        imageUrl: \"https://images.unsplash.com/photo-1464207687429-7505649dae38?ixlib=rb-4.0.3\",\n        isActive: true\n      },\n      {\n        name: \"Conference Center\",\n        description: \"Ideal for business meetings and presentations\",\n        capacity: 50,\n        pricePerHour: \"200.00\",\n        amenities: [\"Projector\", \"Conference Table\", \"WiFi\"],\n        imageUrl: \"https://images.unsplash.com/photo-1431540015161-0bf868a2d407?ixlib=rb-4.0.3\",\n        isActive: true\n      },\n      {\n        name: \"Private Dining\",\n        description: \"Intimate setting for special celebrations\",\n        capacity: 25,\n        pricePerHour: \"150.00\",\n        amenities: [\"Private Bar\", \"Fireplace\", \"Garden View\"],\n        imageUrl: \"https://images.unsplash.com/photo-1555244162-803834f70033?ixlib=rb-4.0.3\",\n        isActive: true\n      }\n    ];\n\n    defaultVenues.forEach(venue => this.createVenue(venue));\n    \n    // Initialize spaces for the venues\n    this.initializeSpaces();\n  }\n\n  private initializeSpaces() {\n    // Get all venue IDs to create spaces for them\n    const venueIds = Array.from(this.venues.keys());\n    \n    // Create spaces for Grand Ballroom (first venue)\n    if (venueIds[0]) {\n      const grandBallroomSpaces: InsertSpace[] = [\n        {\n          venueId: venueIds[0],\n          name: \"Main Ballroom\",\n          description: \"Large elegant space for grand events\",\n          capacity: 200,\n          pricePerHour: \"500.00\",\n          amenities: [\"Stage\", \"Dance Floor\", \"Crystal Chandeliers\"],\n          imageUrl: \"https://images.unsplash.com/photo-1519167758481-83f550bb49b3?ixlib=rb-4.0.3\",\n          isActive: true\n        },\n        {\n          venueId: venueIds[0],\n          name: \"VIP Lounge\",\n          description: \"Exclusive private area within the ballroom\",\n          capacity: 50,\n          pricePerHour: \"200.00\",\n          amenities: [\"Private Bar\", \"Lounge Seating\", \"City View\"],\n          imageUrl: \"https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3\",\n          isActive: true\n        }\n      ];\n      grandBallroomSpaces.forEach(space => this.createSpace(space));\n    }\n\n    // Conference Center spaces\n    if (venueIds[1]) {\n      const conferenceSpaces: InsertSpace[] = [\n        {\n          venueId: venueIds[1],\n          name: \"Boardroom A\",\n          description: \"Executive boardroom for meetings\",\n          capacity: 20,\n          pricePerHour: \"150.00\",\n          amenities: [\"Conference Table\", \"Video Conferencing\", \"Whiteboard\"],\n          imageUrl: \"https://images.unsplash.com/photo-1497366216548-37526070297c?ixlib=rb-4.0.3\",\n          isActive: true\n        },\n        {\n          venueId: venueIds[1],\n          name: \"Training Room\",\n          description: \"Flexible training and presentation space\",\n          capacity: 30,\n          pricePerHour: \"100.00\",\n          amenities: [\"Projector\", \"Flip Chart\", \"Sound System\"],\n          imageUrl: \"https://images.unsplash.com/photo-1497215728101-856f4ea42174?ixlib=rb-4.0.3\",\n          isActive: true\n        }\n      ];\n      conferenceSpaces.forEach(space => this.createSpace(space));\n    }\n\n    // Private Dining spaces\n    if (venueIds[2]) {\n      const diningSpaces: InsertSpace[] = [\n        {\n          venueId: venueIds[2],\n          name: \"Garden Room\",\n          description: \"Intimate dining with garden views\",\n          capacity: 25,\n          pricePerHour: \"150.00\",\n          amenities: [\"Fireplace\", \"Garden View\", \"Wine Cellar Access\"],\n          imageUrl: \"https://images.unsplash.com/photo-1414235077428-338989a2e8c0?ixlib=rb-4.0.3\",\n          isActive: true\n        }\n      ];\n      diningSpaces.forEach(space => this.createSpace(space));\n    }\n\n    // Update package applicableSpaceIds to match spaces\n    const spaceIds = Array.from(this.spaces.keys());\n    this.packages.forEach(pkg => {\n      pkg.applicableSpaceIds = spaceIds; // Make packages available for all spaces\n    });\n\n    // Initialize sample bookings with simplified approach\n    this.initializeSampleData();\n    console.log('Storage initialized with', this.companies.size, 'companies,', this.customers.size, 'customers, and', this.users.size, 'users');\n  }\n\n  private initializeSampleData() {\n    const venues = Array.from(this.venues.values());\n    const spaces = Array.from(this.spaces.values());\n\n    // Create demo tenant first\n    if (this.tenants.size === 0) {\n      const demoTenant: Tenant = {\n        id: randomUUID(),\n        name: \"Demo Venue\",\n        subdomain: \"demo\",\n        customDomain: null,\n        subscriptionPackageId: null,\n        subscriptionStatus: \"trial\",\n        trialEndsAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now\n        isActive: true,\n        monthlyBookings: 0,\n        lastBillingDate: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      this.tenants.set(demoTenant.id, demoTenant);\n\n      // Create demo users for this tenant with pre-hashed passwords\n      // demo123 hashed\n      const demoUser: User = {\n        id: randomUUID(),\n        name: \"Demo User\",\n        email: \"demo@venue.com\",\n        password: \"$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi\", // demo123\n        role: \"tenant_admin\",\n        tenantId: demoTenant.id,\n        isActive: true,\n        stripeAccountId: null,\n        stripeAccountStatus: null,\n        stripeOnboardingCompleted: false,\n        stripeChargesEnabled: false,\n        stripePayoutsEnabled: false,\n        stripeConnectedAt: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      this.users.set(demoUser.id, demoUser);\n\n      // manager123 hashed  \n      const demoManager: User = {\n        id: randomUUID(),\n        name: \"Venue Manager\",\n        email: \"manager@venue.com\",\n        password: \"$2a$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZdL17lhWy\", // manager123\n        role: \"tenant_user\",\n        tenantId: demoTenant.id,\n        isActive: true,\n        stripeAccountId: null,\n        stripeAccountStatus: null,\n        stripeOnboardingCompleted: false,\n        stripeChargesEnabled: false,\n        stripePayoutsEnabled: false,\n        stripeConnectedAt: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      this.users.set(demoManager.id, demoManager);\n    }\n\n    // Get the demo tenant ID for sample data\n    const demoTenantId = Array.from(this.tenants.values())[0]?.id;\n\n    // No sample customers - tenants create their own data\n\n    // No sample bookings - tenants create their own data\n  }\n\n  private initializeSamplePackagesAndServices() {\n    // Sample services for testing\n    const sampleServices = [\n      {\n        id: randomUUID(),\n        name: \"Premium Catering\",\n        description: \"Full-service catering with appetizers, main course, and dessert\",\n        price: \"45.00\",\n        category: \"catering\",\n        pricingModel: \"per_person\" as const,\n        enabledTaxIds: [],\n        enabledFeeIds: [],\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Audio/Visual Setup\", \n        description: \"Professional sound system, microphones, and projection equipment\",\n        price: \"500.00\",\n        category: \"equipment\",\n        pricingModel: \"fixed\" as const,\n        enabledTaxIds: [],\n        enabledFeeIds: [],\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Floral Arrangements\",\n        description: \"Custom centerpieces and decorative florals\",\n        price: \"150.00\", \n        category: \"decoration\",\n        pricingModel: \"fixed\" as const,\n        enabledTaxIds: [],\n        enabledFeeIds: [],\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Photography Services\",\n        description: \"Professional event photography with edited photos\",\n        price: \"800.00\",\n        category: \"entertainment\",\n        pricingModel: \"fixed\" as const,\n        enabledTaxIds: [],\n        enabledFeeIds: [],\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Live DJ Entertainment\",\n        description: \"Professional DJ with music and lighting\",\n        price: \"600.00\",\n        category: \"entertainment\", \n        pricingModel: \"fixed\" as const,\n        enabledTaxIds: [],\n        enabledFeeIds: [],\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Bar Service\",\n        description: \"Full bar service with bartender and premium drinks\",\n        price: \"25.00\",\n        category: \"catering\",\n        pricingModel: \"per_person\" as const,\n        enabledTaxIds: [],\n        enabledFeeIds: [],\n        isActive: true,\n        createdAt: new Date()\n      }\n    ];\n\n    // Sample packages for testing\n    const serviceIds = sampleServices.map(s => s.id);\n    const samplePackages = [\n      {\n        id: randomUUID(),\n        name: \"Corporate Essential\",\n        description: \"Perfect for business meetings and corporate events\",\n        category: \"corporate\",\n        price: \"2500.00\",\n        pricingModel: \"fixed\" as const,\n        includedServiceIds: [serviceIds[1]], // Audio/Visual Setup\n        applicableSpaceIds: [],\n        enabledTaxIds: [],\n        enabledFeeIds: [],\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(), \n        name: \"Wedding Premium\",\n        description: \"Complete wedding package with catering, entertainment, and decor\",\n        category: \"wedding\",\n        price: \"85.00\",\n        pricingModel: \"per_person\" as const,\n        includedServiceIds: [serviceIds[0], serviceIds[2], serviceIds[3], serviceIds[4]], // Catering, Florals, Photography, DJ\n        applicableSpaceIds: [],\n        enabledTaxIds: [],\n        enabledFeeIds: [],\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Cocktail Party\",\n        description: \"Elegant cocktail reception with bar and light catering\",\n        category: \"social\",\n        price: \"55.00\",\n        pricingModel: \"per_person\" as const, \n        includedServiceIds: [serviceIds[5], serviceIds[2]], // Bar Service, Florals\n        applicableSpaceIds: [],\n        enabledTaxIds: [],\n        enabledFeeIds: [],\n        isActive: true,\n        createdAt: new Date()\n      }\n    ];\n\n    sampleServices.forEach(svc => this.services.set(svc.id, svc));\n    samplePackages.forEach(pkg => this.packages.set(pkg.id, pkg));\n  }\n\n  private initializeSampleSetupStyles() {\n    const sampleSetupStyles = [\n      {\n        id: randomUUID(),\n        name: \"Round Tables\",\n        description: \"Traditional round tables for dining and socializing\",\n        iconName: \"Circle\",\n        category: \"dining\",\n        minCapacity: 50,\n        maxCapacity: 200,\n        floorPlan: {\n          objects: [\n            { id: \"rt1\", type: \"table\", x: 200, y: 150, width: 60, height: 60, rotation: 0, color: \"#8B4513\", seats: 8, label: \"Table 1\" },\n            { id: \"rt2\", type: \"table\", x: 350, y: 150, width: 60, height: 60, rotation: 0, color: \"#8B4513\", seats: 8, label: \"Table 2\" },\n            { id: \"rt3\", type: \"table\", x: 500, y: 150, width: 60, height: 60, rotation: 0, color: \"#8B4513\", seats: 8, label: \"Table 3\" },\n            { id: \"rt4\", type: \"table\", x: 275, y: 300, width: 60, height: 60, rotation: 0, color: \"#8B4513\", seats: 8, label: \"Table 4\" },\n            { id: \"rt5\", type: \"table\", x: 425, y: 300, width: 60, height: 60, rotation: 0, color: \"#8B4513\", seats: 8, label: \"Table 5\" },\n            { id: \"stage\", type: \"stage\", x: 300, y: 50, width: 200, height: 80, rotation: 0, color: \"#4169E1\", label: \"Main Stage\" },\n            { id: \"bar\", type: \"bar\", x: 100, y: 500, width: 120, height: 40, rotation: 0, color: \"#800000\", label: \"Bar\" }\n          ],\n          canvasSize: { width: 800, height: 600 },\n          totalSeats: 40\n        },\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Theater Style\",\n        description: \"Rows of chairs facing the presentation area\",\n        iconName: \"Presentation\",\n        category: \"presentation\",\n        minCapacity: 100,\n        maxCapacity: 500,\n        floorPlan: {\n          objects: [\n            { id: \"stage\", type: \"stage\", x: 300, y: 50, width: 200, height: 80, rotation: 0, color: \"#4169E1\", label: \"Presentation Stage\" },\n            // Front row\n            { id: \"c1\", type: \"chair\", x: 200, y: 200, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c2\", type: \"chair\", x: 230, y: 200, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c3\", type: \"chair\", x: 260, y: 200, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c4\", type: \"chair\", x: 290, y: 200, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c5\", type: \"chair\", x: 320, y: 200, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c6\", type: \"chair\", x: 350, y: 200, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c7\", type: \"chair\", x: 380, y: 200, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c8\", type: \"chair\", x: 410, y: 200, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            // Second row\n            { id: \"c9\", type: \"chair\", x: 200, y: 230, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c10\", type: \"chair\", x: 230, y: 230, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c11\", type: \"chair\", x: 260, y: 230, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c12\", type: \"chair\", x: 290, y: 230, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c13\", type: \"chair\", x: 320, y: 230, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c14\", type: \"chair\", x: 350, y: 230, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c15\", type: \"chair\", x: 380, y: 230, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c16\", type: \"chair\", x: 410, y: 230, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 }\n          ],\n          canvasSize: { width: 800, height: 600 },\n          totalSeats: 16\n        },\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"U-Shape Conference\",\n        description: \"U-shaped table arrangement for meetings\",\n        iconName: \"Users\",\n        category: \"meeting\",\n        minCapacity: 15,\n        maxCapacity: 50,\n        floorPlan: {\n          objects: [\n            // U-shape tables\n            { id: \"ut1\", type: \"table\", x: 200, y: 200, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 6, label: \"Left Table\" },\n            { id: \"ut2\", type: \"table\", x: 300, y: 320, width: 200, height: 40, rotation: 0, color: \"#8B4513\", seats: 8, label: \"Center Table\" },\n            { id: \"ut3\", type: \"table\", x: 520, y: 200, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 6, label: \"Right Table\" },\n            // Presentation area\n            { id: \"screen\", type: \"stage\", x: 350, y: 100, width: 100, height: 60, rotation: 0, color: \"#4169E1\", label: \"Screen\" }\n          ],\n          canvasSize: { width: 800, height: 600 },\n          totalSeats: 20\n        },\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Cocktail Reception\",\n        description: \"Standing reception with high-top tables\",\n        iconName: \"Coffee\",\n        category: \"social\",\n        minCapacity: 30,\n        maxCapacity: 150,\n        floorPlan: {\n          objects: [\n            { id: \"ht1\", type: \"table\", x: 200, y: 180, width: 40, height: 40, rotation: 0, color: \"#8B4513\", seats: 4, label: \"High Table 1\" },\n            { id: \"ht2\", type: \"table\", x: 400, y: 180, width: 40, height: 40, rotation: 0, color: \"#8B4513\", seats: 4, label: \"High Table 2\" },\n            { id: \"ht3\", type: \"table\", x: 600, y: 180, width: 40, height: 40, rotation: 0, color: \"#8B4513\", seats: 4, label: \"High Table 3\" },\n            { id: \"ht4\", type: \"table\", x: 300, y: 320, width: 40, height: 40, rotation: 0, color: \"#8B4513\", seats: 4, label: \"High Table 4\" },\n            { id: \"ht5\", type: \"table\", x: 500, y: 320, width: 40, height: 40, rotation: 0, color: \"#8B4513\", seats: 4, label: \"High Table 5\" },\n            { id: \"bar1\", type: \"bar\", x: 150, y: 450, width: 150, height: 40, rotation: 0, color: \"#800000\", label: \"Main Bar\" },\n            { id: \"bar2\", type: \"bar\", x: 500, y: 450, width: 150, height: 40, rotation: 0, color: \"#800000\", label: \"Service Bar\" }\n          ],\n          canvasSize: { width: 800, height: 600 },\n          totalSeats: 20\n        },\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Classroom Setup\",\n        description: \"Tables and chairs in classroom formation\",\n        iconName: \"Grid3X3\",\n        category: \"meeting\",\n        minCapacity: 20,\n        maxCapacity: 100,\n        floorPlan: {\n          objects: [\n            // Presentation area\n            { id: \"stage\", type: \"stage\", x: 350, y: 50, width: 100, height: 60, rotation: 0, color: \"#4169E1\", label: \"Presentation Area\" },\n            // Row 1\n            { id: \"t1\", type: \"table\", x: 200, y: 180, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 3, label: \"Table 1\" },\n            { id: \"t2\", type: \"table\", x: 320, y: 180, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 3, label: \"Table 2\" },\n            { id: \"t3\", type: \"table\", x: 440, y: 180, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 3, label: \"Table 3\" },\n            // Row 2\n            { id: \"t4\", type: \"table\", x: 200, y: 260, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 3, label: \"Table 4\" },\n            { id: \"t5\", type: \"table\", x: 320, y: 260, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 3, label: \"Table 5\" },\n            { id: \"t6\", type: \"table\", x: 440, y: 260, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 3, label: \"Table 6\" },\n            // Row 3\n            { id: \"t7\", type: \"table\", x: 200, y: 340, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 3, label: \"Table 7\" },\n            { id: \"t8\", type: \"table\", x: 320, y: 340, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 3, label: \"Table 8\" },\n            { id: \"t9\", type: \"table\", x: 440, y: 340, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 3, label: \"Table 9\" }\n          ],\n          canvasSize: { width: 800, height: 600 },\n          totalSeats: 27\n        },\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Banquet Style\",\n        description: \"Long rectangular tables for formal dining\",\n        iconName: \"Utensils\",\n        category: \"dining\",\n        minCapacity: 40,\n        maxCapacity: 300,\n        floorPlan: {\n          objects: [\n            // Long banquet tables\n            { id: \"bt1\", type: \"table\", x: 150, y: 150, width: 200, height: 50, rotation: 0, color: \"#8B4513\", seats: 12, label: \"Banquet Table 1\" },\n            { id: \"bt2\", type: \"table\", x: 150, y: 230, width: 200, height: 50, rotation: 0, color: \"#8B4513\", seats: 12, label: \"Banquet Table 2\" },\n            { id: \"bt3\", type: \"table\", x: 150, y: 310, width: 200, height: 50, rotation: 0, color: \"#8B4513\", seats: 12, label: \"Banquet Table 3\" },\n            { id: \"bt4\", type: \"table\", x: 450, y: 150, width: 200, height: 50, rotation: 0, color: \"#8B4513\", seats: 12, label: \"Banquet Table 4\" },\n            { id: \"bt5\", type: \"table\", x: 450, y: 230, width: 200, height: 50, rotation: 0, color: \"#8B4513\", seats: 12, label: \"Banquet Table 5\" },\n            { id: \"bt6\", type: \"table\", x: 450, y: 310, width: 200, height: 50, rotation: 0, color: \"#8B4513\", seats: 12, label: \"Banquet Table 6\" },\n            // Head table\n            { id: \"head\", type: \"table\", x: 300, y: 80, width: 200, height: 50, rotation: 0, color: \"#8B4513\", seats: 10, label: \"Head Table\" }\n          ],\n          canvasSize: { width: 800, height: 600 },\n          totalSeats: 82\n        },\n        isActive: true,\n        createdAt: new Date()\n      }\n    ];\n\n    sampleSetupStyles.forEach(style => this.setupStyles.set(style.id, style));\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      role: insertUser.role || \"manager\",\n      stripeAccountId: insertUser.stripeAccountId || null,\n      stripeAccountStatus: insertUser.stripeAccountStatus || null,\n      stripeOnboardingCompleted: insertUser.stripeOnboardingCompleted || false,\n      stripeChargesEnabled: insertUser.stripeChargesEnabled || false,\n      stripePayoutsEnabled: insertUser.stripePayoutsEnabled || false,\n      stripeConnectedAt: insertUser.stripeConnectedAt || null\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updateData: Partial<InsertUser>): Promise<User | undefined> {\n    const existing = this.users.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...updateData };\n    this.users.set(id, updated);\n    return updated;\n  }\n\n  // Venues\n  async getVenues(): Promise<Venue[]> {\n    return Array.from(this.venues.values());\n  }\n\n  async getVenue(id: string): Promise<Venue | undefined> {\n    return this.venues.get(id);\n  }\n\n  async createVenue(insertVenue: InsertVenue): Promise<Venue> {\n    const id = randomUUID();\n    const venue: Venue = { \n      ...insertVenue, \n      id,\n      description: insertVenue.description || null,\n      pricePerHour: insertVenue.pricePerHour || null,\n      amenities: insertVenue.amenities || null,\n      imageUrl: insertVenue.imageUrl || null,\n      isActive: insertVenue.isActive ?? true\n    };\n    this.venues.set(id, venue);\n    return venue;\n  }\n\n  async updateVenue(id: string, venue: Partial<InsertVenue>): Promise<Venue | undefined> {\n    const existing = this.venues.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...venue };\n    this.venues.set(id, updated);\n    return updated;\n  }\n\n  // Spaces\n  async getSpaces(): Promise<Space[]> {\n    return Array.from(this.spaces.values());\n  }\n\n  async getSpace(id: string): Promise<Space | undefined> {\n    return this.spaces.get(id);\n  }\n\n  async getSpacesByVenue(venueId: string): Promise<Space[]> {\n    return Array.from(this.spaces.values()).filter(space => space.venueId === venueId);\n  }\n\n  async createSpace(insertSpace: InsertSpace): Promise<Space> {\n    const id = randomUUID();\n    const space: Space = { \n      ...insertSpace, \n      id,\n      description: insertSpace.description || null,\n      pricePerHour: insertSpace.pricePerHour || null,\n      amenities: insertSpace.amenities || null,\n      imageUrl: insertSpace.imageUrl || null,\n      isActive: insertSpace.isActive ?? true,\n      createdAt: new Date()\n    };\n    this.spaces.set(id, space);\n    return space;\n  }\n\n  async updateSpace(id: string, updates: Partial<InsertSpace>): Promise<Space | undefined> {\n    const space = this.spaces.get(id);\n    if (!space) return undefined;\n    \n    const updated: Space = { ...space, ...updates };\n    this.spaces.set(id, updated);\n    return updated;\n  }\n\n  // Customers\n  async getCustomers(): Promise<Customer[]> {\n    return Array.from(this.customers.values());\n  }\n\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    return this.customers.get(id);\n  }\n\n  async getCustomerByEmail(email: string, tenantId?: string): Promise<Customer | undefined> {\n    return Array.from(this.customers.values()).find(customer => \n      customer.email === email && (!tenantId || customer.tenantId === tenantId)\n    );\n  }\n\n  async createCustomer(insertCustomer: InsertCustomer): Promise<Customer> {\n    const id = randomUUID();\n    const customer: Customer = { \n      ...insertCustomer, \n      id, \n      createdAt: new Date(),\n      notes: insertCustomer.notes || null,\n      status: insertCustomer.status || \"lead\",\n      phone: insertCustomer.phone || null,\n      companyId: insertCustomer.companyId || null,\n      leadScore: insertCustomer.leadScore || 0\n    };\n    this.customers.set(id, customer);\n    return customer;\n  }\n\n  async updateCustomer(id: string, customer: Partial<InsertCustomer>): Promise<Customer | undefined> {\n    const existing = this.customers.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...customer };\n    this.customers.set(id, updated);\n    return updated;\n  }\n\n  async getCustomersByCompany(companyId: string): Promise<Customer[]> {\n    return Array.from(this.customers.values()).filter(customer => customer.companyId === companyId);\n  }\n\n  // Companies\n  async getCompanies(): Promise<Company[]> {\n    return Array.from(this.companies.values());\n  }\n\n  async getCompany(id: string): Promise<Company | undefined> {\n    return this.companies.get(id);\n  }\n\n  async createCompany(insertCompany: InsertCompany): Promise<Company> {\n    const id = randomUUID();\n    const company: Company = { \n      ...insertCompany, \n      id, \n      createdAt: new Date(),\n      updatedAt: new Date(),\n      industry: insertCompany.industry || null,\n      description: insertCompany.description || null,\n      website: insertCompany.website || null,\n      address: insertCompany.address || null,\n      phone: insertCompany.phone || null,\n      email: insertCompany.email || null,\n      notes: insertCompany.notes || null,\n      isActive: insertCompany.isActive ?? true\n    };\n    this.companies.set(id, company);\n    return company;\n  }\n\n  async updateCompany(id: string, company: Partial<InsertCompany>): Promise<Company | undefined> {\n    const existing = this.companies.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...company, updatedAt: new Date() };\n    this.companies.set(id, updated);\n    return updated;\n  }\n\n  async deleteCompany(id: string): Promise<boolean> {\n    // First check if any customers are associated with this company\n    const associatedCustomers = await this.getCustomersByCompany(id);\n    if (associatedCustomers.length > 0) {\n      // Update customers to remove company association\n      for (const customer of associatedCustomers) {\n        await this.updateCustomer(customer.id, { companyId: null, customerType: \"individual\" });\n      }\n    }\n    return this.companies.delete(id);\n  }\n\n  // Contracts\n  async getContracts(): Promise<Contract[]> {\n    return Array.from(this.contracts.values());\n  }\n\n  async getContract(id: string): Promise<Contract | undefined> {\n    return this.contracts.get(id);\n  }\n\n  async getContractsByCustomer(customerId: string): Promise<Contract[]> {\n    return Array.from(this.contracts.values()).filter(contract => contract.customerId === customerId);\n  }\n\n  async createContract(insertContract: InsertContract): Promise<Contract> {\n    const id = randomUUID();\n    const contract: Contract = { \n      ...insertContract, \n      id, \n      createdAt: new Date(),\n      updatedAt: new Date(),\n      status: insertContract.status || \"draft\",\n      totalAmount: insertContract.totalAmount || null\n    };\n    this.contracts.set(id, contract);\n    return contract;\n  }\n\n  async updateContract(id: string, contract: Partial<InsertContract>): Promise<Contract | undefined> {\n    const existing = this.contracts.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...contract, updatedAt: new Date() };\n    this.contracts.set(id, updated);\n    return updated;\n  }\n\n  async deleteContract(id: string): Promise<boolean> {\n    return this.contracts.delete(id);\n  }\n\n  // Bookings\n  async getBookings(): Promise<Booking[]> {\n    return Array.from(this.bookings.values());\n  }\n\n  async getBooking(id: string): Promise<Booking | undefined> {\n    return this.bookings.get(id);\n  }\n\n  async getBookingsByCustomer(customerId: string): Promise<Booking[]> {\n    return Array.from(this.bookings.values()).filter(booking => booking.customerId === customerId);\n  }\n\n  async getBookingsByContract(contractId: string): Promise<Booking[]> {\n    return Array.from(this.bookings.values()).filter(booking => booking.contractId === contractId);\n  }\n\n  async createBooking(insertBooking: InsertBooking): Promise<Booking> {\n    const id = randomUUID();\n    const booking: Booking = { \n      ...insertBooking, \n      id, \n      createdAt: new Date(),\n      contractId: insertBooking.contractId || null,\n      customerId: insertBooking.customerId || null,\n      venueId: insertBooking.venueId || null,\n      totalAmount: insertBooking.totalAmount || null,\n      depositAmount: insertBooking.depositAmount || null,\n      depositPaid: insertBooking.depositPaid ?? false,\n      notes: insertBooking.notes || null\n    };\n    this.bookings.set(id, booking);\n    return booking;\n  }\n\n  async updateBooking(id: string, booking: Partial<InsertBooking>): Promise<Booking | undefined> {\n    const existing = this.bookings.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...booking };\n    this.bookings.set(id, updated);\n    return updated;\n  }\n\n  async createMultipleBookings(bookings: InsertBooking[], contractId: string): Promise<Booking[]> {\n    const createdBookings: Booking[] = [];\n    for (const insertBooking of bookings) {\n      const booking = await this.createBooking({ ...insertBooking, contractId });\n      createdBookings.push(booking);\n    }\n    return createdBookings;\n  }\n\n  // Proposals\n  async getProposals(): Promise<Proposal[]> {\n    return Array.from(this.proposals.values());\n  }\n\n  async getProposal(id: string): Promise<Proposal | undefined> {\n    return this.proposals.get(id);\n  }\n\n  async getProposalsByCustomer(customerId: string): Promise<Proposal[]> {\n    return Array.from(this.proposals.values()).filter(proposal => proposal.customerId === customerId);\n  }\n\n  async createProposal(insertProposal: InsertProposal): Promise<Proposal> {\n    const id = randomUUID();\n    const proposal: Proposal = { \n      ...insertProposal, \n      id, \n      createdAt: new Date(),\n      sentAt: null,\n      viewedAt: null,\n      customerId: insertProposal.customerId || null,\n      bookingId: insertProposal.bookingId || null,\n      status: insertProposal.status || \"draft\",\n      totalAmount: insertProposal.totalAmount || null,\n      validUntil: insertProposal.validUntil || null\n    };\n    this.proposals.set(id, proposal);\n    return proposal;\n  }\n\n  async updateProposal(id: string, proposal: Partial<InsertProposal>): Promise<Proposal | undefined> {\n    const existing = this.proposals.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...proposal };\n    this.proposals.set(id, updated);\n    return updated;\n  }\n\n  // Payments\n  async getPayments(): Promise<Payment[]> {\n    return Array.from(this.payments.values());\n  }\n\n  async getPayment(id: string): Promise<Payment | undefined> {\n    return this.payments.get(id);\n  }\n\n  async getPaymentsByBooking(bookingId: string): Promise<Payment[]> {\n    return Array.from(this.payments.values()).filter(payment => payment.bookingId === bookingId);\n  }\n\n  async createPayment(insertPayment: InsertPayment): Promise<Payment> {\n    const id = randomUUID();\n    const payment: Payment = { \n      ...insertPayment, \n      id, \n      createdAt: new Date(),\n      processedAt: null,\n      status: insertPayment.status || \"pending\",\n      bookingId: insertPayment.bookingId || null,\n      transactionId: insertPayment.transactionId || null\n    };\n    this.payments.set(id, payment);\n    return payment;\n  }\n\n  async updatePayment(id: string, payment: Partial<InsertPayment>): Promise<Payment | undefined> {\n    const existing = this.payments.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...payment };\n    this.payments.set(id, updated);\n    return updated;\n  }\n\n  // Tasks\n  async getTasks(): Promise<Task[]> {\n    return Array.from(this.tasks.values());\n  }\n\n  async getTask(id: string): Promise<Task | undefined> {\n    return this.tasks.get(id);\n  }\n\n  async getTasksByUser(userId: string): Promise<Task[]> {\n    return Array.from(this.tasks.values()).filter(task => task.assignedTo === userId);\n  }\n\n  async createTask(insertTask: InsertTask): Promise<Task> {\n    const id = randomUUID();\n    const task: Task = { \n      ...insertTask, \n      id, \n      createdAt: new Date(),\n      status: insertTask.status || \"pending\",\n      priority: insertTask.priority || \"medium\",\n      description: insertTask.description || null,\n      assignedTo: insertTask.assignedTo || null,\n      bookingId: insertTask.bookingId || null,\n      dueDate: insertTask.dueDate || null\n    };\n    this.tasks.set(id, task);\n    return task;\n  }\n\n  async updateTask(id: string, task: Partial<InsertTask>): Promise<Task | undefined> {\n    const existing = this.tasks.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...task };\n    this.tasks.set(id, updated);\n    return updated;\n  }\n\n  // AI Insights\n  async getAiInsights(): Promise<AiInsight[]> {\n    return Array.from(this.aiInsights.values());\n  }\n\n  async getActiveAiInsights(): Promise<AiInsight[]> {\n    return Array.from(this.aiInsights.values()).filter(insight => insight.isActive);\n  }\n\n  async createAiInsight(insertAiInsight: InsertAiInsight): Promise<AiInsight> {\n    const id = randomUUID();\n    const insight: AiInsight = { \n      ...insertAiInsight, \n      id, \n      createdAt: new Date(),\n      priority: insertAiInsight.priority || \"medium\",\n      isActive: insertAiInsight.isActive ?? true,\n      data: insertAiInsight.data || null\n    };\n    this.aiInsights.set(id, insight);\n    return insight;\n  }\n\n  // Packages & Services  \n  async getPackages(): Promise<Package[]> {\n    return Array.from(this.packages.values());\n  }\n\n  async getPackage(id: string): Promise<Package | undefined> {\n    return this.packages.get(id);\n  }\n\n  async createPackage(insertPackage: InsertPackage): Promise<Package> {\n    const id = randomUUID();\n    const pkg: Package = { \n      ...insertPackage, \n      id, \n      createdAt: new Date(),\n      description: insertPackage.description || null,\n      applicableSpaceIds: insertPackage.applicableSpaceIds || null,\n      includedServiceIds: insertPackage.includedServiceIds || null,\n      isActive: insertPackage.isActive ?? true\n    };\n    this.packages.set(id, pkg);\n    return pkg;\n  }\n\n  async updatePackage(id: string, updates: Partial<InsertPackage>): Promise<Package | undefined> {\n    const pkg = this.packages.get(id);\n    if (!pkg) return undefined;\n    \n    const updated: Package = { ...pkg, ...updates };\n    this.packages.set(id, updated);\n    return updated;\n  }\n\n  async getServices(): Promise<Service[]> {\n    return Array.from(this.services.values());\n  }\n\n  async getService(id: string): Promise<Service | undefined> {\n    return this.services.get(id);\n  }\n\n  async createService(insertService: InsertService): Promise<Service> {\n    const id = randomUUID();\n    const service: Service = { \n      ...insertService, \n      id, \n      createdAt: new Date(),\n      description: insertService.description || null,\n      isActive: insertService.isActive ?? true\n    };\n    this.services.set(id, service);\n    return service;\n  }\n\n  async updateService(id: string, updates: Partial<InsertService>): Promise<Service | undefined> {\n    const service = this.services.get(id);\n    if (!service) return undefined;\n    \n    const updated: Service = { ...service, ...updates };\n    this.services.set(id, updated);\n    return updated;\n  }\n\n  // Delete operations\n  async deleteCustomer(id: string): Promise<boolean> {\n    return this.customers.delete(id);\n  }\n\n  async deleteVenue(id: string): Promise<boolean> {\n    return this.venues.delete(id);\n  }\n\n  async deleteSpace(id: string): Promise<boolean> {\n    return this.spaces.delete(id);\n  }\n\n  async deleteBooking(id: string): Promise<boolean> {\n    return this.bookings.delete(id);\n  }\n\n  async deletePackage(id: string): Promise<boolean> {\n    return this.packages.delete(id);\n  }\n\n  async deleteService(id: string): Promise<boolean> {\n    return this.services.delete(id);\n  }\n\n  async updatePackage(id: string, packageData: any): Promise<Package | null> {\n    const pkg = this.packages.get(id);\n    if (!pkg) return null;\n    \n    const updated = { ...pkg, ...packageData };\n    this.packages.set(id, updated);\n    return updated;\n  }\n\n  async updateService(id: string, serviceData: any): Promise<Service | null> {\n    const service = this.services.get(id);\n    if (!service) return null;\n    \n    const updated = { ...service, ...serviceData };\n    this.services.set(id, updated);\n    return updated;\n  }\n\n\n  // Tax Settings methods\n  async getTaxSettings(): Promise<TaxSetting[]> {\n    return Array.from(this.taxSettings.values());\n  }\n\n  async getTaxSetting(id: string): Promise<TaxSetting | undefined> {\n    return this.taxSettings.get(id);\n  }\n\n  async createTaxSetting(taxSetting: InsertTaxSetting): Promise<TaxSetting> {\n    const newTaxSetting: TaxSetting = {\n      id: randomUUID(),\n      ...taxSetting,\n      createdAt: new Date(),\n    };\n    this.taxSettings.set(newTaxSetting.id, newTaxSetting);\n    return newTaxSetting;\n  }\n\n  async updateTaxSetting(id: string, taxSetting: Partial<InsertTaxSetting>): Promise<TaxSetting | undefined> {\n    const existing = this.taxSettings.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...taxSetting };\n    this.taxSettings.set(id, updated);\n    return updated;\n  }\n\n  async deleteTaxSetting(id: string): Promise<boolean> {\n    return this.taxSettings.delete(id);\n  }\n\n  // Proposal methods\n  async getProposals(): Promise<Proposal[]> {\n    return Array.from(this.proposals.values());\n  }\n\n  async getProposal(id: string): Promise<Proposal | undefined> {\n    return this.proposals.get(id);\n  }\n\n  async getProposalsByCustomer(customerId: string): Promise<Proposal[]> {\n    return Array.from(this.proposals.values()).filter(p => p.customerId === customerId);\n  }\n\n  async createProposal(proposal: InsertProposal): Promise<Proposal> {\n    const newProposal: Proposal = {\n      id: randomUUID(),\n      ...proposal,\n      createdAt: new Date(),\n    };\n    this.proposals.set(newProposal.id, newProposal);\n    return newProposal;\n  }\n\n\n  async deleteProposal(id: string): Promise<boolean> {\n    return this.proposals.delete(id);\n  }\n\n  // Communication methods\n  async getCommunications(bookingId?: string): Promise<Communication[]> {\n    const allComms = Array.from(this.communications.values());\n    if (bookingId) {\n      return allComms.filter(comm => (comm as any).bookingId === bookingId);\n    }\n    return allComms;\n  }\n\n  async getCommunication(id: string): Promise<Communication | undefined> {\n    return this.communications.get(id);\n  }\n\n  async getCommunicationsByProposal(proposalId: string): Promise<Communication[]> {\n    return Array.from(this.communications.values()).filter(c => (c as any).proposalId === proposalId);\n  }\n\n  async getCommunicationsByCustomer(customerId: string): Promise<Communication[]> {\n    return Array.from(this.communications.values()).filter(c => c.customerId === customerId);\n  }\n\n  async getCommunicationByMessageId(messageId: string): Promise<Communication | undefined> {\n    return Array.from(this.communications.values()).find(c => (c as any).emailMessageId === messageId);\n  }\n\n  async createCommunication(communication: InsertCommunication): Promise<Communication> {\n    const newCommunication: Communication = {\n      id: randomUUID(),\n      bookingId: communication.bookingId || null,\n      customerId: communication.customerId || null,\n      proposalId: (communication as any).proposalId || null,\n      type: communication.type,\n      direction: communication.direction,\n      subject: communication.subject || null,\n      message: communication.message,\n      sender: (communication as any).sender || null,\n      recipient: (communication as any).recipient || null,\n      emailMessageId: (communication as any).emailMessageId || null,\n      sentAt: (communication as any).sentAt || new Date(),\n      readAt: communication.readAt || null,\n      status: communication.status || \"sent\"\n    };\n    this.communications.set(newCommunication.id, newCommunication);\n    return newCommunication;\n  }\n\n  async updateCommunication(id: string, communication: Partial<InsertCommunication>): Promise<Communication | undefined> {\n    const existing = this.communications.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...communication };\n    this.communications.set(id, updated);\n    return updated;\n  }\n\n  // Settings methods\n  async getSettings(): Promise<Setting[]> {\n    return Array.from(this.settings.values());\n  }\n\n  async getSetting(key: string): Promise<Setting | undefined> {\n    return Array.from(this.settings.values()).find(s => s.key === key);\n  }\n\n  async createSetting(setting: InsertSetting): Promise<Setting> {\n    const newSetting: Setting = {\n      id: randomUUID(),\n      ...setting,\n      updatedAt: new Date(),\n    };\n    this.settings.set(newSetting.id, newSetting);\n    return newSetting;\n  }\n\n  async updateSetting(key: string, value: any): Promise<Setting | undefined> {\n    const existing = Array.from(this.settings.values()).find(s => s.key === key);\n    if (existing) {\n      const updated = { ...existing, value, updatedAt: new Date() };\n      this.settings.set(existing.id, updated);\n      return updated;\n    } else {\n      // Create new setting if it doesn't exist\n      return this.createSetting({ key, value });\n    }\n  }\n\n  // Setup Styles methods\n  async getSetupStyles(): Promise<SetupStyle[]> {\n    return Array.from(this.setupStyles.values());\n  }\n\n  async getSetupStyle(id: string): Promise<SetupStyle | undefined> {\n    return this.setupStyles.get(id);\n  }\n\n  async createSetupStyle(setupStyle: InsertSetupStyle): Promise<SetupStyle> {\n    const newSetupStyle: SetupStyle = {\n      id: randomUUID(),\n      ...setupStyle,\n      createdAt: new Date(),\n      isActive: setupStyle.isActive ?? true,\n      description: setupStyle.description || null,\n      iconName: setupStyle.iconName || null,\n      minCapacity: setupStyle.minCapacity || null,\n      maxCapacity: setupStyle.maxCapacity || null\n    };\n    this.setupStyles.set(newSetupStyle.id, newSetupStyle);\n    return newSetupStyle;\n  }\n\n  async updateSetupStyle(id: string, setupStyle: Partial<InsertSetupStyle>): Promise<SetupStyle | undefined> {\n    const existing = this.setupStyles.get(id);\n    if (!existing) return undefined;\n    \n    // Deep clone the existing setup style to avoid reference sharing\n    const updated = { \n      ...existing, \n      ...setupStyle,\n      // If floorPlan is being updated, ensure it's a deep clone\n      floorPlan: setupStyle.floorPlan ? JSON.parse(JSON.stringify(setupStyle.floorPlan)) : existing.floorPlan\n    };\n    this.setupStyles.set(id, updated);\n    return updated;\n  }\n\n  async deleteSetupStyle(id: string): Promise<boolean> {\n    return this.setupStyles.delete(id);\n  }\n\n  // Initialize lead management sample data\n  private initializeLeadManagementData() {\n    // Sample campaign sources\n    const websiteSource: CampaignSource = {\n      id: randomUUID(),\n      name: \"Website Organic\",\n      slug: \"website-organic\",\n      isActive: true,\n      createdAt: new Date()\n    };\n    const googleAdsSource: CampaignSource = {\n      id: randomUUID(),\n      name: \"Google Ads\",\n      slug: \"google-ads\",\n      isActive: true,\n      createdAt: new Date()\n    };\n    const socialMediaSource: CampaignSource = {\n      id: randomUUID(),\n      name: \"Social Media\",\n      slug: \"social-media\",\n      isActive: true,\n      createdAt: new Date()\n    };\n\n    this.campaignSources.set(websiteSource.id, websiteSource);\n    this.campaignSources.set(googleAdsSource.id, googleAdsSource);\n    this.campaignSources.set(socialMediaSource.id, socialMediaSource);\n\n    // Sample tags\n    const hotLeadTag: Tag = {\n      id: randomUUID(),\n      name: \"Hot Lead\",\n      color: \"#ef4444\",\n      createdAt: new Date()\n    };\n    const corporateTag: Tag = {\n      id: randomUUID(),\n      name: \"Corporate\",\n      color: \"#3b82f6\",\n      createdAt: new Date()\n    };\n    const weddingTag: Tag = {\n      id: randomUUID(),\n      name: \"Wedding\",\n      color: \"#ec4899\",\n      createdAt: new Date()\n    };\n\n    this.tags.set(hotLeadTag.id, hotLeadTag);\n    this.tags.set(corporateTag.id, corporateTag);\n    this.tags.set(weddingTag.id, weddingTag);\n\n    // No sample leads - tenants create their own data\n  }\n\n  // Campaign Sources implementation\n  async getCampaignSources(): Promise<CampaignSource[]> {\n    return Array.from(this.campaignSources.values());\n  }\n\n  async createCampaignSource(source: InsertCampaignSource): Promise<CampaignSource> {\n    const newSource: CampaignSource = {\n      id: randomUUID(),\n      ...source,\n      createdAt: new Date(),\n    };\n    this.campaignSources.set(newSource.id, newSource);\n    return newSource;\n  }\n\n  async updateCampaignSource(id: string, source: Partial<InsertCampaignSource>): Promise<CampaignSource | undefined> {\n    const existing = this.campaignSources.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...source };\n    this.campaignSources.set(id, updated);\n    return updated;\n  }\n\n  // Tags implementation\n  async getTags(): Promise<Tag[]> {\n    return Array.from(this.tags.values());\n  }\n\n  async createTag(tag: InsertTag): Promise<Tag> {\n    const newTag: Tag = {\n      id: randomUUID(),\n      ...tag,\n      createdAt: new Date(),\n    };\n    this.tags.set(newTag.id, newTag);\n    return newTag;\n  }\n\n  async updateTag(id: string, tag: Partial<InsertTag>): Promise<Tag | undefined> {\n    const existing = this.tags.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...tag };\n    this.tags.set(id, updated);\n    return updated;\n  }\n\n  async deleteTag(id: string): Promise<boolean> {\n    // Remove all lead-tag associations for this tag\n    const toRemove = Array.from(this.leadTags).filter(combo => combo.endsWith(`:${id}`));\n    toRemove.forEach(combo => this.leadTags.delete(combo));\n    \n    return this.tags.delete(id);\n  }\n\n  // Leads implementation\n  async getLeads(filters?: { status?: string; source?: string; q?: string }): Promise<Lead[]> {\n    let leads = Array.from(this.leads.values());\n    \n    if (filters?.status) {\n      leads = leads.filter(lead => lead.status === filters.status);\n    }\n    \n    if (filters?.source) {\n      leads = leads.filter(lead => lead.sourceId === filters.source);\n    }\n    \n    if (filters?.q) {\n      const query = filters.q.toLowerCase();\n      leads = leads.filter(lead => \n        lead.firstName.toLowerCase().includes(query) ||\n        lead.lastName.toLowerCase().includes(query) ||\n        lead.email.toLowerCase().includes(query) ||\n        lead.eventType.toLowerCase().includes(query) ||\n        (lead.notes && lead.notes.toLowerCase().includes(query))\n      );\n    }\n    \n    return leads.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getLead(id: string): Promise<Lead | undefined> {\n    return this.leads.get(id);\n  }\n\n  async createLead(lead: InsertLead): Promise<Lead> {\n    const newLead: Lead = {\n      id: randomUUID(),\n      ...lead,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.leads.set(newLead.id, newLead);\n    return newLead;\n  }\n\n  async updateLead(id: string, lead: Partial<InsertLead>): Promise<Lead | undefined> {\n    const existing = this.leads.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...lead, updatedAt: new Date() };\n    this.leads.set(id, updated);\n    return updated;\n  }\n\n  async deleteLead(id: string): Promise<boolean> {\n    // Remove all activities, tasks, and tag associations for this lead\n    const activitiesToRemove = Array.from(this.leadActivities.values()).filter(a => a.leadId === id);\n    activitiesToRemove.forEach(activity => this.leadActivities.delete(activity.id));\n    \n    const tasksToRemove = Array.from(this.leadTasks.values()).filter(t => t.leadId === id);\n    tasksToRemove.forEach(task => this.leadTasks.delete(task.id));\n    \n    const tagsToRemove = Array.from(this.leadTags).filter(combo => combo.startsWith(`${id}:`));\n    tagsToRemove.forEach(combo => this.leadTags.delete(combo));\n    \n    return this.leads.delete(id);\n  }\n\n  // Lead Activities implementation\n  async getLeadActivities(leadId: string): Promise<LeadActivity[]> {\n    return Array.from(this.leadActivities.values())\n      .filter(activity => activity.leadId === leadId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createLeadActivity(activity: InsertLeadActivity): Promise<LeadActivity> {\n    const newActivity: LeadActivity = {\n      id: randomUUID(),\n      ...activity,\n      createdAt: new Date(),\n    };\n    this.leadActivities.set(newActivity.id, newActivity);\n    return newActivity;\n  }\n\n  // Lead Tasks implementation\n  async getLeadTasks(filters?: { assignee?: string; due?: string }): Promise<LeadTask[]> {\n    let tasks = Array.from(this.leadTasks.values());\n    \n    if (filters?.assignee) {\n      tasks = tasks.filter(task => task.assignedTo === filters.assignee);\n    }\n    \n    if (filters?.due) {\n      const dueDate = new Date(filters.due);\n      tasks = tasks.filter(task => \n        task.dueAt && task.dueAt.toDateString() === dueDate.toDateString()\n      );\n    }\n    \n    return tasks.sort((a, b) => {\n      if (!a.dueAt && !b.dueAt) return 0;\n      if (!a.dueAt) return 1;\n      if (!b.dueAt) return -1;\n      return a.dueAt.getTime() - b.dueAt.getTime();\n    });\n  }\n\n  async createLeadTask(task: InsertLeadTask): Promise<LeadTask> {\n    const newTask: LeadTask = {\n      id: randomUUID(),\n      ...task,\n      createdAt: new Date(),\n    };\n    this.leadTasks.set(newTask.id, newTask);\n    return newTask;\n  }\n\n  async updateLeadTask(id: string, task: Partial<InsertLeadTask>): Promise<LeadTask | undefined> {\n    const existing = this.leadTasks.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...task };\n    this.leadTasks.set(id, updated);\n    return updated;\n  }\n\n  // Tours implementation\n  async getTours(): Promise<Tour[]> {\n    return Array.from(this.tours.values()).sort((a, b) => a.scheduledAt.getTime() - b.scheduledAt.getTime());\n  }\n\n  async getTour(id: string): Promise<Tour | undefined> {\n    return this.tours.get(id);\n  }\n\n  async createTour(tour: InsertTour): Promise<Tour> {\n    const newTour: Tour = {\n      id: randomUUID(),\n      ...tour,\n      createdAt: new Date(),\n    };\n    this.tours.set(newTour.id, newTour);\n    return newTour;\n  }\n\n  async updateTour(id: string, tour: Partial<InsertTour>): Promise<Tour | undefined> {\n    const existing = this.tours.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...tour };\n    this.tours.set(id, updated);\n    return updated;\n  }\n\n  // Lead Tags (many-to-many) implementation\n  async getLeadTags(leadId: string): Promise<Tag[]> {\n    const tagIds = Array.from(this.leadTags)\n      .filter(combo => combo.startsWith(`${leadId}:`))\n      .map(combo => combo.split(':')[1]);\n    \n    return tagIds.map(tagId => this.tags.get(tagId)).filter(Boolean) as Tag[];\n  }\n\n  async addLeadTag(leadId: string, tagId: string): Promise<void> {\n    this.leadTags.add(`${leadId}:${tagId}`);\n  }\n\n  async removeLeadTag(leadId: string, tagId: string): Promise<void> {\n    this.leadTags.delete(`${leadId}:${tagId}`);\n  }\n\n  // ============================================================================\n  // MULTI-TENANT METHODS\n  // ============================================================================\n\n  // Subscription Packages\n  async getSubscriptionPackages(): Promise<SubscriptionPackage[]> {\n    return Array.from(this.subscriptionPackages.values());\n  }\n\n  async getSubscriptionPackage(id: string): Promise<SubscriptionPackage | undefined> {\n    return this.subscriptionPackages.get(id);\n  }\n\n  async createSubscriptionPackage(packageData: InsertSubscriptionPackage): Promise<SubscriptionPackage> {\n    const id = randomUUID();\n    const subscriptionPackage: SubscriptionPackage = {\n      id,\n      ...packageData,\n      description: packageData.description || null,\n      billingInterval: packageData.billingInterval || \"monthly\",\n      trialDays: packageData.trialDays || null,\n      maxVenues: packageData.maxVenues || null,\n      maxUsers: packageData.maxUsers || null,\n      maxBookingsPerMonth: packageData.maxBookingsPerMonth || null,\n      features: packageData.features || [],\n      isActive: packageData.isActive ?? null,\n      sortOrder: packageData.sortOrder || null,\n      createdAt: new Date(),\n    };\n    this.subscriptionPackages.set(id, subscriptionPackage);\n    return subscriptionPackage;\n  }\n\n  async updateSubscriptionPackage(id: string, packageData: Partial<InsertSubscriptionPackage>): Promise<SubscriptionPackage | undefined> {\n    const existing = this.subscriptionPackages.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...packageData };\n    this.subscriptionPackages.set(id, updated);\n    return updated;\n  }\n\n  async deleteSubscriptionPackage(id: string): Promise<boolean> {\n    return this.subscriptionPackages.delete(id);\n  }\n\n  // Tenants\n  async getTenants(): Promise<Tenant[]> {\n    return Array.from(this.tenants.values());\n  }\n\n  async getTenant(id: string): Promise<Tenant | undefined> {\n    return this.tenants.get(id);\n  }\n\n  async getTenantBySubdomain(subdomain: string): Promise<Tenant | undefined> {\n    return Array.from(this.tenants.values()).find(t => t.subdomain === subdomain);\n  }\n\n  async createTenant(tenantData: InsertTenant): Promise<Tenant> {\n    const id = randomUUID();\n    const tenant: Tenant = {\n      id,\n      ...tenantData,\n      subdomain: tenantData.subdomain || null,\n      customDomain: tenantData.customDomain || null,\n      trialEndsAt: tenantData.trialEndsAt || null,\n      subscriptionStartedAt: tenantData.subscriptionStartedAt || null,\n      subscriptionEndsAt: tenantData.subscriptionEndsAt || null,\n      stripeCustomerId: tenantData.stripeCustomerId || null,\n      stripeSubscriptionId: tenantData.stripeSubscriptionId || null,\n      logoUrl: tenantData.logoUrl || null,\n      primaryColor: tenantData.primaryColor || \"#3b82f6\",\n      customCss: tenantData.customCss || null,\n      currentUsers: tenantData.currentUsers || 0,\n      currentVenues: tenantData.currentVenues || 0,\n      monthlyBookings: tenantData.monthlyBookings || 0,\n      lastBillingDate: tenantData.lastBillingDate || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.tenants.set(id, tenant);\n    return tenant;\n  }\n\n  async updateTenant(id: string, tenantData: Partial<InsertTenant>): Promise<Tenant | undefined> {\n    const existing = this.tenants.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...tenantData, updatedAt: new Date() };\n    this.tenants.set(id, updated);\n    return updated;\n  }\n\n  async deleteTenant(id: string): Promise<boolean> {\n    return this.tenants.delete(id);\n  }\n\n  // ============================================================================\n  // INITIALIZATION METHODS\n  // ============================================================================\n\n  private initializeSubscriptionPackages() {\n    // Create sample subscription packages\n    const starterPackage: SubscriptionPackage = {\n      id: randomUUID(),\n      name: \"Starter\",\n      description: \"Perfect for small venues getting started\",\n      price: \"29.99\",\n      billingInterval: \"monthly\",\n      trialDays: 14,\n      maxVenues: 1,\n      maxUsers: 3,\n      maxBookingsPerMonth: 50,\n      features: [\"dashboard_analytics\", \"venue_management\", \"event_booking\", \"customer_management\", \"proposal_system\"],\n      isActive: true,\n      sortOrder: 1,\n      createdAt: new Date(),\n    };\n\n    const professionalPackage: SubscriptionPackage = {\n      id: randomUUID(),\n      name: \"Professional\",\n      description: \"For growing venue businesses\",\n      price: \"79.99\",\n      billingInterval: \"monthly\",\n      trialDays: 14,\n      maxVenues: 3,\n      maxUsers: 10,\n      maxBookingsPerMonth: 200,\n      features: [\"dashboard_analytics\", \"venue_management\", \"event_booking\", \"customer_management\", \"proposal_system\", \"payment_processing\", \"leads_management\", \"ai_analytics\", \"advanced_reports\", \"task_management\"],\n      isActive: true,\n      sortOrder: 2,\n      createdAt: new Date(),\n    };\n\n    const enterprisePackage: SubscriptionPackage = {\n      id: randomUUID(),\n      name: \"Enterprise\",\n      description: \"For large venue management companies\",\n      price: \"199.99\",\n      billingInterval: \"monthly\",\n      trialDays: 30,\n      maxVenues: 10,\n      maxUsers: 50,\n      maxBookingsPerMonth: 1000,\n      features: [\"dashboard_analytics\", \"venue_management\", \"event_booking\", \"customer_management\", \"proposal_system\", \"payment_processing\", \"leads_management\", \"ai_analytics\", \"voice_booking\", \"floor_plans\", \"advanced_reports\", \"task_management\", \"custom_branding\", \"api_access\", \"priority_support\", \"advanced_integrations\", \"multi_location\", \"custom_fields\"],\n      isActive: true,\n      sortOrder: 3,\n      createdAt: new Date(),\n    };\n\n    this.subscriptionPackages.set(starterPackage.id, starterPackage);\n    this.subscriptionPackages.set(professionalPackage.id, professionalPackage);\n    this.subscriptionPackages.set(enterprisePackage.id, enterprisePackage);\n  }\n\n\n}\n\nexport const storage = new MemStorage();\n","size_bytes":70052},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  tenantId: varchar(\"tenant_id\").references(() => tenants.id), // null for super admin\n  role: text(\"role\").notNull().default(\"tenant_user\"), // super_admin, tenant_admin, tenant_user\n  permissions: jsonb(\"permissions\").default('[]'), // Granular permissions array\n  isActive: boolean(\"is_active\").default(true),\n  lastLoginAt: timestamp(\"last_login_at\"),\n  stripeAccountId: text(\"stripe_account_id\"), // Stripe Connect account ID\n  stripeAccountStatus: text(\"stripe_account_status\"), // pending, active, restricted, etc.\n  stripeOnboardingCompleted: boolean(\"stripe_onboarding_completed\").default(false),\n  stripeChargesEnabled: boolean(\"stripe_charges_enabled\").default(false),\n  stripePayoutsEnabled: boolean(\"stripe_payouts_enabled\").default(false),\n  stripeConnectedAt: timestamp(\"stripe_connected_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const venues = pgTable(\"venues\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: varchar(\"tenant_id\").references(() => tenants.id).notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  capacity: integer(\"capacity\").notNull(),\n  pricePerHour: decimal(\"price_per_hour\", { precision: 10, scale: 2 }),\n  amenities: text(\"amenities\").array(),\n  imageUrl: text(\"image_url\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const setupStyles = pgTable(\"setup_styles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  iconName: text(\"icon_name\"), // Lucide icon name for UI display\n  category: text(\"category\").notNull().default(\"general\"), // dining, meeting, presentation, social, custom\n  minCapacity: integer(\"min_capacity\"),\n  maxCapacity: integer(\"max_capacity\"),\n  floorPlan: jsonb(\"floor_plan\"), // 2D floor plan configuration showing the layout for this setup style\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const spaces = pgTable(\"spaces\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  venueId: varchar(\"venue_id\").references(() => venues.id).notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  capacity: integer(\"capacity\").notNull(),\n  pricePerHour: decimal(\"price_per_hour\", { precision: 10, scale: 2 }),\n  amenities: text(\"amenities\").array(),\n  imageUrl: text(\"image_url\"),\n  availableSetupStyles: text(\"available_setup_styles\").array(), // Available setup styles for this space (references setupStyles.id)\n  floorPlan: jsonb(\"floor_plan\"), // 2D floor plan configuration with elements, furniture, etc.\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Companies table for B2B organizations\nexport const companies = pgTable(\"companies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: varchar(\"tenant_id\").references(() => tenants.id).notNull(),\n  name: text(\"name\").notNull(),\n  industry: text(\"industry\"),\n  description: text(\"description\"),\n  website: text(\"website\"),\n  address: text(\"address\"),\n  phone: text(\"phone\"),\n  email: text(\"email\"), // Main company contact email\n  notes: text(\"notes\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const customers = pgTable(\"customers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: varchar(\"tenant_id\").references(() => tenants.id).notNull(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  customerType: text(\"customer_type\").notNull().default(\"individual\"), // \"individual\" or \"business\"\n  companyId: varchar(\"company_id\").references(() => companies.id), // Link to company for business customers\n  jobTitle: text(\"job_title\"), // Position/title for business customers\n  department: text(\"department\"), // Department for business customers\n  leadScore: integer(\"lead_score\").default(0),\n  status: text(\"status\").notNull().default(\"lead\"), // lead, customer, inactive\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Contract table to group multiple events together\nexport const contracts = pgTable(\"contracts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: varchar(\"tenant_id\").references(() => tenants.id).notNull(),\n  customerId: varchar(\"customer_id\").references(() => customers.id).notNull(),\n  contractName: text(\"contract_name\").notNull(),\n  status: text(\"status\").notNull().default(\"draft\"), // draft, active, completed, cancelled\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const bookings = pgTable(\"bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: varchar(\"tenant_id\").references(() => tenants.id).notNull(),\n  contractId: varchar(\"contract_id\").references(() => contracts.id), // Link to contract\n  eventName: text(\"event_name\").notNull(),\n  eventType: text(\"event_type\").notNull(),\n  customerId: varchar(\"customer_id\").references(() => customers.id),\n  venueId: varchar(\"venue_id\").references(() => venues.id),\n  spaceId: varchar(\"space_id\").references(() => spaces.id),\n  eventDate: timestamp(\"event_date\").notNull(),\n  endDate: timestamp(\"end_date\"), // For multi-day events\n  startTime: text(\"start_time\").notNull(),\n  endTime: text(\"end_time\").notNull(),\n  guestCount: integer(\"guest_count\").notNull(),\n  setupStyle: text(\"setup_style\"), // round-tables, u-shape, classroom, theater, cocktail, banquet, conference, custom\n  packageId: varchar(\"package_id\"),\n  // Proposal integration\n  proposalId: varchar(\"proposal_id\"), // Direct link to proposal\n  proposalStatus: text(\"proposal_status\").default(\"none\"), // none, sent, viewed, accepted, declined\n  proposalSentAt: timestamp(\"proposal_sent_at\"),\n  proposalViewedAt: timestamp(\"proposal_viewed_at\"),\n  proposalRespondedAt: timestamp(\"proposal_responded_at\"),\n  selectedServices: text(\"selected_services\").array(),\n  pricingModel: text(\"pricing_model\").default(\"fixed\"),\n  itemQuantities: jsonb(\"item_quantities\"),\n  pricingOverrides: jsonb(\"pricing_overrides\"),\n  taxFeeOverrides: jsonb(\"tax_fee_overrides\"), // Legacy: Override taxes and fees for specific services/packages in this event\n  serviceTaxOverrides: jsonb(\"service_tax_overrides\"), // New: Per-service tax and fee overrides with inheritance control\n  status: text(\"status\").notNull().default(\"inquiry\"), // inquiry, pending, tentative, confirmed_deposit_paid, confirmed_fully_paid, completed, cancelled_refunded\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }),\n  depositAmount: decimal(\"deposit_amount\", { precision: 10, scale: 2 }),\n  depositPaid: boolean(\"deposit_paid\").default(false),\n  isMultiDay: boolean(\"is_multi_day\").default(false),\n  notes: text(\"notes\"),\n  // Cancellation tracking\n  cancellationReason: text(\"cancellation_reason\"), // Common reasons: client_request, venue_conflict, weather, insufficient_payment, etc.\n  cancellationNote: text(\"cancellation_note\"), // Additional details about cancellation\n  cancelledAt: timestamp(\"cancelled_at\"),\n  cancelledBy: varchar(\"cancelled_by\").references(() => users.id),\n  completedAt: timestamp(\"completed_at\"), // Auto-set when event date passes and fully paid\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const proposals = pgTable(\"proposals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookingId: varchar(\"booking_id\").references(() => bookings.id),\n  customerId: varchar(\"customer_id\").references(() => customers.id),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }),\n  depositAmount: decimal(\"deposit_amount\", { precision: 10, scale: 2 }),\n  depositType: text(\"deposit_type\").default(\"percentage\"), // percentage, fixed\n  depositValue: decimal(\"deposit_value\", { precision: 5, scale: 2 }),\n  packageId: varchar(\"package_id\"),\n  selectedServices: text(\"selected_services\").array(),\n  status: text(\"status\").notNull().default(\"draft\"), // draft, sent, viewed, accepted, rejected, converted\n  validUntil: timestamp(\"valid_until\"),\n  sentAt: timestamp(\"sent_at\"),\n  viewedAt: timestamp(\"viewed_at\"),\n  emailOpened: boolean(\"email_opened\").default(false),\n  emailOpenedAt: timestamp(\"email_opened_at\"),\n  openCount: integer(\"open_count\").default(0),\n  signature: text(\"signature\"), // Digital signature for acceptance\n  acceptedAt: timestamp(\"accepted_at\"),\n  declinedAt: timestamp(\"declined_at\"),\n  depositPaid: boolean(\"deposit_paid\").default(false),\n  depositPaidAt: timestamp(\"deposit_paid_at\"),\n  paymentIntentId: text(\"payment_intent_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  // Event details for conversion\n  eventType: text(\"event_type\"),\n  eventDate: timestamp(\"event_date\"),\n  startTime: text(\"start_time\"), \n  endTime: text(\"end_time\"),\n  guestCount: integer(\"guest_count\"),\n  venueId: varchar(\"venue_id\").references(() => venues.id),\n  spaceId: varchar(\"space_id\").references(() => spaces.id),\n});\n\n// Settings table for deposit configuration\nexport const settings = pgTable(\"settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: text(\"key\").notNull().unique(),\n  value: jsonb(\"value\").notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Communication tracking\nexport const communications = pgTable(\"communications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookingId: varchar(\"booking_id\").references(() => bookings.id),\n  proposalId: varchar(\"proposal_id\").references(() => proposals.id),\n  customerId: varchar(\"customer_id\").references(() => customers.id),\n  type: text(\"type\").notNull(), // email, sms, call, internal\n  direction: text(\"direction\").notNull(), // inbound, outbound\n  subject: text(\"subject\"),\n  message: text(\"message\").notNull(),\n  sender: text(\"sender\"), // Email sender address\n  recipient: text(\"recipient\"), // Email recipient address\n  emailMessageId: text(\"email_message_id\").unique(), // Unique email message ID for duplicate detection\n  sentAt: timestamp(\"sent_at\").defaultNow(),\n  readAt: timestamp(\"read_at\"),\n  status: text(\"status\").default(\"sent\"), // sent, delivered, read, failed, received\n});\n\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookingId: varchar(\"booking_id\").references(() => bookings.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentType: text(\"payment_type\").notNull(), // deposit, final, refund\n  paymentMethod: text(\"payment_method\").notNull(), // card, bank_transfer, check\n  status: text(\"status\").notNull().default(\"pending\"), // pending, completed, failed, refunded\n  transactionId: text(\"transaction_id\"),\n  processedAt: timestamp(\"processed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  bookingId: varchar(\"booking_id\").references(() => bookings.id),\n  dueDate: timestamp(\"due_date\"),\n  priority: text(\"priority\").notNull().default(\"medium\"), // low, medium, high, urgent\n  status: text(\"status\").notNull().default(\"pending\"), // pending, in_progress, completed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const aiInsights = pgTable(\"ai_insights\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(), // recommendation, prediction, analysis\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  data: jsonb(\"data\"),\n  priority: text(\"priority\").notNull().default(\"medium\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const packages = pgTable(\"packages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\").notNull(), // wedding, corporate, social, etc.\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  pricingModel: text(\"pricing_model\").notNull().default(\"fixed\"), // \"fixed\" or \"per_person\"\n  applicableSpaceIds: text(\"applicable_space_ids\").array(), // Which venues this applies to\n  includedServiceIds: text(\"included_service_ids\").array(), // Which services are included\n  enabledTaxIds: text(\"enabled_tax_ids\").array(), // Which taxes apply to this package\n  enabledFeeIds: text(\"enabled_fee_ids\").array(), // Which fees apply to this package\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const services = pgTable(\"services\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\").notNull(), // catering, entertainment, decor, etc.\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  pricingModel: text(\"pricing_model\").notNull().default(\"fixed\"), // \"fixed\" or \"per_person\"\n  enabledTaxIds: text(\"enabled_tax_ids\").array(), // Which taxes apply to this service\n  enabledFeeIds: text(\"enabled_fee_ids\").array(), // Which fees apply to this service\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Tax and fees configuration\nexport const taxSettings = pgTable(\"tax_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // 'tax', 'fee', 'service_charge'\n  calculation: text(\"calculation\").notNull(), // 'percentage', 'fixed'\n  value: decimal(\"value\", { precision: 10, scale: 2 }).notNull(),\n  applyTo: text(\"apply_to\").notNull(), // 'packages', 'services', 'both', 'total'\n  isActive: boolean(\"is_active\").default(true),\n  isTaxable: boolean(\"is_taxable\").default(false), // Whether this fee/charge is subject to tax\n  applicableTaxIds: text(\"applicable_tax_ids\").array(), // Array of tax IDs that apply to this fee\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Lead management system\nexport const campaignSources = pgTable(\"campaign_sources\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const tags = pgTable(\"tags\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  color: text(\"color\").notNull().default(\"#3b82f6\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const leads = pgTable(\"leads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  venueId: varchar(\"venue_id\").references(() => venues.id),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  eventType: text(\"event_type\").notNull(),\n  guestCount: integer(\"guest_count\").notNull(),\n  dateStart: timestamp(\"date_start\"),\n  dateEnd: timestamp(\"date_end\"),\n  budgetMin: decimal(\"budget_min\", { precision: 10, scale: 2 }),\n  budgetMax: decimal(\"budget_max\", { precision: 10, scale: 2 }),\n  preferredContact: text(\"preferred_contact\").notNull().default(\"email\"), // email, phone, sms\n  notes: text(\"notes\"),\n  status: text(\"status\").notNull().default(\"NEW\"), // NEW, CONTACTED, TOUR_SCHEDULED, PROPOSAL_SENT, WON, LOST\n  sourceId: varchar(\"source_id\").references(() => campaignSources.id),\n  utmSource: text(\"utm_source\"),\n  utmMedium: text(\"utm_medium\"),\n  utmCampaign: text(\"utm_campaign\"),\n  consentEmail: boolean(\"consent_email\").default(true),\n  consentSms: boolean(\"consent_sms\").default(false),\n  convertedCustomerId: varchar(\"converted_customer_id\").references(() => customers.id), // When lead converts to customer\n  proposalId: varchar(\"proposal_id\").references(() => proposals.id), // Link to sent proposal\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const leadActivities = pgTable(\"lead_activities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  leadId: varchar(\"lead_id\").references(() => leads.id).notNull(),\n  type: text(\"type\").notNull(), // NOTE, EMAIL, SMS, CALL, STATUS_CHANGE, TOUR_SCHEDULED\n  body: text(\"body\").notNull(),\n  meta: jsonb(\"meta\"), // Additional data like email template used, etc.\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const leadTags = pgTable(\"lead_tags\", {\n  leadId: varchar(\"lead_id\").references(() => leads.id).notNull(),\n  tagId: varchar(\"tag_id\").references(() => tags.id).notNull(),\n});\n\nexport const leadTasks = pgTable(\"lead_tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  leadId: varchar(\"lead_id\").references(() => leads.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  dueAt: timestamp(\"due_at\"),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  status: text(\"status\").notNull().default(\"OPEN\"), // OPEN, DONE\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const tours = pgTable(\"tours\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  leadId: varchar(\"lead_id\").references(() => leads.id).notNull(),\n  venueId: varchar(\"venue_id\").references(() => venues.id).notNull(),\n  scheduledAt: timestamp(\"scheduled_at\").notNull(),\n  duration: integer(\"duration\").notNull().default(30), // minutes\n  status: text(\"status\").notNull().default(\"SCHEDULED\"), // SCHEDULED, COMPLETED, CANCELLED, NO_SHOW\n  attendeeCount: integer(\"attendee_count\").default(1),\n  notes: text(\"notes\"),\n  conductedBy: varchar(\"conducted_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Multi-tenant tables for SaaS functionality\nexport const subscriptionPackages = pgTable(\"subscription_packages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(), // \"Starter\", \"Professional\", \"Enterprise\"\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  billingInterval: text(\"billing_interval\").notNull().default(\"monthly\"), // \"monthly\", \"yearly\"\n  trialDays: integer(\"trial_days\").default(14),\n  maxVenues: integer(\"max_venues\").default(1),\n  maxUsers: integer(\"max_users\").default(3),\n  maxBookingsPerMonth: integer(\"max_bookings_per_month\").default(100),\n  features: jsonb(\"features\").default('[]'), // Array of feature flags like [\"advanced_analytics\", \"custom_branding\"]\n  isActive: boolean(\"is_active\").default(true),\n  sortOrder: integer(\"sort_order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const tenants = pgTable(\"tenants\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").notNull().unique(), // URL-friendly name for subdomains\n  subdomain: text(\"subdomain\").unique(), // e.g., \"marriott\"  \n  customDomain: text(\"custom_domain\"), // e.g., \"bookings.marriott.com\"\n  subscriptionPackageId: varchar(\"subscription_package_id\").references(() => subscriptionPackages.id).notNull(),\n  status: text(\"status\").notNull().default(\"trial\"), // trial, active, suspended, cancelled\n  trialEndsAt: timestamp(\"trial_ends_at\"),\n  subscriptionStartedAt: timestamp(\"subscription_started_at\"),\n  subscriptionEndsAt: timestamp(\"subscription_ends_at\"),\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  stripeSubscriptionId: text(\"stripe_subscription_id\"),\n  // Branding options\n  logoUrl: text(\"logo_url\"),\n  primaryColor: text(\"primary_color\").default(\"#3b82f6\"),\n  customCss: text(\"custom_css\"),\n  // Usage tracking\n  currentUsers: integer(\"current_users\").default(0),\n  currentVenues: integer(\"current_venues\").default(0),\n  monthlyBookings: integer(\"monthly_bookings\").default(0),\n  lastBillingDate: timestamp(\"last_billing_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true });\nexport const insertVenueSchema = createInsertSchema(venues).omit({ id: true });\nexport const insertCompanySchema = createInsertSchema(companies).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertCustomerSchema = createInsertSchema(customers).omit({ id: true, createdAt: true });\nexport const insertContractSchema = createInsertSchema(contracts).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertSettingsSchema = createInsertSchema(settings).omit({ id: true, updatedAt: true });\nexport const insertCommunicationSchema = createInsertSchema(communications).omit({ id: true, sentAt: true });\nexport const insertBookingSchema = createInsertSchema(bookings, {\n  eventDate: z.union([z.string(), z.date()]).transform((val) => \n    typeof val === 'string' ? new Date(val) : val\n  ),\n  endDate: z.union([z.string(), z.date()]).transform((val) => \n    typeof val === 'string' ? new Date(val) : val\n  ).optional(),\n  proposalSentAt: z.union([z.string(), z.date(), z.null()]).transform((val) => \n    val === null ? null : (typeof val === 'string' ? new Date(val) : val)\n  ).optional(),\n  proposalViewedAt: z.union([z.string(), z.date(), z.null()]).transform((val) => \n    val === null ? null : (typeof val === 'string' ? new Date(val) : val)\n  ).optional(),\n  proposalRespondedAt: z.union([z.string(), z.date(), z.null()]).transform((val) => \n    val === null ? null : (typeof val === 'string' ? new Date(val) : val)\n  ).optional(),\n}).omit({ id: true, createdAt: true });\nexport const insertProposalSchema = createInsertSchema(proposals, {\n  validUntil: z.union([z.string(), z.date(), z.null()]).transform((val) => \n    val === null ? null : (typeof val === 'string' ? new Date(val) : val)\n  ).optional(),\n  eventDate: z.union([z.string(), z.date(), z.null()]).transform((val) => \n    val === null ? null : (typeof val === 'string' ? new Date(val) : val)\n  ).optional(),\n}).omit({ id: true, createdAt: true, sentAt: true, viewedAt: true });\nexport const insertPaymentSchema = createInsertSchema(payments).omit({ id: true, createdAt: true, processedAt: true });\nexport const insertTaskSchema = createInsertSchema(tasks).omit({ id: true, createdAt: true });\nexport const insertAiInsightSchema = createInsertSchema(aiInsights).omit({ id: true, createdAt: true });\nexport const insertPackageSchema = createInsertSchema(packages).omit({ id: true, createdAt: true });\nexport const insertServiceSchema = createInsertSchema(services).omit({ id: true, createdAt: true });\nexport const insertSpaceSchema = createInsertSchema(spaces).omit({ id: true, createdAt: true });\nexport const insertSetupStyleSchema = createInsertSchema(setupStyles).omit({ id: true, createdAt: true });\nexport const insertTaxSettingSchema = createInsertSchema(taxSettings).omit({ id: true, createdAt: true });\nexport const insertCampaignSourceSchema = createInsertSchema(campaignSources).omit({ id: true, createdAt: true });\nexport const insertTagSchema = createInsertSchema(tags).omit({ id: true, createdAt: true });\nexport const insertLeadSchema = createInsertSchema(leads, {\n  dateStart: z.union([z.string(), z.date(), z.null()]).transform((val) => \n    val === null ? null : (typeof val === 'string' ? new Date(val) : val)\n  ).optional(),\n  dateEnd: z.union([z.string(), z.date(), z.null()]).transform((val) => \n    val === null ? null : (typeof val === 'string' ? new Date(val) : val)\n  ).optional(),\n}).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertLeadActivitySchema = createInsertSchema(leadActivities).omit({ id: true, createdAt: true });\nexport const insertLeadTaskSchema = createInsertSchema(leadTasks).omit({ id: true, createdAt: true });\nexport const insertTourSchema = createInsertSchema(tours).omit({ id: true, createdAt: true });\nexport const insertSubscriptionPackageSchema = createInsertSchema(subscriptionPackages).omit({ id: true, createdAt: true });\nexport const insertTenantSchema = createInsertSchema(tenants).omit({ id: true, createdAt: true, updatedAt: true });\n\n// Types\nexport type User = typeof users.$inferSelect;\n\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Venue = typeof venues.$inferSelect;\nexport type InsertVenue = z.infer<typeof insertVenueSchema>;\nexport type Company = typeof companies.$inferSelect;\nexport type InsertCompany = z.infer<typeof insertCompanySchema>;\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type Contract = typeof contracts.$inferSelect;\nexport type InsertContract = z.infer<typeof insertContractSchema>;\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type Proposal = typeof proposals.$inferSelect;\nexport type InsertProposal = z.infer<typeof insertProposalSchema>;\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type AiInsight = typeof aiInsights.$inferSelect;\nexport type InsertAiInsight = z.infer<typeof insertAiInsightSchema>;\nexport type Package = typeof packages.$inferSelect;\nexport type InsertPackage = z.infer<typeof insertPackageSchema>;\nexport type Service = typeof services.$inferSelect;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type Communication = typeof communications.$inferSelect;\nexport type InsertCommunication = z.infer<typeof insertCommunicationSchema>;\nexport type Space = typeof spaces.$inferSelect;\nexport type InsertSpace = z.infer<typeof insertSpaceSchema>;\nexport type SetupStyle = typeof setupStyles.$inferSelect;\nexport type InsertSetupStyle = z.infer<typeof insertSetupStyleSchema>;\nexport type TaxSetting = typeof taxSettings.$inferSelect;\nexport type InsertTaxSetting = z.infer<typeof insertTaxSettingSchema>;\nexport type CampaignSource = typeof campaignSources.$inferSelect;\nexport type InsertCampaignSource = z.infer<typeof insertCampaignSourceSchema>;\nexport type Tag = typeof tags.$inferSelect;\nexport type InsertTag = z.infer<typeof insertTagSchema>;\nexport type Lead = typeof leads.$inferSelect;\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\nexport type LeadActivity = typeof leadActivities.$inferSelect;\nexport type InsertLeadActivity = z.infer<typeof insertLeadActivitySchema>;\nexport type LeadTask = typeof leadTasks.$inferSelect;\nexport type InsertLeadTask = z.infer<typeof insertLeadTaskSchema>;\nexport type Tour = typeof tours.$inferSelect;\nexport type InsertTour = z.infer<typeof insertTourSchema>;\nexport type SubscriptionPackage = typeof subscriptionPackages.$inferSelect;\nexport type InsertSubscriptionPackage = z.infer<typeof insertSubscriptionPackageSchema>;\nexport type Tenant = typeof tenants.$inferSelect;\nexport type InsertTenant = z.infer<typeof insertTenantSchema>;\n\n// Add foreign key references after all tables are defined to avoid circular dependencies\nexport const bookingsRelations = {\n  packageId: {\n    foreignKey: () => packages.id\n  },\n  proposalId: {\n    foreignKey: () => proposals.id\n  }\n};\n\nexport const proposalsRelations = {\n  packageId: {\n    foreignKey: () => packages.id\n  }\n};\n","size_bytes":28530},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QuickActions } from \"@/components/dashboard/quick-actions\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Events from \"@/pages/events\";\nimport Customers from \"@/pages/customers\";\nimport Payments from \"@/pages/payments\";\nimport Tasks from \"@/pages/tasks\";\nimport Venues from \"@/pages/venues\";\nimport Leads from \"@/pages/Leads\";\nimport SetupStyles from \"@/pages/setup-styles\";\nimport Packages from \"@/pages/packages\";\nimport Settings from \"@/pages/settings\";\nimport AIAnalytics from \"@/pages/ai-analytics\";\nimport Reports from \"@/pages/reports\";\nimport VoiceBooking from \"@/pages/voice-booking\";\nimport ProposalView from \"@/pages/proposal-view\";\nimport Proposals from \"@/pages/proposals\";\nimport PaymentCheckout from \"@/pages/payment-checkout\";\nimport PaymentSuccess from \"@/pages/payment-success\";\nimport NotFound from \"@/pages/not-found\";\nimport SuperAdminDashboard from \"@/pages/super-admin-dashboard\";\nimport SuperAdminLogin from \"@/pages/super-admin-login\";\nimport TenantLogin from \"@/pages/tenant-login\";\nimport Users from \"@/pages/users\";\nimport Landing from \"@/pages/landing\";\nimport Signup from \"@/pages/signup\";\nimport { ProtectedRoute } from \"@/components/auth/ProtectedRoute\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/dashboard\">\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/events\">\n        <ProtectedRoute>\n          <Events />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/customers\">\n        <ProtectedRoute>\n          <Customers />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/leads\">\n        <ProtectedRoute>\n          <Leads />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/payments\">\n        <ProtectedRoute>\n          <Payments />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/tasks\">\n        <ProtectedRoute>\n          <Tasks />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/venues\">\n        <ProtectedRoute>\n          <Venues />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/setup-styles\">\n        <ProtectedRoute>\n          <SetupStyles />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/packages\">\n        <ProtectedRoute>\n          <Packages />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/ai-analytics\">\n        <ProtectedRoute>\n          <AIAnalytics />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/reports\">\n        <ProtectedRoute>\n          <Reports />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/voice-booking\">\n        <ProtectedRoute>\n          <VoiceBooking />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/settings\">\n        <ProtectedRoute>\n          <Settings />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/proposals\">\n        <ProtectedRoute>\n          <Proposals />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/users\">\n        <ProtectedRoute requiredRole=\"tenant_admin\">\n          <Users />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/proposal/:proposalId\" component={ProposalView} />\n      <Route path=\"/proposal/:proposalId/payment\" component={PaymentCheckout} />\n      <Route path=\"/proposal/:proposalId/success\" component={PaymentSuccess} />\n      <Route path=\"/super-admin\">\n        <ProtectedRoute requiredRole=\"super_admin\" redirectTo=\"/super-admin/login\">\n          <SuperAdminDashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/super-admin/login\" component={SuperAdminLogin} />\n      <Route path=\"/login\" component={TenantLogin} />\n      <Route path=\"/signup\" component={Signup} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n        <QuickActions />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4279},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(214 91% 56%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(263 60% 56%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(162 84% 37%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --warning: hsl(33 100% 52%);\n  --warning-foreground: hsl(0 0% 100%);\n  --chart-1: hsl(214 91% 56%);\n  --chart-2: hsl(162 84% 37%);\n  --chart-3: hsl(33 100% 52%);\n  --chart-4: hsl(263 60% 56%);\n  --chart-5: hsl(356 90% 54%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(214 91% 56%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(214 91% 56%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.05);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.05);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.05), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.1);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.05), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.1);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.05), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.1);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.05), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.1);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.05), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.1);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.05);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n/* Line clamp utilities for better text truncation */\n.line-clamp-1 {\n  display: -webkit-box;\n  -webkit-line-clamp: 1;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.line-clamp-2 {\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(214 91% 56%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(263 60% 56%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(162 84% 37%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --warning: hsl(33 100% 52%);\n  --warning-foreground: hsl(0 0% 100%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(214 91% 56%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(214 91% 56%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.05);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.05);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.05), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.1);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.05), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.1);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.05), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.1);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.05), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.1);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.05), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.1);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.05);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', 'Open Sans', sans-serif;\n  }\n\n  .sidebar-scroll::-webkit-scrollbar {\n    width: 4px;\n  }\n  \n  .sidebar-scroll::-webkit-scrollbar-track {\n    background: transparent;\n  }\n  \n  .sidebar-scroll::-webkit-scrollbar-thumb {\n    background: hsl(214 7% 78%);\n    border-radius: 2px;\n  }\n}\n\n/* Mobile scroll improvements */\n@media (max-width: 640px) {\n  .tabs-list {\n    scroll-behavior: smooth;\n    -webkit-overflow-scrolling: touch;\n  }\n  \n  .card {\n    border-radius: 12px;\n    margin-bottom: 1rem;\n  }\n  \n  .form-field {\n    margin-bottom: 1rem;\n  }\n  \n  /* Better spacing for mobile forms */\n  [data-radix-collection-item] {\n    min-height: 44px;\n    padding: 8px 12px;\n  }\n  \n  /* Improve input height on mobile */\n  input, select, textarea {\n    min-height: 44px;\n    padding: 12px;\n    font-size: 16px; /* Prevents zoom on iOS */\n  }\n  \n  /* Better button spacing */\n  button {\n    min-height: 44px;\n    padding: 12px 16px;\n  }\n  \n  /* Card padding adjustments */\n  .card-content {\n    padding: 20px;\n  }\n\n  /* Modal improvements for mobile */\n  [data-radix-dialog-content] {\n    width: 95vw !important;\n    max-height: 90vh !important;\n    margin: 0 auto;\n    padding: 16px !important;\n  }\n\n  /* Ensure modals don't exceed viewport */\n  .dialog-content {\n    overflow-y: auto;\n    max-height: calc(100vh - 2rem);\n  }\n\n  /* Toast/notification fixes for mobile */\n  [data-radix-toast-viewport] {\n    top: auto !important;\n    bottom: 1rem !important;\n    left: 1rem !important;\n    right: 1rem !important;\n    max-width: none !important;\n    width: calc(100vw - 2rem) !important;\n    z-index: 200 !important;\n  }\n\n  [data-radix-toast-root] {\n    width: 100% !important;\n    max-width: none !important;\n    margin: 0 !important;\n    border-radius: 8px;\n    font-size: 14px;\n    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);\n    backdrop-filter: blur(4px);\n  }\n\n  /* Enhance toast title and description for better visibility */\n  [data-radix-toast-title] {\n    font-weight: 600;\n    font-size: 15px;\n    line-height: 1.3;\n  }\n\n  [data-radix-toast-description] {\n    font-size: 14px;\n    line-height: 1.4;\n    opacity: 0.9;\n  }\n}\n\n/* Toast styling for desktop */\n@media (min-width: 640px) {\n  [data-radix-toast-viewport] {\n    bottom: 1rem !important;\n    right: 1rem !important;\n    left: auto !important;\n    width: auto !important;\n    max-width: 420px !important;\n  }\n\n  [data-radix-toast-root] {\n    max-width: 420px !important;\n    width: auto !important;\n  }\n}\n\n/* Improved mobile tab styling */\n.mobile-tabs {\n  scrollbar-width: none;\n  -ms-overflow-style: none;\n}\n\n.mobile-tabs::-webkit-scrollbar {\n  display: none;\n}\n","size_bytes":7668},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nexport async function generateAIInsights(analyticsData?: any): Promise<any[]> {\n  try {\n    const prompt = `Generate comprehensive AI-powered insights for venue management based on current data and industry trends.\n    \n    Analytics Data: ${JSON.stringify(analyticsData || {})}\n    \n    Focus on:\n    - Revenue optimization opportunities\n    - Booking pattern analysis\n    - Customer satisfaction improvements\n    - Market trend adaptations\n    - Operational efficiency gains\n    - Pricing strategy recommendations\n    \n    Return JSON array with detailed insights:\n    [\n      {\n        \"id\": \"unique_id\",\n        \"type\": \"revenue/booking/customer/market/operation\",\n        \"title\": \"Clear insight title\",\n        \"description\": \"Detailed explanation\",\n        \"priority\": \"high/medium/low\",\n        \"actionable\": true,\n        \"impact\": \"high/medium/low\",\n        \"effort\": \"low/medium/high\",\n        \"metrics\": [\"metric1\", \"metric2\"],\n        \"recommendations\": [\"action1\", \"action2\"],\n        \"expectedOutcome\": \"specific expected result\",\n        \"timeframe\": \"immediate/short-term/long-term\",\n        \"confidence\": 85\n      }\n    ]`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              id: { type: \"string\" },\n              type: { type: \"string\" },\n              title: { type: \"string\" },\n              description: { type: \"string\" },\n              priority: { type: \"string\" },\n              actionable: { type: \"boolean\" },\n              impact: { type: \"string\" },\n              effort: { type: \"string\" },\n              metrics: { type: \"array\", items: { type: \"string\" } },\n              recommendations: { type: \"array\", items: { type: \"string\" } },\n              expectedOutcome: { type: \"string\" },\n              timeframe: { type: \"string\" },\n              confidence: { type: \"number\" }\n            },\n            required: [\"id\", \"type\", \"title\", \"description\", \"priority\", \"actionable\"]\n          }\n        }\n      },\n      contents: prompt,\n    });\n\n    return JSON.parse(response.text || \"[]\");\n  } catch (error) {\n    console.error(\"Gemini API error:\", error);\n    return [];\n  }\n}\n\nexport async function generateSmartScheduling(eventType: string, duration: number, guestCount?: number, venuePreferences?: string[]): Promise<any> {\n  try {\n    const prompt = `Generate smart scheduling recommendations for a ${eventType} event lasting ${duration} hours with ${guestCount || 'unspecified'} guests.\n    \n    Consider:\n    - Optimal time slots based on event type\n    - Venue utilization patterns\n    - Guest attendance preferences\n    - Seasonal factors\n    - Day-of-week effectiveness\n    \n    Return JSON with:\n    {\n      \"recommendedSlots\": [\n        {\n          \"date\": \"YYYY-MM-DD\",\n          \"startTime\": \"HH:MM\",\n          \"endTime\": \"HH:MM\",\n          \"reason\": \"explanation\",\n          \"confidence\": 85\n        }\n      ],\n      \"insights\": [\"insight1\", \"insight2\"],\n      \"alternativeOptions\": [\"option1\", \"option2\"]\n    }`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            recommendedSlots: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  date: { type: \"string\" },\n                  startTime: { type: \"string\" },\n                  endTime: { type: \"string\" },\n                  reason: { type: \"string\" },\n                  confidence: { type: \"number\" }\n                }\n              }\n            },\n            insights: { type: \"array\", items: { type: \"string\" } },\n            alternativeOptions: { type: \"array\", items: { type: \"string\" } }\n          }\n        }\n      },\n      contents: prompt,\n    });\n\n    return JSON.parse(response.text || '{\"recommendedSlots\":[],\"insights\":[],\"alternativeOptions\":[]}');\n  } catch (error) {\n    console.error(\"Gemini scheduling error:\", error);\n    return {\n      recommendedSlots: [],\n      insights: [\"Smart scheduling temporarily unavailable\"],\n      alternativeOptions: []\n    };\n  }\n}\n\nexport async function generateEmailReply(customerMessage: string, context: string, customerData?: any): Promise<any> {\n  try {\n    const prompt = `Generate a professional, personalized email reply for a venue inquiry.\n    \n    Customer message: \"${customerMessage}\"\n    Context: ${context}\n    Customer data: ${JSON.stringify(customerData || {})}\n    \n    Create a response that:\n    - Addresses their specific needs\n    - Shows understanding of their event requirements\n    - Provides relevant venue/service suggestions\n    - Includes next steps and call-to-action\n    - Maintains professional yet warm tone\n    \n    Return JSON with:\n    {\n      \"subject\": \"Reply subject line\",\n      \"body\": \"Full email body\",\n      \"tone\": \"professional/friendly/formal\",\n      \"nextSteps\": [\"action1\", \"action2\"],\n      \"suggestedFollowUp\": \"when to follow up\",\n      \"confidence\": 90\n    }`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            subject: { type: \"string\" },\n            body: { type: \"string\" },\n            tone: { type: \"string\" },\n            nextSteps: { type: \"array\", items: { type: \"string\" } },\n            suggestedFollowUp: { type: \"string\" },\n            confidence: { type: \"number\" }\n          }\n        }\n      },\n      contents: prompt,\n    });\n\n    return JSON.parse(response.text || '{\"subject\":\"Re: Your Venue Inquiry\",\"body\":\"Thank you for your inquiry. We\\'ll get back to you soon.\",\"tone\":\"professional\",\"nextSteps\":[],\"suggestedFollowUp\":\"\",\"confidence\":50}');\n  } catch (error) {\n    console.error(\"Gemini email error:\", error);\n    return {\n      subject: \"Re: Your Venue Inquiry\",\n      body: \"Thank you for your inquiry. We'll get back to you soon.\",\n      tone: \"professional\",\n      nextSteps: [],\n      suggestedFollowUp: \"\",\n      confidence: 50\n    };\n  }\n}\n\nexport async function scoreLeadPriority(leadData: any, interactionHistory?: any[]): Promise<any> {\n  try {\n    const prompt = `Analyze this lead and provide detailed scoring and insights:\n    \n    Lead Data: ${JSON.stringify(leadData)}\n    Interaction History: ${JSON.stringify(interactionHistory || [])}\n    \n    Consider:\n    - Budget indicators and spending capacity\n    - Event size and complexity\n    - Timeline urgency\n    - Engagement level and responsiveness\n    - Repeat customer potential\n    - Revenue opportunity\n    \n    Return JSON with:\n    {\n      \"score\": 85,\n      \"category\": \"high/medium/low\",\n      \"reasoning\": \"detailed explanation\",\n      \"keyIndicators\": [\"indicator1\", \"indicator2\"],\n      \"recommendedActions\": [\"action1\", \"action2\"],\n      \"estimatedValue\": 5000,\n      \"closeProbability\": 75,\n      \"priorityFactors\": {\n        \"budget\": 90,\n        \"timeline\": 70,\n        \"engagement\": 85,\n        \"fitScore\": 80\n      }\n    }`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            score: { type: \"number\" },\n            category: { type: \"string\" },\n            reasoning: { type: \"string\" },\n            keyIndicators: { type: \"array\", items: { type: \"string\" } },\n            recommendedActions: { type: \"array\", items: { type: \"string\" } },\n            estimatedValue: { type: \"number\" },\n            closeProbability: { type: \"number\" },\n            priorityFactors: {\n              type: \"object\",\n              properties: {\n                budget: { type: \"number\" },\n                timeline: { type: \"number\" },\n                engagement: { type: \"number\" },\n                fitScore: { type: \"number\" }\n              }\n            }\n          }\n        }\n      },\n      contents: prompt,\n    });\n\n    return JSON.parse(response.text || '{\"score\":50,\"category\":\"medium\",\"reasoning\":\"\",\"keyIndicators\":[],\"recommendedActions\":[],\"estimatedValue\":0,\"closeProbability\":50,\"priorityFactors\":{\"budget\":50,\"timeline\":50,\"engagement\":50,\"fitScore\":50}}');\n  } catch (error) {\n    console.error(\"Gemini scoring error:\", error);\n    return {\n      score: 50,\n      category: \"medium\",\n      reasoning: \"Unable to analyze lead at this time\",\n      keyIndicators: [],\n      recommendedActions: [],\n      estimatedValue: 0,\n      closeProbability: 50,\n      priorityFactors: {\n        budget: 50,\n        timeline: 50,\n        engagement: 50,\n        fitScore: 50\n      }\n    };\n  }\n}\n\nexport async function generateProposal(eventDetails: any, venueInfo: any): Promise<string> {\n  try {\n    const prompt = `Generate a professional event proposal for:\n    Event: ${JSON.stringify(eventDetails)}\n    Venue: ${JSON.stringify(venueInfo)}\n    \n    Include executive summary, event details, pricing breakdown, terms, and next steps.\n    Make it compelling and professional.`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      contents: prompt,\n    });\n\n    return response.text || \"Event proposal will be generated shortly.\";\n  } catch (error) {\n    console.error(\"Gemini proposal error:\", error);\n    return \"Event proposal will be generated shortly.\";\n  }\n}\n\nexport async function parseVoiceToBooking(transcript: string, context: string = \"voice_booking\"): Promise<any> {\n  try {\n    const prompt = `Parse this voice transcript and extract booking/event details. \n    Context: ${context}\n    \n    Transcript: \"${transcript}\"\n    \n    Extract and structure the following information from the voice input:\n    - Event name/type (wedding, corporate, birthday, etc.)\n    - Customer name and contact info\n    - Event date and time (convert relative dates like \"next Friday\" to specific dates)\n    - Number of guests\n    - Venue preference\n    - Services mentioned (catering, DJ, decorations, etc.)\n    - Budget information if mentioned\n    - Special requirements or notes\n    \n    For customer calls, also identify:\n    - Urgency level\n    - Questions asked by customer\n    - Follow-up actions needed\n    \n    Return JSON format:\n    {\n      \"eventName\": \"extracted event name\",\n      \"eventType\": \"wedding/corporate/birthday/etc\",\n      \"customerName\": \"customer name\",\n      \"customerEmail\": \"email if mentioned\",\n      \"customerPhone\": \"phone if mentioned\",\n      \"eventDate\": \"YYYY-MM-DD or relative date\",\n      \"eventTime\": \"HH:MM\",\n      \"guestCount\": number,\n      \"venue\": \"venue preference\",\n      \"services\": [\"service1\", \"service2\"],\n      \"budget\": \"budget amount or range\",\n      \"specialRequirements\": \"any special notes\",\n      \"urgency\": \"high/medium/low\",\n      \"customerQuestions\": [\"question1\", \"question2\"],\n      \"suggestedActions\": [\"action1\", \"action2\"],\n      \"confidence\": 85,\n      \"isCallCapture\": ${context === \"customer_call\"}\n    }`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            eventName: { type: \"string\" },\n            eventType: { type: \"string\" },\n            customerName: { type: \"string\" },\n            customerEmail: { type: \"string\" },\n            customerPhone: { type: \"string\" },\n            eventDate: { type: \"string\" },\n            eventTime: { type: \"string\" },\n            guestCount: { type: \"number\" },\n            venue: { type: \"string\" },\n            services: { type: \"array\", items: { type: \"string\" } },\n            budget: { type: \"string\" },\n            specialRequirements: { type: \"string\" },\n            urgency: { type: \"string\" },\n            customerQuestions: { type: \"array\", items: { type: \"string\" } },\n            suggestedActions: { type: \"array\", items: { type: \"string\" } },\n            confidence: { type: \"number\" },\n            isCallCapture: { type: \"boolean\" }\n          }\n        }\n      },\n      contents: prompt,\n    });\n\n    const parsedData = JSON.parse(response.text || '{}');\n    \n    // Enhance with current date context for relative dates\n    if (parsedData.eventDate && parsedData.eventDate.includes('next') || parsedData.eventDate.includes('this')) {\n      parsedData.eventDate = `${parsedData.eventDate} (please verify specific date)`;\n    }\n\n    return parsedData;\n  } catch (error) {\n    console.error(\"Gemini voice parsing error:\", error);\n    return {\n      eventName: \"\",\n      eventType: \"\",\n      customerName: \"\",\n      confidence: 0,\n      error: \"Could not parse voice input\"\n    };\n  }\n}","size_bytes":13122},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n});\n\nexport interface SmartSchedulingSuggestion {\n  suggestedDate: string;\n  suggestedTime: string;\n  reason: string;\n  confidence: number;\n}\n\nexport interface EmailReply {\n  subject: string;\n  content: string;\n  tone: \"professional\" | \"friendly\" | \"formal\";\n}\n\nexport interface LeadScoring {\n  score: number;\n  factors: string[];\n  priority: \"low\" | \"medium\" | \"high\" | \"urgent\";\n  recommendation: string;\n}\n\nexport interface PredictiveAnalytics {\n  revenueForcast: number;\n  bookingTrends: string[];\n  recommendations: string[];\n  confidence: number;\n}\n\nexport async function generateSmartSchedulingSuggestion(\n  eventType: string,\n  guestCount: number,\n  venueCapacity: number,\n  existingBookings: any[]\n): Promise<SmartSchedulingSuggestion> {\n  try {\n    const prompt = `Analyze the following event details and suggest optimal scheduling:\nEvent Type: ${eventType}\nGuest Count: ${guestCount}\nVenue Capacity: ${venueCapacity}\nExisting Bookings: ${JSON.stringify(existingBookings)}\n\nPlease suggest the best date and time for this event, considering venue utilization, typical event patterns, and conflict avoidance. Respond in JSON format with suggestedDate, suggestedTime, reason, and confidence (0-1).`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert venue scheduling AI assistant. Provide optimal scheduling recommendations based on venue data and industry best practices.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return {\n      suggestedDate: result.suggestedDate || new Date().toISOString().split('T')[0],\n      suggestedTime: result.suggestedTime || \"18:00\",\n      reason: result.reason || \"Optimal time based on venue availability\",\n      confidence: Math.max(0, Math.min(1, result.confidence || 0.8))\n    };\n  } catch (error) {\n    throw new Error(\"Failed to generate scheduling suggestion: \" + (error as Error).message);\n  }\n}\n\nexport async function generateAutoEmailReply(\n  emailContent: string,\n  context: string,\n  customerName: string\n): Promise<EmailReply> {\n  try {\n    const prompt = `Generate a professional email reply for a venue management business:\n\nOriginal Email: ${emailContent}\nContext: ${context}\nCustomer Name: ${customerName}\n\nCreate a helpful, professional response that addresses their inquiry. Include subject line and email content. Respond in JSON format with subject, content, and tone fields.`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a professional venue coordinator AI assistant. Generate helpful, accurate, and engaging email responses for venue inquiries.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return {\n      subject: result.subject || \"Re: Your Venue Inquiry\",\n      content: result.content || \"Thank you for your inquiry. We'll get back to you shortly.\",\n      tone: result.tone || \"professional\"\n    };\n  } catch (error) {\n    throw new Error(\"Failed to generate email reply: \" + (error as Error).message);\n  }\n}\n\nexport async function calculateLeadScore(\n  customerData: any,\n  interactionHistory: any[]\n): Promise<LeadScoring> {\n  try {\n    const prompt = `Analyze this lead and provide a scoring assessment:\n\nCustomer Data: ${JSON.stringify(customerData)}\nInteraction History: ${JSON.stringify(interactionHistory)}\n\nScore the lead from 0-100 based on engagement, budget potential, event size, and likelihood to book. Provide scoring factors and recommendations. Respond in JSON format with score, factors array, priority, and recommendation.`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert sales AI that analyzes venue leads and provides accurate scoring based on conversion probability.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    const score = Math.max(0, Math.min(100, result.score || 50));\n    \n    let priority: \"low\" | \"medium\" | \"high\" | \"urgent\" = \"medium\";\n    if (score >= 80) priority = \"urgent\";\n    else if (score >= 60) priority = \"high\";\n    else if (score >= 40) priority = \"medium\";\n    else priority = \"low\";\n\n    return {\n      score,\n      factors: result.factors || [\"Initial inquiry received\"],\n      priority,\n      recommendation: result.recommendation || \"Follow up within 24 hours\"\n    };\n  } catch (error) {\n    throw new Error(\"Failed to calculate lead score: \" + (error as Error).message);\n  }\n}\n\nexport async function generatePredictiveAnalytics(\n  historicalData: any[],\n  currentMetrics: any\n): Promise<PredictiveAnalytics> {\n  try {\n    const prompt = `Analyze venue performance data and generate predictive insights:\n\nHistorical Data: ${JSON.stringify(historicalData)}\nCurrent Metrics: ${JSON.stringify(currentMetrics)}\n\nForecast revenue trends, identify booking patterns, and provide actionable recommendations for the next quarter. Respond in JSON format with revenueForcast, bookingTrends array, recommendations array, and confidence.`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a business intelligence AI specializing in venue management analytics and revenue forecasting.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return {\n      revenueForcast: result.revenueForcast || 0,\n      bookingTrends: result.bookingTrends || [\"Steady growth expected\"],\n      recommendations: result.recommendations || [\"Continue current strategy\"],\n      confidence: Math.max(0, Math.min(1, result.confidence || 0.7))\n    };\n  } catch (error) {\n    throw new Error(\"Failed to generate predictive analytics: \" + (error as Error).message);\n  }\n}\n\nexport async function generateProposal(\n  eventDetails: any,\n  venueDetails: any,\n  customerPreferences: any\n): Promise<string> {\n  try {\n    const prompt = `Generate a professional venue proposal:\n\nEvent Details: ${JSON.stringify(eventDetails)}\nVenue Details: ${JSON.stringify(venueDetails)}\nCustomer Preferences: ${JSON.stringify(customerPreferences)}\n\nCreate a compelling, detailed proposal that includes venue features, pricing, packages, and next steps. Format as professional business proposal.`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert proposal writer specializing in venue and event management. Create professional, persuasive proposals.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n    });\n\n    return response.choices[0].message.content || \"Proposal content could not be generated.\";\n  } catch (error) {\n    throw new Error(\"Failed to generate proposal: \" + (error as Error).message);\n  }\n}\n","size_bytes":7929},"client/src/hooks/use-bookings.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { Booking } from \"@shared/schema\";\n\nexport function useBookings() {\n  return useQuery<Booking[]>({\n    queryKey: [\"/api/bookings\"],\n  });\n}\n\nexport function useBooking(id: string) {\n  return useQuery<Booking>({\n    queryKey: [\"/api/bookings\", id],\n    enabled: !!id,\n  });\n}\n","size_bytes":337},"client/src/hooks/use-leads.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { Customer } from \"@shared/schema\";\n\nexport function useLeads() {\n  return useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n}\n\nexport function useCustomer(id: string) {\n  return useQuery<Customer>({\n    queryKey: [\"/api/customers\", id],\n    enabled: !!id,\n  });\n}\n","size_bytes":340},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-proposals.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { Proposal } from \"@shared/schema\";\n\nexport function useProposals() {\n  return useQuery<Proposal[]>({\n    queryKey: [\"/api/proposals\"],\n  });\n}\n\nexport function useProposal(id: string) {\n  return useQuery<Proposal>({\n    queryKey: [\"/api/proposals\", id],\n    enabled: !!id,\n  });\n}\n","size_bytes":344},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 5000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3892},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\n// Re-export apiRequest for external use\nexport { apiRequest };\n\nexport interface SmartSchedulingSuggestion {\n  suggestedDate: string;\n  suggestedTime: string;\n  reason: string;\n  confidence: number;\n}\n\nexport interface EmailReply {\n  subject: string;\n  content: string;\n  tone: \"professional\" | \"friendly\" | \"formal\";\n}\n\nexport interface LeadScoring {\n  score: number;\n  factors: string[];\n  priority: \"low\" | \"medium\" | \"high\" | \"urgent\";\n  recommendation: string;\n}\n\nexport interface PredictiveAnalytics {\n  revenueForcast: number;\n  bookingTrends: string[];\n  recommendations: string[];\n  confidence: number;\n}\n\n// AI Features API\nexport const aiApi = {\n  async generateSmartScheduling(\n    eventType: string,\n    guestCount: number,\n    venueCapacity: number,\n    existingBookings: any[]\n  ): Promise<SmartSchedulingSuggestion> {\n    const response = await apiRequest(\"POST\", \"/api/ai/smart-scheduling\", {\n      eventType,\n      guestCount,\n      venueCapacity,\n      existingBookings\n    });\n    return response.json();\n  },\n\n  async generateEmailReply(\n    emailContent: string,\n    context: string,\n    customerName: string\n  ): Promise<EmailReply> {\n    const response = await apiRequest(\"POST\", \"/api/ai/email-reply\", {\n      emailContent,\n      context,\n      customerName\n    });\n    return response.json();\n  },\n\n  async calculateLeadScore(\n    customerData: any,\n    interactionHistory: any[]\n  ): Promise<LeadScoring> {\n    const response = await apiRequest(\"POST\", \"/api/ai/lead-score\", {\n      customerData,\n      interactionHistory\n    });\n    return response.json();\n  },\n\n  async getPredictiveAnalytics(\n    historicalData: any[],\n    currentMetrics: any\n  ): Promise<PredictiveAnalytics> {\n    const response = await apiRequest(\"POST\", \"/api/ai/predictive-analytics\", {\n      historicalData,\n      currentMetrics\n    });\n    return response.json();\n  }\n};\n\n// Venues API\nexport const venuesApi = {\n  async getAll() {\n    const response = await apiRequest(\"GET\", \"/api/venues\");\n    return response.json();\n  },\n\n  async getById(id: string) {\n    const response = await apiRequest(\"GET\", `/api/venues/${id}`);\n    return response.json();\n  }\n};\n\n// Customers API\nexport const customersApi = {\n  async getAll() {\n    const response = await apiRequest(\"GET\", \"/api/customers\");\n    return response.json();\n  },\n\n  async create(data: any) {\n    const response = await apiRequest(\"POST\", \"/api/customers\", data);\n    return response.json();\n  },\n\n  async update(id: string, data: any) {\n    const response = await apiRequest(\"PATCH\", `/api/customers/${id}`, data);\n    return response.json();\n  }\n};\n\n// Bookings API\nexport const bookingsApi = {\n  async getAll() {\n    const response = await apiRequest(\"GET\", \"/api/bookings\");\n    return response.json();\n  },\n\n  async create(data: any) {\n    const response = await apiRequest(\"POST\", \"/api/bookings\", data);\n    return response.json();\n  },\n\n  async update(id: string, data: any) {\n    const response = await apiRequest(\"PATCH\", `/api/bookings/${id}`, data);\n    return response.json();\n  }\n};\n\n// Proposals API\nexport const proposalsApi = {\n  async getAll() {\n    const response = await apiRequest(\"GET\", \"/api/proposals\");\n    return response.json();\n  },\n\n  async create(data: any) {\n    const response = await apiRequest(\"POST\", \"/api/proposals\", data);\n    return response.json();\n  },\n\n  async generateWithAI(eventDetails: any, venueDetails: any, customerPreferences: any) {\n    const response = await apiRequest(\"POST\", \"/api/proposals/generate\", {\n      eventDetails,\n      venueDetails,\n      customerPreferences\n    });\n    return response.json();\n  }\n};\n\n// Payments API\nexport const paymentsApi = {\n  async getAll() {\n    const response = await apiRequest(\"GET\", \"/api/payments\");\n    return response.json();\n  },\n\n  async create(data: any) {\n    const response = await apiRequest(\"POST\", \"/api/payments\", data);\n    return response.json();\n  }\n};\n\n// Tasks API\nexport const tasksApi = {\n  async getAll() {\n    const response = await apiRequest(\"GET\", \"/api/tasks\");\n    return response.json();\n  },\n\n  async create(data: any) {\n    const response = await apiRequest(\"POST\", \"/api/tasks\", data);\n    return response.json();\n  },\n\n  async update(id: string, data: any) {\n    const response = await apiRequest(\"PATCH\", `/api/tasks/${id}`, data);\n    return response.json();\n  }\n};\n\n// Dashboard API\nexport const dashboardApi = {\n  async getMetrics() {\n    const response = await apiRequest(\"GET\", \"/api/dashboard/metrics\");\n    return response.json();\n  }\n};\n","size_bytes":4582},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\n// Get auth token from localStorage\nfunction getAuthToken(): string | null {\n  if (typeof window === 'undefined') return null;\n  return localStorage.getItem('super_admin_token') || localStorage.getItem('auth_token');\n}\n\n// Create headers with auth token\nfunction createHeaders(includeContentType: boolean = false): Record<string, string> {\n  const headers: Record<string, string> = {};\n  \n  if (includeContentType) {\n    headers['Content-Type'] = 'application/json';\n  }\n  \n  const token = getAuthToken();\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  \n  return headers;\n}\n\n// Overload signatures\nexport async function apiRequest(url: string, options?: { method?: string; body?: string; headers?: Record<string, string> }): Promise<any>;\nexport async function apiRequest(method: string, url: string, data?: any): Promise<any>;\n\n// Implementation\nexport async function apiRequest(\n  urlOrMethod: string,\n  optionsOrUrl?: { method?: string; body?: string; headers?: Record<string, string> } | string,\n  data?: any\n): Promise<any> {\n  let url: string;\n  let method: string;\n  let body: string | undefined;\n  let customHeaders: Record<string, string> = {};\n\n  // Handle different call patterns\n  if (typeof optionsOrUrl === 'string') {\n    // Pattern: apiRequest(\"POST\", \"/api/venues\", data)\n    method = urlOrMethod;\n    url = optionsOrUrl;\n    body = data ? JSON.stringify(data) : undefined;\n  } else {\n    // Pattern: apiRequest(\"/api/venues\", { method: \"POST\", body: \"...\" })\n    url = urlOrMethod;\n    const options = optionsOrUrl || {};\n    method = options.method || 'GET';\n    body = options.body;\n    customHeaders = options.headers || {};\n  }\n  \n  const headers = {\n    ...createHeaders(!!body),\n    ...customHeaders\n  };\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n      headers: createHeaders(false),\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n\n// Utility function to clear tenant-specific cache when switching tenants\nexport function clearTenantCache() {\n  console.log(\"🔥 CLEARING TENANT CACHE - Removing all cached data to prevent cross-tenant contamination\");\n  \n  // Clear all queries to prevent cross-tenant data contamination\n  queryClient.clear();\n  \n  // Also clear any specific tenant-related queries including analytics\n  const tenantQueries = [\n    '/api/bookings',\n    '/api/customers', \n    '/api/customers/analytics', // Critical: Clear customer analytics cache\n    '/api/companies',\n    '/api/venues',\n    '/api/spaces',\n    '/api/proposals',\n    '/api/communications',\n    '/api/tasks',\n    '/api/packages',\n    '/api/services',\n    '/api/tax-settings',\n    '/api/setup-styles',\n    '/api/leads',\n    '/api/dashboard',\n    '/api/dashboard/metrics',\n    '/api/reports',\n    '/api/users'\n  ];\n  \n  tenantQueries.forEach(queryKey => {\n    queryClient.removeQueries({ queryKey: [queryKey] });\n    queryClient.invalidateQueries({ queryKey: [queryKey] });\n  });\n  \n  console.log(\"✅ Tenant cache cleared successfully\");\n}\n","size_bytes":4060},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/customers.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Users, Mail, Phone, Building, Star, DollarSign, Calendar, \n  TrendingUp, Search, Filter, Plus, Eye, Edit2, MoreHorizontal,\n  Crown, Award, Medal, Trophy, Building2, Globe, MapPin, Trash2, Upload\n} from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useFormattedCurrency } from \"@/lib/currency\";\nimport type { Customer, Company } from \"@shared/schema\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { MobileNav } from \"@/components/layout/mobile-nav\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertCustomerSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\n// Frontend customer schema (without tenantId requirement)\nconst frontendCustomerSchema = insertCustomerSchema.omit({ tenantId: true });\n\n// Types for customer analytics\ninterface CustomerAnalytics {\n  id: string;\n  name: string;\n  email: string;\n  phone: string | null;\n  companyId: string | null;\n  status: string;\n  notes: string | null;\n  analytics: {\n    totalRevenue: number;\n    lifetimeValue: number;\n    lifetimeValueCategory: string;\n    bookingsCount: number;\n    confirmedBookings: number;\n    pendingBookings: number;\n    cancelledBookings: number;\n    averageBookingValue: number;\n    lastEventDate: string | null;\n    lastEventName: string | null;\n    customerSince: string;\n  };\n}\n\nexport default function Customers() {\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [companySearchQuery, setCompanySearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [valueFilter, setValueFilter] = useState<string>(\"all\");\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [showCreateCompanyForm, setShowCreateCompanyForm] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [selectedCustomer, setSelectedCustomer] = useState<CustomerAnalytics | null>(null);\n  const [editingCompany, setEditingCompany] = useState<Company | null>(null);\n  const [viewingCompany, setViewingCompany] = useState<Company | null>(null);\n  const [viewingCustomers, setViewingCustomers] = useState<Customer[]>([]);\n  const [showAddEmployeeForm, setShowAddEmployeeForm] = useState(false);\n  const { toast } = useToast();\n  const { formatAmount } = useFormattedCurrency();\n\n  // Fetch customer analytics\n  const { data: customerAnalytics = [], isLoading } = useQuery<CustomerAnalytics[]>({\n    queryKey: [\"/api/customers/analytics\"],\n  });\n\n  // Fetch companies\n  const { data: companies = [], isLoading: companiesLoading } = useQuery<Company[]>({\n    queryKey: [\"/api/companies\"],\n  });\n\n  // Fetch all customers for company viewing\n  const { data: allCustomers = [] } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const form = useForm({\n    resolver: zodResolver(frontendCustomerSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      companyId: null,\n      customerType: \"individual\",\n      status: \"lead\",\n      notes: \"\",\n    }\n  });\n\n  // Company form state\n  const [companyFormData, setCompanyFormData] = useState({\n    name: \"\",\n    industry: \"\",\n    description: \"\",\n    website: \"\",\n    address: \"\",\n    phone: \"\",\n    email: \"\",\n    notes: \"\"\n  });\n\n  // Employees to add when creating/editing company\n  const [companyEmployees, setCompanyEmployees] = useState<Array<{\n    name: string;\n    email: string;\n    phone: string;\n    status: string;\n    notes: string;\n  }>>([]);\n\n  // Import functionality state\n  const [showImportModal, setShowImportModal] = useState(false);\n  const [importType, setImportType] = useState<\"customers\" | \"companies\">(\"customers\");\n  const [importFile, setImportFile] = useState<File | null>(null);\n  const [importPreview, setImportPreview] = useState<any[]>([]);\n  const [importErrors, setImportErrors] = useState<string[]>([]);\n\n  // Employee form for adding to company\n  const employeeForm = useForm({\n    resolver: zodResolver(insertCustomerSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      companyId: \"\",\n      customerType: \"individual\",\n      status: \"customer\",\n      notes: \"\",\n    }\n  });\n\n  const createCustomerMutation = useMutation({\n    mutationFn: async (data: any) => {\n      console.log(\"Making API request to create customer:\", data);\n      const result = await apiRequest(\"POST\", \"/api/customers\", data);\n      console.log(\"Customer creation result:\", result);\n      return result;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers/analytics\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      setShowCreateForm(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Customer created successfully!\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Customer creation error:\", error);\n      const errorMessage = error?.message || \"Failed to create customer. Please try again.\";\n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Company mutations\n  const createCompanyMutation = useMutation({\n    mutationFn: async (data: { companyData: typeof companyFormData; employees: any[] }) => {\n      // Create company first\n      const company = await apiRequest(\"POST\", \"/api/companies\", data.companyData);\n      \n      // Then create employees if any\n      if (data.employees.length > 0) {\n        await Promise.all(\n          data.employees.map(employee => \n            apiRequest(\"POST\", \"/api/customers\", {\n              ...employee,\n              companyId: company.id,\n              customerType: \"individual\"\n            })\n          )\n        );\n      }\n      \n      return company;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers/analytics\"] });\n      setShowCreateCompanyForm(false);\n      resetCompanyForm();\n      toast({\n        title: \"Success\",\n        description: \"Company created successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create company\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateCompanyMutation = useMutation({\n    mutationFn: async (data: { id: string; updates: Partial<typeof companyFormData>; employees?: any[] }) => {\n      // Update company first\n      const company = await apiRequest(\"PATCH\", `/api/companies/${data.id}`, data.updates);\n      \n      // Then create any new employees if provided\n      if (data.employees && data.employees.length > 0) {\n        await Promise.all(\n          data.employees.map(employee => \n            apiRequest(\"POST\", \"/api/customers\", {\n              ...employee,\n              companyId: data.id,\n              customerType: \"individual\"\n            })\n          )\n        );\n      }\n      \n      return company;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers/analytics\"] });\n      setEditingCompany(null);\n      resetCompanyForm();\n      toast({\n        title: \"Success\",\n        description: \"Company updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update company\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCompanyMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/companies/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      toast({\n        title: \"Success\",\n        description: \"Company deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete company\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Import mutations\n  const importDataMutation = useMutation({\n    mutationFn: async (data: { type: \"customers\" | \"companies\"; items: any[] }) => {\n      if (data.type === \"customers\") {\n        // Import customers\n        const results = await Promise.allSettled(\n          data.items.map(customer => apiRequest(\"POST\", \"/api/customers\", { ...customer, customerType: \"individual\" }))\n        );\n        return results;\n      } else {\n        // Import companies with employees\n        const results = await Promise.allSettled(\n          data.items.map(async (company) => {\n            const { employees, ...companyData } = company;\n            const createdCompany = await apiRequest(\"POST\", \"/api/companies\", companyData);\n            \n            if (employees && employees.length > 0) {\n              await Promise.allSettled(\n                employees.map((employee: any) => \n                  apiRequest(\"POST\", \"/api/customers\", {\n                    ...employee,\n                    companyId: createdCompany.id,\n                    customerType: \"individual\"\n                  })\n                )\n              );\n            }\n            \n            return createdCompany;\n          })\n        );\n        return results;\n      }\n    },\n    onSuccess: (results) => {\n      const successful = results.filter(r => r.status === 'fulfilled').length;\n      const failed = results.filter(r => r.status === 'rejected').length;\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers/analytics\"] });\n      \n      setShowImportModal(false);\n      setImportFile(null);\n      setImportPreview([]);\n      setImportErrors([]);\n      \n      toast({\n        title: \"Import Complete\",\n        description: `Successfully imported ${successful} items${failed > 0 ? `, ${failed} failed` : ''}`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Import Failed\",\n        description: \"Failed to import data. Please check your file format.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetCompanyForm = () => {\n    setCompanyFormData({\n      name: \"\",\n      industry: \"\",\n      description: \"\",\n      website: \"\",\n      address: \"\",\n      phone: \"\",\n      email: \"\",\n      notes: \"\"\n    });\n    setCompanyEmployees([]);\n  };\n\n  // Import utility functions\n  const parseCSV = (content: string): any[] => {\n    const lines = content.trim().split('\\n');\n    if (lines.length < 2) return [];\n    \n    const headers = lines[0].split(',').map(h => h.trim().replace(/\"/g, ''));\n    const data = [];\n    \n    for (let i = 1; i < lines.length; i++) {\n      const values = lines[i].split(',').map(v => v.trim().replace(/\"/g, ''));\n      const row: any = {};\n      headers.forEach((header, index) => {\n        row[header] = values[index] || '';\n      });\n      data.push(row);\n    }\n    \n    return data;\n  };\n\n  const validateCustomerData = (data: any[]): { valid: any[]; errors: string[] } => {\n    const valid = [];\n    const errors = [];\n    \n    for (let i = 0; i < data.length; i++) {\n      const row = data[i];\n      const rowErrors = [];\n      \n      if (!row.name || row.name.trim() === '') {\n        rowErrors.push(`Row ${i + 2}: Name is required`);\n      }\n      if (!row.email || row.email.trim() === '') {\n        rowErrors.push(`Row ${i + 2}: Email is required`);\n      }\n      if (row.email && !row.email.includes('@')) {\n        rowErrors.push(`Row ${i + 2}: Invalid email format`);\n      }\n      \n      if (rowErrors.length === 0) {\n        valid.push({\n          name: row.name,\n          email: row.email,\n          phone: row.phone || '',\n          status: row.status || 'lead',\n          notes: row.notes || '',\n          companyId: row.companyId || null\n        });\n      } else {\n        errors.push(...rowErrors);\n      }\n    }\n    \n    return { valid, errors };\n  };\n\n  const validateCompanyData = (data: any[]): { valid: any[]; errors: string[] } => {\n    const valid = [];\n    const errors = [];\n    \n    for (let i = 0; i < data.length; i++) {\n      const row = data[i];\n      const rowErrors = [];\n      \n      if (!row.name || row.name.trim() === '') {\n        rowErrors.push(`Row ${i + 2}: Company name is required`);\n      }\n      \n      if (rowErrors.length === 0) {\n        const company: any = {\n          name: row.name,\n          industry: row.industry || '',\n          description: row.description || '',\n          website: row.website || '',\n          address: row.address || '',\n          phone: row.phone || '',\n          email: row.email || '',\n          notes: row.notes || ''\n        };\n        \n        // Parse employees if provided (semicolon separated)\n        if (row.employees) {\n          const employeesText = row.employees.split(';').filter(e => e.trim());\n          company.employees = employeesText.map((empText: string) => {\n            const parts = empText.split('|').map(p => p.trim());\n            return {\n              name: parts[0] || '',\n              email: parts[1] || '',\n              phone: parts[2] || '',\n              status: parts[3] || 'customer',\n              notes: parts[4] || ''\n            };\n          }).filter(emp => emp.name && emp.email);\n        }\n        \n        valid.push(company);\n      } else {\n        errors.push(...rowErrors);\n      }\n    }\n    \n    return { valid, errors };\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n    \n    if (!file.name.endsWith('.csv')) {\n      toast({\n        title: \"Invalid File\",\n        description: \"Please upload a CSV file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setImportFile(file);\n    \n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const content = e.target?.result as string;\n      const parsedData = parseCSV(content);\n      \n      if (importType === 'customers') {\n        const { valid, errors } = validateCustomerData(parsedData);\n        setImportPreview(valid);\n        setImportErrors(errors);\n      } else {\n        const { valid, errors } = validateCompanyData(parsedData);\n        setImportPreview(valid);\n        setImportErrors(errors);\n      }\n    };\n    \n    reader.readAsText(file);\n  };\n\n  const handleImport = () => {\n    if (importPreview.length === 0) {\n      toast({\n        title: \"No Data\",\n        description: \"No valid data to import\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    importDataMutation.mutate({\n      type: importType,\n      items: importPreview\n    });\n  };\n\n  const resetImportModal = () => {\n    setImportFile(null);\n    setImportPreview([]);\n    setImportErrors([]);\n    setImportType(\"customers\");\n  };\n\n  const addCompanyEmployee = () => {\n    setCompanyEmployees([...companyEmployees, {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      status: \"customer\",\n      notes: \"\"\n    }]);\n  };\n\n  const updateCompanyEmployee = (index: number, field: string, value: string) => {\n    const updatedEmployees = [...companyEmployees];\n    updatedEmployees[index] = { ...updatedEmployees[index], [field]: value };\n    setCompanyEmployees(updatedEmployees);\n  };\n\n  const removeCompanyEmployee = (index: number) => {\n    setCompanyEmployees(companyEmployees.filter((_, i) => i !== index));\n  };\n\n  const handleEditCompany = (company: Company) => {\n    setEditingCompany(company);\n    setCompanyFormData({\n      name: company.name,\n      industry: company.industry || \"\",\n      description: company.description || \"\",\n      website: company.website || \"\",\n      address: company.address || \"\",\n      phone: company.phone || \"\",\n      email: company.email || \"\",\n      notes: company.notes || \"\"\n    });\n    setShowCreateCompanyForm(true);\n  };\n\n  const handleViewCompany = (company: Company) => {\n    setViewingCompany(company);\n    const companyCustomers = allCustomers.filter(customer => customer.companyId === company.id);\n    setViewingCustomers(companyCustomers);\n  };\n\n  // Update viewing customers when allCustomers data changes\n  useEffect(() => {\n    if (viewingCompany && allCustomers) {\n      const companyCustomers = allCustomers.filter(customer => customer.companyId === viewingCompany.id);\n      setViewingCustomers(companyCustomers);\n    }\n  }, [allCustomers, viewingCompany]);\n\n  // Create employee mutation\n  const createEmployeeMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/customers\", {\n        ...data,\n        companyId: viewingCompany?.id,\n        customerType: \"individual\"\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers/analytics\"] });\n      setShowAddEmployeeForm(false);\n      employeeForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Employee added successfully!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add employee. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddEmployee = (data: any) => {\n    createEmployeeMutation.mutate(data);\n  };\n\n  const onSubmit = async (data: any) => {\n    console.log(\"Form submitted with data:\", data);\n    console.log(\"Form validation errors:\", form.formState.errors);\n    \n    // Validate required fields\n    if (!data.name?.trim() || !data.email?.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Name and email are required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Handle \"none\" company selection or undefined by setting companyId to null\n    const submitData = {\n      ...data,\n      companyId: (!data.companyId || data.companyId === \"none\") ? null : data.companyId,\n      customerType: \"individual\" // Ensure customerType is always set\n    };\n    \n    console.log(\"Submitting customer data:\", submitData);\n    createCustomerMutation.mutate(submitData);\n  };\n\n  const handleSubmitCompany = () => {\n    if (!companyFormData.name) {\n      toast({\n        title: \"Error\",\n        description: \"Company name is required.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (editingCompany) {\n      updateCompanyMutation.mutate({ \n        id: editingCompany.id, \n        updates: companyFormData, \n        employees: companyEmployees \n      });\n    } else {\n      createCompanyMutation.mutate({ companyData: companyFormData, employees: companyEmployees });\n    }\n  };\n\n  // Filter customers\n  const filteredCustomers = customerAnalytics.filter(customer => {\n    const companyName = customer.companyId ? companies.find(c => c.id === customer.companyId)?.name : '';\n    const matchesSearch = customer.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         customer.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         (companyName?.toLowerCase().includes(searchQuery.toLowerCase()) || false);\n    \n    const matchesStatus = statusFilter === \"all\" || customer.status === statusFilter;\n    \n    const matchesValue = valueFilter === \"all\" || customer.analytics.lifetimeValueCategory === valueFilter;\n    \n    return matchesSearch && matchesStatus && matchesValue;\n  });\n\n  // Filter companies\n  const filteredCompanies = companies.filter(company => {\n    const matchesSearch = company.name.toLowerCase().includes(companySearchQuery.toLowerCase()) ||\n                         (company.industry?.toLowerCase().includes(companySearchQuery.toLowerCase()) || false) ||\n                         (company.email?.toLowerCase().includes(companySearchQuery.toLowerCase()) || false);\n    \n    return matchesSearch;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"customer\": return \"bg-green-100 text-green-800\";\n      case \"lead\": return \"bg-blue-100 text-blue-800\";\n      case \"inactive\": return \"bg-gray-100 text-gray-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getValueIcon = (category: string) => {\n    switch (category) {\n      case \"Platinum\": return <Crown className=\"h-4 w-4 text-purple-600\" />;\n      case \"Gold\": return <Trophy className=\"h-4 w-4 text-yellow-600\" />;\n      case \"Silver\": return <Award className=\"h-4 w-4 text-gray-600\" />;\n      default: return <Medal className=\"h-4 w-4 text-orange-600\" />;\n    }\n  };\n\n  const getValueColor = (category: string) => {\n    switch (category) {\n      case \"Platinum\": return \"bg-purple-100 text-purple-800\";\n      case \"Gold\": return \"bg-yellow-100 text-yellow-800\";\n      case \"Silver\": return \"bg-gray-100 text-gray-800\";\n      default: return \"bg-orange-100 text-orange-800\";\n    }\n  };\n\n  const formatDate = (dateString: string | null) => {\n    if (!dateString) return \"Never\";\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  // Calculate summary stats\n  const totalRevenue = customerAnalytics.reduce((sum, customer) => sum + customer.analytics.totalRevenue, 0);\n  const totalCustomers = customerAnalytics.filter(c => c.status === \"customer\").length;\n  const totalLeads = customerAnalytics.filter(c => c.status === \"lead\").length;\n  const averageValue = customerAnalytics.length > 0 ? totalRevenue / customerAnalytics.length : 0;\n\n  if (isLoading || companiesLoading) {\n    return (\n      <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n        <Sidebar />\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          <Header title=\"Customers\" subtitle=\"Loading customer data...\" />\n          <main className=\"flex-1 overflow-y-auto p-6\">\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                {[...Array(4)].map((_, i) => (\n                  <Card key={i} className=\"animate-pulse\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                      <div className=\"h-6 bg-gray-200 rounded\"></div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n              <Card className=\"animate-pulse\">\n                <CardContent className=\"p-4\">\n                  <div className=\"h-96 bg-gray-200 rounded\"></div>\n                </CardContent>\n              </Card>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <div className=\"hidden lg:block\">\n        <Sidebar />\n      </div>\n      \n      <MobileNav \n        isOpen={mobileNavOpen} \n        onClose={() => setMobileNavOpen(false)} \n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Customers\" \n          subtitle=\"Manage individual customers and company relationships\"\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <Tabs defaultValue=\"customers\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <TabsList className=\"grid w-[400px] grid-cols-2\">\n                <TabsTrigger value=\"customers\" className=\"flex items-center gap-2\">\n                  <Users className=\"h-4 w-4\" />\n                  Individual Customers\n                </TabsTrigger>\n                <TabsTrigger value=\"companies\" className=\"flex items-center gap-2\">\n                  <Building2 className=\"h-4 w-4\" />\n                  Companies\n                </TabsTrigger>\n              </TabsList>\n            </div>\n\n            {/* Individual Customers Tab */}\n            <TabsContent value=\"customers\" className=\"space-y-6\">\n              {/* Summary Cards */}\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Total Revenue</p>\n                        <p className=\"text-2xl font-bold text-green-600\">{formatAmount(totalRevenue)}</p>\n                      </div>\n                      <DollarSign className=\"h-8 w-8 text-green-600\" />\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Active Customers</p>\n                        <p className=\"text-2xl font-bold text-blue-600\">{totalCustomers}</p>\n                      </div>\n                      <Users className=\"h-8 w-8 text-blue-600\" />\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Leads</p>\n                        <p className=\"text-2xl font-bold text-orange-600\">{totalLeads}</p>\n                      </div>\n                      <TrendingUp className=\"h-8 w-8 text-orange-600\" />\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Average Value</p>\n                        <p className=\"text-2xl font-bold text-purple-600\">{formatAmount(averageValue)}</p>\n                      </div>\n                      <Star className=\"h-8 w-8 text-purple-600\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Filters and Search */}\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-between\">\n                <div className=\"flex gap-2 flex-1\">\n                  <div className=\"relative flex-1 max-w-md\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 h-4 w-4\" />\n                    <Input\n                      placeholder=\"Search customers...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"input-search-customers\"\n                    />\n                  </div>\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-32\">\n                      <SelectValue placeholder=\"Status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"customer\">Customer</SelectItem>\n                      <SelectItem value=\"lead\">Lead</SelectItem>\n                      <SelectItem value=\"inactive\">Inactive</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Select value={valueFilter} onValueChange={setValueFilter}>\n                    <SelectTrigger className=\"w-32\">\n                      <SelectValue placeholder=\"Value\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Values</SelectItem>\n                      <SelectItem value=\"Platinum\">Platinum</SelectItem>\n                      <SelectItem value=\"Gold\">Gold</SelectItem>\n                      <SelectItem value=\"Silver\">Silver</SelectItem>\n                      <SelectItem value=\"Bronze\">Bronze</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setImportType(\"customers\");\n                      setShowImportModal(true);\n                    }}\n                    data-testid=\"button-import-customers\"\n                  >\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                    Import\n                  </Button>\n                  <Dialog open={showCreateForm} onOpenChange={setShowCreateForm}>\n                    <DialogTrigger asChild>\n                      <Button className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-add-customer\">\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Add Customer\n                      </Button>\n                    </DialogTrigger>\n                  <DialogContent className=\"w-[95vw] max-w-md max-h-[90vh] overflow-y-auto\">\n                    <DialogHeader>\n                      <DialogTitle>Add New Customer</DialogTitle>\n                      <DialogDescription>\n                        Create a new customer record with their contact information and preferences.\n                      </DialogDescription>\n                    </DialogHeader>\n                    <Form {...form}>\n                      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 pb-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Full Name</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Enter full name\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"email\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Email</FormLabel>\n                              <FormControl>\n                                <Input type=\"email\" placeholder=\"Enter email\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"phone\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Phone (Optional)</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Enter phone number\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"companyId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Company (Optional)</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value === null ? \"none\" : field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select a company\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"none\">No Company</SelectItem>\n                                  {companies.map((company) => (\n                                    <SelectItem key={company.id} value={company.id}>\n                                      {company.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"status\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Status</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select status\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"lead\">Lead</SelectItem>\n                                  <SelectItem value=\"customer\">Customer</SelectItem>\n                                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"notes\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Notes (Optional)</FormLabel>\n                              <FormControl>\n                                <Textarea placeholder=\"Enter any notes about this customer\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <Button \n                          type=\"submit\" \n                          className=\"w-full\"\n                          disabled={createCustomerMutation.isPending}\n                          data-testid=\"button-create-customer-submit\"\n                          onClick={() => {\n                            console.log(\"Button clicked!\");\n                            console.log(\"Form values:\", form.getValues());\n                            console.log(\"Form errors:\", form.formState.errors);\n                            console.log(\"Form valid:\", form.formState.isValid);\n                            console.log(\"Mutation pending:\", createCustomerMutation.isPending);\n                          }}\n                        >\n                          {createCustomerMutation.isPending ? \"Creating...\" : \"Create Customer\"}\n                        </Button>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n                </div>\n              </div>\n\n              {/* Customer Table */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Customer Analytics</CardTitle>\n                  <CardDescription>\n                    Complete overview of customer data and performance metrics\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Customer</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Company</TableHead>\n                        <TableHead>Value Tier</TableHead>\n                        <TableHead>Total Revenue</TableHead>\n                        <TableHead>Bookings</TableHead>\n                        <TableHead>Last Event</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredCustomers.map((customer) => {\n                        const companyName = customer.companyId ? companies.find(c => c.id === customer.companyId)?.name : null;\n                        return (\n                          <TableRow key={customer.id}>\n                            <TableCell>\n                              <div>\n                                <div className=\"font-medium\">{customer.name}</div>\n                                <div className=\"text-sm text-gray-500 flex items-center\">\n                                  <Mail className=\"h-3 w-3 mr-1\" />\n                                  {customer.email}\n                                </div>\n                                {customer.phone && (\n                                  <div className=\"text-sm text-gray-500 flex items-center\">\n                                    <Phone className=\"h-3 w-3 mr-1\" />\n                                    {customer.phone}\n                                  </div>\n                                )}\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <Badge className={getStatusColor(customer.status)}>\n                                {customer.status}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              {companyName ? (\n                                <div className=\"flex items-center\">\n                                  <Building className=\"h-4 w-4 mr-1 text-gray-500\" />\n                                  {companyName}\n                                </div>\n                              ) : (\n                                <span className=\"text-gray-500\">-</span>\n                              )}\n                            </TableCell>\n                            <TableCell>\n                              <Badge className={`${getValueColor(customer.analytics.lifetimeValueCategory)} flex items-center gap-1`}>\n                                {getValueIcon(customer.analytics.lifetimeValueCategory)}\n                                {customer.analytics.lifetimeValueCategory}\n                              </Badge>\n                            </TableCell>\n                            <TableCell className=\"font-medium\">\n                              {formatAmount(customer.analytics.totalRevenue)}\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex items-center space-x-4 text-sm\">\n                                <span className=\"text-green-600\">{customer.analytics.confirmedBookings}</span>\n                                <span className=\"text-orange-600\">{customer.analytics.pendingBookings}</span>\n                                <span className=\"text-red-600\">{customer.analytics.cancelledBookings}</span>\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"text-sm\">\n                                {customer.analytics.lastEventDate ? (\n                                  <>\n                                    <div className=\"font-medium\">{customer.analytics.lastEventName}</div>\n                                    <div className=\"text-gray-500\">{formatDate(customer.analytics.lastEventDate)}</div>\n                                  </>\n                                ) : (\n                                  <span className=\"text-gray-500\">No events yet</span>\n                                )}\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => setSelectedCustomer(customer)}\n                                data-testid={`button-view-customer-${customer.id}`}\n                              >\n                                <Eye className=\"h-4 w-4\" />\n                              </Button>\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Companies Tab */}\n            <TabsContent value=\"companies\" className=\"space-y-6\">\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-between\">\n                <div className=\"relative flex-1 max-w-md\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 h-4 w-4\" />\n                  <Input\n                    placeholder=\"Search companies...\"\n                    value={companySearchQuery}\n                    onChange={(e) => setCompanySearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-companies\"\n                  />\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setImportType(\"companies\");\n                      setShowImportModal(true);\n                    }}\n                    data-testid=\"button-import-companies\"\n                  >\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                    Import\n                  </Button>\n                  <Dialog open={showCreateCompanyForm} onOpenChange={setShowCreateCompanyForm}>\n                    <DialogTrigger asChild>\n                      <Button \n                        className=\"bg-blue-600 hover:bg-blue-700\" \n                        data-testid=\"button-add-company\"\n                        onClick={() => {\n                          setEditingCompany(null);\n                          resetCompanyForm();\n                        }}\n                      >\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Add Company\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                    <DialogHeader>\n                      <DialogTitle>\n                        {editingCompany ? \"Edit Company\" : \"Add New Company\"}\n                      </DialogTitle>\n                      <DialogDescription>\n                        {editingCompany ? \"Update company information and manage employees\" : \"Create a new company and add employees\"}\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"grid gap-4 py-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"name\">Company Name</Label>\n                          <Input\n                            id=\"name\"\n                            value={companyFormData.name}\n                            onChange={(e) => setCompanyFormData({ ...companyFormData, name: e.target.value })}\n                            placeholder=\"Enter company name\"\n                          />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"industry\">Industry</Label>\n                          <Input\n                            id=\"industry\"\n                            value={companyFormData.industry}\n                            onChange={(e) => setCompanyFormData({ ...companyFormData, industry: e.target.value })}\n                            placeholder=\"Enter industry\"\n                          />\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"description\">Description</Label>\n                        <Textarea\n                          id=\"description\"\n                          value={companyFormData.description}\n                          onChange={(e) => setCompanyFormData({ ...companyFormData, description: e.target.value })}\n                          placeholder=\"Brief company description\"\n                        />\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"website\">Website</Label>\n                          <Input\n                            id=\"website\"\n                            value={companyFormData.website}\n                            onChange={(e) => setCompanyFormData({ ...companyFormData, website: e.target.value })}\n                            placeholder=\"https://example.com\"\n                          />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"email\">Email</Label>\n                          <Input\n                            id=\"email\"\n                            type=\"email\"\n                            value={companyFormData.email}\n                            onChange={(e) => setCompanyFormData({ ...companyFormData, email: e.target.value })}\n                            placeholder=\"contact@company.com\"\n                          />\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"phone\">Phone</Label>\n                          <Input\n                            id=\"phone\"\n                            value={companyFormData.phone}\n                            onChange={(e) => setCompanyFormData({ ...companyFormData, phone: e.target.value })}\n                            placeholder=\"Phone number\"\n                          />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"address\">Address</Label>\n                          <Input\n                            id=\"address\"\n                            value={companyFormData.address}\n                            onChange={(e) => setCompanyFormData({ ...companyFormData, address: e.target.value })}\n                            placeholder=\"Company address\"\n                          />\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"notes\">Notes</Label>\n                        <Textarea\n                          id=\"notes\"\n                          value={companyFormData.notes}\n                          onChange={(e) => setCompanyFormData({ ...companyFormData, notes: e.target.value })}\n                          placeholder=\"Additional notes\"\n                        />\n                      </div>\n\n                      {/* Employees Section - Show for both creating and editing */}\n                      {true && (\n                        <div className=\"space-y-4 border-t pt-4\">\n                          <div className=\"flex justify-between items-center\">\n                            <Label className=\"text-base font-medium\">\n                              {editingCompany ? \"Add New Employees\" : \"Employees (Optional)\"}\n                            </Label>\n                            <Button \n                              type=\"button\" \n                              variant=\"outline\" \n                              size=\"sm\" \n                              onClick={addCompanyEmployee}\n                              data-testid=\"button-add-company-employee\"\n                            >\n                              <Plus className=\"h-4 w-4 mr-2\" />\n                              Add Employee\n                            </Button>\n                          </div>\n                          \n                          {companyEmployees.length > 0 && (\n                            <div className=\"space-y-3\">\n                              {companyEmployees.map((employee, index) => (\n                                <div key={index} className=\"border rounded-lg p-4 space-y-3\">\n                                  <div className=\"flex justify-between items-start\">\n                                    <span className=\"text-sm font-medium text-gray-700\">Employee {index + 1}</span>\n                                    <Button\n                                      type=\"button\"\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      onClick={() => removeCompanyEmployee(index)}\n                                      className=\"text-red-600 hover:text-red-700\"\n                                    >\n                                      <Trash2 className=\"h-4 w-4\" />\n                                    </Button>\n                                  </div>\n                                  \n                                  <div className=\"grid grid-cols-2 gap-3\">\n                                    <div className=\"space-y-1\">\n                                      <Label className=\"text-xs\">Name</Label>\n                                      <Input\n                                        placeholder=\"Full name\"\n                                        value={employee.name}\n                                        onChange={(e) => updateCompanyEmployee(index, \"name\", e.target.value)}\n                                      />\n                                    </div>\n                                    <div className=\"space-y-1\">\n                                      <Label className=\"text-xs\">Email</Label>\n                                      <Input\n                                        type=\"email\"\n                                        placeholder=\"Email address\"\n                                        value={employee.email}\n                                        onChange={(e) => updateCompanyEmployee(index, \"email\", e.target.value)}\n                                      />\n                                    </div>\n                                  </div>\n                                  \n                                  <div className=\"grid grid-cols-2 gap-3\">\n                                    <div className=\"space-y-1\">\n                                      <Label className=\"text-xs\">Phone</Label>\n                                      <Input\n                                        placeholder=\"Phone number\"\n                                        value={employee.phone}\n                                        onChange={(e) => updateCompanyEmployee(index, \"phone\", e.target.value)}\n                                      />\n                                    </div>\n                                    <div className=\"space-y-1\">\n                                      <Label className=\"text-xs\">Status</Label>\n                                      <Select \n                                        value={employee.status} \n                                        onValueChange={(value) => updateCompanyEmployee(index, \"status\", value)}\n                                      >\n                                        <SelectTrigger className=\"h-8\">\n                                          <SelectValue />\n                                        </SelectTrigger>\n                                        <SelectContent>\n                                          <SelectItem value=\"customer\">Customer</SelectItem>\n                                          <SelectItem value=\"lead\">Lead</SelectItem>\n                                          <SelectItem value=\"inactive\">Inactive</SelectItem>\n                                        </SelectContent>\n                                      </Select>\n                                    </div>\n                                  </div>\n                                  \n                                  <div className=\"space-y-1\">\n                                    <Label className=\"text-xs\">Notes</Label>\n                                    <Textarea\n                                      placeholder=\"Employee notes\"\n                                      value={employee.notes}\n                                      onChange={(e) => updateCompanyEmployee(index, \"notes\", e.target.value)}\n                                      className=\"h-16\"\n                                    />\n                                  </div>\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                      )}\n                      \n                      <div className=\"flex justify-end space-x-2\">\n                        <Button variant=\"outline\" onClick={() => {\n                          setShowCreateCompanyForm(false);\n                          setEditingCompany(null);\n                          resetCompanyForm();\n                        }}>\n                          Cancel\n                        </Button>\n                        <Button \n                          onClick={handleSubmitCompany}\n                          disabled={createCompanyMutation.isPending || updateCompanyMutation.isPending}\n                        >\n                          {editingCompany ? \"Update Company\" : \"Create Company\"}\n                        </Button>\n                      </div>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n                </div>\n              </div>\n\n              {/* Companies Grid */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredCompanies.map((company) => {\n                  const employeeCount = allCustomers.filter(c => c.companyId === company.id).length;\n                  return (\n                    <Card key={company.id} className=\"hover:shadow-lg transition-shadow\">\n                      <CardHeader>\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <CardTitle className=\"text-lg\">{company.name}</CardTitle>\n                            {company.industry && (\n                              <CardDescription className=\"flex items-center mt-1\">\n                                <Building className=\"h-4 w-4 mr-1\" />\n                                {company.industry}\n                              </CardDescription>\n                            )}\n                          </div>\n                          <div className=\"flex gap-1\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleViewCompany(company)}\n                              data-testid={`button-view-company-${company.id}`}\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEditCompany(company)}\n                              data-testid={`button-edit-company-${company.id}`}\n                            >\n                              <Edit2 className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => deleteCompanyMutation.mutate(company.id)}\n                              data-testid={`button-delete-company-${company.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4 text-red-600\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        {company.description && (\n                          <p className=\"text-sm text-gray-600 mb-3\">{company.description}</p>\n                        )}\n                        \n                        <div className=\"space-y-2 text-sm\">\n                          {company.email && (\n                            <div className=\"flex items-center text-gray-600\">\n                              <Mail className=\"h-4 w-4 mr-2\" />\n                              {company.email}\n                            </div>\n                          )}\n                          {company.phone && (\n                            <div className=\"flex items-center text-gray-600\">\n                              <Phone className=\"h-4 w-4 mr-2\" />\n                              {company.phone}\n                            </div>\n                          )}\n                          {company.website && (\n                            <div className=\"flex items-center text-gray-600\">\n                              <Globe className=\"h-4 w-4 mr-2\" />\n                              <a href={company.website} target=\"_blank\" rel=\"noopener noreferrer\" className=\"hover:underline\">\n                                {company.website}\n                              </a>\n                            </div>\n                          )}\n                          {company.address && (\n                            <div className=\"flex items-center text-gray-600\">\n                              <MapPin className=\"h-4 w-4 mr-2\" />\n                              {company.address}\n                            </div>\n                          )}\n                        </div>\n                        \n                        <div className=\"mt-4 pt-3 border-t\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-600\">Employees</span>\n                            <Badge variant=\"secondary\">{employeeCount}</Badge>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </main>\n      </div>\n\n      {/* Customer Detail Modal */}\n      {selectedCustomer && (\n        <Dialog open={!!selectedCustomer} onOpenChange={() => setSelectedCustomer(null)}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                {selectedCustomer.name}\n              </DialogTitle>\n              <DialogDescription>\n                Customer since {formatDate(selectedCustomer.analytics.customerSince)}\n              </DialogDescription>\n            </DialogHeader>\n            \n            <div className=\"space-y-6\">\n              {/* Contact Information */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Contact Information</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-center\">\n                    <Mail className=\"h-4 w-4 mr-2 text-gray-500\" />\n                    <span>{selectedCustomer.email}</span>\n                  </div>\n                  {selectedCustomer.phone && (\n                    <div className=\"flex items-center\">\n                      <Phone className=\"h-4 w-4 mr-2 text-gray-500\" />\n                      <span>{selectedCustomer.phone}</span>\n                    </div>\n                  )}\n                  {selectedCustomer.companyId && (\n                    <div className=\"flex items-center\">\n                      <Building className=\"h-4 w-4 mr-2 text-gray-500\" />\n                      <span>{companies.find(c => c.id === selectedCustomer.companyId)?.name}</span>\n                    </div>\n                  )}\n                  <div className=\"flex items-center\">\n                    <Badge className={getStatusColor(selectedCustomer.status)}>\n                      {selectedCustomer.status}\n                    </Badge>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              {/* Revenue Analytics */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    <DollarSign className=\"h-5 w-5\" />\n                    Revenue Analytics\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                    <div>\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        {formatAmount(selectedCustomer.analytics.totalRevenue)}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">Total Revenue</div>\n                    </div>\n                    <div>\n                      <div className=\"text-2xl font-bold text-blue-600\">\n                        {formatAmount(selectedCustomer.analytics.averageBookingValue)}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">Average Booking</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <Badge className={`${getValueColor(selectedCustomer.analytics.lifetimeValueCategory)} flex items-center gap-1`}>\n                      {getValueIcon(selectedCustomer.analytics.lifetimeValueCategory)}\n                      {selectedCustomer.analytics.lifetimeValueCategory} Customer\n                    </Badge>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              {/* Booking Statistics */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    <Calendar className=\"h-5 w-5\" />\n                    Booking Statistics\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-4 gap-4 text-center\">\n                    <div>\n                      <div className=\"text-2xl font-bold text-blue-600\">{selectedCustomer.analytics.bookingsCount}</div>\n                      <div className=\"text-sm text-gray-500\">Total</div>\n                    </div>\n                    <div>\n                      <div className=\"text-2xl font-bold text-green-600\">{selectedCustomer.analytics.confirmedBookings}</div>\n                      <div className=\"text-sm text-gray-500\">Confirmed</div>\n                    </div>\n                    <div>\n                      <div className=\"text-2xl font-bold text-orange-600\">{selectedCustomer.analytics.pendingBookings}</div>\n                      <div className=\"text-sm text-gray-500\">Pending</div>\n                    </div>\n                    <div>\n                      <div className=\"text-2xl font-bold text-red-600\">{selectedCustomer.analytics.cancelledBookings}</div>\n                      <div className=\"text-sm text-gray-500\">Cancelled</div>\n                    </div>\n                  </div>\n                  \n                  {selectedCustomer.analytics.lastEventDate && (\n                    <div className=\"mt-4 p-3 bg-gray-50 rounded-lg\">\n                      <div className=\"font-medium\">Last Event:</div>\n                      <div className=\"text-sm text-gray-600\">{selectedCustomer.analytics.lastEventName}</div>\n                      <div className=\"text-sm text-gray-500\">{formatDate(selectedCustomer.analytics.lastEventDate)}</div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n              \n              {/* Notes */}\n              {selectedCustomer.notes && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Notes</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-gray-600\">{selectedCustomer.notes}</p>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Company Detail Modal */}\n      {viewingCompany && (\n        <Dialog open={!!viewingCompany} onOpenChange={() => setViewingCompany(null)}>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <Building2 className=\"h-5 w-5\" />\n                {viewingCompany.name}\n              </DialogTitle>\n              <DialogDescription>\n                {viewingCompany.industry && `${viewingCompany.industry} • `}\n                {viewingCustomers.length} employee{viewingCustomers.length !== 1 ? 's' : ''}\n              </DialogDescription>\n            </DialogHeader>\n            \n            <div className=\"space-y-6\">\n              {/* Company Information */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Company Information</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {viewingCompany.description && (\n                    <p className=\"text-gray-600\">{viewingCompany.description}</p>\n                  )}\n                  \n                  <div className=\"grid grid-cols-2 gap-4\">\n                    {viewingCompany.email && (\n                      <div className=\"flex items-center\">\n                        <Mail className=\"h-4 w-4 mr-2 text-gray-500\" />\n                        <span>{viewingCompany.email}</span>\n                      </div>\n                    )}\n                    {viewingCompany.phone && (\n                      <div className=\"flex items-center\">\n                        <Phone className=\"h-4 w-4 mr-2 text-gray-500\" />\n                        <span>{viewingCompany.phone}</span>\n                      </div>\n                    )}\n                    {viewingCompany.website && (\n                      <div className=\"flex items-center\">\n                        <Globe className=\"h-4 w-4 mr-2 text-gray-500\" />\n                        <a href={viewingCompany.website} target=\"_blank\" rel=\"noopener noreferrer\" className=\"hover:underline text-blue-600\">\n                          {viewingCompany.website}\n                        </a>\n                      </div>\n                    )}\n                    {viewingCompany.address && (\n                      <div className=\"flex items-center\">\n                        <MapPin className=\"h-4 w-4 mr-2 text-gray-500\" />\n                        <span>{viewingCompany.address}</span>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n              \n              {/* Employees */}\n              <Card>\n                <CardHeader>\n                  <div className=\"flex justify-between items-center\">\n                    <CardTitle className=\"text-lg flex items-center gap-2\">\n                      <Users className=\"h-5 w-5\" />\n                      Employees ({viewingCustomers.length})\n                    </CardTitle>\n                    <Dialog open={showAddEmployeeForm} onOpenChange={setShowAddEmployeeForm}>\n                      <DialogTrigger asChild>\n                        <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-add-employee\">\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add Employee\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"w-[95vw] max-w-md max-h-[90vh] overflow-y-auto\">\n                        <DialogHeader>\n                          <DialogTitle>Add Employee to {viewingCompany?.name}</DialogTitle>\n                          <DialogDescription>\n                            Add a new employee to this company's team.\n                          </DialogDescription>\n                        </DialogHeader>\n                        <Form {...employeeForm}>\n                          <form onSubmit={employeeForm.handleSubmit(handleAddEmployee)} className=\"space-y-4 pb-4\">\n                            <FormField\n                              control={employeeForm.control}\n                              name=\"name\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Full Name</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"Enter employee's full name\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            \n                            <FormField\n                              control={employeeForm.control}\n                              name=\"email\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Email</FormLabel>\n                                  <FormControl>\n                                    <Input type=\"email\" placeholder=\"Enter employee's email\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            <FormField\n                              control={employeeForm.control}\n                              name=\"phone\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Phone (Optional)</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"Enter phone number\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            <FormField\n                              control={employeeForm.control}\n                              name=\"status\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Status</FormLabel>\n                                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                    <FormControl>\n                                      <SelectTrigger>\n                                        <SelectValue placeholder=\"Select status\" />\n                                      </SelectTrigger>\n                                    </FormControl>\n                                    <SelectContent>\n                                      <SelectItem value=\"customer\">Customer</SelectItem>\n                                      <SelectItem value=\"lead\">Lead</SelectItem>\n                                      <SelectItem value=\"inactive\">Inactive</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            <FormField\n                              control={employeeForm.control}\n                              name=\"notes\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Notes (Optional)</FormLabel>\n                                  <FormControl>\n                                    <Textarea placeholder=\"Enter any notes about this employee\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            <Button \n                              type=\"submit\" \n                              className=\"w-full\"\n                              disabled={createEmployeeMutation.isPending}\n                            >\n                              {createEmployeeMutation.isPending ? \"Adding Employee...\" : \"Add Employee\"}\n                            </Button>\n                          </form>\n                        </Form>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {viewingCustomers.length > 0 ? (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Name</TableHead>\n                          <TableHead>Email</TableHead>\n                          <TableHead>Phone</TableHead>\n                          <TableHead>Status</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {viewingCustomers.map((customer) => (\n                          <TableRow key={customer.id}>\n                            <TableCell className=\"font-medium\">{customer.name}</TableCell>\n                            <TableCell>{customer.email}</TableCell>\n                            <TableCell>{customer.phone || '-'}</TableCell>\n                            <TableCell>\n                              <Badge className={getStatusColor(customer.status)}>\n                                {customer.status}\n                              </Badge>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  ) : (\n                    <p className=\"text-gray-500 text-center py-4\">No employees found for this company.</p>\n                  )}\n                </CardContent>\n              </Card>\n              \n              {/* Notes */}\n              {viewingCompany.notes && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Notes</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-gray-600\">{viewingCompany.notes}</p>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Import Modal */}\n      <Dialog open={showImportModal} onOpenChange={(open) => {\n        setShowImportModal(open);\n        if (!open) resetImportModal();\n      }}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              Import {importType === \"customers\" ? \"Customers\" : \"Companies\"}\n            </DialogTitle>\n            <DialogDescription>\n              Upload a CSV file to bulk import {importType === \"customers\" ? \"customer data\" : \"companies with their employees\"}\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-6\">\n            {/* File Upload Section */}\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">\n                  Choose CSV File\n                </label>\n                <input\n                  type=\"file\"\n                  accept=\".csv\"\n                  onChange={handleFileUpload}\n                  className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"\n                  data-testid=\"input-file-import\"\n                />\n              </div>\n\n              {/* Format Instructions */}\n              <div className=\"bg-blue-50 p-4 rounded-md\">\n                <h4 className=\"text-sm font-medium text-blue-800 mb-2\">\n                  {importType === \"customers\" ? \"Customer CSV Format:\" : \"Company CSV Format:\"}\n                </h4>\n                <p className=\"text-xs text-blue-700 mb-2\">\n                  {importType === \"customers\" ? \n                    \"Required columns: name, email | Optional: phone, status, notes\" :\n                    \"Required columns: name | Optional: industry, description, website, address, phone, email, notes, employees\"\n                  }\n                </p>\n                {importType === \"companies\" && (\n                  <p className=\"text-xs text-blue-700\">\n                    <strong>Employee format:</strong> Use semicolon (;) to separate employees, and pipe (|) to separate employee fields: Name|Email|Phone|Status|Notes\n                  </p>\n                )}\n                <div className=\"mt-2 text-xs text-blue-700\">\n                  <strong>Example:</strong>\n                  <br />\n                  {importType === \"customers\" ? \n                    \"name,email,phone,status,notes\" :\n                    \"name,industry,email,phone,employees\"\n                  }\n                  <br />\n                  {importType === \"customers\" ? \n                    \"John Doe,john@example.com,555-0123,customer,VIP client\" :\n                    'Tech Corp,Technology,tech@example.com,555-0123,\"John Doe|john@example.com|555-0123|customer|Manager;Jane Smith|jane@example.com|555-0124|customer|\"'\n                  }\n                </div>\n              </div>\n            </div>\n\n            {/* Errors */}\n            {importErrors.length > 0 && (\n              <div className=\"bg-red-50 p-4 rounded-md\">\n                <h4 className=\"text-sm font-medium text-red-800 mb-2\">Validation Errors:</h4>\n                <ul className=\"text-xs text-red-700 list-disc list-inside\">\n                  {importErrors.map((error, index) => (\n                    <li key={index}>{error}</li>\n                  ))}\n                </ul>\n              </div>\n            )}\n\n            {/* Preview */}\n            {importPreview.length > 0 && (\n              <div className=\"space-y-2\">\n                <h4 className=\"text-sm font-medium\">\n                  Preview ({importPreview.length} {importType} to import)\n                </h4>\n                <div className=\"max-h-60 overflow-y-auto border rounded-md\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Name</TableHead>\n                        {importType === \"customers\" ? (\n                          <>\n                            <TableHead>Email</TableHead>\n                            <TableHead>Phone</TableHead>\n                            <TableHead>Status</TableHead>\n                          </>\n                        ) : (\n                          <>\n                            <TableHead>Industry</TableHead>\n                            <TableHead>Email</TableHead>\n                            <TableHead>Employees</TableHead>\n                          </>\n                        )}\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {importPreview.slice(0, 10).map((item, index) => (\n                        <TableRow key={index}>\n                          <TableCell className=\"font-medium\">{item.name}</TableCell>\n                          {importType === \"customers\" ? (\n                            <>\n                              <TableCell>{item.email}</TableCell>\n                              <TableCell>{item.phone || '-'}</TableCell>\n                              <TableCell>\n                                <Badge className={getStatusColor(item.status)}>\n                                  {item.status}\n                                </Badge>\n                              </TableCell>\n                            </>\n                          ) : (\n                            <>\n                              <TableCell>{item.industry || '-'}</TableCell>\n                              <TableCell>{item.email || '-'}</TableCell>\n                              <TableCell>\n                                {item.employees ? item.employees.length : 0} employees\n                              </TableCell>\n                            </>\n                          )}\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                  {importPreview.length > 10 && (\n                    <p className=\"text-xs text-gray-500 p-2\">\n                      ... and {importPreview.length - 10} more\n                    </p>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end gap-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowImportModal(false)}\n                data-testid=\"button-cancel-import\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleImport}\n                disabled={importPreview.length === 0 || importDataMutation.isPending}\n                data-testid=\"button-confirm-import\"\n              >\n                {importDataMutation.isPending ? \"Importing...\" : `Import ${importPreview.length} ${importType}`}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":84089},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { MobileNav } from \"@/components/layout/mobile-nav\";\nimport { MetricsGrid } from \"@/components/dashboard/metrics-grid\";\nimport { AdvancedCalendar } from \"@/components/dashboard/advanced-calendar\";\nimport { RecentBookings } from \"@/components/dashboard/recent-bookings\";\nimport { AIRecommendations } from \"@/components/dashboard/ai-recommendations\";\nimport { ActiveLeads } from \"@/components/dashboard/active-leads\";\nimport { QuickActions } from \"@/components/dashboard/quick-actions\";\nimport { VenueUtilization } from \"@/components/dashboard/venue-utilization\";\nimport { UpcomingEvents } from \"@/components/dashboard/upcoming-events\";\nimport { RevenueChart } from \"@/components/dashboard/revenue-chart\";\nimport { QuickStats } from \"@/components/dashboard/quick-stats\";\nimport { TaskOverview } from \"@/components/dashboard/task-overview\";\nimport { WeatherDate } from \"@/components/dashboard/weather-date\";\nimport { EventEditFullModal } from \"@/components/forms/event-edit-full-modal\";\nimport { EventSummaryModal } from \"@/components/forms/event-summary-modal\";\nimport { CreateEventModal } from \"@/components/forms/create-event-modal\";\nimport { VoiceBookingModal } from \"@/components/ai/voice-booking-modal\";\n\nexport default function Dashboard() {\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<any>(null);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [showCreateEventModal, setShowCreateEventModal] = useState(false);\n  const [showVoiceBookingModal, setShowVoiceBookingModal] = useState(false);\n  \n  // Load full contract data if event is part of a contract\n  const { data: allBookings = [] } = useQuery({ queryKey: [\"/api/bookings\"] });\n  \n  const handleEventClick = async (booking: any) => {\n    if (booking.contractId) {\n      // Find the full contract representation from the bookings list\n      const contractBooking = (allBookings as any[]).find((b: any) => \n        b.isContract && b.contractInfo?.id === booking.contractId\n      );\n      if (contractBooking) {\n        setSelectedEvent(contractBooking);\n      } else {\n        setSelectedEvent(booking);\n      }\n    } else {\n      setSelectedEvent(booking);\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <div className=\"hidden lg:block\">\n        <Sidebar collapsed={sidebarCollapsed} />\n      </div>\n      \n      <MobileNav \n        isOpen={mobileNavOpen} \n        onClose={() => setMobileNavOpen(false)} \n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Dashboard\" \n          subtitle=\"Welcome back! Here's what's happening at your venues today.\"\n          onMobileMenuToggle={() => setMobileNavOpen(true)}\n          onNewBooking={() => setShowCreateEventModal(true)}\n          onSidebarToggle={() => setSidebarCollapsed(!sidebarCollapsed)}\n          sidebarCollapsed={sidebarCollapsed}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-3 sm:p-6\">\n          {/* AI Insights Banner */}\n          <div className=\"mb-4 sm:mb-6 bg-gradient-to-r from-purple-600 to-blue-600 rounded-xl p-4 sm:p-6 text-white\">\n            <div className=\"flex flex-col sm:flex-row items-start justify-between gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center mb-2\">\n                  <svg className=\"w-5 h-5 sm:w-6 sm:h-6 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\"/>\n                  </svg>\n                  <h3 className=\"text-base sm:text-lg font-semibold\">AI-Powered Venue Management</h3>\n                </div>\n                <p className=\"text-purple-100 mb-3 text-sm sm:text-base\">Your venue utilization is 15% higher than last month. AI suggests focusing on weekend evening slots for maximum revenue.</p>\n                <div className=\"flex flex-wrap gap-2 sm:gap-4 text-xs sm:text-sm\">\n                  <span className=\"bg-white/20 px-2 sm:px-3 py-1 rounded-full\">+23% Booking Rate</span>\n                  <span className=\"bg-white/20 px-2 sm:px-3 py-1 rounded-full\">3 High-Value Leads</span>\n                  <span className=\"bg-white/20 px-2 sm:px-3 py-1 rounded-full\">$12K Revenue Opportunity</span>\n                </div>\n              </div>\n              <div className=\"flex flex-col sm:flex-row gap-3\">\n                <button \n                  onClick={() => setShowVoiceBookingModal(true)}\n                  className=\"bg-white/20 hover:bg-white/30 text-white px-3 sm:px-4 py-2 rounded-lg text-xs sm:text-sm font-medium transition-colors w-full sm:w-auto flex items-center gap-2\"\n                >\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"/>\n                  </svg>\n                  Voice Booking\n                </button>\n                <button \n                  onClick={() => window.location.href = '/ai-analytics'}\n                  className=\"bg-white/20 hover:bg-white/30 text-white px-3 sm:px-4 py-2 rounded-lg text-xs sm:text-sm font-medium transition-colors w-full sm:w-auto\"\n                >\n                  AI Reports\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <MetricsGrid />\n          \n          {/* Quick Stats Section */}\n          <div className=\"mb-6\">\n            <QuickStats />\n          </div>\n          \n          {/* Full-width Calendar */}\n          <div className=\"mb-6\">\n            <AdvancedCalendar onEventClick={handleEventClick} />\n          </div>\n          \n          {/* Three-column layout for main content */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-6 mb-6\">\n            {/* Left Column - Main Content */}\n            <div className=\"lg:col-span-8 space-y-6\">\n              <RecentBookings />\n            </div>\n            \n            {/* Right Column - Side Widgets */}\n            <div className=\"lg:col-span-4 space-y-6\">\n              <WeatherDate />\n              <ActiveLeads />\n            </div>\n          </div>\n          \n          {/* AI Recommendations - Full Width */}\n          <div className=\"mb-6\">\n            <AIRecommendations />\n          </div>\n        </main>\n\n        {/* Event Summary Modal - Shows when clicking calendar event */}\n        <EventSummaryModal \n          open={!!selectedEvent && !showEditModal} \n          onOpenChange={(open) => !open && setSelectedEvent(null)}\n          booking={selectedEvent}\n          onEditClick={() => setShowEditModal(true)}\n        />\n\n        {/* Event Edit Modal - Shows when clicking Edit in summary modal */}\n        <EventEditFullModal \n          open={showEditModal} \n          onOpenChange={(open) => {\n            setShowEditModal(false);\n            if (!open) {\n              setSelectedEvent(null);\n            }\n          }}\n          booking={selectedEvent}\n        />\n\n        <CreateEventModal\n          open={showCreateEventModal}\n          onOpenChange={setShowCreateEventModal}\n        />\n\n        {/* AI Voice Booking Modal */}\n        <VoiceBookingModal\n          open={showVoiceBookingModal}\n          onOpenChange={setShowVoiceBookingModal}\n          onEventCreated={() => {\n            setShowVoiceBookingModal(false);\n            // Refresh data\n            window.location.reload();\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":7926},"client/src/pages/events.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { MobileNav } from \"@/components/layout/mobile-nav\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { CreateEventModal } from \"@/components/forms/create-event-modal\";\nimport { EventSummaryModal } from \"@/components/forms/event-summary-modal\";\nimport { EventEditFullModal } from \"@/components/forms/event-edit-full-modal\";\nimport { StatusChangeModal } from \"@/components/modals/status-change-modal\";\nimport { ProposalTrackingModal } from \"@/components/proposals/proposal-tracking-modal\";\nimport { AdvancedCalendar } from \"@/components/dashboard/advanced-calendar\";\nimport { useBookings } from \"@/hooks/use-bookings\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Calendar, Clock, MapPin, Users, Table as TableIcon, Grid3X3, DollarSign, FileText, Plus, Search, Filter, MoreHorizontal, Eye } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { getStatusConfig } from \"@shared/status-utils\";\n\nexport default function Events() {\n  const { data: bookings, isLoading } = useBookings();\n  \n  // Fetch proposals to check which events have proposals\n  const { data: proposals = [] } = useQuery({ queryKey: [\"/api/proposals\"] }) as { data: any[] };\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [selectedBooking, setSelectedBooking] = useState<any>(null);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [showStatusModal, setShowStatusModal] = useState(false);\n  const [viewMode, setViewMode] = useState<\"calendar\" | \"cards\" | \"table\">(\"cards\");\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [showProposalModal, setShowProposalModal] = useState(false);\n  const [selectedProposalId, setSelectedProposalId] = useState(\"\");\n\n  const getDisplayStatus = (status: string, proposalStatus?: string) => {\n    // Show proposal status when active for leads\n    if (status === \"inquiry\" && proposalStatus === \"sent\") return \"Proposal Sent\";\n    if (status === \"inquiry\" && proposalStatus === \"viewed\") return \"Proposal Viewed\";\n    if (status === \"inquiry\" && proposalStatus === \"accepted\") return \"Proposal Accepted\";\n    if (status === \"inquiry\" && proposalStatus === \"declined\") return \"Proposal Declined\";\n    \n    // Main business workflow\n    switch (status) {\n      case \"inquiry\": return \"Lead\";\n      case \"confirmed\": return \"Booked\";\n      case \"completed\": return \"Completed\";\n      case \"cancelled\": return \"Cancelled\";\n      // Legacy statuses for backwards compatibility\n      case \"pending\": return \"Pending\";\n      case \"tentative\": return \"Tentative\";\n      case \"quoted\": return \"Proposal Sent\"; // Legacy: redirect to new workflow\n      default: return status.charAt(0).toUpperCase() + status.slice(1);\n    }\n  };\n\n  const getStatusColor = (status: string, proposalStatus?: string) => {\n    // Use the centralized status utils for consistent coloring\n    return getStatusConfig(status).bgColor + \" \" + getStatusConfig(status).textColor;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n        <Sidebar />\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          <Header title=\"Events & Bookings\" subtitle=\"Manage your venue bookings and events\" />\n          <main className=\"flex-1 overflow-y-auto p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <div className=\"h-32 bg-gray-200 rounded-t-lg\"></div>\n                  <CardContent className=\"p-4\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-3/4\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  const toggleSidebar = () => setSidebarCollapsed(!sidebarCollapsed);\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <div className=\"hidden lg:block\">\n        <Sidebar collapsed={sidebarCollapsed} />\n      </div>\n      \n      <MobileNav isOpen={mobileNavOpen} onClose={() => setMobileNavOpen(false)} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <div className=\"flex items-center justify-between p-4 lg:p-6 border-b border-slate-200 bg-white\">\n          <div className=\"flex items-center gap-3\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setMobileNavOpen(true)}\n              className=\"md:hidden\"\n            >\n              <Grid3X3 className=\"w-4 h-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-xl md:text-2xl font-bold text-slate-900\">Events & Bookings</h1>\n              <p className=\"text-sm md:text-base text-slate-600 hidden sm:block\">Manage your venue bookings and events</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2 md:gap-3\">\n            <Button\n              variant=\"outline\"\n              onClick={toggleSidebar}\n              className=\"hidden md:flex items-center gap-2\"\n            >\n              {sidebarCollapsed ? <ChevronRight className=\"w-4 h-4\" /> : <ChevronLeft className=\"w-4 h-4\" />}\n              <span className=\"hidden lg:inline\">{sidebarCollapsed ? \"Expand\" : \"Collapse\"} Sidebar</span>\n            </Button>\n            <Button \n              onClick={() => setShowCreateForm(true)}\n              className=\"bg-blue-600 hover:bg-blue-700 text-sm md:text-base px-3 md:px-4\"\n            >\n              <span className=\"hidden sm:inline\">+ New Event</span>\n              <span className=\"sm:hidden\">+ New</span>\n            </Button>\n          </div>\n        </div>\n        \n        <main className=\"flex-1 overflow-y-auto p-4 lg:p-6 xl:p-8\">\n          {!bookings || bookings.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Calendar className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No events scheduled</h3>\n              <p className=\"text-gray-600 mb-6\">Create your first event to get started with venue management.</p>\n              <Button onClick={() => setShowCreateForm(true)} className=\"bg-blue-600 hover:bg-blue-700\">\n                Create First Event\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-6\">\n              {/* View Mode Tabs */}\n              <Tabs value={viewMode} onValueChange={(value) => setViewMode(value as \"calendar\" | \"cards\" | \"table\")}>\n                <TabsList className=\"grid w-72 grid-cols-3\">\n                  <TabsTrigger value=\"calendar\" className=\"flex items-center gap-2\">\n                    <Calendar className=\"h-4 w-4\" />\n                    Calendar\n                  </TabsTrigger>\n                  <TabsTrigger value=\"cards\" className=\"flex items-center gap-2\">\n                    <Grid3X3 className=\"h-4 w-4\" />\n                    Cards\n                  </TabsTrigger>\n                  <TabsTrigger value=\"table\" className=\"flex items-center gap-2\">\n                    <TableIcon className=\"h-4 w-4\" />\n                    Table\n                  </TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"calendar\" className=\"space-y-6\">\n                  <div className=\"h-[calc(100vh-280px)] md:h-[calc(100vh-280px)]\">\n                    <AdvancedCalendar onEventClick={setSelectedBooking} />\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"cards\" className=\"space-y-0\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {bookings.map((booking) => (\n                      <Card \n                        key={booking.id} \n                        className={`hover:shadow-lg transition-shadow cursor-pointer ${\n                          (booking as any).isContract ? 'border-purple-200 bg-purple-50/30' : ''\n                        }`}\n                        onClick={() => setSelectedBooking(booking)}\n                      >\n                        <CardHeader className=\"pb-2\">\n                          <div className=\"flex items-start justify-between gap-4\">\n                            <div className=\"flex-1 min-w-0\">\n                              {(booking as any).isContract && (\n                                <Badge variant=\"secondary\" className=\"mb-2 bg-purple-100 text-purple-800\">\n                                  Contract • {(booking as any).eventCount} Events\n                                </Badge>\n                              )}\n                              <CardTitle className=\"text-lg font-semibold line-clamp-2\">\n                                {(booking as any).isContract \n                                  ? (booking as any).contractInfo?.contractName || \"Multi-Date Contract\"\n                                  : booking.eventName\n                                }\n                              </CardTitle>\n                            </div>\n                            <div className=\"flex items-start gap-2 flex-shrink-0\">\n                              <div className=\"flex flex-col items-end gap-2\">\n                                <Badge \n                                  className={`${getStatusConfig(booking.status).bgColor} ${getStatusConfig(booking.status).textColor} ${getStatusConfig(booking.status).borderColor} border text-xs px-2 py-1 whitespace-nowrap max-w-[120px] text-center`}\n                                  title={getStatusConfig(booking.status).description}\n                                >\n                                  {getStatusConfig(booking.status).label}\n                                </Badge>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    setSelectedBooking(booking);\n                                    setShowStatusModal(true);\n                                  }}\n                                  className=\"h-6 w-6 p-0 hover:bg-gray-100 flex-shrink-0\"\n                                >\n                                  <MoreHorizontal className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"space-y-2 text-sm text-gray-600\">\n                            {(booking as any).isContract ? (\n                              <>\n                                <div className=\"flex items-center\">\n                                  <Calendar className=\"w-4 h-4 mr-2\" />\n                                  {(booking as any).contractEvents?.length || 0} dates selected\n                                </div>\n                                <div className=\"flex items-center\">\n                                  <Users className=\"w-4 h-4 mr-2\" />\n                                  Total {(booking as any).contractEvents?.reduce((sum: number, event: any) => sum + (event.guestCount || 0), 0) || 0} guests\n                                </div>\n                                <div className=\"text-xs text-gray-500\">\n                                  Events: {(booking as any).contractEvents?.map((event: any) => \n                                    format(new Date(event.eventDate), \"MMM d\")\n                                  ).join(\", \") || 'None'}\n                                </div>\n                              </>\n                            ) : (\n                              <>\n                                <div className=\"flex items-center\">\n                                  <Calendar className=\"w-4 h-4 mr-2\" />\n                                  {booking.eventDate ? format(new Date(booking.eventDate), \"PPP\") : \"Date TBD\"}\n                                </div>\n                                <div className=\"flex items-center\">\n                                  <Clock className=\"w-4 h-4 mr-2\" />\n                                  {booking.startTime} - {booking.endTime}\n                                </div>\n                                <div className=\"flex items-center\">\n                                  <Users className=\"w-4 h-4 mr-2\" />\n                                  {booking.guestCount} guests\n                                </div>\n                              </>\n                            )}\n                            <div className=\"flex items-center\">\n                              <MapPin className=\"w-4 h-4 mr-2\" />\n                              Venue Location\n                            </div>\n                            {booking.totalAmount && (\n                              <div className=\"flex items-center font-medium text-green-600\">\n                                <DollarSign className=\"w-4 h-4 mr-2\" />\n                                ${parseFloat(booking.totalAmount).toLocaleString()}\n                              </div>\n                            )}\n                            {/* Show proposal button if proposal exists */}\n                            {(() => {\n                              // Check multiple criteria to find a matching proposal\n                              let hasProposal = false;\n                              let proposal = null;\n\n                              // For contract events, check if any of the contract events have a proposal\n                              if ((booking as any).isContract) {\n                                // Look for proposal linked to the contract via contractInfo.proposalId\n                                if ((booking as any).contractInfo?.proposalId) {\n                                  proposal = proposals.find((p: any) => p.id === (booking as any).contractInfo.proposalId);\n                                  hasProposal = !!proposal;\n                                }\n                                \n                                // If not found, check contract events for proposal links\n                                if (!proposal && (booking as any).contractEvents) {\n                                  for (const event of (booking as any).contractEvents) {\n                                    if (event.proposalId) {\n                                      proposal = proposals.find((p: any) => p.id === event.proposalId);\n                                      if (proposal) {\n                                        hasProposal = true;\n                                        break;\n                                      }\n                                    }\n                                  }\n                                }\n                              } else {\n                                // For regular bookings, check proposalId first\n                                if (booking.proposalId) {\n                                  proposal = proposals.find((p: any) => p.id === booking.proposalId);\n                                  hasProposal = !!proposal;\n                                }\n                                \n                                // If not found by proposalId, use existing logic\n                                if (!hasProposal) {\n                                  hasProposal = booking.proposalStatus === 'sent' || \n                                              proposals.some((p: any) => \n                                                p.customerId === booking.customerId && \n                                                (p.eventName === booking.eventName || \n                                                 p.eventDate === booking.eventDate ||\n                                                 (p.guestCount === booking.guestCount && p.venueId === booking.venueId))\n                                              );\n                                  \n                                  if (hasProposal && !proposal) {\n                                    proposal = proposals.find((p: any) => \n                                      p.customerId === booking.customerId && \n                                      (p.eventName === booking.eventName || \n                                       p.eventDate === booking.eventDate ||\n                                       (p.guestCount === booking.guestCount && p.venueId === booking.venueId))\n                                    );\n                                  }\n                                }\n                              }\n                              \n                              if (hasProposal && proposal) {\n                                return (\n                                  <div className=\"mt-3 pt-2 border-t border-gray-100\">\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      className=\"w-full h-8 text-xs font-medium text-blue-600 hover:text-blue-700 hover:bg-blue-50 transition-colors duration-200 border border-blue-200 hover:border-blue-300 rounded-md\"\n                                      onClick={(e) => {\n                                        e.stopPropagation();\n                                        if (proposal) {\n                                          setSelectedProposalId(proposal.id);\n                                          setShowProposalModal(true);\n                                        }\n                                      }}\n                                    >\n                                      <Eye className=\"h-3 w-3 mr-1.5\" />\n                                      View Proposal Status\n                                    </Button>\n                                  </div>\n                                );\n                              }\n                              return null;\n                            })()}\n\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"table\" className=\"space-y-0\">\n                  <div className=\"border rounded-lg bg-white\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Event Name</TableHead>\n                          <TableHead>Date & Time</TableHead>\n                          <TableHead>Guests</TableHead>\n                          <TableHead>Status</TableHead>\n                          <TableHead>Amount</TableHead>\n                          <TableHead>Venue</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {bookings.map((booking) => (\n                          <TableRow \n                            key={booking.id}\n                            className={`cursor-pointer hover:bg-slate-50 ${\n                              booking.isContract ? 'bg-purple-50/30' : ''\n                            }`}\n                            onClick={() => setSelectedBooking(booking)}\n                          >\n                            <TableCell className=\"font-medium\">\n                              <div>\n                                <div className=\"flex items-center gap-2\">\n                                  {(booking as any).isContract && (\n                                    <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-800 text-xs\">\n                                      Contract\n                                    </Badge>\n                                  )}\n                                  <div className=\"font-semibold\">\n                                    {(booking as any).isContract \n                                      ? (booking as any).contractInfo?.contractName || \"Multi-Date Contract\"\n                                      : booking.eventName\n                                    }\n                                  </div>\n                                </div>\n                                <div className=\"text-sm text-slate-500\">\n                                  {(booking as any).isContract \n                                    ? `${(booking as any).eventCount || 0} events grouped`\n                                    : booking.eventType\n                                  }\n                                </div>\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              {(booking as any).isContract ? (\n                                <div className=\"text-sm\">\n                                  <div>{(booking as any).eventCount || 0} dates</div>\n                                  <div className=\"text-slate-500\">\n                                    {(booking as any).contractEvents?.slice(0, 3).map((event: any) => \n                                      format(new Date(event.eventDate), \"MMM d\")\n                                    ).join(\", \") || 'None'}\n                                    {((booking as any).contractEvents?.length || 0) > 3 && \"...\"}\n                                  </div>\n                                </div>\n                              ) : (\n                                <div className=\"text-sm\">\n                                  <div>{booking.eventDate ? format(new Date(booking.eventDate), \"MMM d, yyyy\") : \"TBD\"}</div>\n                                  <div className=\"text-slate-500\">{booking.startTime} - {booking.endTime}</div>\n                                </div>\n                              )}\n                            </TableCell>\n                            <TableCell>\n                              {(booking as any).isContract \n                                ? (booking as any).contractEvents?.reduce((sum: number, event: any) => sum + (event.guestCount || 0), 0) || 0\n                                : booking.guestCount\n                              }\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex flex-col gap-1\">\n                                <Badge \n                                  className={`${getStatusConfig(booking.status).bgColor} ${getStatusConfig(booking.status).textColor} ${getStatusConfig(booking.status).borderColor} border text-xs px-2 py-1 whitespace-nowrap text-center min-w-fit`}\n                                  title={getStatusConfig(booking.status).description}\n                                >\n                                  {getStatusConfig(booking.status).label}\n                                </Badge>\n                              </div>\n                            </TableCell>\n                            <TableCell className=\"font-medium text-green-600\">\n                              {booking.totalAmount ? `$${parseFloat(booking.totalAmount).toLocaleString()}` : '-'}\n                            </TableCell>\n                            <TableCell className=\"text-sm text-slate-600\">\n                              Venue Location\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </div>\n          )}\n        </main>\n\n        {/* Event Creation Modal */}\n        <CreateEventModal \n          open={showCreateForm} \n          onOpenChange={setShowCreateForm}\n        />\n\n        {/* Event Summary Modal */}\n        <EventSummaryModal \n          open={!!selectedBooking && !showEditModal} \n          onOpenChange={(open) => !open && setSelectedBooking(null)}\n          booking={selectedBooking}\n          onEditClick={() => setShowEditModal(true)}\n        />\n\n        {/* Event Edit Full Modal */}\n        <EventEditFullModal \n          open={showEditModal && !!selectedBooking} \n          onOpenChange={(open) => {\n            setShowEditModal(false);\n            if (!open) setSelectedBooking(null);\n          }}\n          booking={selectedBooking}\n        />\n\n        {/* Status Change Modal */}\n        <StatusChangeModal\n          open={showStatusModal && !!selectedBooking}\n          onOpenChange={(open) => {\n            setShowStatusModal(false);\n            if (!open) setSelectedBooking(null);\n          }}\n          booking={selectedBooking}\n          onStatusChanged={() => {\n            // Refetch bookings to get updated data\n            window.location.reload(); // Simple refresh for now\n          }}\n        />\n\n        {/* Proposal Tracking Modal */}\n        <ProposalTrackingModal\n          open={showProposalModal}\n          onOpenChange={setShowProposalModal}\n          proposalId={selectedProposalId}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":25864},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/payments.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { MobileNav } from \"@/components/layout/mobile-nav\";\nimport { useFormattedCurrency } from \"@/lib/currency\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { CreditCard, DollarSign, TrendingUp, AlertCircle, CheckCircle } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function Payments() {\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n  const { formatAmount } = useFormattedCurrency();\n  const { data: payments, isLoading } = useQuery({\n    queryKey: [\"/api/payments\"],\n  });\n\n  const getStatusColor = (status: string) => {\n    // Payment statuses use different colors than event statuses\n    switch (status) {\n      case \"completed\": return \"bg-green-100 text-green-800\";\n      case \"pending\": return \"bg-yellow-100 text-yellow-800\";\n      case \"failed\": return \"bg-red-100 text-red-800\";\n      case \"refunded\": return \"bg-blue-100 text-blue-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"completed\": return <CheckCircle className=\"w-4 h-4\" />;\n      case \"failed\": return <AlertCircle className=\"w-4 h-4\" />;\n      default: return <CreditCard className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getPaymentTypeColor = (type: string) => {\n    switch (type) {\n      case \"deposit\": return \"text-blue-600\";\n      case \"final\": return \"text-green-600\";\n      case \"refund\": return \"text-orange-600\";\n      default: return \"text-gray-600\";\n    }\n  };\n\n  // Calculate metrics\n  const totalRevenue = payments?.reduce((sum: number, payment: any) => \n    payment.status === \"completed\" ? sum + parseFloat(payment.amount) : sum, 0) || 0;\n  \n  const pendingPayments = payments?.filter((p: any) => p.status === \"pending\").length || 0;\n  const completedPayments = payments?.filter((p: any) => p.status === \"completed\").length || 0;\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n        <Sidebar />\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          <Header title=\"Payments\" subtitle=\"Track and manage all payments\" />\n          <main className=\"flex-1 overflow-y-auto p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-8 bg-gray-200 rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <div className=\"hidden lg:block\">\n        <Sidebar />\n      </div>\n      \n      <MobileNav \n        isOpen={mobileNavOpen} \n        onClose={() => setMobileNavOpen(false)} \n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Payments\" \n          subtitle=\"Track and manage all payments\"\n          onMobileMenuToggle={() => setMobileNavOpen(true)}\n          action={\n            <Button className=\"bg-blue-600 hover:bg-blue-700\">\n              + Process Payment\n            </Button>\n          }\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Payment Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Total Revenue</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">{formatAmount(totalRevenue)}</p>\n                    <p className=\"text-sm text-green-600 font-medium\">+8% from last month</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center\">\n                    <DollarSign className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Completed Payments</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">{completedPayments}</p>\n                    <p className=\"text-sm text-blue-600 font-medium\">This month</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center\">\n                    <CheckCircle className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Pending Payments</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">{pendingPayments}</p>\n                    <p className=\"text-sm text-orange-600 font-medium\">Awaiting processing</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-orange-50 rounded-lg flex items-center justify-center\">\n                    <AlertCircle className=\"w-6 h-6 text-orange-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Payments List */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Payments</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {!payments || payments.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <CreditCard className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No payments yet</h3>\n                  <p className=\"text-gray-600 mb-6\">Payment transactions will appear here once processed.</p>\n                  <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                    Process First Payment\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"text-left py-3 font-medium text-gray-600\">Transaction ID</th>\n                        <th className=\"text-left py-3 font-medium text-gray-600\">Amount</th>\n                        <th className=\"text-left py-3 font-medium text-gray-600\">Type</th>\n                        <th className=\"text-left py-3 font-medium text-gray-600\">Method</th>\n                        <th className=\"text-left py-3 font-medium text-gray-600\">Status</th>\n                        <th className=\"text-left py-3 font-medium text-gray-600\">Date</th>\n                        <th className=\"text-left py-3 font-medium text-gray-600\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {payments.map((payment: any) => (\n                        <tr key={payment.id} className=\"border-b hover:bg-gray-50\">\n                          <td className=\"py-4\">\n                            <div className=\"font-mono text-sm\">\n                              {payment.transactionId || payment.id.slice(-8)}\n                            </div>\n                          </td>\n                          <td className=\"py-4\">\n                            <div className=\"font-semibold text-lg\">\n                              {formatAmount(parseFloat(payment.amount))}\n                            </div>\n                          </td>\n                          <td className=\"py-4\">\n                            <span className={`capitalize ${getPaymentTypeColor(payment.paymentType)}`}>\n                              {payment.paymentType}\n                            </span>\n                          </td>\n                          <td className=\"py-4 capitalize\">{payment.paymentMethod.replace('_', ' ')}</td>\n                          <td className=\"py-4\">\n                            <Badge className={`${getStatusColor(payment.status)} flex items-center gap-1 w-fit`}>\n                              {getStatusIcon(payment.status)}\n                              {payment.status}\n                            </Badge>\n                          </td>\n                          <td className=\"py-4\">\n                            {payment.processedAt \n                              ? format(new Date(payment.processedAt), \"MMM dd, yyyy\")\n                              : format(new Date(payment.createdAt), \"MMM dd, yyyy\")\n                            }\n                          </td>\n                          <td className=\"py-4\">\n                            <Button variant=\"outline\" size=\"sm\">\n                              View Details\n                            </Button>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9866},"client/src/pages/proposals.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { MobileNav } from \"@/components/layout/mobile-nav\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ProposalTrackingModal } from \"@/components/proposals/proposal-tracking-modal\";\nimport { format } from \"date-fns\";\nimport { \n  FileText, \n  Eye, \n  Mail, \n  DollarSign, \n  Clock, \n  TrendingUp,\n  Users,\n  CheckCircle2,\n  XCircle,\n  Send,\n  Edit,\n  MoreHorizontal\n} from \"lucide-react\";\n\nexport default function Proposals() {\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n  const [showTrackingModal, setShowTrackingModal] = useState(false);\n  const [selectedProposalId, setSelectedProposalId] = useState(\"\");\n\n  // Fetch proposals data\n  const { data: proposals = [], isLoading } = useQuery({ \n    queryKey: [\"/api/proposals\"] \n  });\n\n  // Calculate proposal metrics\n  const metrics = {\n    total: proposals.length,\n    sent: proposals.filter((p: any) => p.status !== 'draft').length,\n    viewed: proposals.filter((p: any) => p.emailOpened).length,\n    accepted: proposals.filter((p: any) => p.status === 'accepted').length,\n    converted: proposals.filter((p: any) => p.status === 'converted').length,\n    totalValue: proposals.reduce((sum: number, p: any) => sum + parseFloat(p.totalAmount || 0), 0),\n    depositsPaid: proposals.filter((p: any) => p.depositPaid).length\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'draft': return 'bg-gray-100 text-gray-800';\n      case 'sent': return 'bg-blue-100 text-blue-800';\n      case 'viewed': return 'bg-purple-100 text-purple-800';\n      case 'accepted': return 'bg-green-100 text-green-800';\n      case 'rejected': return 'bg-red-100 text-red-800';\n      case 'converted': return 'bg-emerald-100 text-emerald-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'sent': return <Mail className=\"h-4 w-4\" />;\n      case 'viewed': return <Eye className=\"h-4 w-4\" />;\n      case 'accepted': return <CheckCircle2 className=\"h-4 w-4\" />;\n      case 'rejected': return <XCircle className=\"h-4 w-4\" />;\n      case 'converted': return <CheckCircle2 className=\"h-4 w-4\" />;\n      default: return <FileText className=\"h-4 w-4\" />;\n    }\n  };\n\n  const handleViewProposal = (proposalId: string) => {\n    setSelectedProposalId(proposalId);\n    setShowTrackingModal(true);\n  };\n\n  // Filter proposals based on status\n  const getFilteredProposals = (status: string) => {\n    switch (status) {\n      case 'draft': return proposals.filter((p: any) => p.status === 'draft');\n      case 'sent': return proposals.filter((p: any) => p.status === 'sent');\n      case 'viewed': return proposals.filter((p: any) => p.emailOpened);\n      case 'accepted': return proposals.filter((p: any) => p.status === 'accepted');\n      default: return proposals;\n    }\n  };\n\n  // Render proposal table/cards\n  const renderProposalsList = (filteredProposals: any[]) => (\n    <>\n      {/* Mobile Cards View */}\n      <div className=\"sm:hidden space-y-3\">\n        {filteredProposals.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <div className=\"flex flex-col items-center gap-3\">\n              <FileText className=\"h-12 w-12 text-gray-300\" />\n              <div>\n                <p className=\"font-medium text-gray-900\">No proposals found</p>\n                <p className=\"text-sm text-gray-500\">Proposals sent through the event creation process will appear here</p>\n              </div>\n            </div>\n          </div>\n        ) : (\n          filteredProposals.map((proposal: any) => (\n            <Card key={proposal.id} className=\"p-3\">\n              <div className=\"space-y-2\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-medium text-sm\">{proposal.title}</h3>\n                    <p className=\"text-xs text-gray-600\">{proposal.customerName}</p>\n                  </div>\n                  <Badge className={`${getStatusColor(proposal.status)} text-xs`}>\n                    <div className=\"flex items-center gap-1\">\n                      {getStatusIcon(proposal.status)}\n                      {proposal.status}\n                    </div>\n                  </Badge>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                  <div>\n                    <span className=\"text-gray-500\">Date:</span>\n                    <div>{proposal.eventDate ? format(new Date(proposal.eventDate), 'MMM d, yyyy') : 'N/A'}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">Amount:</span>\n                    <div className=\"font-medium\">${parseFloat(proposal.totalAmount || 0).toLocaleString()}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">Created:</span>\n                    <div>{format(new Date(proposal.createdAt), 'MMM d')}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">Deposit:</span>\n                    <div className={proposal.depositPaid ? \"text-green-600\" : \"text-gray-500\"}>\n                      {proposal.depositPaid ? \"Paid\" : \"Pending\"}\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex gap-2 pt-2\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => handleViewProposal(proposal.id)}\n                    className=\"flex-1 text-xs\"\n                  >\n                    <Eye className=\"h-3 w-3 mr-1\" />\n                    View\n                  </Button>\n                  <Button size=\"sm\" variant=\"outline\" className=\"flex-1 text-xs\">\n                    <Edit className=\"h-3 w-3 mr-1\" />\n                    Edit\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Desktop Table View */}\n      <div className=\"hidden sm:block border rounded-lg\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead className=\"text-xs sm:text-sm\">Proposal</TableHead>\n              <TableHead className=\"text-xs sm:text-sm\">Customer</TableHead>\n              <TableHead className=\"text-xs sm:text-sm\">Event Date</TableHead>\n              <TableHead className=\"text-xs sm:text-sm\">Amount</TableHead>\n              <TableHead className=\"text-xs sm:text-sm\">Status</TableHead>\n              <TableHead className=\"text-xs sm:text-sm\">Deposit</TableHead>\n              <TableHead className=\"text-xs sm:text-sm\">Created</TableHead>\n              <TableHead className=\"text-xs sm:text-sm\">Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {filteredProposals.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={8} className=\"text-center py-8\">\n                  <div className=\"flex flex-col items-center gap-3\">\n                    <FileText className=\"h-12 w-12 text-gray-300\" />\n                    <div>\n                      <p className=\"font-medium text-gray-900\">No proposals found</p>\n                      <p className=\"text-sm text-gray-500\">Proposals sent through the event creation process will appear here</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ) : (\n              filteredProposals.map((proposal: any) => (\n                <TableRow \n                  key={proposal.id}\n                  className=\"hover:bg-gray-50 cursor-pointer\"\n                  onClick={() => handleViewProposal(proposal.id)}\n                >\n                  <TableCell>\n                    <div>\n                      <div className=\"font-medium\">{proposal.title}</div>\n                      <div className=\"text-sm text-gray-500\">{proposal.eventName}</div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div>\n                      <div className=\"font-medium\">{proposal.customer?.name}</div>\n                      <div className=\"text-sm text-gray-500\">{proposal.customer?.email}</div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {proposal.eventDate \n                      ? format(new Date(proposal.eventDate), \"MMM d, yyyy\")\n                      : \"TBD\"\n                    }\n                  </TableCell>\n                  <TableCell className=\"font-medium\">\n                    ${parseFloat(proposal.totalAmount).toFixed(2)}\n                  </TableCell>\n                  <TableCell>\n                    <Badge className={getStatusColor(proposal.status)}>\n                      {getStatusIcon(proposal.status)}\n                      <span className=\"ml-1\">{proposal.status.charAt(0).toUpperCase() + proposal.status.slice(1)}</span>\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm\">\n                      <div className=\"font-medium text-green-600\">\n                        ${parseFloat(proposal.depositAmount).toFixed(2)}\n                      </div>\n                      {proposal.depositPaid ? (\n                        <Badge className=\"bg-green-100 text-green-800 text-xs\">\n                          ✓ Paid\n                        </Badge>\n                      ) : (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          Pending\n                        </Badge>\n                      )}\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"text-sm text-gray-500\">\n                    {format(new Date(proposal.createdAt), \"MMM d, yyyy\")}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleViewProposal(proposal.id);\n                        }}\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={(e) => e.stopPropagation()}\n                      >\n                        <MoreHorizontal className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n    </>\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n        <div className=\"hidden lg:block\">\n          <Sidebar />\n        </div>\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <div className=\"hidden lg:block\">\n        <Sidebar />\n      </div>\n      \n      <MobileNav \n        isOpen={mobileNavOpen} \n        onClose={() => setMobileNavOpen(false)} \n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Proposals\" \n          subtitle=\"Track and manage sent event proposals\"\n          onMobileMenuToggle={() => setMobileNavOpen(true)}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-3 sm:p-6\">\n          {/* Metrics Overview */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-6 mb-4 sm:mb-6\">\n            <Card>\n              <CardContent className=\"p-3 sm:p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-xs sm:text-sm font-medium text-gray-600\">Total Proposals</p>\n                    <div className=\"text-xl sm:text-2xl font-bold\">{metrics.total}</div>\n                  </div>\n                  <div className=\"bg-blue-100 rounded-full p-2 sm:p-3\">\n                    <FileText className=\"h-4 w-4 sm:h-6 sm:w-6 text-blue-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-3 sm:p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-xs sm:text-sm font-medium text-gray-600\">Viewed Rate</p>\n                    <div className=\"text-xl sm:text-2xl font-bold\">\n                      {metrics.sent > 0 ? Math.round((metrics.viewed / metrics.sent) * 100) : 0}%\n                    </div>\n                  </div>\n                  <div className=\"bg-purple-100 rounded-full p-2 sm:p-3\">\n                    <Eye className=\"h-4 w-4 sm:h-6 sm:w-6 text-purple-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-3 sm:p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-xs sm:text-sm font-medium text-gray-600\">Acceptance Rate</p>\n                    <div className=\"text-xl sm:text-2xl font-bold\">\n                      {metrics.sent > 0 ? Math.round((metrics.accepted / metrics.sent) * 100) : 0}%\n                    </div>\n                  </div>\n                  <div className=\"bg-green-100 rounded-full p-2 sm:p-3\">\n                    <CheckCircle2 className=\"h-4 w-4 sm:h-6 sm:w-6 text-green-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-3 sm:p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-xs sm:text-sm font-medium text-gray-600\">Total Value</p>\n                    <div className=\"text-xl sm:text-2xl font-bold\">${metrics.totalValue.toLocaleString()}</div>\n                  </div>\n                  <div className=\"bg-emerald-100 rounded-full p-2 sm:p-3\">\n                    <DollarSign className=\"h-4 w-4 sm:h-6 sm:w-6 text-emerald-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Proposals Table */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center gap-2 text-base sm:text-lg\">\n                <FileText className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n                All Proposals\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Tabs defaultValue=\"all\" className=\"space-y-3 sm:space-y-4\">\n                <TabsList className=\"grid w-full grid-cols-5 text-xs sm:text-sm\">\n                  <TabsTrigger value=\"all\" className=\"px-2 sm:px-4\">All ({metrics.total})</TabsTrigger>\n                  <TabsTrigger value=\"draft\" className=\"px-2 sm:px-4\">Drafts ({proposals.filter((p: any) => p.status === 'draft').length})</TabsTrigger>\n                  <TabsTrigger value=\"sent\" className=\"px-2 sm:px-4\">Sent ({metrics.sent})</TabsTrigger>\n                  <TabsTrigger value=\"viewed\" className=\"px-2 sm:px-4\">Viewed ({metrics.viewed})</TabsTrigger>\n                  <TabsTrigger value=\"accepted\" className=\"px-2 sm:px-4\">Accepted ({metrics.accepted})</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"all\">\n                  {renderProposalsList(getFilteredProposals('all'))}\n                </TabsContent>\n\n                <TabsContent value=\"draft\">\n                  {renderProposalsList(getFilteredProposals('draft'))}\n                </TabsContent>\n\n                <TabsContent value=\"sent\">\n                  {renderProposalsList(getFilteredProposals('sent'))}\n                </TabsContent>\n\n                <TabsContent value=\"viewed\">\n                  {renderProposalsList(getFilteredProposals('viewed'))}\n                </TabsContent>\n\n                <TabsContent value=\"accepted\">\n                  {renderProposalsList(getFilteredProposals('accepted'))}\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        </main>\n\n        {/* Modals */}\n        <ProposalTrackingModal\n          open={showTrackingModal}\n          onOpenChange={setShowTrackingModal}\n          proposalId={selectedProposalId}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":17440},"client/src/pages/tasks.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { MobileNav } from \"@/components/layout/mobile-nav\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { CheckSquare, Plus, Clock, AlertTriangle, User } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertTaskSchema } from \"@shared/schema\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport default function Tasks() {\n  const { data: tasks, isLoading } = useQuery({\n    queryKey: [\"/api/tasks\"],\n  });\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm({\n    resolver: zodResolver(insertTaskSchema.omit({ assignedTo: true, bookingId: true })),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      priority: \"medium\",\n      status: \"pending\",\n      dueDate: null,\n    }\n  });\n\n  const onSubmit = async (data: any) => {\n    try {\n      await apiRequest(\"POST\", \"/api/tasks\", data);\n      await queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      setShowCreateForm(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Task created successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create task\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    // Task statuses use different colors than event statuses\n    switch (status) {\n      case \"completed\": return \"bg-green-100 text-green-800\";\n      case \"in_progress\": return \"bg-blue-100 text-blue-800\";\n      case \"pending\": return \"bg-yellow-100 text-yellow-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"urgent\": return \"bg-red-100 text-red-800\";\n      case \"high\": return \"bg-orange-100 text-orange-800\";\n      case \"medium\": return \"bg-yellow-100 text-yellow-800\";\n      case \"low\": return \"bg-blue-100 text-blue-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getPriorityIcon = (priority: string) => {\n    if (priority === \"urgent\" || priority === \"high\") {\n      return <AlertTriangle className=\"w-4 h-4\" />;\n    }\n    return <Clock className=\"w-4 h-4\" />;\n  };\n\n  // Calculate metrics\n  const totalTasks = tasks?.length || 0;\n  const completedTasks = tasks?.filter((t: any) => t.status === \"completed\").length || 0;\n  const pendingTasks = tasks?.filter((t: any) => t.status === \"pending\").length || 0;\n  const overdueTasks = tasks?.filter((t: any) => \n    t.dueDate && new Date(t.dueDate) < new Date() && t.status !== \"completed\").length || 0;\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n        <Sidebar />\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          <Header title=\"Tasks & Team\" subtitle=\"Manage team tasks and collaboration\" />\n          <main className=\"flex-1 overflow-y-auto p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              {[...Array(4)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-8 bg-gray-200 rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Tasks & Team\" \n          subtitle=\"Manage team tasks and collaboration\"\n          action={\n            <Dialog open={showCreateForm} onOpenChange={setShowCreateForm}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  New Task\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Create New Task</DialogTitle>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"title\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Task Title</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Enter task title\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Description (Optional)</FormLabel>\n                          <FormControl>\n                            <Textarea placeholder=\"Task description...\" rows={3} {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"priority\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Priority</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"low\">Low</SelectItem>\n                                <SelectItem value=\"medium\">Medium</SelectItem>\n                                <SelectItem value=\"high\">High</SelectItem>\n                                <SelectItem value=\"urgent\">Urgent</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"status\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Status</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"pending\">Pending</SelectItem>\n                                <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                                <SelectItem value=\"completed\">Completed</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"dueDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Due Date (Optional)</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"datetime-local\" \n                              {...field} \n                              value={field.value ? new Date(field.value).toISOString().slice(0, 16) : \"\"}\n                              onChange={(e) => field.onChange(e.target.value ? new Date(e.target.value) : null)}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex justify-end space-x-3 pt-4\">\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setShowCreateForm(false)}>\n                        Cancel\n                      </Button>\n                      <Button type=\"submit\" className=\"bg-blue-600 hover:bg-blue-700\">\n                        Create Task\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          }\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Task Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Total Tasks</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">{totalTasks}</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center\">\n                    <CheckSquare className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Completed</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">{completedTasks}</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center\">\n                    <CheckSquare className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Pending</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">{pendingTasks}</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-yellow-50 rounded-lg flex items-center justify-center\">\n                    <Clock className=\"w-6 h-6 text-yellow-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Overdue</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">{overdueTasks}</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-red-50 rounded-lg flex items-center justify-center\">\n                    <AlertTriangle className=\"w-6 h-6 text-red-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Tasks List */}\n          {!tasks || tasks.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <CheckSquare className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No tasks yet</h3>\n              <p className=\"text-gray-600 mb-6\">Create your first task to get started with team collaboration.</p>\n              <Button onClick={() => setShowCreateForm(true)} className=\"bg-blue-600 hover:bg-blue-700\">\n                Create First Task\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {tasks.map((task: any) => (\n                <Card key={task.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg font-semibold line-clamp-2\">{task.title}</CardTitle>\n                        {task.description && (\n                          <p className=\"text-sm text-gray-600 mt-1 line-clamp-2\">{task.description}</p>\n                        )}\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <Badge className={getStatusColor(task.status)}>\n                        {task.status.replace('_', ' ')}\n                      </Badge>\n                      <Badge className={`${getPriorityColor(task.priority)} flex items-center gap-1`}>\n                        {getPriorityIcon(task.priority)}\n                        {task.priority}\n                      </Badge>\n                    </div>\n                    \n                    {task.dueDate && (\n                      <div className={`flex items-center text-sm ${\n                        new Date(task.dueDate) < new Date() && task.status !== \"completed\"\n                          ? \"text-red-600\"\n                          : \"text-gray-600\"\n                      }`}>\n                        <Clock className=\"w-4 h-4 mr-2\" />\n                        Due {format(new Date(task.dueDate), \"PPP 'at' p\")}\n                      </div>\n                    )}\n\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <CheckSquare className=\"w-4 h-4 mr-2\" />\n                      Created {format(new Date(task.createdAt), \"PPP\")}\n                    </div>\n\n                    <div className=\"flex justify-between items-center pt-2\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        View Details\n                      </Button>\n                      {task.status !== \"completed\" && (\n                        <Button size=\"sm\" variant=\"outline\">\n                          Mark Complete\n                        </Button>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16184},"client/src/components/dashboard/active-leads.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useLeads } from \"@/hooks/use-leads\";\nimport { MessageCircle, Star, Building } from \"lucide-react\";\n\nexport function ActiveLeads() {\n  const { data: leads, isLoading } = useLeads();\n\n  const getPriorityColor = (score: number) => {\n    if (score >= 80) return \"bg-red-100 text-red-800\";\n    if (score >= 60) return \"bg-orange-100 text-orange-800\";\n    if (score >= 40) return \"bg-yellow-100 text-yellow-800\";\n    return \"bg-blue-100 text-blue-800\";\n  };\n\n  const getPriorityText = (score: number) => {\n    if (score >= 80) return \"High\";\n    if (score >= 60) return \"Medium\";\n    if (score >= 40) return \"Medium\";\n    return \"Low\";\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map(n => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Active Leads</CardTitle>\n            <span className=\"text-sm text-slate-500\">Loading...</span>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"animate-pulse flex items-center justify-between p-3 border border-slate-200 rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-gray-200 rounded-full\"></div>\n                  <div>\n                    <div className=\"h-4 bg-gray-200 rounded mb-1 w-24\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-16\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Filter for leads only and sort by lead score\n  const activeLeads = leads\n    ?.filter(customer => customer.status === \"lead\")\n    ?.sort((a, b) => (b.leadScore || 0) - (a.leadScore || 0))\n    ?.slice(0, 5) || [];\n\n  const highPriorityCount = activeLeads.filter(lead => (lead.leadScore || 0) >= 80).length;\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Active Leads</CardTitle>\n          <span className=\"text-sm text-slate-500\">\n            {highPriorityCount} high priority\n          </span>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {activeLeads.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Star className=\"mx-auto h-8 w-8 text-gray-400 mb-2\" />\n            <p className=\"text-sm text-gray-600\">No active leads</p>\n          </div>\n        ) : (\n          <>\n            {activeLeads.map((lead) => (\n              <div\n                key={lead.id}\n                className=\"flex items-center justify-between p-3 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-slate-200 rounded-full flex items-center justify-center\">\n                    <span className=\"text-sm font-medium text-slate-700\">\n                      {getInitials(lead.name)}\n                    </span>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-900\">{lead.name}</p>\n                    <div className=\"flex items-center space-x-2 mt-1\">\n                      {lead.leadScore && lead.leadScore > 0 && (\n                        <Badge className={getPriorityColor(lead.leadScore)}>\n                          {getPriorityText(lead.leadScore)}\n                        </Badge>\n                      )}\n                      <span className=\"text-xs text-slate-500\">\n                        Score: {lead.leadScore || 0}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <Button size=\"sm\" variant=\"ghost\" className=\"text-slate-400 hover:text-slate-600\">\n                  <MessageCircle className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            ))}\n            <Button variant=\"ghost\" className=\"w-full text-blue-600 hover:text-blue-700 text-sm font-medium py-2\">\n              View All Leads\n            </Button>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4576},"client/src/components/dashboard/ai-recommendations.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Zap, DollarSign, Users, TrendingUp } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface AIRecommendation {\n  id: string;\n  type: \"pricing\" | \"lead\" | \"upsell\" | \"scheduling\";\n  title: string;\n  description: string;\n  confidence: number;\n  action: string;\n}\n\nexport function AIRecommendations() {\n  const { data: insights, isLoading } = useQuery({\n    queryKey: [\"/api/ai/insights\"],\n  });\n\n  const getRecommendationIcon = (type: string) => {\n    switch (type) {\n      case \"pricing\": return <DollarSign className=\"w-4 h-4\" />;\n      case \"lead\": return <Users className=\"w-4 h-4\" />;\n      case \"upsell\": return <TrendingUp className=\"w-4 h-4\" />;\n      case \"scheduling\": return <Zap className=\"w-4 h-4\" />;\n      default: return <Zap className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getRecommendationColor = (type: string) => {\n    switch (type) {\n      case \"pricing\": return \"border-purple-200 bg-purple-50\";\n      case \"lead\": return \"border-blue-200 bg-blue-50\";\n      case \"upsell\": return \"border-green-200 bg-green-50\";\n      case \"scheduling\": return \"border-orange-200 bg-orange-50\";\n      default: return \"border-gray-200 bg-gray-50\";\n    }\n  };\n\n  const getActionButtonColor = (type: string) => {\n    switch (type) {\n      case \"pricing\": return \"text-purple-600 hover:text-purple-700\";\n      case \"lead\": return \"text-blue-600 hover:text-blue-700\";\n      case \"upsell\": return \"text-green-600 hover:text-green-700\";\n      case \"scheduling\": return \"text-orange-600 hover:text-orange-700\";\n      default: return \"text-gray-600 hover:text-gray-700\";\n    }\n  };\n\n  // Default recommendations when API data is not available\n  const defaultRecommendations: AIRecommendation[] = [\n    {\n      id: \"1\",\n      type: \"pricing\",\n      title: \"Optimize Weekend Pricing\",\n      description: \"AI suggests increasing weekend rates by 15% based on demand patterns.\",\n      confidence: 85,\n      action: \"Apply Suggestion\"\n    },\n    {\n      id: \"2\",\n      type: \"lead\",\n      title: \"Follow Up High-Value Lead\",\n      description: \"Contact TechStart Inc. today - they viewed your proposal 3 times.\",\n      confidence: 92,\n      action: \"Send Follow-up\"\n    },\n    {\n      id: \"3\",\n      type: \"upsell\",\n      title: \"Upsell Opportunity\",\n      description: \"Johnson Wedding could add premium lighting package (+$1,200).\",\n      confidence: 78,\n      action: \"Send Proposal\"\n    }\n  ];\n\n  const recommendations = insights || defaultRecommendations;\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center space-x-2\">\n            <Zap className=\"w-5 h-5 text-purple-600\" />\n            <CardTitle>AI Recommendations</CardTitle>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"animate-pulse border border-gray-200 rounded-lg p-4\">\n                <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 rounded mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center space-x-2\">\n          <Zap className=\"w-5 h-5 text-purple-600\" />\n          <CardTitle>AI Recommendations</CardTitle>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {defaultRecommendations.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Zap className=\"mx-auto h-8 w-8 text-gray-400 mb-2\" />\n            <p className=\"text-sm text-gray-600\">No AI recommendations available</p>\n          </div>\n        ) : (\n          defaultRecommendations.slice(0, 3).map((recommendation: AIRecommendation) => (\n            <div\n              key={recommendation.id}\n              className={`border rounded-lg p-4 ${getRecommendationColor(recommendation.type)}`}\n            >\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-2 h-2 bg-current rounded-full mt-2 flex-shrink-0\"></div>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2 mb-1\">\n                    {getRecommendationIcon(recommendation.type)}\n                    <h4 className=\"text-sm font-medium text-slate-900\">\n                      {recommendation.title}\n                    </h4>\n                    {recommendation.confidence && (\n                      <span className=\"text-xs text-slate-500\">\n                        {recommendation.confidence}% confidence\n                      </span>\n                    )}\n                  </div>\n                  <p className=\"text-sm text-slate-600 mb-3\">\n                    {recommendation.description}\n                  </p>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    className={`text-xs font-medium ${getActionButtonColor(recommendation.type)}`}\n                    onClick={() => {\n                      console.log(`AI Recommendation action clicked: ${recommendation.action}`);\n                      alert(`${recommendation.action} feature coming soon!`);\n                    }}\n                  >\n                    {recommendation.action}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5705},"client/src/components/dashboard/calendar-widget.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { getStatusConfig, getAllStatuses, type EventStatus } from \"@shared/status-utils\";\n\nexport function CalendarWidget() {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [viewMode, setViewMode] = useState<\"month\" | \"week\" | \"day\">(\"week\");\n\n  const monthNames = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n  ];\n\n  const dayNames = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\n  const generateCalendarDays = () => {\n    const year = currentDate.getFullYear();\n    const month = currentDate.getMonth();\n    \n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const daysInMonth = lastDay.getDate();\n    const startingDayOfWeek = firstDay.getDay();\n\n    const days = [];\n    \n    // Add empty cells for days before the first day of month\n    for (let i = 0; i < startingDayOfWeek; i++) {\n      days.push(null);\n    }\n    \n    // Add all days of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(day);\n    }\n    \n    return days;\n  };\n\n  const navigateMonth = (direction: \"prev\" | \"next\") => {\n    setCurrentDate(prev => {\n      const newDate = new Date(prev);\n      if (direction === \"prev\") {\n        newDate.setMonth(prev.getMonth() - 1);\n      } else {\n        newDate.setMonth(prev.getMonth() + 1);\n      }\n      return newDate;\n    });\n  };\n\n  const isToday = (day: number) => {\n    const today = new Date();\n    return (\n      day === today.getDate() &&\n      currentDate.getMonth() === today.getMonth() &&\n      currentDate.getFullYear() === today.getFullYear()\n    );\n  };\n\n  const hasEvent = (day: number) => {\n    // Mock event indicators - in real app this would check actual events\n    const eventDays = [7, 12, 14, 18, 22];\n    return eventDays.includes(day);\n  };\n\n  const getEventColor = (day: number) => {\n    // Mock different event types with colors\n    if (day === 7) return \"bg-blue-500\";\n    if (day === 12) return \"bg-green-500\";\n    if (day === 14) return \"bg-orange-500\";\n    if (day === 18) return \"bg-purple-500\";\n    if (day === 22) return \"bg-blue-500\";\n    return \"bg-blue-500\";\n  };\n\n  const calendarDays = generateCalendarDays();\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Event Calendar</CardTitle>\n          <div className=\"flex space-x-2\">\n            <Button\n              variant={viewMode === \"month\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setViewMode(\"month\")}\n            >\n              Month\n            </Button>\n            <Button\n              variant={viewMode === \"week\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setViewMode(\"week\")}\n            >\n              Week\n            </Button>\n            <Button\n              variant={viewMode === \"day\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setViewMode(\"day\")}\n            >\n              Day\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"mb-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h4 className=\"text-lg font-medium\">\n              {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}\n            </h4>\n            <div className=\"flex space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={() => navigateMonth(\"prev\")}\n              >\n                <ChevronLeft className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={() => navigateMonth(\"next\")}\n              >\n                <ChevronRight className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n          \n          {/* Calendar Grid */}\n          <div className=\"grid grid-cols-7 gap-1 mb-2\">\n            {dayNames.map(day => (\n              <div key={day} className=\"p-3 text-xs font-medium text-slate-500 text-center\">\n                {day}\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"grid grid-cols-7 gap-1\">\n            {calendarDays.map((day, index) => (\n              <div\n                key={index}\n                className={`\n                  p-3 text-center text-sm cursor-pointer hover:bg-slate-50 transition-colors relative\n                  ${day === null ? \"text-slate-400\" : \"\"}\n                  ${isToday(day || 0) ? \"bg-blue-600 text-white rounded-lg font-medium\" : \"\"}\n                  ${!isToday(day || 0) && day !== null ? \"hover:bg-slate-100 rounded-lg\" : \"\"}\n                `}\n              >\n                {day}\n                {day !== null && hasEvent(day) && (\n                  <div className={`absolute bottom-1 left-1/2 transform -translate-x-1/2 w-1 h-1 rounded-full ${getEventColor(day)}`}></div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        {/* Status Legend */}\n        <div className=\"pt-4 border-t border-slate-200\">\n          <div className=\"grid grid-cols-2 gap-2\">\n            {getAllStatuses().slice(0, 4).map((status) => {\n              const config = getStatusConfig(status.value);\n              return (\n                <div key={status.value} className=\"flex items-center gap-2\">\n                  <div \n                    className=\"w-2 h-2 rounded-full\"\n                    style={{ backgroundColor: config.color }}\n                  />\n                  <span className=\"text-xs text-slate-600 truncate\">\n                    {config.label}\n                  </span>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6139},"client/src/components/dashboard/metrics-grid.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, DollarSign, Users, BarChart3, TrendingUp, Clock, CheckCircle } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useFormattedCurrency } from \"@/lib/currency\";\nimport { type Booking, type Venue, type Customer } from \"@shared/schema\";\n\nexport function MetricsGrid() {\n  const [selectedMetric, setSelectedMetric] = useState<string | null>(null);\n  const { formatAmount } = useFormattedCurrency();\n  \n  const { data: metrics, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/metrics\"],\n  });\n\n  const { data: bookings = [] } = useQuery<Booking[]>({\n    queryKey: [\"/api/bookings\"],\n  });\n\n  const { data: customers = [] } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const { data: venues = [] } = useQuery<Venue[]>({\n    queryKey: [\"/api/venues\"],\n  });\n\n  const { data: payments = [] } = useQuery({\n    queryKey: [\"/api/payments\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n              <div className=\"h-8 bg-gray-200 rounded mb-2\"></div>\n              <div className=\"h-3 bg-gray-200 rounded w-3/4\"></div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const renderDetailModal = () => {\n    if (!selectedMetric) return null;\n\n    const modalContent = {\n      bookings: {\n        title: \"Booking Details\",\n        data: bookings,\n        render: (bookings: any[]) => (\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-3 gap-4 mb-6\">\n              <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-700\">{bookings.filter(b => b.status === 'confirmed').length}</div>\n                <div className=\"text-sm text-green-600\">Confirmed</div>\n              </div>\n              <div className=\"text-center p-4 bg-yellow-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-yellow-700\">{bookings.filter(b => b.status === 'pending').length}</div>\n                <div className=\"text-sm text-yellow-600\">Pending</div>\n              </div>\n              <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-blue-700\">{bookings.length}</div>\n                <div className=\"text-sm text-blue-600\">Total</div>\n              </div>\n            </div>\n            <div className=\"space-y-3 max-h-80 overflow-y-auto\">\n              {bookings.slice(0, 10).map((booking: any) => (\n                <div key={booking.id} className=\"p-3 border rounded-lg flex justify-between items-center\">\n                  <div>\n                    <div className=\"font-medium\">{booking.eventName}</div>\n                    <div className=\"text-sm text-slate-600\">{booking.eventDate} • {booking.customerName}</div>\n                  </div>\n                  <Badge variant={booking.status === 'confirmed' ? 'default' : 'secondary'}>\n                    {booking.status}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </div>\n        )\n      },\n      revenue: {\n        title: \"Revenue Breakdown\",\n        data: bookings,\n        render: (bookings: any[]) => {\n          const totalRevenue = bookings.reduce((sum, b) => sum + (parseFloat(b.totalAmount) || 0), 0);\n          const confirmedRevenue = bookings.filter(b => b.status === 'confirmed').reduce((sum, b) => sum + (parseFloat(b.totalAmount) || 0), 0);\n          const pendingRevenue = bookings.filter(b => b.status === 'pending').reduce((sum, b) => sum + (parseFloat(b.totalAmount) || 0), 0);\n          \n          return (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-3 gap-4 mb-6\">\n                <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-green-700\">{formatAmount(confirmedRevenue)}</div>\n                  <div className=\"text-sm text-green-600\">Confirmed</div>\n                </div>\n                <div className=\"text-center p-4 bg-yellow-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-yellow-700\">{formatAmount(pendingRevenue)}</div>\n                  <div className=\"text-sm text-yellow-600\">Pending</div>\n                </div>\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-700\">{formatAmount(totalRevenue)}</div>\n                  <div className=\"text-sm text-blue-600\">Total</div>\n                </div>\n              </div>\n              <div className=\"space-y-3 max-h-80 overflow-y-auto\">\n                {bookings.filter(b => b.totalAmount).slice(0, 10).map((booking: any) => (\n                  <div key={booking.id} className=\"p-3 border rounded-lg flex justify-between items-center\">\n                    <div>\n                      <div className=\"font-medium\">{booking.eventName}</div>\n                      <div className=\"text-sm text-slate-600\">{booking.eventDate} • {booking.eventType}</div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-medium\">{formatAmount(parseFloat(booking.totalAmount))}</div>\n                      <Badge variant={booking.status === 'confirmed' ? 'default' : 'secondary'} className=\"text-xs\">\n                        {booking.status}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          );\n        }\n      },\n      leads: {\n        title: \"Lead Management\",\n        data: customers,\n        render: (customers: any[]) => {\n          const leads = customers.filter(c => c.status === 'lead' || !c.status);\n          const highPriority = leads.filter(c => c.leadScore && c.leadScore >= 80);\n          const mediumPriority = leads.filter(c => c.leadScore && c.leadScore >= 50 && c.leadScore < 80);\n          const lowPriority = leads.filter(c => !c.leadScore || c.leadScore < 50);\n          \n          return (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-3 gap-4 mb-6\">\n                <div className=\"text-center p-4 bg-red-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-red-700\">{highPriority.length}</div>\n                  <div className=\"text-sm text-red-600\">High Priority</div>\n                </div>\n                <div className=\"text-center p-4 bg-yellow-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-yellow-700\">{mediumPriority.length}</div>\n                  <div className=\"text-sm text-yellow-600\">Medium Priority</div>\n                </div>\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-700\">{lowPriority.length}</div>\n                  <div className=\"text-sm text-blue-600\">Low Priority</div>\n                </div>\n              </div>\n              <div className=\"space-y-3 max-h-80 overflow-y-auto\">\n                {leads.slice(0, 10).map((customer: any) => (\n                  <div key={customer.id} className=\"p-3 border rounded-lg flex justify-between items-center\">\n                    <div>\n                      <div className=\"font-medium\">{customer.name}</div>\n                      <div className=\"text-sm text-slate-600\">{customer.email} • {customer.phone}</div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={\n                        customer.leadScore >= 80 ? 'destructive' : \n                        customer.leadScore >= 50 ? 'secondary' : 'outline'\n                      }>\n                        Score: {customer.leadScore || 'New'}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          );\n        }\n      },\n      utilization: {\n        title: \"Venue Utilization\",\n        data: venues,\n        render: (venues: any[]) => {\n          const venueBookings = venues.map(venue => {\n            const venueBookingCount = (bookings as any[]).filter((b: any) => b.venueId === venue.id).length;\n            return {\n              ...venue,\n              bookingCount: venueBookingCount,\n              utilization: Math.min(100, venueBookingCount * 20) // Simplified calculation\n            };\n          });\n          \n          return (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-3 gap-4 mb-6\">\n                <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-green-700\">{venues.length}</div>\n                  <div className=\"text-sm text-green-600\">Total Venues</div>\n                </div>\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-700\">{bookings.length}</div>\n                  <div className=\"text-sm text-blue-600\">Total Bookings</div>\n                </div>\n                <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-purple-700\">{Math.round(venues.length > 0 ? bookings.length / venues.length : 0)}%</div>\n                  <div className=\"text-sm text-purple-600\">Avg Utilization</div>\n                </div>\n              </div>\n              <div className=\"space-y-3 max-h-80 overflow-y-auto\">\n                {venueBookings.map((venue) => (\n                  <div key={venue.id} className=\"p-3 border rounded-lg\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <div className=\"font-medium\">{venue.name}</div>\n                      <div className=\"text-sm font-medium\">{venue.utilization}% utilized</div>\n                    </div>\n                    <div className=\"w-full bg-slate-200 rounded-full h-2\">\n                      <div \n                        className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                        style={{ width: `${venue.utilization}%` }}\n                      ></div>\n                    </div>\n                    <div className=\"text-sm text-slate-600 mt-1\">{venue.bookingCount} bookings</div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          );\n        }\n      }\n    };\n\n    const content = modalContent[selectedMetric as keyof typeof modalContent];\n    if (!content) return null;\n\n    return (\n      <Dialog open={!!selectedMetric} onOpenChange={() => setSelectedMetric(null)}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-hidden\">\n          <DialogHeader>\n            <DialogTitle>{content.title}</DialogTitle>\n          </DialogHeader>\n          <div className=\"overflow-y-auto\">\n            {content.render(content.data as any[])}\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  };\n\n  return (\n    <>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <Card className=\"cursor-pointer hover:shadow-lg transition-shadow\" onClick={() => setSelectedMetric('bookings')}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-600\">Total Bookings</p>\n                <p className=\"text-3xl font-bold text-slate-900\">{(metrics as any)?.totalBookings || 0}</p>\n                <p className=\"text-sm text-green-600 font-medium\">\n                  <CheckCircle className=\"w-3 h-3 inline mr-1\" />\n                  {(metrics as any)?.confirmedBookings || 0} confirmed, \n                  <Clock className=\"w-3 h-3 inline mx-1\" />\n                  {(metrics as any)?.pendingBookings || 0} pending\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center\">\n                <Calendar className=\"w-6 h-6 text-blue-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"cursor-pointer hover:shadow-lg transition-shadow\" onClick={() => setSelectedMetric('revenue')}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-600\">Revenue</p>\n                <p className=\"text-3xl font-bold text-slate-900\">\n                  ${(metrics as any)?.revenue ? Math.round((metrics as any).revenue).toLocaleString() : \"0\"}\n                </p>\n                <p className=\"text-sm text-green-600 font-medium\">\n                  <TrendingUp className=\"w-3 h-3 inline mr-1\" />\n                  +{(metrics as any)?.revenueGrowth || 0}% growth\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center\">\n                <DollarSign className=\"w-6 h-6 text-green-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"cursor-pointer hover:shadow-lg transition-shadow\" onClick={() => setSelectedMetric('leads')}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-600\">Active Leads</p>\n                <p className=\"text-3xl font-bold text-slate-900\">{(metrics as any)?.activeLeads || 0}</p>\n                <p className=\"text-sm text-orange-600 font-medium\">\n                  <TrendingUp className=\"w-3 h-3 inline mr-1\" />\n                  {(metrics as any)?.highPriorityLeads || 0} high priority\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-orange-50 rounded-lg flex items-center justify-center\">\n                <Users className=\"w-6 h-6 text-orange-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"cursor-pointer hover:shadow-lg transition-shadow\" onClick={() => setSelectedMetric('utilization')}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-600\">Venue Utilization</p>\n                <p className=\"text-3xl font-bold text-slate-900\">{(metrics as any)?.utilization || 0}%</p>\n                <p className=\"text-sm text-blue-600 font-medium\">\n                  <BarChart3 className=\"w-3 h-3 inline mr-1\" />\n                  {(metrics as any)?.totalVenues || 0} venues, {(metrics as any)?.totalCustomers || 0} customers\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-purple-50 rounded-lg flex items-center justify-center\">\n                <BarChart3 className=\"w-6 h-6 text-purple-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      {renderDetailModal()}\n    </>\n  );\n}\n","size_bytes":15597},"client/src/components/dashboard/quick-actions.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Calendar, Users, Settings, CreditCard, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport function QuickActions() {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const actions = [\n    {\n      id: \"event\",\n      title: \"New Event\",\n      icon: Calendar,\n      color: \"bg-blue-600 hover:bg-blue-700\",\n      description: \"Create new event\"\n    },\n    {\n      id: \"customer\",\n      title: \"Add Customer\",\n      icon: Users,\n      color: \"bg-green-600 hover:bg-green-700\",\n      description: \"Add new customer\"\n    },\n    {\n      id: \"payment\",\n      title: \"Payments\",\n      icon: CreditCard,\n      color: \"bg-purple-600 hover:bg-purple-700\",\n      description: \"Manage payments\"\n    },\n    {\n      id: \"settings\",\n      title: \"Settings\",\n      icon: Settings,\n      color: \"bg-gray-600 hover:bg-gray-700\",\n      description: \"App settings\"\n    }\n  ];\n\n  const handleAction = (actionId: string) => {\n    console.log(`Quick Action button clicked: ${actionId}`);\n    \n    switch (actionId) {\n      case \"event\":\n        console.log('Navigating to events page...');\n        window.location.href = '/events';\n        break;\n      case \"customer\":\n        console.log('Navigating to customers page...');\n        window.location.href = '/customers';\n        break;\n      case \"payment\":\n        console.log('Opening payments page...');\n        window.location.href = '/payments';\n        break;\n      case \"settings\":\n        console.log('Opening settings...');\n        window.location.href = '/settings';\n        break;\n    }\n    setIsExpanded(false);\n  };\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\">\n      {/* Expanded action buttons */}\n      {isExpanded && (\n        <div className=\"mb-4 space-y-3\">\n          {actions.map((action) => {\n            const Icon = action.icon;\n            \n            return (\n              <div\n                key={action.id}\n                className=\"flex items-center justify-end\"\n              >\n                <div className=\"bg-black/80 text-white px-3 py-2 rounded-lg text-sm mr-3 shadow-lg backdrop-blur-sm\">\n                  {action.description}\n                </div>\n                <Button\n                  size=\"lg\"\n                  className={`w-14 h-14 rounded-full shadow-lg ${action.color} text-white transition-all duration-200 hover:scale-110`}\n                  onClick={() => handleAction(action.id)}\n                >\n                  <Icon className=\"w-6 h-6\" />\n                </Button>\n              </div>\n            );\n          })}\n        </div>\n      )}\n\n      {/* Main toggle button */}\n      <Button\n        size=\"lg\"\n        className={`w-16 h-16 rounded-full shadow-lg bg-blue-600 hover:bg-blue-700 text-white transition-all duration-300 ${isExpanded ? 'rotate-45' : 'rotate-0'}`}\n        onClick={() => setIsExpanded(!isExpanded)}\n      >\n        <Plus className=\"w-8 h-8\" />\n      </Button>\n    </div>\n  );\n}\n","size_bytes":2988},"client/src/components/dashboard/recent-bookings.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useBookings } from \"@/hooks/use-bookings\";\nimport { Calendar, Clock, MapPin, Users } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { getStatusConfig } from \"@shared/status-utils\";\n\nexport function RecentBookings() {\n  const { data: bookings, isLoading } = useBookings();\n\n  const getStatusColor = (status: string) => {\n    // Use the centralized status utils for consistent coloring\n    return getStatusConfig(status).bgColor + \" \" + getStatusConfig(status).textColor;\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Recent Bookings</CardTitle>\n            <Button variant=\"ghost\" className=\"text-blue-600 hover:text-blue-700\">\n              View All\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-9 bg-gray-200 rounded-lg\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-3/4\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const recentBookings = bookings?.slice(0, 5) || [];\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Recent Bookings</CardTitle>\n          <Button variant=\"ghost\" className=\"text-blue-600 hover:text-blue-700 text-sm font-medium\">\n            View All\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {recentBookings.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Calendar className=\"mx-auto h-8 w-8 text-gray-400 mb-2\" />\n            <p className=\"text-sm text-gray-600\">No recent bookings</p>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-slate-50\">\n                <tr>\n                  <th className=\"px-4 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                    Event\n                  </th>\n                  <th className=\"px-4 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                    Date\n                  </th>\n                  <th className=\"px-4 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                    Venue\n                  </th>\n                  <th className=\"px-4 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-4 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                    Value\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-slate-200\">\n                {recentBookings.map((booking) => (\n                  <tr key={booking.id} className=\"hover:bg-slate-50\">\n                    <td className=\"px-4 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-10 h-8 bg-gradient-to-br from-blue-500 to-purple-500 rounded-lg flex items-center justify-center mr-3\">\n                          <Calendar className=\"w-4 h-4 text-white\" />\n                        </div>\n                        <div>\n                          <div className=\"text-sm font-medium text-slate-900\">\n                            {booking.eventName}\n                          </div>\n                          <div className=\"text-sm text-slate-500\">\n                            {booking.eventType}\n                          </div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm text-slate-900\">\n                        {booking.eventDate ? format(new Date(booking.eventDate), \"MMM dd, yyyy\") : \"TBD\"}\n                      </div>\n                      <div className=\"text-sm text-slate-500\">\n                        {booking.startTime} - {booking.endTime}\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm text-slate-900\">\n                        {booking.venueId || \"TBD\"}\n                      </div>\n                      <div className=\"text-sm text-slate-500 flex items-center\">\n                        <Users className=\"w-3 h-3 mr-1\" />\n                        {booking.guestCount} guests\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-4 whitespace-nowrap\">\n                      <Badge className={`${getStatusConfig(booking.status).bgColor} ${getStatusConfig(booking.status).textColor} ${getStatusConfig(booking.status).borderColor} border`}>\n                        {getStatusConfig(booking.status).label}\n                      </Badge>\n                    </td>\n                    <td className=\"px-4 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm font-medium text-slate-900\">\n                        {booking.totalAmount ? `$${parseFloat(booking.totalAmount).toLocaleString()}` : \"TBD\"}\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6059},"client/src/components/forms/booking-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertBookingSchema } from \"@shared/schema\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\n\ninterface BookingFormProps {\n  onSuccess?: () => void;\n}\n\nexport function BookingForm({ onSuccess }: BookingFormProps) {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const { data: venues } = useQuery({\n    queryKey: [\"/api/venues\"],\n  });\n\n  const { data: customers } = useQuery({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const form = useForm({\n    resolver: zodResolver(insertBookingSchema),\n    defaultValues: {\n      eventName: \"\",\n      eventType: \"\",\n      customerId: \"\",\n      venueId: \"\",\n      eventDate: new Date(),\n      startTime: \"\",\n      endTime: \"\",\n      guestCount: 0,\n      status: \"pending\" as const,\n      notes: \"\",\n    }\n  });\n\n  const onSubmit = async (data: any) => {\n    try {\n      setIsSubmitting(true);\n      \n      // Create customer if needed\n      let customerId = data.customerId;\n      if (!customerId && data.customerName && data.customerEmail) {\n        const customerResponse = await apiRequest(\"POST\", \"/api/customers\", {\n          name: data.customerName,\n          email: data.customerEmail,\n          status: \"customer\"\n        });\n        const customerData = await customerResponse.json();\n        customerId = customerData.id;\n      }\n\n      const bookingData = {\n        ...data,\n        customerId,\n        eventDate: data.eventDate instanceof Date ? data.eventDate : new Date(data.eventDate),\n        guestCount: parseInt(data.guestCount.toString()),\n      };\n\n      await apiRequest(\"POST\", \"/api/bookings\", bookingData);\n      await queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      \n      toast({\n        title: \"Success\",\n        description: \"Booking created successfully\",\n      });\n      \n      form.reset();\n      onSuccess?.();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create booking\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <FormField\n            control={form.control}\n            name=\"eventName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Event Name</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"e.g., Johnson Wedding Reception\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"eventType\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Event Type</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select event type\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"Wedding\">Wedding</SelectItem>\n                    <SelectItem value=\"Corporate Event\">Corporate Event</SelectItem>\n                    <SelectItem value=\"Social Event\">Social Event</SelectItem>\n                    <SelectItem value=\"Private Dining\">Private Dining</SelectItem>\n                    <SelectItem value=\"Conference\">Conference</SelectItem>\n                    <SelectItem value=\"Birthday Party\">Birthday Party</SelectItem>\n                    <SelectItem value=\"Anniversary\">Anniversary</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <FormField\n            control={form.control}\n            name=\"customerId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Customer</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select customer\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {Array.isArray(customers) && customers.map((customer: any) => (\n                      <SelectItem key={customer.id} value={customer.id}>\n                        {customer.name} - {customer.email}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"venueId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Venue Space</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select venue\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {Array.isArray(venues) && venues.map((venue: any) => (\n                      <SelectItem key={venue.id} value={venue.id}>\n                        {venue.name} (Max {venue.capacity} guests)\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <FormField\n            control={form.control}\n            name=\"eventDate\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Event Date</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"date\" \n                    {...field}\n                    value={field.value instanceof Date ? field.value.toISOString().split('T')[0] : field.value}\n                    onChange={(e) => field.onChange(new Date(e.target.value))}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"startTime\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Start Time</FormLabel>\n                <FormControl>\n                  <Input type=\"time\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"endTime\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>End Time</FormLabel>\n                <FormControl>\n                  <Input type=\"time\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <FormField\n            control={form.control}\n            name=\"guestCount\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Guest Count</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"number\" \n                    placeholder=\"Number of guests\" \n                    {...field}\n                    onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"status\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Status</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                    <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"notes\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Event Details</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"Additional event requirements, catering notes, special requests...\"\n                  rows={3}\n                  {...field}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end space-x-3 pt-4\">\n          <Button type=\"button\" variant=\"outline\" onClick={() => onSuccess?.()}>\n            Cancel\n          </Button>\n          <Button type=\"submit\" disabled={isSubmitting} className=\"bg-blue-600 hover:bg-blue-700\">\n            {isSubmitting ? \"Creating...\" : \"Create Booking\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":10456},"client/src/components/forms/create-event-modal.tsx":{"content":"import { useState, useMemo, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { cn } from \"@/lib/utils\";\nimport { format, addMonths, subMonths, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isSameDay, getDay } from \"date-fns\";\nimport { ChevronLeft, ChevronRight, X, Plus, Minus, RotateCcw, Calendar as CalendarIcon, Mic, FileText, Save, Users, Grid3X3, MapPin } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { VoiceBookingPanel } from \"../voice/voice-booking-panel\";\nimport { ProposalCreationModal } from \"../proposals/proposal-creation-modal\";\nimport { ProposalEmailModal } from \"../proposals/proposal-email-modal\";\nimport { StatusSelector } from \"../events/status-selector\";\nimport { type EventStatus } from \"@shared/status-utils\";\nimport { type TaxSetting } from \"@shared/schema\";\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  duplicateFromBooking?: any;\n}\n\ninterface SelectedDate {\n  date: Date;\n  startTime: string;\n  endTime: string;\n  spaceId?: string;\n  packageId?: string;\n  selectedServices?: string[];\n  guestCount?: number;\n  setupStyle?: string;\n  itemQuantities?: Record<string, number>;\n  pricingOverrides?: {\n    packagePrice?: number;\n    servicePrices?: Record<string, number>;\n  };\n  serviceTaxOverrides?: Record<string, {\n    enabledTaxIds: string[];\n    enabledFeeIds: string[];\n    disabledInheritedTaxIds?: string[];\n    disabledInheritedFeeIds?: string[];\n  }>;\n}\n\nexport function CreateEventModal({ open, onOpenChange, duplicateFromBooking }: Props) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Step management\n  const [currentStep, setCurrentStep] = useState(1);\n  const [currentDate, setCurrentDate] = useState(new Date());\n  \n  // Step 1: Date & Venue Selection\n  const [selectedVenue, setSelectedVenue] = useState(\"\");\n  const [selectedDates, setSelectedDates] = useState<SelectedDate[]>([]);\n  \n  // Step 2: Event Configuration - now managed per date\n  const [activeTabIndex, setActiveTabIndex] = useState(0);\n  \n  // Copy config functionality\n  const [showCopyModal, setShowCopyModal] = useState(false);\n  const [selectedCopyIndices, setSelectedCopyIndices] = useState<number[]>([]);\n  \n  // New service creation\n  const [showNewServiceForm, setShowNewServiceForm] = useState(false);\n  const [showPackageSelection, setShowPackageSelection] = useState(false);\n  const [showServiceSelection, setShowServiceSelection] = useState(false);\n  const [newService, setNewService] = useState({\n    name: \"\",\n    description: \"\",\n    category: \"addon\",\n    price: \"\",\n    pricingModel: \"fixed\"\n  });\n  \n  // Step 3: Final Details\n  const [eventName, setEventName] = useState(\"\");\n  const [selectedCustomer, setSelectedCustomer] = useState(\"\");\n  const [eventStatus, setEventStatus] = useState<\"inquiry\" | \"pending\" | \"tentative\" | \"confirmed_deposit_paid\" | \"confirmed_fully_paid\" | \"completed\" | \"cancelled_refunded\">(\"inquiry\");\n\n  // Voice booking integration\n  const [showVoicePanel, setShowVoicePanel] = useState(false);\n  const [voiceExtractedData, setVoiceExtractedData] = useState<any>(null);\n  \n  // Customer creation\n  const [showNewCustomerForm, setShowNewCustomerForm] = useState(false);\n  const [newCustomer, setNewCustomer] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    company: \"\",\n    customerType: \"individual\" as \"individual\" | \"business\",\n    companyId: \"\",\n    jobTitle: \"\",\n    department: \"\"\n  });\n\n  // Company search and employee management\n  const [companySearch, setCompanySearch] = useState(\"\");\n  const [showCompanyEmployees, setShowCompanyEmployees] = useState(false);\n  const [selectedCompanyId, setSelectedCompanyId] = useState(\"\");\n  const [showManageEmployees, setShowManageEmployees] = useState(false);\n\n  // Proposal creation\n  const [showCreateProposal, setShowCreateProposal] = useState(false);\n  const [showProposalEmail, setShowProposalEmail] = useState(false);\n  \n  // Summary details modal\n  const [showSummaryDetails, setShowSummaryDetails] = useState(false);\n\n  // Tax/Fee configuration\n  const [taxFeeOverrides, setTaxFeeOverrides] = useState<{\n    enabledTaxIds: string[];\n    enabledFeeIds: string[];\n  }>({\n    enabledTaxIds: [],\n    enabledFeeIds: []\n  });\n\n  // Data queries\n  const { data: venues = [] } = useQuery({ queryKey: [\"/api/venues-with-spaces\"] });\n  const { data: packages = [] } = useQuery({ queryKey: [\"/api/packages\"] });\n  const { data: services = [] } = useQuery({ queryKey: [\"/api/services\"] });\n  const { data: customers = [] } = useQuery({ queryKey: [\"/api/customers\"] });\n  const { data: companies = [] } = useQuery({ queryKey: [\"/api/companies\"] });\n  const { data: existingBookings = [] } = useQuery({ queryKey: [\"/api/bookings\"] });\n  const { data: taxSettings = [] } = useQuery<TaxSetting[]>({ queryKey: [\"/api/tax-settings\"] });\n\n  // Initialize form with duplicate data when provided\n  useEffect(() => {\n    if (duplicateFromBooking && open) {\n      // Reset to first step when duplicating\n      setCurrentStep(1);\n      setActiveTabIndex(0);\n      \n      // Set basic event details with (Copy) suffix\n      setEventName(duplicateFromBooking.eventName + \" (Copy)\");\n      setSelectedCustomer(duplicateFromBooking.customerId || \"\");\n      setEventStatus(\"inquiry\"); // Always start as inquiry for duplicates\n      \n      // Set venue from the original booking\n      if (duplicateFromBooking.venueId) {\n        setSelectedVenue(duplicateFromBooking.venueId);\n      }\n      \n      // Create a new date entry for tomorrow (to avoid conflicts)\n      const tomorrowDate = new Date();\n      tomorrowDate.setDate(tomorrowDate.getDate() + 1);\n      \n      // Build selected services and packages from the original booking\n      const selectedServices: string[] = [];\n      const selectedPackages: string[] = [];\n      \n      // Add selected packages\n      if (duplicateFromBooking.selectedPackages) {\n        duplicateFromBooking.selectedPackages.forEach((pkg: any) => {\n          selectedPackages.push(pkg.id);\n        });\n      }\n      \n      // Add selected services\n      if (duplicateFromBooking.selectedServices) {\n        duplicateFromBooking.selectedServices.forEach((service: any) => {\n          selectedServices.push(service.id);\n        });\n      }\n      \n      // Create date configuration with original booking data\n      const duplicatedDate: SelectedDate = {\n        date: tomorrowDate,\n        startTime: duplicateFromBooking.startTime || \"09:00 AM\",\n        endTime: duplicateFromBooking.endTime || \"05:00 PM\",\n        spaceId: duplicateFromBooking.spaceId || \"\",\n        packageId: selectedPackages[0] || \"\",\n        selectedServices: selectedServices,\n        guestCount: duplicateFromBooking.guestCount || 1,\n        itemQuantities: duplicateFromBooking.itemQuantities || {},\n        pricingOverrides: duplicateFromBooking.pricingOverrides || {}\n      };\n      \n      setSelectedDates([duplicatedDate]);\n      \n      // Show notification when duplicating\n      toast({\n        title: \"Event Duplicated\",\n        description: `Event details copied from \"${duplicateFromBooking.eventName}\". You can now modify and save as a new event.`\n      });\n    }\n  }, [duplicateFromBooking, open, toast]);\n\n  // Auto-select venue when there's only one venue available\n  useEffect(() => {\n    if (venues && Array.isArray(venues) && venues.length === 1 && !selectedVenue && open) {\n      setSelectedVenue((venues as any[])[0].id);\n    }\n  }, [venues, selectedVenue, open]);\n\n  // Reset form when modal is closed (only if not duplicating)\n  useEffect(() => {\n    if (!open && !duplicateFromBooking) {\n      // Reset all form state\n      setCurrentStep(1);\n      setActiveTabIndex(0);\n      setSelectedVenue(\"\");\n      setSelectedDates([]);\n      setEventName(\"\");\n      setSelectedCustomer(\"\");\n      setEventStatus(\"inquiry\");\n      setShowPackageSelection(false);\n      setShowNewServiceForm(false);\n      setShowCopyModal(false);\n      setShowVoicePanel(false);\n      setVoiceExtractedData(null);\n      setShowNewCustomerForm(false);\n      setShowCreateProposal(false);\n      setShowSummaryDetails(false);\n    }\n  }, [open, duplicateFromBooking]);\n\n  // Calendar calculations\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  const calendarDays = eachDayOfInterval({ start: monthStart, end: monthEnd });\n  \n  // Pad calendar to show full weeks\n  const startDay = getDay(monthStart);\n  const paddedDays = [\n    ...Array(startDay).fill(null).map((_, i) => {\n      const date = new Date(monthStart);\n      date.setDate(date.getDate() - (startDay - i));\n      return date;\n    }),\n    ...calendarDays\n  ];\n\n  // Per-date configuration helpers\n  const updateDateTime = (index: number, field: keyof SelectedDate, value: any) => {\n    setSelectedDates(prev => prev.map((date, i) => \n      i === index ? { ...date, [field]: value } : date\n    ));\n  };\n\n  // Get active date configuration (with bounds checking)\n  const activeDate = selectedDates[activeTabIndex] || selectedDates[0];\n  \n  const updateDateConfig = (field: keyof SelectedDate, value: any) => {\n    const index = activeTabIndex < selectedDates.length ? activeTabIndex : 0;\n    if (selectedDates[index]) {\n      updateDateTime(index, field, value);\n    }\n  };\n  \n  // Calculate total price across all dates\n  // Calculate total for a single date\n  const calculateEventDuration = (startTime: string, endTime: string) => {\n    const parseTime = (timeStr: string) => {\n      if (timeStr.includes('AM') || timeStr.includes('PM')) {\n        const cleanTime = timeStr.replace(/\\s(AM|PM)/g, '');\n        const [hours, minutes] = cleanTime.split(':').map(Number);\n        const isAM = timeStr.includes('AM');\n        const hour24 = isAM ? (hours === 12 ? 0 : hours) : (hours === 12 ? 12 : hours + 12);\n        return hour24 + (minutes / 60);\n      } else {\n        const [hours, minutes] = timeStr.split(':').map(Number);\n        return hours + (minutes / 60);\n      }\n    };\n    \n    const start = parseTime(startTime);\n    const end = parseTime(endTime);\n    return Math.max(0, end - start); // Duration in hours\n  };\n\n  const calculateDateTotal = (dateConfig: SelectedDate) => {\n    let subtotal = 0;\n    const eventDuration = calculateEventDuration(dateConfig.startTime, dateConfig.endTime);\n    \n    // Get selected package info\n    const selectedPackage = dateConfig.packageId \n      ? (packages as any[]).find((p: any) => p.id === dateConfig.packageId)\n      : null;\n    \n    // Package price\n    if (selectedPackage) {\n      const packagePrice = dateConfig.pricingOverrides?.packagePrice ?? parseFloat(selectedPackage.price || 0);\n      if (selectedPackage.pricingModel === 'per_person') {\n        subtotal += packagePrice * (dateConfig.guestCount || 1);\n      } else if (selectedPackage.pricingModel === 'per_hour') {\n        subtotal += packagePrice * eventDuration;\n      } else {\n        subtotal += packagePrice;\n      }\n    }\n    \n    // Additional services price (only services NOT included in the package)\n    const includedServiceIds = selectedPackage?.includedServiceIds || [];\n    \n    dateConfig.selectedServices?.forEach(serviceId => {\n      // Skip if this service is included in the selected package\n      if (includedServiceIds.includes(serviceId)) {\n        return; // No charge for included services\n      }\n      \n      const service = (services as any[]).find((s: any) => s.id === serviceId);\n      if (service) {\n        const servicePrice = dateConfig.pricingOverrides?.servicePrices?.[serviceId] ?? parseFloat(service.price || 0);\n        if (service.pricingModel === 'per_person') {\n          subtotal += servicePrice * (dateConfig.guestCount || 1);\n        } else if (service.pricingModel === 'per_hour') {\n          subtotal += servicePrice * eventDuration;\n        } else {\n          const quantity = dateConfig.itemQuantities?.[serviceId] || 1;\n          subtotal += servicePrice * quantity;\n        }\n      }\n    });\n    \n    // Apply taxes and fees per service/package (not accumulated)\n    let feesTotal = 0;\n    let taxesTotal = 0;\n    \n    // Calculate package taxes and fees if package is selected\n    if (selectedPackage) {\n      const packagePrice = dateConfig.pricingOverrides?.packagePrice ?? parseFloat(selectedPackage.price || 0);\n      let packageSubtotal = 0;\n      \n      if (selectedPackage.pricingModel === 'per_person') {\n        packageSubtotal = packagePrice * (dateConfig.guestCount || 1);\n      } else if (selectedPackage.pricingModel === 'per_hour') {\n        packageSubtotal = packagePrice * eventDuration;\n      } else {\n        packageSubtotal = packagePrice;\n      }\n      \n      // Get package tax/fee overrides\n      const packageOverrides = dateConfig.serviceTaxOverrides?.[selectedPackage.id] || { \n        enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] \n      };\n      \n      // Calculate effective fee IDs for package (inherited + additional - disabled)\n      const inheritedFeeIds = selectedPackage.enabledFeeIds || [];\n      const additionalFeeIds = packageOverrides.enabledFeeIds || [];\n      const disabledFeeIds = packageOverrides.disabledInheritedFeeIds || [];\n      const effectivePackageFeeIds = [...inheritedFeeIds.filter((id: string) => !disabledFeeIds.includes(id)), ...additionalFeeIds];\n      \n      // Calculate effective tax IDs for package (inherited + additional - disabled)  \n      const inheritedTaxIds = selectedPackage.enabledTaxIds || [];\n      const additionalTaxIds = packageOverrides.enabledTaxIds || [];\n      const disabledTaxIds = packageOverrides.disabledInheritedTaxIds || [];\n      const effectivePackageTaxIds = [...inheritedTaxIds.filter((id: string) => !disabledTaxIds.includes(id)), ...additionalTaxIds];\n      \n      // Apply package fees\n      let packageFeeAmount = 0;\n      effectivePackageFeeIds.forEach(feeId => {\n        const feeSetting = (taxSettings as any[])?.find((s: any) => s.id === feeId && s.isActive);\n        if (feeSetting && (feeSetting.type === 'fee' || feeSetting.type === 'service_charge')) {\n          let feeAmount = 0;\n          if (feeSetting.calculation === 'percentage') {\n            feeAmount = (packageSubtotal * parseFloat(feeSetting.value)) / 100;\n          } else {\n            feeAmount = parseFloat(feeSetting.value);\n          }\n          feesTotal += feeAmount;\n          packageFeeAmount += feeAmount;\n        }\n      });\n      \n      // Apply package taxes (to base package amount + fees if fee is taxable)\n      effectivePackageTaxIds.forEach(taxId => {\n        const taxSetting = (taxSettings as any[])?.find((s: any) => s.id === taxId && s.isActive);\n        if (taxSetting) {\n          let taxableAmount = packageSubtotal;\n          \n          // Add fees to taxable amount if any applied fees are taxable\n          effectivePackageFeeIds.forEach((feeId: string) => {\n            const feeSetting = (taxSettings as any[])?.find((s: any) => s.id === feeId && s.isActive);\n            if (feeSetting && feeSetting.isTaxable && (feeSetting.applicableTaxIds || []).includes(taxId)) {\n              let feeAmount = 0;\n              if (feeSetting.calculation === 'percentage') {\n                feeAmount = (packageSubtotal * parseFloat(feeSetting.value)) / 100;\n              } else {\n                feeAmount = parseFloat(feeSetting.value);\n              }\n              taxableAmount += feeAmount;\n            }\n          });\n          \n          const taxAmount = (taxableAmount * parseFloat(taxSetting.value)) / 100;\n          taxesTotal += taxAmount;\n        }\n      });\n    }\n    \n    // Calculate service taxes and fees for each service individually\n    dateConfig.selectedServices?.forEach(serviceId => {\n      // Skip if this service is included in the selected package\n      if (includedServiceIds.includes(serviceId)) {\n        return;\n      }\n      \n      const service = (services as any[]).find((s: any) => s.id === serviceId);\n      if (service) {\n        let serviceSubtotal = 0;\n        const servicePrice = dateConfig.pricingOverrides?.servicePrices?.[serviceId] ?? parseFloat(service.price || 0);\n        \n        if (service.pricingModel === 'per_person') {\n          serviceSubtotal = servicePrice * (dateConfig.guestCount || 1);\n        } else if (service.pricingModel === 'per_hour') {\n          serviceSubtotal = servicePrice * eventDuration;\n        } else {\n          const quantity = dateConfig.itemQuantities?.[serviceId] || 1;\n          serviceSubtotal = servicePrice * quantity;\n        }\n        \n        // Determine which fees and taxes apply to this service (including overrides)\n        const currentOverrides = dateConfig.serviceTaxOverrides?.[serviceId] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n        \n        // Calculate effective fee IDs (inherited + additional - disabled)\n        const inheritedFeeIds = service.enabledFeeIds || [];\n        const additionalFeeIds = currentOverrides.enabledFeeIds || [];\n        const disabledFeeIds = currentOverrides.disabledInheritedFeeIds || [];\n        const effectiveFeeIds = [...inheritedFeeIds.filter((id: string) => !disabledFeeIds.includes(id)), ...additionalFeeIds];\n        \n        // Calculate effective tax IDs (inherited + additional - disabled)\n        const inheritedTaxIds = service.enabledTaxIds || [];\n        const additionalTaxIds = currentOverrides.enabledTaxIds || [];\n        const disabledTaxIds = currentOverrides.disabledInheritedTaxIds || [];\n        const effectiveTaxIds = [...inheritedTaxIds.filter((id: string) => !disabledTaxIds.includes(id)), ...additionalTaxIds];\n        \n        // Apply service fees and track them for potential tax application\n        let serviceFeeAmount = 0;\n        effectiveFeeIds.forEach((feeId: string) => {\n          const feeSetting = (taxSettings as any[])?.find((s: any) => s.id === feeId && s.isActive);\n          if (feeSetting && (feeSetting.type === 'fee' || feeSetting.type === 'service_charge')) {\n            let feeAmount = 0;\n            if (feeSetting.calculation === 'percentage') {\n              feeAmount = (serviceSubtotal * parseFloat(feeSetting.value)) / 100;\n            } else {\n              feeAmount = parseFloat(feeSetting.value);\n            }\n            feesTotal += feeAmount;\n            serviceFeeAmount += feeAmount;\n          }\n        });\n        \n        // Apply service taxes (to base service amount + fees if fee is taxable)\n        effectiveTaxIds.forEach((taxId: string) => {\n          const taxSetting = (taxSettings as any[])?.find((s: any) => s.id === taxId && s.isActive);\n          if (taxSetting) {\n            // Tax on base service amount\n            let taxableAmount = serviceSubtotal;\n            \n            // Add fees to taxable amount if any applied fees are taxable\n            effectiveFeeIds.forEach((feeId: string) => {\n              const feeSetting = (taxSettings as any[])?.find((s: any) => s.id === feeId && s.isActive);\n              if (feeSetting && feeSetting.isTaxable && (feeSetting.applicableTaxIds || []).includes(taxId)) {\n                let feeAmount = 0;\n                if (feeSetting.calculation === 'percentage') {\n                  feeAmount = (serviceSubtotal * parseFloat(feeSetting.value)) / 100;\n                } else {\n                  feeAmount = parseFloat(feeSetting.value);\n                }\n                taxableAmount += feeAmount;\n              }\n            });\n            \n            const taxAmount = (taxableAmount * parseFloat(taxSetting.value)) / 100;\n            console.log('Applying tax:', taxSetting.name, 'to service:', service.name, 'taxable amount:', taxableAmount, 'tax amount:', taxAmount);\n            taxesTotal += taxAmount;\n          }\n        });\n      }\n    });\n    \n    return subtotal + feesTotal + taxesTotal;\n  };\n\n  const totalPrice = useMemo(() => {\n    return selectedDates.reduce((total, dateConfig) => {\n      return total + calculateDateTotal(dateConfig);\n    }, 0);\n  }, [selectedDates, packages, services]);\n\n  // Handle date selection\n  const handleDateClick = (date: Date) => {\n    if (!isSameMonth(date, currentDate)) return;\n    \n    const existingIndex = selectedDates.findIndex(d => isSameDay(d.date, date));\n    if (existingIndex >= 0) {\n      setSelectedDates(prev => prev.filter((_, i) => i !== existingIndex));\n      if (activeTabIndex >= selectedDates.length - 1) {\n        setActiveTabIndex(Math.max(0, selectedDates.length - 2));\n      }\n    } else {\n      const defaultSpace = selectedVenueData?.spaces?.[0];\n      setSelectedDates(prev => [...prev, {\n        date,\n        startTime: \"09:00 AM\",\n        endTime: \"05:00 PM\",\n        spaceId: defaultSpace?.id || \"\",\n        guestCount: 1,\n        packageId: \"\",\n        selectedServices: [],\n        itemQuantities: {},\n        pricingOverrides: {}\n      }]);\n    }\n  };\n\n\n  const selectedVenueData = (venues as any[]).find((v: any) => v.id === selectedVenue);\n  const selectedPackageData = (packages as any[]).find((p: any) => p.id === activeDate?.packageId);\n\n  // Function to check space availability for a specific date and time\n  const getSpaceAvailability = (spaceId: string, date: Date, startTime: string, endTime: string) => {\n    if (!spaceId || !(existingBookings as any[])?.length) return { available: true, conflictingBooking: null };\n\n    const conflicts = (existingBookings as any[]).filter(booking => {\n      if (booking.status === 'cancelled') return false;\n      if (booking.spaceId !== spaceId) return false;\n      \n      const bookingDate = new Date(booking.eventDate);\n      if (bookingDate.toDateString() !== date.toDateString()) return false;\n\n      // Parse times - handle both 24hr format and 12hr format\n      const parseTime = (timeStr: string) => {\n        if (timeStr.includes('AM') || timeStr.includes('PM')) {\n          // Convert 12hr format to 24hr\n          const cleanTime = timeStr.replace(/\\s(AM|PM)/g, '');\n          const [hours, minutes] = cleanTime.split(':').map(Number);\n          const isAM = timeStr.includes('AM');\n          const hour24 = isAM ? (hours === 12 ? 0 : hours) : (hours === 12 ? 12 : hours + 12);\n          return hour24 * 60 + minutes;\n        } else {\n          // Already 24hr format\n          const [hours, minutes] = timeStr.split(':').map(Number);\n          return hours * 60 + minutes;\n        }\n      };\n\n      const newStart = parseTime(startTime);\n      const newEnd = parseTime(endTime);\n      const existingStart = parseTime(booking.startTime);\n      const existingEnd = parseTime(booking.endTime);\n\n      return (newStart < existingEnd && newEnd > existingStart);\n    });\n\n    return {\n      available: conflicts.length === 0,\n      conflictingBooking: conflicts[0] || null\n    };\n  };\n\n  // Copy configuration to other dates\n  const handleCopyConfig = (selectedIndices: number[]) => {\n    if (!activeDate || selectedIndices.length === 0) return;\n    \n    const currentConfig = {\n      // Copy all configuration fields except date, startTime, endTime which are unique per date\n      spaceId: activeDate.spaceId,\n      packageId: activeDate.packageId,\n      selectedServices: activeDate.selectedServices ? [...activeDate.selectedServices] : [],\n      guestCount: activeDate.guestCount,\n      setupStyle: activeDate.setupStyle,\n      itemQuantities: activeDate.itemQuantities ? { ...activeDate.itemQuantities } : {},\n      pricingOverrides: activeDate.pricingOverrides ? {\n        packagePrice: activeDate.pricingOverrides.packagePrice,\n        servicePrices: activeDate.pricingOverrides.servicePrices ? { ...activeDate.pricingOverrides.servicePrices } : {}\n      } : {}\n    };\n\n    setSelectedDates(prev => \n      prev.map((date, index) => {\n        // Apply configuration to selected indices, skip current active tab\n        if (index === activeTabIndex) return date;\n        \n        return selectedIndices.includes(index) ? { ...date, ...currentConfig } : date;\n      })\n    );\n\n    toast({ \n      title: \"Settings applied\", \n      description: `Configuration applied to ${selectedIndices.length} selected dates` \n    });\n    setShowCopyModal(false);\n  };\n\n  // Create customer mutation\n  const createCustomer = useMutation({\n    mutationFn: async (customerData: any) => {\n      return await apiRequest(\"POST\", \"/api/customers\", customerData);\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      setSelectedCustomer(data.id);\n      setShowNewCustomerForm(false);\n      setShowManageEmployees(false);\n      setNewCustomer({ \n        name: \"\", \n        email: \"\", \n        phone: \"\", \n        company: \"\",\n        customerType: \"individual\",\n        companyId: \"\",\n        jobTitle: \"\",\n        department: \"\"\n      });\n      toast({ title: \"Customer created successfully!\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to create customer\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  // Create service mutation\n  const createService = useMutation({\n    mutationFn: async (serviceData: any) => {\n      return await apiRequest(\"POST\", \"/api/services\", serviceData);\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      // Auto-add the new service to current date configuration\n      const currentServices = activeDate?.selectedServices || [];\n      updateDateConfig('selectedServices', [...currentServices, data.id]);\n      setShowNewServiceForm(false);\n      setNewService({ name: \"\", description: \"\", category: \"addon\", price: \"\", pricingModel: \"fixed\" });\n      toast({ title: \"Service created and added to event!\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to create service\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n\n\n  // Create booking mutation (single event)\n  const createBooking = useMutation({\n    mutationFn: async (bookingData: any) => {\n      return await apiRequest(\"POST\", \"/api/bookings\", bookingData);\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/metrics\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      \n      // Show different success message based on submission type\n      const isProposal = variables.proposalStatus === 'sent';\n      toast({ \n        title: isProposal ? \"Proposal sent successfully!\" : \"Event created successfully!\",\n        description: isProposal ? \"The customer will receive an email with the proposal details.\" : undefined\n      });\n      onOpenChange(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to create event\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Create contract with multiple bookings mutation\n  const createContract = useMutation({\n    mutationFn: async (contractData: any) => {\n      return await apiRequest(\"POST\", \"/api/bookings/contract\", contractData);\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/contracts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/metrics\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      toast({ \n        title: \"Multi-event contract created successfully!\", \n        description: `Created contract with ${data.bookings.length} events` \n      });\n      onOpenChange(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to create contract\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Voice booking handlers\n  const handleVoiceDataExtracted = (data: any) => {\n    setVoiceExtractedData(data);\n    \n    // Auto-populate form with extracted data\n    if (data.eventName) setEventName(data.eventName);\n    if (data.customerName) {\n      // Try to find existing customer or prepare to create new one\n      const existingCustomer = (customers as any[]).find((c: any) => \n        c.name.toLowerCase().includes(data.customerName.toLowerCase())\n      );\n      if (existingCustomer) {\n        setSelectedCustomer(existingCustomer.id);\n      } else {\n        setNewCustomer(prev => ({\n          ...prev,\n          name: data.customerName,\n          email: data.customerEmail || \"\",\n          phone: data.customerPhone || \"\"\n        }));\n        setShowNewCustomerForm(true);\n      }\n    }\n    \n    // Set venue if mentioned\n    if (data.venue) {\n      const venue = (venues as any[]).find((v: any) => \n        v.name.toLowerCase().includes(data.venue.toLowerCase())\n      );\n      if (venue) {\n        setSelectedVenue(venue.id);\n      }\n    }\n    \n    // Auto-move to step 1 (date selection) if we have extracted data\n    setCurrentStep(1);\n    setShowVoicePanel(false);\n    \n    toast({\n      title: \"Voice Data Applied\",\n      description: \"Form populated with voice booking details. Please review and continue.\"\n    });\n  };\n\n  const resetForm = () => {\n    setCurrentStep(1);\n    setSelectedVenue(\"\");\n    setSelectedDates([]);\n    setActiveTabIndex(0);\n    setEventName(\"\");\n    setSelectedCustomer(\"\");\n    setEventStatus(\"inquiry\");\n    setShowNewCustomerForm(false);\n    setNewCustomer({ \n      name: \"\", \n      email: \"\", \n      phone: \"\", \n      company: \"\",\n      customerType: \"individual\",\n      companyId: \"\",\n      jobTitle: \"\",\n      department: \"\"\n    });\n    setShowVoicePanel(false);\n    setVoiceExtractedData(null);\n  };\n\n  const handleCreateCustomer = () => {\n    if (!newCustomer.name || !newCustomer.email) {\n      toast({\n        title: \"Required fields missing\",\n        description: \"Please provide customer name and email\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    if (newCustomer.customerType === \"business\" && !newCustomer.companyId) {\n      toast({\n        title: \"Company required\",\n        description: \"Please select a company for business customers\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    const customerData = {\n      name: newCustomer.name,\n      email: newCustomer.email,\n      phone: newCustomer.phone,\n      customerType: newCustomer.customerType,\n      ...(newCustomer.customerType === \"business\" && {\n        companyId: newCustomer.companyId,\n        jobTitle: newCustomer.jobTitle,\n        department: newCustomer.department\n      })\n    };\n    \n    createCustomer.mutate(customerData);\n  };\n\n  const handleCreateService = () => {\n    if (!newService.name || !newService.price) {\n      toast({\n        title: \"Required fields missing\",\n        description: \"Please provide service name and price\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    createService.mutate({\n      ...newService,\n      price: parseFloat(newService.price).toString()\n    });\n  };\n\n  const convertTimeToHours = (timeStr: string) => {\n    // If already in 24-hour format, return as is\n    if (!timeStr.includes('AM') && !timeStr.includes('PM')) {\n      return timeStr;\n    }\n    \n    return timeStr.replace(/\\s(AM|PM)/g, '').replace(/(\\d+):(\\d+)/, (_, h, m) => {\n      const hour = parseInt(h);\n      const isAM = timeStr.includes('AM');\n      const hour24 = isAM ? (hour === 12 ? 0 : hour) : (hour === 12 ? 12 : hour + 12);\n      return `${hour24.toString().padStart(2, '0')}:${m}`;\n    });\n  };\n\n  const handleSubmit = async (submitType: 'inquiry' | 'proposal' = 'inquiry') => {\n    if (!eventName || !selectedCustomer || selectedDates.length === 0) {\n      toast({ title: \"Please fill in all required fields\", variant: \"destructive\" });\n      return;\n    }\n\n    // Validate all dates have spaces selected\n    const missingSpaces = selectedDates.filter(date => !date.spaceId);\n    if (missingSpaces.length > 0) {\n      toast({ \n        title: \"Space selection required\", \n        description: `Please select a space for ${missingSpaces.length} event date${missingSpaces.length > 1 ? 's' : ''}`,\n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    // If this is a proposal submission, show the email modal instead\n    if (submitType === 'proposal') {\n      setShowProposalEmail(true);\n      return;\n    }\n\n    if (selectedDates.length === 1) {\n      // Single event - use regular booking endpoint\n      const firstDate = selectedDates[0];\n      const bookingData = {\n        eventName,\n        eventType: \"corporate\",\n        eventDate: firstDate.date,\n        startTime: convertTimeToHours(firstDate.startTime),\n        endTime: convertTimeToHours(firstDate.endTime),\n        guestCount: firstDate.guestCount || 1,\n        status: (submitType === 'proposal' ? 'pending' : eventStatus),\n        customerId: selectedCustomer,\n        venueId: selectedVenue,\n        spaceId: firstDate.spaceId,\n        setupStyle: firstDate.setupStyle || null,\n        packageId: firstDate.packageId || null,\n        selectedServices: firstDate.selectedServices?.length ? firstDate.selectedServices : null,\n        pricingModel: selectedPackageData?.pricingModel || \"fixed\",\n        itemQuantities: firstDate.itemQuantities || {},\n        pricingOverrides: firstDate.pricingOverrides || null,\n        serviceTaxOverrides: firstDate.serviceTaxOverrides || null,\n        totalAmount: totalPrice.toString(),\n        notes: `Package: ${selectedPackageData?.name || 'None'}, Services: ${firstDate.selectedServices?.length || 0} selected`,\n        proposalStatus: (submitType === 'proposal' ? 'sent' : 'none'),\n        proposalSentAt: submitType === 'proposal' ? new Date().toISOString() : null\n      };\n\n      createBooking.mutate(bookingData, {\n        onError: (error: any) => {\n          if (error.response?.status === 409) {\n            // Handle booking conflict\n            const conflictData = error.response.data.conflictingBooking;\n            toast({\n              title: \"⚠️ Booking Conflict Detected\",\n              description: `The selected time slot conflicts with \"${conflictData.eventName}\" by ${conflictData.customerName} (${conflictData.startTime} - ${conflictData.endTime}, Status: ${conflictData.status}). Would you like to overbook anyway?`,\n              variant: \"destructive\",\n              duration: 8000\n            });\n          } else {\n            toast({\n              title: \"Error creating booking\",\n              description: error.response?.data?.message || \"An unexpected error occurred\",\n              variant: \"destructive\"\n            });\n          }\n        }\n      });\n    } else {\n      // Multiple events - create contract with multiple bookings\n      const contractData = {\n        customerId: selectedCustomer,\n        contractName: eventName,\n        description: `Multi-date event with ${selectedDates.length} dates`,\n        status: submitType === 'proposal' ? 'pending' : eventStatus\n      };\n\n      const bookingsData = selectedDates.map((date, index) => {\n        // Calculate individual date price using the same logic as calculateDateTotal\n        const datePrice = calculateDateTotal(date);\n\n        return {\n          eventName: `${eventName} - Day ${index + 1}`,\n          eventType: \"corporate\",\n          eventDate: date.date,\n          startTime: convertTimeToHours(date.startTime),\n          endTime: convertTimeToHours(date.endTime),\n          guestCount: date.guestCount || 1,\n          status: (submitType === 'proposal' ? 'pending' : eventStatus),\n          customerId: selectedCustomer,\n          venueId: selectedVenue,\n          spaceId: date.spaceId,\n          setupStyle: date.setupStyle || null,\n          packageId: date.packageId || null,\n          selectedServices: date.selectedServices?.length ? date.selectedServices : null,\n          pricingModel: selectedPackageData?.pricingModel || \"fixed\",\n          itemQuantities: date.itemQuantities || {},\n          pricingOverrides: date.pricingOverrides || null,\n          serviceTaxOverrides: date.serviceTaxOverrides || null,\n          totalAmount: datePrice.toString(),\n          notes: `Package: ${selectedPackageData?.name || 'None'}, Services: ${date.selectedServices?.length || 0} selected`,\n          proposalStatus: (submitType === 'proposal' ? 'sent' : 'none'),\n          proposalSentAt: submitType === 'proposal' ? new Date().toISOString() : null\n        };\n      });\n\n      createContract.mutate({ contractData, bookingsData }, {\n        onError: (error: any) => {\n          if (error.response?.status === 409) {\n            const conflictData = error.response.data.conflictingBooking;\n            toast({\n              title: \"⚠️ Booking Conflict Detected\",\n              description: `One or more dates conflict with existing bookings. First conflict: \"${conflictData.eventName}\" by ${conflictData.customerName} (${conflictData.startTime} - ${conflictData.endTime}, Status: ${conflictData.status}).`,\n              variant: \"destructive\",\n              duration: 8000\n            });\n          } else {\n            toast({\n              title: \"Error creating contract\",\n              description: error.response?.data?.message || \"An unexpected error occurred\",\n              variant: \"destructive\"\n            });\n          }\n        }\n      });\n    }\n  };\n\n  // Helper functions for company/customer management\n  const getCompanyById = (id: string) => {\n    return (companies as any[]).find(c => c.id === id);\n  };\n\n  const getCustomersByCompany = (companyId: string) => {\n    return (customers as any[]).filter(c => c.companyId === companyId);\n  };\n\n  const getFilteredCompanies = () => {\n    if (!companySearch) return [];\n    return (companies as any[]).filter(company => \n      company.name.toLowerCase().includes(companySearch.toLowerCase())\n    );\n  };\n\n  const nextStep = () => {\n    // For single venue systems, venue is auto-selected, so only check dates\n    // For multi-venue systems, require both venue selection and dates\n    const isMultiVenue = Array.isArray(venues) && venues.length > 1;\n    const venueRequired = isMultiVenue && !selectedVenue;\n    \n    if (currentStep === 1 && (venueRequired || selectedDates.length === 0)) {\n      if (venueRequired && selectedDates.length === 0) {\n        toast({ title: \"Please select a venue and at least one date\", variant: \"destructive\" });\n      } else if (venueRequired) {\n        toast({ title: \"Please select a venue\", variant: \"destructive\" });\n      } else {\n        toast({ title: \"Please select at least one date\", variant: \"destructive\" });\n      }\n      return;\n    }\n    \n    if (currentStep === 1) {\n      // Validate that all selected dates have spaces selected\n      const missingSpaces = selectedDates.filter(date => !date.spaceId);\n      if (missingSpaces.length > 0) {\n        toast({ \n          title: \"Space selection required\", \n          description: `Please select a space for ${missingSpaces.length} event date${missingSpaces.length > 1 ? 's' : ''}`,\n          variant: \"destructive\" \n        });\n        return;\n      }\n\n      // Validate that venue has spaces available\n      if (!selectedVenueData?.spaces || selectedVenueData.spaces.length === 0) {\n        toast({ \n          title: \"No spaces available\", \n          description: \"The selected venue has no available spaces configured\",\n          variant: \"destructive\" \n        });\n        return;\n      }\n\n      // Reset active tab index to first date when moving to step 2\n      setActiveTabIndex(0);\n    }\n    if (currentStep < 3) setCurrentStep(currentStep + 1);\n  };\n\n  const prevStep = () => {\n    if (currentStep > 1) setCurrentStep(currentStep - 1);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"w-full max-w-[95vw] sm:max-w-6xl max-h-[90vh] p-0 flex flex-col mx-2 sm:mx-4 overflow-hidden\">\n        <DialogTitle className=\"sr-only\">Create Event</DialogTitle>\n        <DialogDescription className=\"sr-only\">\n          Create a new event booking with date selection, venue configuration, and customer details.\n        </DialogDescription>\n        <div className=\"flex h-full overflow-hidden\">\n          {/* Left sidebar - Event dates summary (Steps 2 & 3) */}\n          {currentStep > 1 && (\n            <div className=\"hidden lg:block w-80 bg-slate-50 border-r border-slate-200 p-6 overflow-y-auto flex-shrink-0\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"font-semibold text-slate-900\">Event Dates</h3>\n                <Button variant=\"outline\" size=\"sm\" onClick={() => setCurrentStep(1)}>\n                  <Plus className=\"h-4 w-4 mr-1\" />\n                  Add\n                </Button>\n              </div>\n              \n              <div className=\"space-y-3\">\n                {selectedDates.map((dateInfo, index) => (\n                  <Card key={index} className=\"p-3 bg-blue-50 border-blue-200\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"font-medium text-blue-900\">\n                        {format(dateInfo.date, 'EEEE, MMMM d, yyyy')}\n                      </span>\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => setCurrentStep(1)}>\n                        <RotateCcw className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                    <div className=\"text-sm text-blue-700\">\n                      {format(dateInfo.date, 'MMMM d, yyyy')}\n                    </div>\n                    <div className=\"text-sm text-blue-600 mt-1\">\n                      {selectedVenueData?.name} - {selectedVenueData?.spaces?.[0]?.name || 'Main Hall'} @ {dateInfo.startTime}\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Main content area */}\n          <div className=\"flex-1 flex flex-col min-h-0\">\n            {/* Header */}\n            <div className=\"border-b border-slate-200 p-3 sm:p-6 flex items-center justify-between flex-shrink-0\">\n              <div className=\"flex items-center gap-4\">\n                {currentStep > 1 && (\n                  <Button variant=\"ghost\" size=\"sm\" onClick={prevStep}>\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n                )}\n                <div className=\"flex items-center gap-3\">\n                  <CalendarIcon className=\"h-5 w-5 text-blue-600\" />\n                  <h2 className=\"text-lg sm:text-xl font-semibold\">\n                    {duplicateFromBooking ? \"Duplicate Event\" : \"Create Event\"}\n                  </h2>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => setShowVoicePanel(true)}\n                    className=\"text-purple-600 border-purple-200 hover:bg-purple-50\"\n                  >\n                    <Mic className=\"h-4 w-4 mr-2\" />\n                    Voice Booking\n                  </Button>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-6\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-sm font-medium text-slate-600\">Status:</span>\n                  <StatusSelector\n                    currentStatus={eventStatus as EventStatus}\n                    onStatusChange={(newStatus) => setEventStatus(newStatus)}\n                  />\n                </div>\n                {/* Extra space before close button */}\n                <div className=\"w-8\" />\n              </div>\n            </div>\n\n            {/* Step Content */}\n            <div className=\"flex-1 overflow-hidden\">\n              <div className=\"h-full p-3 sm:p-6 overflow-y-auto\">\n              {/* Step 1: Date & Venue Selection */}\n              {currentStep === 1 && (\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-8\">\n                  {/* Left: Calendar */}\n                  <div>\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <Button\n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => setCurrentDate(subMonths(currentDate, 1))}\n                      >\n                        <ChevronLeft className=\"h-4 w-4\" />\n                      </Button>\n                      <h3 className=\"text-lg font-semibold\">\n                        {format(currentDate, 'MMMM yyyy')}\n                      </h3>\n                      <Button\n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => setCurrentDate(addMonths(currentDate, 1))}\n                      >\n                        <ChevronRight className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n\n                    <div className=\"grid grid-cols-7 gap-1 mb-2\">\n                      {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n                        <div key={day} className=\"p-2 text-center text-sm font-medium text-slate-600\">\n                          {day}\n                        </div>\n                      ))}\n                    </div>\n\n                    <div className=\"grid grid-cols-7 gap-1\">\n                      {paddedDays.map((day, index) => {\n                        const isCurrentMonth = isSameMonth(day, currentDate);\n                        const isSelected = selectedDates.some(d => isSameDay(d.date, day));\n                        \n                        return (\n                          <button\n                            key={index}\n                            onClick={() => handleDateClick(day)}\n                            className={cn(\n                              \"h-12 w-12 rounded-full flex items-center justify-center text-sm font-medium transition-colors\",\n                              isCurrentMonth \n                                ? \"text-slate-900 hover:bg-slate-100\" \n                                : \"text-slate-400\",\n                              isSelected && \"bg-blue-600 text-white hover:bg-blue-700\"\n                            )}\n                          >\n                            {format(day, 'd')}\n                          </button>\n                        );\n                      })}\n                    </div>\n                  </div>\n\n                  {/* Right: Time Configuration */}\n                  <div className=\"space-y-6\">\n\n                    <div>\n                      <Label className=\"text-base font-medium\">Configure Dates ({selectedDates.length})</Label>\n                      <div className=\"mt-3 space-y-3 max-h-64 overflow-y-auto\">\n                        {selectedDates.map((dateInfo, index) => (\n                          <Card key={index} className=\"group relative overflow-hidden border border-slate-200 bg-white shadow-sm hover:shadow-md transition-all duration-200\">\n                            {/* Modern gradient header */}\n                            <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border-b border-slate-100 p-4\">\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center gap-3\">\n                                  <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center text-white font-semibold text-sm\">\n                                    {format(dateInfo.date, 'd')}\n                                  </div>\n                                  <div>\n                                    <h4 className=\"font-semibold text-slate-900 text-sm\">\n                                      {format(dateInfo.date, 'EEEE, MMMM d')}\n                                    </h4>\n                                    <p className=\"text-xs text-slate-600 mt-0.5\">\n                                      {format(dateInfo.date, 'yyyy')}\n                                    </p>\n                                  </div>\n                                </div>\n                                \n                                {/* Availability indicator */}\n                                {(() => {\n                                  const availability = getSpaceAvailability(\n                                    dateInfo.spaceId || '',\n                                    dateInfo.date,\n                                    dateInfo.startTime,\n                                    dateInfo.endTime\n                                  );\n                                  \n                                  if (availability.available) {\n                                    return (\n                                      <div className=\"flex items-center gap-2 px-3 py-1.5 bg-green-100 text-green-700 rounded-full text-xs font-medium\">\n                                        <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                                        Available\n                                      </div>\n                                    );\n                                  } else {\n                                    const conflict = availability.conflictingBooking;\n                                    return (\n                                      <div className=\"text-right\">\n                                        <div className=\"flex items-center gap-2 px-3 py-1.5 bg-red-100 text-red-700 rounded-full text-xs font-medium mb-1\">\n                                          <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n                                          Conflict\n                                        </div>\n                                        <div className=\"text-xs text-red-600\">\n                                          {conflict?.eventName}<br/>\n                                          {conflict?.startTime} - {conflict?.endTime}\n                                        </div>\n                                      </div>\n                                    );\n                                  }\n                                })()}\n                              </div>\n                            </div>\n\n                            {/* Form content */}\n                            <div className=\"p-5 space-y-4\">\n                              {/* Space Selection */}\n                              <div className=\"space-y-2\">\n                                <Label className=\"text-sm font-medium text-slate-700 flex items-center gap-2\">\n                                  <MapPin className=\"w-4 h-4 text-slate-500\" />\n                                  Select Space\n                                  <span className=\"text-red-500 text-xs\">*</span>\n                                </Label>\n                                <Select\n                                  value={dateInfo.spaceId || \"\"}\n                                  onValueChange={(value) => updateDateTime(index, 'spaceId', value)}\n                                >\n                                  <SelectTrigger className={cn(\n                                    \"w-full h-10 transition-colors\",\n                                    !dateInfo.spaceId \n                                      ? \"border-red-200 bg-red-50/30 focus:border-red-400\" \n                                      : \"border-slate-200 hover:border-slate-300 focus:border-blue-400\"\n                                  )}>\n                                    <SelectValue placeholder=\"Choose a space\" />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    {selectedVenueData?.spaces?.map((space: any) => (\n                                      <SelectItem key={space.id} value={space.id}>\n                                        <div className=\"flex items-center justify-between w-full\">\n                                          <span>{space.name}</span>\n                                          <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                                            {space.capacity} guests\n                                          </Badge>\n                                        </div>\n                                      </SelectItem>\n                                    )) || <SelectItem value=\"no-spaces\" disabled>No spaces available</SelectItem>}\n                                  </SelectContent>\n                                </Select>\n                              </div>\n                              \n                              {/* Time and Details Grid */}\n                              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                                {/* Event Time */}\n                                <div className=\"space-y-2\">\n                                  <Label className=\"text-sm font-medium text-slate-700 flex items-center gap-2\">\n                                    <CalendarIcon className=\"w-4 h-4 text-slate-500\" />\n                                    Event Time\n                                    <span className=\"text-red-500 text-xs\">*</span>\n                                  </Label>\n                                  <div className=\"flex items-center gap-2\">\n                                    <Select\n                                      value={dateInfo.startTime}\n                                      onValueChange={(value) => updateDateTime(index, 'startTime', value)}\n                                    >\n                                      <SelectTrigger className={cn(\n                                        \"flex-1 h-9 text-sm transition-colors\",\n                                        !dateInfo.startTime \n                                          ? \"border-red-200 bg-red-50/30\" \n                                          : \"border-slate-200 hover:border-slate-300\"\n                                      )}>\n                                        <SelectValue placeholder=\"Start\" />\n                                      </SelectTrigger>\n                                      <SelectContent>\n                                        {Array.from({length: 24}, (_, i) => {\n                                          const hour = i === 0 ? 12 : i <= 12 ? i : i - 12;\n                                          const ampm = i < 12 ? 'AM' : 'PM';\n                                          const time = `${hour.toString().padStart(2, '0')}:00 ${ampm}`;\n                                          return (\n                                            <SelectItem key={time} value={time}>{time}</SelectItem>\n                                          );\n                                        })}\n                                      </SelectContent>\n                                    </Select>\n                                    \n                                    <span className=\"text-slate-400 font-medium px-1\">→</span>\n                                    \n                                    <Select\n                                      value={dateInfo.endTime}\n                                      onValueChange={(value) => updateDateTime(index, 'endTime', value)}\n                                    >\n                                      <SelectTrigger className={cn(\n                                        \"flex-1 h-9 text-sm transition-colors\",\n                                        !dateInfo.endTime \n                                          ? \"border-red-200 bg-red-50/30\" \n                                          : \"border-slate-200 hover:border-slate-300\"\n                                      )}>\n                                        <SelectValue placeholder=\"End\" />\n                                      </SelectTrigger>\n                                      <SelectContent>\n                                        {Array.from({length: 24}, (_, i) => {\n                                          const hour = i === 0 ? 12 : i <= 12 ? i : i - 12;\n                                          const ampm = i < 12 ? 'AM' : 'PM';\n                                          const time = `${hour.toString().padStart(2, '0')}:00 ${ampm}`;\n                                          return (\n                                            <SelectItem key={time} value={time}>{time}</SelectItem>\n                                          );\n                                        })}\n                                      </SelectContent>\n                                    </Select>\n                                  </div>\n                                </div>\n                                \n                                {/* Guests and Setup */}\n                                <div className=\"grid grid-cols-2 gap-3\">\n                                  {/* Guest Count */}\n                                  <div className=\"space-y-2\">\n                                    <Label className=\"text-sm font-medium text-slate-700 flex items-center gap-1.5\">\n                                      <Users className=\"w-4 h-4 text-slate-500\" />\n                                      Guests\n                                      <span className=\"text-red-500 text-xs\">*</span>\n                                    </Label>\n                                    <div className=\"space-y-1\">\n                                      <Input\n                                        type=\"number\"\n                                        min=\"1\"\n                                        max=\"999\"\n                                        value={dateInfo.guestCount || 1}\n                                        onChange={(e) => {\n                                          const value = Math.max(1, Math.min(999, parseInt(e.target.value) || 1));\n                                          updateDateTime(index, 'guestCount', value);\n                                        }}\n                                        className=\"h-9 text-center text-sm font-medium\"\n                                      />\n                                      {(() => {\n                                        const selectedSpace = selectedVenueData?.spaces?.find((space: any) => space.id === dateInfo.spaceId);\n                                        const guestCount = dateInfo.guestCount || 1;\n                                        const capacity = selectedSpace?.capacity || 0;\n                                        \n                                        if (selectedSpace && guestCount > capacity) {\n                                          return (\n                                            <div className=\"flex items-center gap-1 text-xs text-amber-600\">\n                                              <div className=\"w-1 h-1 bg-amber-400 rounded-full\"></div>\n                                              Exceeds capacity ({capacity})\n                                            </div>\n                                          );\n                                        }\n                                        return null;\n                                      })()}\n                                    </div>\n                                  </div>\n\n                                  {/* Setup Style */}\n                                  <div className=\"space-y-2\">\n                                    <Label className=\"text-sm font-medium text-slate-700 flex items-center gap-1.5\">\n                                      <Grid3X3 className=\"w-4 h-4 text-slate-500\" />\n                                      Setup\n                                    </Label>\n                                    <Select\n                                      value={dateInfo.setupStyle || ''}\n                                      onValueChange={(value) => updateDateTime(index, 'setupStyle', value)}\n                                    >\n                                      <SelectTrigger className=\"h-9 text-sm border-slate-200 hover:border-slate-300\">\n                                        <SelectValue placeholder=\"Style\" />\n                                      </SelectTrigger>\n                                      <SelectContent>\n                                        <SelectItem value=\"round-tables\">Round Tables</SelectItem>\n                                        <SelectItem value=\"u-shape\">U-Shape</SelectItem>\n                                        <SelectItem value=\"classroom\">Classroom</SelectItem>\n                                        <SelectItem value=\"theater\">Theater</SelectItem>\n                                        <SelectItem value=\"cocktail\">Cocktail</SelectItem>\n                                        <SelectItem value=\"banquet\">Banquet</SelectItem>\n                                        <SelectItem value=\"conference\">Conference</SelectItem>\n                                        <SelectItem value=\"custom\">Custom</SelectItem>\n                                      </SelectContent>\n                                    </Select>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </Card>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Step 2: Event Configuration */}\n              {currentStep === 2 && (\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-semibold\">Configure Each Event Date</h3>\n                    {selectedDates.length > 1 && (\n                      <span className=\"text-sm text-slate-600\">\n                        {selectedDates.length} dates selected\n                      </span>\n                    )}\n                  </div>\n\n                  {/* Date Configuration Tabs */}\n                  {selectedDates.length > 0 && (\n                    <div className=\"space-y-6\">\n                      {/* Tab Navigation */}\n                      {selectedDates.length > 1 && (\n                        <div className=\"flex gap-2 p-1 bg-slate-100 rounded-lg overflow-x-auto\">\n                          {selectedDates.map((date, index) => (\n                            <button\n                              key={index}\n                              onClick={() => setActiveTabIndex(index)}\n                              className={cn(\n                                \"px-4 py-2 rounded-md text-sm font-medium whitespace-nowrap transition-colors\",\n                                activeTabIndex === index \n                                  ? \"bg-white text-slate-900 shadow-sm\" \n                                  : \"text-slate-600 hover:text-slate-900\"\n                              )}\n                            >\n                              {format(date.date, 'MMM d')}\n                            </button>\n                          ))}\n                        </div>\n                      )}\n\n                      {/* Active Date Configuration */}\n                      {activeDate && (\n                        <div className=\"bg-white border rounded-lg p-6 space-y-6\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <h4 className=\"font-semibold\">\n                                {format(activeDate.date, 'EEEE, MMMM d, yyyy')}\n                              </h4>\n                              <div className=\"text-sm text-slate-600 mt-1\">\n                                {activeDate.startTime} - {activeDate.endTime}\n                              </div>\n                            </div>\n                            <div className=\"flex items-center gap-6\">\n                              {/* Guests Field - Simplified */}\n                              <div className=\"flex items-center gap-2\">\n                                <Label className=\"text-sm font-medium text-slate-700 flex items-center gap-1.5\">\n                                  <Users className=\"w-4 h-4 text-slate-500\" />\n                                  Guests\n                                  <span className=\"text-red-500 text-xs\">*</span>\n                                </Label>\n                                <Input\n                                  type=\"number\"\n                                  min=\"1\"\n                                  max=\"999\"\n                                  value={activeDate.guestCount || 1}\n                                  onChange={(e) => {\n                                    const value = Math.max(1, Math.min(999, parseInt(e.target.value) || 1));\n                                    updateDateConfig('guestCount', value);\n                                  }}\n                                  className=\"w-20 h-8 text-center text-sm\"\n                                />\n                                {(() => {\n                                  const selectedSpace = selectedVenueData?.spaces?.find((space: any) => space.id === activeDate.spaceId);\n                                  const guestCount = activeDate.guestCount || 1;\n                                  const capacity = selectedSpace?.capacity || 0;\n                                  \n                                  if (selectedSpace && guestCount > capacity) {\n                                    return (\n                                      <span className=\"text-xs text-amber-600\">\n                                        Exceeds capacity ({capacity})\n                                      </span>\n                                    );\n                                  }\n                                  return null;\n                                })()}\n                              </div>\n\n                              {/* Setup Style Field with Floor Plan Integration */}\n                              <div className=\"flex items-center gap-2\">\n                                <Label className=\"text-sm font-medium text-slate-700 flex items-center gap-1.5\">\n                                  <Grid3X3 className=\"w-4 h-4 text-slate-500\" />\n                                  Setup Style\n                                </Label>\n                                <div className=\"flex items-center gap-2\">\n                                  <Select\n                                    value={activeDate.setupStyle || ''}\n                                    onValueChange={(value) => updateDateConfig('setupStyle', value)}\n                                  >\n                                    <SelectTrigger className=\"w-40 h-8 text-sm\">\n                                      <SelectValue placeholder=\"Select style\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"round-tables\">Round Tables</SelectItem>\n                                      <SelectItem value=\"u-shape\">U-Shape</SelectItem>\n                                      <SelectItem value=\"classroom\">Classroom</SelectItem>\n                                      <SelectItem value=\"theater\">Theater</SelectItem>\n                                      <SelectItem value=\"cocktail\">Cocktail</SelectItem>\n                                      <SelectItem value=\"banquet\">Banquet</SelectItem>\n                                      <SelectItem value=\"conference\">Conference</SelectItem>\n                                      <SelectItem value=\"custom\">Custom</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n                                  {activeDate.setupStyle && (\n                                    <Button\n                                      type=\"button\"\n                                      variant=\"outline\"\n                                      size=\"sm\"\n                                      className=\"h-8 px-3 text-xs\"\n                                      onClick={() => {\n                                        // Open floor plan designer for this setup style\n                                        toast({\n                                          title: \"Floor Plan Designer\",\n                                          description: \"Visit Floor Plans & Setup section to design custom layouts for this setup style\"\n                                        });\n                                      }}\n                                    >\n                                      <Grid3X3 className=\"w-3 h-3 mr-1\" />\n                                      Edit Layout\n                                    </Button>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"space-y-6\">\n                            {/* Package & Services - Full Width */}\n                            <div className=\"space-y-4\">\n\n                              {/* Package Selection */}\n                              <div>\n                                <div className=\"flex items-center justify-between mb-3\">\n                                  <Label className=\"text-base font-medium\">Event Package</Label>\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => setShowPackageSelection(!showPackageSelection)}\n                                    className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n                                  >\n                                    {showPackageSelection ? \"Hide Packages\" : \"Show Packages\"}\n                                  </Button>\n                                </div>\n                                \n                                {showPackageSelection && (\n                                  <div className=\"mt-3 max-h-80 overflow-y-auto\">\n                                  <div className=\"grid grid-cols-1 gap-3\">\n                                    <div\n                                      className={cn(\n                                        \"p-3 border rounded-lg cursor-pointer transition-all relative\",\n                                        !activeDate.packageId ? \"border-blue-500 bg-blue-50\" : \"border-slate-200 hover:border-slate-300\"\n                                      )}\n                                      onClick={() => updateDateConfig('packageId', \"\")}\n                                    >\n                                      {!activeDate.packageId && (\n                                        <div className=\"absolute top-2 right-2 w-5 h-5 bg-blue-500 rounded-full flex items-center justify-center\">\n                                          <svg className=\"w-3 h-3 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                            <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                                          </svg>\n                                        </div>\n                                      )}\n                                      <div className=\"font-medium text-sm\">No Package</div>\n                                      <div className=\"text-xs text-slate-600 mt-1\">Build custom event with individual services</div>\n                                      <div className=\"text-sm font-semibold text-green-600 mt-2\">$0.00</div>\n                                    </div>\n                                    \n                                    {(packages as any[]).map((pkg: any) => {\n                                      const isSelected = activeDate.packageId === pkg.id;\n                                      const basePrice = parseFloat(pkg.price);\n                                      const overridePrice = activeDate.pricingOverrides?.packagePrice;\n                                      const displayPrice = overridePrice ?? basePrice;\n                                      const totalPrice = pkg.pricingModel === 'per_person' \n                                        ? displayPrice * (activeDate.guestCount || 1)\n                                        : displayPrice;\n                                      \n                                      return (\n                                        <div\n                                          key={pkg.id}\n                                          className={cn(\n                                            \"p-3 border rounded-lg cursor-pointer transition-all relative\",\n                                            isSelected ? \"border-blue-500 bg-blue-50\" : \"border-slate-200 hover:border-slate-300\"\n                                          )}\n                                          onClick={() => updateDateConfig('packageId', pkg.id)}\n                                        >\n                                          {isSelected && (\n                                            <div className=\"absolute top-2 right-2 w-5 h-5 bg-blue-500 rounded-full flex items-center justify-center\">\n                                              <svg className=\"w-3 h-3 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                                <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                                              </svg>\n                                            </div>\n                                          )}\n                                          \n                                          <div className=\"pr-8\">\n                                            <div className=\"font-medium text-sm\">{pkg.name}</div>\n                                            <div className=\"text-xs text-slate-600 mt-1\">{pkg.description}</div>\n                                            \n                                            {/* Included Services */}\n                                            {pkg.includedServiceIds && pkg.includedServiceIds.length > 0 && (\n                                              <div className=\"mt-2\">\n                                                <div className=\"text-xs text-slate-500 mb-1\">Includes:</div>\n                                                <div className=\"space-y-1\">\n                                                  {pkg.includedServiceIds.map((serviceId: string) => {\n                                                    const service = (services as any[]).find((s: any) => s.id === serviceId);\n                                                    if (!service) return null;\n                                                    \n                                                    return (\n                                                      <div key={serviceId} className=\"flex items-center justify-between\">\n                                                        <span className=\"text-xs bg-green-100 text-green-700 px-2 py-0.5 rounded\">\n                                                          {service.name}\n                                                        </span>\n                                                        {isSelected && service.pricingModel !== 'per_person' && (\n                                                          <div className=\"flex items-center gap-1\">\n                                                            <span className=\"text-xs\">Qty:</span>\n                                                            <Input\n                                                              type=\"number\"\n                                                              min=\"1\"\n                                                              value={activeDate.itemQuantities?.[serviceId] || 1}\n                                                              onChange={(e) => {\n                                                                e.stopPropagation();\n                                                                const newQuantities = {\n                                                                  ...activeDate.itemQuantities,\n                                                                  [serviceId]: Math.max(1, parseInt(e.target.value, 10) || 1)\n                                                                };\n                                                                updateDateConfig('itemQuantities', newQuantities);\n                                                              }}\n                                                              onClick={(e) => e.stopPropagation()}\n                                                              className=\"w-12 h-5 text-xs\"\n                                                            />\n                                                          </div>\n                                                        )}\n                                                      </div>\n                                                    );\n                                                  })}\n                                                </div>\n                                              </div>\n                                            )}\n                                            \n                                            <div className=\"flex items-center justify-between mt-2\">\n                                              <div className=\"text-sm font-semibold text-green-600\">\n                                                ${pkg.pricingModel === 'per_person' \n                                                  ? `${displayPrice.toFixed(2)} per person` \n                                                  : displayPrice.toFixed(2)}\n                                              </div>\n                                              \n                                              {isSelected && (\n                                                <div className=\"flex items-center gap-1\">\n                                                  <span className=\"text-xs\">$</span>\n                                                  <Input\n                                                    type=\"number\"\n                                                    step=\"0.01\"\n                                                    value={overridePrice ?? ''}\n                                                    onChange={(e) => {\n                                                      e.stopPropagation();\n                                                      const value = e.target.value === '' ? undefined : parseFloat(e.target.value);\n                                                      updateDateConfig('pricingOverrides', {\n                                                        ...activeDate.pricingOverrides,\n                                                        packagePrice: value\n                                                      });\n                                                    }}\n                                                    onClick={(e) => e.stopPropagation()}\n                                                    className=\"w-20 h-6 text-xs\"\n                                                    placeholder={pkg.price}\n                                                  />\n                                                </div>\n                                              )}\n                                            </div>\n                                            \n                                            {pkg.pricingModel === 'per_person' && (\n                                              <div className=\"text-xs text-slate-500 mt-1\">\n                                                Total: ${totalPrice.toFixed(2)} for {activeDate.guestCount || 1} guests\n                                              </div>\n                                            )}\n\n                                            {/* Package Taxes & Fees Configuration */}\n                                            {isSelected && (\n                                              <div className=\"mt-3 pt-3 border-t border-slate-200 space-y-2\">\n                                                <div className=\"text-xs font-medium text-slate-700\">Taxes & Fees for this Package</div>\n                                                \n                                                {/* Show inherited taxes/fees from package */}\n                                                {((pkg.appliedTaxes || []).length > 0 || (pkg.appliedFees || []).length > 0) && (\n                                                  <div className=\"text-xs text-blue-600 bg-blue-50 p-2 rounded\">\n                                                    <span className=\"font-medium\">Inherited from package:</span>\n                                                    {(pkg.appliedTaxes || []).map((taxId: string) => {\n                                                      const tax = (taxSettings as any[])?.find((t: any) => t.id === taxId);\n                                                      return tax ? ` ${tax.name} (${tax.value}%)` : '';\n                                                    }).join(', ')}\n                                                    {(pkg.appliedFees || []).map((feeId: string) => {\n                                                      const fee = (taxSettings as any[])?.find((f: any) => f.id === feeId);\n                                                      return fee ? ` ${fee.name} ($${fee.value})` : '';\n                                                    }).join(', ')}\n                                                  </div>\n                                                )}\n\n                                                {/* Additional taxes/fees for package */}\n                                                {taxSettings.filter((item) => item.type === 'tax' && item.isActive).length > 0 && (\n                                                  <div>\n                                                    <div className=\"text-xs text-slate-600 mb-1\">Additional Taxes:</div>\n                                                    <div className=\"flex flex-wrap gap-1\">\n                                                      {taxSettings\n                                                        .filter((item) => item.type === 'tax' && item.isActive)\n                                                        .map((tax) => {\n                                                          const isInherited = (pkg.enabledTaxIds || []).includes(tax.id);\n                                                          const isOverridden = (activeDate.serviceTaxOverrides?.[pkg.id]?.enabledTaxIds || []).includes(tax.id);\n                                                          const isDisabled = (activeDate.serviceTaxOverrides?.[pkg.id]?.disabledInheritedTaxIds || []).includes(tax.id);\n                                                          const isActive = (isInherited && !isDisabled) || isOverridden;\n                                                          \n                                                          return (\n                                                            <label key={tax.id} className=\"flex items-center gap-1 text-xs cursor-pointer\">\n                                                              <Checkbox\n                                                                checked={isActive}\n                                                                onCheckedChange={(checked) => {\n                                                                  const currentOverrides = activeDate.serviceTaxOverrides?.[pkg.id] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n                                                                  \n                                                                  if (isInherited) {\n                                                                    // Toggle inherited tax on/off\n                                                                    const newDisabledTaxIds = checked\n                                                                      ? currentOverrides.disabledInheritedTaxIds?.filter(id => id !== tax.id) || []\n                                                                      : [...(currentOverrides.disabledInheritedTaxIds || []), tax.id];\n                                                                    \n                                                                    updateDateConfig('serviceTaxOverrides', {\n                                                                      ...activeDate.serviceTaxOverrides,\n                                                                      [pkg.id]: {\n                                                                        ...currentOverrides,\n                                                                        disabledInheritedTaxIds: newDisabledTaxIds\n                                                                      }\n                                                                    });\n                                                                  } else {\n                                                                    // Toggle additional tax on/off\n                                                                    const newTaxIds = checked\n                                                                      ? [...currentOverrides.enabledTaxIds, tax.id]\n                                                                      : currentOverrides.enabledTaxIds.filter(id => id !== tax.id);\n                                                                    \n                                                                    updateDateConfig('serviceTaxOverrides', {\n                                                                      ...activeDate.serviceTaxOverrides,\n                                                                      [pkg.id]: {\n                                                                        ...currentOverrides,\n                                                                        enabledTaxIds: newTaxIds\n                                                                      }\n                                                                    });\n                                                                  }\n                                                                }}\n                                                                className=\"w-3 h-3\"\n                                                              />\n                                                              <span className={isInherited ? \"text-blue-600\" : \"text-slate-700\"}>\n                                                                {tax.name} ({tax.value}%)\n                                                                {isInherited && \" ✓\"}\n                                                              </span>\n                                                            </label>\n                                                          );\n                                                        })}\n                                                    </div>\n                                                  </div>\n                                                )}\n\n                                                {/* Additional fees for package */}\n                                                {taxSettings.filter((item: any) => (item.type === 'fee' || item.type === 'service_charge') && item.isActive).length > 0 && (\n                                                  <div>\n                                                    <div className=\"text-xs text-slate-600 mb-1\">Additional Fees:</div>\n                                                    <div className=\"flex flex-wrap gap-1\">\n                                                      {taxSettings\n                                                        .filter((item: any) => (item.type === 'fee' || item.type === 'service_charge') && item.isActive)\n                                                        .map((fee: any) => {\n                                                          const isInherited = (pkg.enabledFeeIds || []).includes(fee.id);\n                                                          const isOverridden = (activeDate.serviceTaxOverrides?.[pkg.id]?.enabledFeeIds || []).includes(fee.id);\n                                                          const isDisabled = (activeDate.serviceTaxOverrides?.[pkg.id]?.disabledInheritedFeeIds || []).includes(fee.id);\n                                                          const isActive = (isInherited && !isDisabled) || isOverridden;\n                                                          \n                                                          return (\n                                                            <label key={fee.id} className=\"flex items-center gap-1 text-xs cursor-pointer\">\n                                                              <Checkbox\n                                                                checked={isActive}\n                                                                onCheckedChange={(checked) => {\n                                                                  const currentOverrides = activeDate.serviceTaxOverrides?.[pkg.id] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n                                                                  \n                                                                  if (isInherited) {\n                                                                    // Toggle inherited fee on/off\n                                                                    const newDisabledFeeIds = checked\n                                                                      ? currentOverrides.disabledInheritedFeeIds?.filter(id => id !== fee.id) || []\n                                                                      : [...(currentOverrides.disabledInheritedFeeIds || []), fee.id];\n                                                                    \n                                                                    updateDateConfig('serviceTaxOverrides', {\n                                                                      ...activeDate.serviceTaxOverrides,\n                                                                      [pkg.id]: {\n                                                                        ...currentOverrides,\n                                                                        disabledInheritedFeeIds: newDisabledFeeIds\n                                                                      }\n                                                                    });\n                                                                  } else {\n                                                                    // Toggle additional fee on/off\n                                                                    const newFeeIds = checked\n                                                                      ? [...currentOverrides.enabledFeeIds, fee.id]\n                                                                      : currentOverrides.enabledFeeIds.filter(id => id !== fee.id);\n                                                                    \n                                                                    updateDateConfig('serviceTaxOverrides', {\n                                                                      ...activeDate.serviceTaxOverrides,\n                                                                      [pkg.id]: {\n                                                                        ...currentOverrides,\n                                                                        enabledFeeIds: newFeeIds\n                                                                      }\n                                                                    });\n                                                                  }\n                                                                }}\n                                                                className=\"w-3 h-3\"\n                                                              />\n                                                              <span className={isInherited ? \"text-blue-600\" : \"text-slate-700\"}>\n                                                                {fee.name} (${fee.value})\n                                                                {isInherited && \" ✓\"}\n                                                              </span>\n                                                            </label>\n                                                          );\n                                                        })}\n                                                    </div>\n                                                  </div>\n                                                )}\n                                              </div>\n                                            )}\n                                          </div>\n                                        </div>\n                                      );\n                                    })}\n                                  </div>\n                                </div>\n                                )}\n                              </div>\n\n                              {/* Services Selection */}\n                              <div>\n                                <div className=\"flex items-center justify-between mb-3\">\n                                  <Label className=\"text-base font-medium\">Additional Services</Label>\n                                  <div className=\"flex items-center gap-2\">\n                                    <Button\n                                      type=\"button\"\n                                      variant=\"outline\"\n                                      size=\"sm\"\n                                      onClick={() => setShowServiceSelection(!showServiceSelection)}\n                                      className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n                                    >\n                                      {showServiceSelection ? \"Hide Services\" : \"Show Services\"}\n                                    </Button>\n                                    {showServiceSelection && (\n                                      <Button\n                                        type=\"button\"\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={() => setShowNewServiceForm(!showNewServiceForm)}\n                                        className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n                                      >\n                                        <Plus className=\"w-4 h-4 mr-1\" />\n                                        {showNewServiceForm ? \"Cancel\" : \"New Service\"}\n                                      </Button>\n                                    )}\n                                  </div>\n                                </div>\n\n                                {/* New Service Form */}\n                                {showServiceSelection && showNewServiceForm && (\n                                  <Card className=\"p-4 mb-4 border-blue-200 bg-blue-50\">\n                                    <h5 className=\"font-medium mb-3\">Create New Service</h5>\n                                    <div className=\"grid grid-cols-2 gap-3\">\n                                      <div>\n                                        <Label className=\"text-xs\">Name *</Label>\n                                        <Input\n                                          value={newService.name}\n                                          onChange={(e) => setNewService(prev => ({ ...prev, name: e.target.value }))}\n                                          placeholder=\"Service name\"\n                                          className=\"mt-1 h-8 text-xs\"\n                                        />\n                                      </div>\n                                      <div>\n                                        <Label className=\"text-xs\">Price *</Label>\n                                        <Input\n                                          type=\"number\"\n                                          step=\"0.01\"\n                                          value={newService.price}\n                                          onChange={(e) => setNewService(prev => ({ ...prev, price: e.target.value }))}\n                                          placeholder=\"0.00\"\n                                          className=\"mt-1 h-8 text-xs\"\n                                        />\n                                      </div>\n                                      <div className=\"col-span-2\">\n                                        <Label className=\"text-xs\">Description</Label>\n                                        <Input\n                                          value={newService.description}\n                                          onChange={(e) => setNewService(prev => ({ ...prev, description: e.target.value }))}\n                                          placeholder=\"Service description\"\n                                          className=\"mt-1 h-8 text-xs\"\n                                        />\n                                      </div>\n                                    </div>\n                                    <div className=\"flex gap-2 mt-3\">\n                                      <Button\n                                        type=\"button\"\n                                        size=\"sm\"\n                                        onClick={handleCreateService}\n                                        disabled={createService.isPending}\n                                        className=\"bg-blue-600 hover:bg-blue-700\"\n                                      >\n                                        {createService.isPending ? \"Creating...\" : \"Create Service\"}\n                                      </Button>\n                                      <Button\n                                        type=\"button\"\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={() => setShowNewServiceForm(false)}\n                                      >\n                                        Cancel\n                                      </Button>\n                                    </div>\n                                  </Card>\n                                )}\n\n                                {showServiceSelection && (\n                                  <div className=\"mt-3 space-y-3 max-h-80 overflow-y-auto\">\n                                    {(services as any[]).map((service: any) => {\n                                    const isSelected = activeDate.selectedServices?.includes(service.id) || false;\n                                    const basePrice = parseFloat(service.price || 0);\n                                    const overridePrice = activeDate.pricingOverrides?.servicePrices?.[service.id];\n                                    const displayPrice = overridePrice ?? basePrice;\n                                    \n                                    return (\n                                      <label key={service.id} className=\"block\">\n                                        <div className={cn(\n                                          \"p-3 border rounded-lg cursor-pointer transition-all\",\n                                          isSelected ? \"border-blue-500 bg-blue-50\" : \"border-slate-200 hover:border-slate-300\"\n                                        )}>\n                                          <div className=\"flex items-start gap-3\">\n                                            <Checkbox \n                                              checked={isSelected}\n                                              onCheckedChange={() => {\n                                                const currentServices = activeDate.selectedServices || [];\n                                                const newServices = isSelected \n                                                  ? currentServices.filter(id => id !== service.id)\n                                                  : [...currentServices, service.id];\n                                                updateDateConfig('selectedServices', newServices);\n                                              }}\n                                            />\n                                            <div className=\"flex-1\">\n                                              <div className=\"font-medium text-sm\">{service.name}</div>\n                                              <div className=\"text-xs text-slate-600 mt-1\">{service.description}</div>\n                                              <div className=\"text-sm font-medium text-green-600 mt-1\">\n                                                ${basePrice.toFixed(2)}\n                                                <span className=\"text-xs text-slate-500 ml-1\">\n                                                  {service.pricingModel === 'per_person' && 'per person'}\n                                                  {service.pricingModel === 'per_hour' && 'per hour'}\n                                                  {service.pricingModel === 'fixed' && 'fixed'}\n                                                </span>\n                                              </div>\n                                            </div>\n                                          </div>\n                                          \n                                          {isSelected && (\n                                            <div className=\"mt-3 pt-3 border-t border-slate-200 space-y-3\">\n                                              {/* Pricing Controls */}\n                                              <div className=\"flex items-center gap-4\">\n                                                {service.pricingModel === 'fixed' && (\n                                                  <div className=\"flex items-center gap-2\">\n                                                    <span className=\"text-sm\">Qty:</span>\n                                                    <Input\n                                                      type=\"number\"\n                                                      min=\"1\"\n                                                      value={activeDate.itemQuantities?.[service.id] || 1}\n                                                      onChange={(e) => {\n                                                        const newQuantities = {\n                                                          ...activeDate.itemQuantities,\n                                                          [service.id]: Math.max(1, parseInt(e.target.value, 10) || 1)\n                                                        };\n                                                        updateDateConfig('itemQuantities', newQuantities);\n                                                      }}\n                                                      className=\"w-16 h-8 text-xs\"\n                                                    />\n                                                  </div>\n                                                )}\n                                                <div className=\"flex items-center gap-1\">\n                                                  <span className=\"text-sm\">Price:</span>\n                                                  <Input\n                                                    type=\"number\"\n                                                    step=\"0.01\"\n                                                    value={activeDate.pricingOverrides?.servicePrices?.[service.id] ?? ''}\n                                                    onChange={(e) => {\n                                                      const value = e.target.value === '' ? undefined : parseFloat(e.target.value);\n                                                      updateDateConfig('pricingOverrides', {\n                                                        ...activeDate.pricingOverrides,\n                                                        servicePrices: {\n                                                          ...activeDate.pricingOverrides?.servicePrices,\n                                                          [service.id]: value\n                                                        }\n                                                      });\n                                                    }}\n                                                    className=\"w-20 h-8 text-xs\"\n                                                    placeholder={service.price}\n                                                  />\n                                                </div>\n                                              </div>\n\n                                              {/* Taxes & Fees Configuration */}\n                                              <div className=\"space-y-2\">\n                                                <div className=\"text-xs font-medium text-slate-700\">Taxes & Fees for this Service</div>\n                                                \n                                                {/* Show inherited taxes/fees from service */}\n                                                {((service.appliedTaxes || []).length > 0 || (service.appliedFees || []).length > 0) && (\n                                                  <div className=\"text-xs text-blue-600 bg-blue-50 p-2 rounded\">\n                                                    <span className=\"font-medium\">Inherited from service:</span>\n                                                    {(service.appliedTaxes || []).map((taxId: string) => {\n                                                      const tax = (taxSettings as any[])?.find((t: any) => t.id === taxId);\n                                                      return tax ? ` ${tax.name} (${tax.value}%)` : '';\n                                                    }).join(', ')}\n                                                    {(service.appliedFees || []).map((feeId: string) => {\n                                                      const fee = (taxSettings as any[])?.find((f: any) => f.id === feeId);\n                                                      return fee ? ` ${fee.name} ($${fee.value})` : '';\n                                                    }).join(', ')}\n                                                  </div>\n                                                )}\n\n                                                {/* Available taxes to override/add */}\n                                                {taxSettings.filter((item) => item.type === 'tax' && item.isActive).length > 0 && (\n                                                  <div>\n                                                    <div className=\"text-xs text-slate-600 mb-1\">Additional Taxes:</div>\n                                                    <div className=\"flex flex-wrap gap-1\">\n                                                      {taxSettings\n                                                        .filter((item) => item.type === 'tax' && item.isActive)\n                                                        .map((tax) => {\n                                                          const isInherited = (service.enabledTaxIds || []).includes(tax.id);\n                                                          const isOverridden = (activeDate.serviceTaxOverrides?.[service.id]?.enabledTaxIds || []).includes(tax.id);\n                                                          const isDisabled = (activeDate.serviceTaxOverrides?.[service.id]?.disabledInheritedTaxIds || []).includes(tax.id);\n                                                          const isActive = (isInherited && !isDisabled) || isOverridden;\n                                                          \n                                                          return (\n                                                            <label key={tax.id} className=\"flex items-center gap-1 text-xs cursor-pointer\">\n                                                              <Checkbox\n                                                                checked={isActive}\n                                                                onCheckedChange={(checked) => {\n                                                                  const currentOverrides = activeDate.serviceTaxOverrides?.[service.id] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n                                                                  \n                                                                  if (isInherited) {\n                                                                    // Toggle inherited tax on/off\n                                                                    const newDisabledTaxIds = checked\n                                                                      ? currentOverrides.disabledInheritedTaxIds?.filter(id => id !== tax.id) || []\n                                                                      : [...(currentOverrides.disabledInheritedTaxIds || []), tax.id];\n                                                                    \n                                                                    updateDateConfig('serviceTaxOverrides', {\n                                                                      ...activeDate.serviceTaxOverrides,\n                                                                      [service.id]: {\n                                                                        ...currentOverrides,\n                                                                        disabledInheritedTaxIds: newDisabledTaxIds\n                                                                      }\n                                                                    });\n                                                                  } else {\n                                                                    // Toggle additional tax on/off\n                                                                    const newTaxIds = checked\n                                                                      ? [...currentOverrides.enabledTaxIds, tax.id]\n                                                                      : currentOverrides.enabledTaxIds.filter(id => id !== tax.id);\n                                                                    \n                                                                    updateDateConfig('serviceTaxOverrides', {\n                                                                      ...activeDate.serviceTaxOverrides,\n                                                                      [service.id]: {\n                                                                        ...currentOverrides,\n                                                                        enabledTaxIds: newTaxIds\n                                                                      }\n                                                                    });\n                                                                  }\n                                                                }}\n                                                                className=\"w-3 h-3\"\n                                                              />\n                                                              <span className={isInherited ? \"text-blue-600\" : \"text-slate-700\"}>\n                                                                {tax.name} ({tax.value}%)\n                                                                {isInherited && \" ✓\"}\n                                                              </span>\n                                                            </label>\n                                                          );\n                                                        })}\n                                                    </div>\n                                                  </div>\n                                                )}\n\n                                                {/* Available fees to override/add */}\n                                                {taxSettings.filter((item: any) => (item.type === 'fee' || item.type === 'service_charge') && item.isActive).length > 0 && (\n                                                  <div>\n                                                    <div className=\"text-xs text-slate-600 mb-1\">Additional Fees:</div>\n                                                    <div className=\"flex flex-wrap gap-1\">\n                                                      {taxSettings\n                                                        .filter((item: any) => (item.type === 'fee' || item.type === 'service_charge') && item.isActive)\n                                                        .map((fee: any) => {\n                                                          const isInherited = (service.enabledFeeIds || []).includes(fee.id);\n                                                          const isOverridden = (activeDate.serviceTaxOverrides?.[service.id]?.enabledFeeIds || []).includes(fee.id);\n                                                          const isDisabled = (activeDate.serviceTaxOverrides?.[service.id]?.disabledInheritedFeeIds || []).includes(fee.id);\n                                                          const isActive = (isInherited && !isDisabled) || isOverridden;\n                                                          \n                                                          return (\n                                                            <label key={fee.id} className=\"flex items-center gap-1 text-xs cursor-pointer\">\n                                                              <Checkbox\n                                                                checked={isActive}\n                                                                onCheckedChange={(checked) => {\n                                                                  const currentOverrides = activeDate.serviceTaxOverrides?.[service.id] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n                                                                  \n                                                                  if (isInherited) {\n                                                                    // Toggle inherited fee on/off\n                                                                    const newDisabledFeeIds = checked\n                                                                      ? currentOverrides.disabledInheritedFeeIds?.filter(id => id !== fee.id) || []\n                                                                      : [...(currentOverrides.disabledInheritedFeeIds || []), fee.id];\n                                                                    \n                                                                    updateDateConfig('serviceTaxOverrides', {\n                                                                      ...activeDate.serviceTaxOverrides,\n                                                                      [service.id]: {\n                                                                        ...currentOverrides,\n                                                                        disabledInheritedFeeIds: newDisabledFeeIds\n                                                                      }\n                                                                    });\n                                                                  } else {\n                                                                    // Toggle additional fee on/off\n                                                                    const newFeeIds = checked\n                                                                      ? [...currentOverrides.enabledFeeIds, fee.id]\n                                                                      : currentOverrides.enabledFeeIds.filter(id => id !== fee.id);\n                                                                    \n                                                                    updateDateConfig('serviceTaxOverrides', {\n                                                                      ...activeDate.serviceTaxOverrides,\n                                                                      [service.id]: {\n                                                                        ...currentOverrides,\n                                                                        enabledFeeIds: newFeeIds\n                                                                      }\n                                                                    });\n                                                                  }\n                                                                }}\n                                                                className=\"w-3 h-3\"\n                                                              />\n                                                              <span className={isInherited ? \"text-blue-600\" : \"text-slate-700\"}>\n                                                                {fee.name} (${fee.value})\n                                                                {isInherited && \" ✓\"}\n                                                              </span>\n                                                            </label>\n                                                          );\n                                                        })}\n                                                    </div>\n                                                  </div>\n                                                )}\n                                              </div>\n                                            </div>\n                                          )}\n                                        </div>\n                                      </label>\n                                      );\n                                    })}\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n\n                            {/* Right Column: Actions & Summary */}\n                            <div className=\"space-y-6\">\n                              {/* Copy Config for Multi-Date Events */}\n                              {selectedDates.length > 1 && (\n                                <Card className=\"p-4 border-blue-200 bg-blue-50\">\n                                  <h5 className=\"font-medium mb-2\">Apply Settings</h5>\n                                  <p className=\"text-sm text-slate-600 mb-3\">\n                                    Apply this date's settings to other dates\n                                  </p>\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => setShowCopyModal(true)}\n                                    className=\"w-full\"\n                                  >\n                                    Apply to Other Dates\n                                  </Button>\n                                </Card>\n                              )}\n\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Step 3: Final Details */}\n              {currentStep === 3 && (\n                <div className=\"space-y-6\">\n                  <h3 className=\"text-lg font-semibold\">Confirm Details</h3>\n\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-8\">\n                    <div className=\"space-y-6\">\n                      <div>\n                        <Label className=\"text-base font-medium flex items-center gap-2\">\n                          Event Name\n                          <span className=\"text-red-500 text-sm\">*</span>\n                        </Label>\n                        <Input\n                          value={eventName}\n                          onChange={(e) => setEventName(e.target.value)}\n                          placeholder=\"e.g., 'Annual Conference 2025'\"\n                          className={cn(\"mt-2\", !eventName.trim() && \"border-red-200 bg-red-50/30\")}\n                        />\n                      </div>\n\n                      <div>\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <Label className=\"text-base font-medium flex items-center gap-2\">\n                            Customer\n                            <span className=\"text-red-500 text-sm\">*</span>\n                          </Label>\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setShowNewCustomerForm(!showNewCustomerForm)}\n                            className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n                            data-testid=\"button-new-customer\"\n                          >\n                            <Plus className=\"w-4 h-4 mr-1\" />\n                            {showNewCustomerForm ? \"Cancel\" : \"New Customer\"}\n                          </Button>\n                        </div>\n                        \n                        {!showNewCustomerForm ? (\n                          <div className=\"space-y-3\">\n                            {/* Company Search */}\n                            <div>\n                              <Label className=\"text-sm font-medium mb-2 block\">Search by Company</Label>\n                              <Input\n                                value={companySearch}\n                                onChange={(e) => setCompanySearch(e.target.value)}\n                                placeholder=\"Type company name to search...\"\n                                className=\"mb-2\"\n                                data-testid=\"input-company-search\"\n                              />\n                              \n                              {companySearch && getFilteredCompanies().length > 0 && (\n                                <div className=\"border rounded-md max-h-48 overflow-y-auto bg-white\">\n                                  {getFilteredCompanies().map((company: any) => {\n                                    const companyEmployees = getCustomersByCompany(company.id);\n                                    return (\n                                      <div key={company.id} className=\"border-b last:border-b-0\">\n                                        <div className=\"p-3 bg-gray-50\">\n                                          <div className=\"flex items-center justify-between\">\n                                            <div>\n                                              <h4 className=\"font-medium text-sm\">{company.name}</h4>\n                                              <p className=\"text-xs text-muted-foreground\">{companyEmployees.length} employees</p>\n                                            </div>\n                                            <Button\n                                              type=\"button\"\n                                              variant=\"outline\"\n                                              size=\"sm\"\n                                              onClick={() => {\n                                                setSelectedCompanyId(company.id);\n                                                setShowManageEmployees(true);\n                                              }}\n                                              data-testid={`button-manage-employees-${company.id}`}\n                                            >\n                                              Manage\n                                            </Button>\n                                          </div>\n                                        </div>\n                                        {companyEmployees.length > 0 && (\n                                          <div className=\"p-2 space-y-1\">\n                                            {companyEmployees.map((employee: any) => (\n                                              <button\n                                                key={employee.id}\n                                                type=\"button\"\n                                                onClick={() => {\n                                                  setSelectedCustomer(employee.id);\n                                                  setCompanySearch(\"\");\n                                                }}\n                                                className=\"w-full text-left p-2 rounded hover:bg-blue-50 border border-transparent hover:border-blue-200\"\n                                                data-testid={`button-select-employee-${employee.id}`}\n                                              >\n                                                <div className=\"flex items-center justify-between\">\n                                                  <div>\n                                                    <p className=\"font-medium text-sm\">{employee.name}</p>\n                                                    <p className=\"text-xs text-muted-foreground\">{employee.email}</p>\n                                                    {employee.jobTitle && (\n                                                      <p className=\"text-xs text-blue-600\">{employee.jobTitle}</p>\n                                                    )}\n                                                  </div>\n                                                  {selectedCustomer === employee.id && (\n                                                    <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Selected</Badge>\n                                                  )}\n                                                </div>\n                                              </button>\n                                            ))}\n                                          </div>\n                                        )}\n                                      </div>\n                                    );\n                                  })}\n                                </div>\n                              )}\n                            </div>\n\n                            {/* Regular Customer Selection */}\n                            <div>\n                              <Label className=\"text-sm font-medium mb-2 block\">Or Select Existing Customer</Label>\n                              <Select value={selectedCustomer} onValueChange={setSelectedCustomer}>\n                                <SelectTrigger className={cn(!selectedCustomer && \"border-red-200 bg-red-50/30\")} data-testid=\"select-customer\">\n                                  <SelectValue placeholder=\"-- Select a Customer --\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  {(customers as any[]).map((customer: any) => (\n                                    <SelectItem key={customer.id} value={customer.id}>\n                                      <div className=\"flex flex-col\">\n                                        <span>{customer.name} - {customer.email}</span>\n                                        {customer.companyId && (\n                                          <span className=\"text-xs text-muted-foreground\">\n                                            {getCompanyById(customer.companyId)?.name} • {customer.jobTitle}\n                                          </span>\n                                        )}\n                                      </div>\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                            </div>\n                          </div>\n                        ) : (\n                          <Card className=\"p-4 border-blue-200 bg-blue-50\">\n                            <div className=\"space-y-4\">\n                              <h4 className=\"font-medium text-sm\">Create New Customer</h4>\n                              \n                              {/* Customer Type Selection */}\n                              <div>\n                                <Label className=\"text-sm font-medium\">Customer Type</Label>\n                                <Select \n                                  value={newCustomer.customerType} \n                                  onValueChange={(value) => setNewCustomer(prev => ({...prev, customerType: value as \"individual\" | \"business\"}))}\n                                >\n                                  <SelectTrigger className=\"mt-1\">\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    <SelectItem value=\"individual\">Individual Customer</SelectItem>\n                                    <SelectItem value=\"business\">Business Customer</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                              </div>\n\n                              <div className=\"grid grid-cols-2 gap-3\">\n                                <div>\n                                  <Label className=\"text-sm flex items-center gap-1\">\n                                    Name\n                                    <span className=\"text-red-500 text-xs\">*</span>\n                                  </Label>\n                                  <Input\n                                    value={newCustomer.name}\n                                    onChange={(e) => setNewCustomer(prev => ({...prev, name: e.target.value}))}\n                                    placeholder=\"Customer name\"\n                                    className={cn(\"mt-1\", !newCustomer.name.trim() && \"border-red-200 bg-red-50/30\")}\n                                    data-testid=\"input-new-customer-name\"\n                                  />\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm flex items-center gap-1\">\n                                    Email\n                                    <span className=\"text-red-500 text-xs\">*</span>\n                                  </Label>\n                                  <Input\n                                    type=\"email\"\n                                    value={newCustomer.email}\n                                    onChange={(e) => setNewCustomer(prev => ({...prev, email: e.target.value}))}\n                                    placeholder=\"customer@example.com\"\n                                    className={cn(\"mt-1\", !newCustomer.email.trim() && \"border-red-200 bg-red-50/30\")}\n                                    data-testid=\"input-new-customer-email\"\n                                  />\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm\">Phone</Label>\n                                  <Input\n                                    value={newCustomer.phone}\n                                    onChange={(e) => setNewCustomer(prev => ({...prev, phone: e.target.value}))}\n                                    placeholder=\"(555) 123-4567\"\n                                    className=\"mt-1\"\n                                    data-testid=\"input-new-customer-phone\"\n                                  />\n                                </div>\n                                \n                                {newCustomer.customerType === \"business\" ? (\n                                  <div>\n                                    <Label className=\"text-sm flex items-center gap-1\">\n                                      Company\n                                      <span className=\"text-red-500 text-xs\">*</span>\n                                    </Label>\n                                    <Select \n                                      value={newCustomer.companyId} \n                                      onValueChange={(value) => setNewCustomer(prev => ({...prev, companyId: value}))}\n                                    >\n                                      <SelectTrigger className={cn(\"mt-1\", !newCustomer.companyId && \"border-red-200 bg-red-50/30\")}>\n                                        <SelectValue placeholder=\"Select company\" />\n                                      </SelectTrigger>\n                                      <SelectContent>\n                                        {(companies as any[]).map((company: any) => (\n                                          <SelectItem key={company.id} value={company.id}>\n                                            {company.name}\n                                          </SelectItem>\n                                        ))}\n                                      </SelectContent>\n                                    </Select>\n                                  </div>\n                                ) : (\n                                  <div>\n                                    <Label className=\"text-sm\">Company</Label>\n                                    <Input\n                                      value={newCustomer.company}\n                                      onChange={(e) => setNewCustomer(prev => ({...prev, company: e.target.value}))}\n                                      placeholder=\"Company name\"\n                                      className=\"mt-1\"\n                                      data-testid=\"input-new-customer-company\"\n                                    />\n                                  </div>\n                                )}\n                                \n                                {/* Additional business customer fields */}\n                                {newCustomer.customerType === \"business\" && (\n                                  <>\n                                    <div>\n                                      <Label className=\"text-sm\">Job Title</Label>\n                                      <Input\n                                        value={newCustomer.jobTitle}\n                                        onChange={(e) => setNewCustomer(prev => ({...prev, jobTitle: e.target.value}))}\n                                        placeholder=\"e.g., Event Manager\"\n                                        className=\"mt-1\"\n                                        data-testid=\"input-new-customer-job-title\"\n                                      />\n                                    </div>\n                                    <div>\n                                      <Label className=\"text-sm\">Department</Label>\n                                      <Input\n                                        value={newCustomer.department}\n                                        onChange={(e) => setNewCustomer(prev => ({...prev, department: e.target.value}))}\n                                        placeholder=\"e.g., Marketing\"\n                                        className=\"mt-1\"\n                                        data-testid=\"input-new-customer-department\"\n                                      />\n                                    </div>\n                                  </>\n                                )}\n                              </div>\n                              <Button\n                                type=\"button\"\n                                onClick={handleCreateCustomer}\n                                disabled={createCustomer.isPending || !newCustomer.name || !newCustomer.email}\n                                className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                              >\n                                {createCustomer.isPending ? \"Creating...\" : \"Create Customer\"}\n                              </Button>\n                            </div>\n                          </Card>\n                        )}\n                      </div>\n\n\n\n\n\n                      <div>\n                        <Label className=\"text-base font-medium\">Applicable Policies</Label>\n                        <div className=\"mt-2 p-3 bg-slate-50 rounded border text-sm text-slate-600\">\n                          Standard venue policies apply. Cancellation and refund terms will be included in the final contract.\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"bg-slate-50 p-6 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <h4 className=\"font-semibold\">Final Summary</h4>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setShowSummaryDetails(true)}\n                          className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n                        >\n                          View Details\n                        </Button>\n                      </div>\n                      <div className=\"space-y-3\">\n                        <div>\n                          <span className=\"text-sm text-slate-600\">Dates</span>\n                          <div className=\"font-medium\">\n                            {selectedDates.map(d => format(d.date, 'MMM d, yyyy')).join(', ')}\n                          </div>\n                        </div>\n                        <div>\n                          <span className=\"text-sm text-slate-600\">Venue</span>\n                          <div className=\"font-medium\">{selectedVenueData?.name}</div>\n                        </div>\n                        <div>\n                          <span className=\"text-sm text-slate-600\">Total Guests</span>\n                          <div className=\"font-medium\">\n                            {selectedDates.reduce((total, date) => total + (date.guestCount || 1), 0)} \n                            {selectedDates.length > 1 && ` (across ${selectedDates.length} dates)`}\n                          </div>\n                        </div>\n                        <div>\n                          <span className=\"text-sm text-slate-600\">Event Configuration</span>\n                          <div className=\"font-medium text-sm\">\n                            {selectedDates.length === 1 \n                              ? \"Single date event\"\n                              : `Multi-date event (${selectedDates.length} dates)`\n                            }\n                          </div>\n                        </div>\n                        <div className=\"border-t pt-3 mt-4\">\n                          {/* Pricing Breakdown */}\n                          <div className=\"space-y-2 mb-3\">\n                            {(() => {\n                              // Calculate subtotal (packages + services without taxes/fees)\n                              let subtotal = 0;\n                              let feesTotal = 0;\n                              let taxesTotal = 0;\n                              \n                              selectedDates.forEach(date => {\n                                // Package price\n                                if (date.packageId) {\n                                  const pkg = (packages as any[])?.find((p: any) => p.id === date.packageId);\n                                  if (pkg) {\n                                    const packagePrice = date.pricingOverrides?.packagePrice ?? parseFloat(pkg.price);\n                                    subtotal += pkg.pricingModel === 'per_person' \n                                      ? packagePrice * (date.guestCount || 1)\n                                      : packagePrice;\n                                  }\n                                }\n                                \n                                // Service prices\n                                (date.selectedServices || []).forEach(serviceId => {\n                                  const service = (services as any[])?.find((s: any) => s.id === serviceId);\n                                  if (service) {\n                                    const quantity = date.itemQuantities?.[serviceId] || 1;\n                                    const overridePrice = date.pricingOverrides?.servicePrices?.[serviceId];\n                                    const price = overridePrice ?? parseFloat(service.price || 0);\n                                    const eventDuration = calculateEventDuration(date.startTime, date.endTime);\n                                    \n                                    if (service.pricingModel === 'per_person') {\n                                      subtotal += price * (date.guestCount || 1);\n                                    } else if (service.pricingModel === 'per_hour') {\n                                      subtotal += price * eventDuration;\n                                    } else {\n                                      subtotal += price * quantity;\n                                    }\n                                  }\n                                });\n                              });\n                              \n                              // Calculate taxes and fees per service/package (not accumulated)\n                              const appliedFees: Array<{name: string, amount: number}> = [];\n                              const appliedTaxes: Array<{name: string, amount: number}> = [];\n                              \n                              // Track individual taxes/fees to show in breakdown\n                              const feeMap = new Map<string, {name: string, amount: number}>();\n                              const taxMap = new Map<string, {name: string, amount: number}>();\n                              \n                              selectedDates.forEach(date => {\n                                const eventDuration = calculateEventDuration(date.startTime, date.endTime);\n                                \n                                // Calculate package taxes and fees if package is selected\n                                if (date.packageId) {\n                                  const pkg = (packages as any[])?.find((p: any) => p.id === date.packageId);\n                                  if (pkg) {\n                                    let packageSubtotal = 0;\n                                    const packagePrice = date.pricingOverrides?.packagePrice ?? parseFloat(pkg.price || 0);\n                                    \n                                    if (pkg.pricingModel === 'per_person') {\n                                      packageSubtotal = packagePrice * (date.guestCount || 1);\n                                    } else if (pkg.pricingModel === 'per_hour') {\n                                      packageSubtotal = packagePrice * eventDuration;\n                                    } else {\n                                      packageSubtotal = packagePrice;\n                                    }\n                                    \n                                    // Apply package fees\n                                    (pkg.enabledFeeIds || []).forEach((feeId: string) => {\n                                      const feeSetting = taxSettings?.find((s) => s.id === feeId && s.isActive);\n                                      if (feeSetting && (feeSetting.type === 'fee' || feeSetting.type === 'service_charge')) {\n                                        let feeAmount = 0;\n                                        if (feeSetting.calculation === 'percentage') {\n                                          feeAmount = (packageSubtotal * parseFloat(feeSetting.value)) / 100;\n                                        } else {\n                                          feeAmount = parseFloat(feeSetting.value);\n                                        }\n                                        \n                                        const existing = feeMap.get(feeId) || {name: feeSetting.name, amount: 0};\n                                        feeMap.set(feeId, {name: feeSetting.name, amount: existing.amount + feeAmount});\n                                        feesTotal += feeAmount;\n                                      }\n                                    });\n                                    \n                                    // Apply package taxes\n                                    (pkg.enabledTaxIds || []).forEach((taxId: string) => {\n                                      const taxSetting = taxSettings?.find((s) => s.id === taxId && s.isActive);\n                                      if (taxSetting) {\n                                        const taxAmount = (packageSubtotal * parseFloat(taxSetting.value)) / 100;\n                                        \n                                        const existing = taxMap.get(taxId) || {name: taxSetting.name, amount: 0};\n                                        taxMap.set(taxId, {name: taxSetting.name, amount: existing.amount + taxAmount});\n                                        taxesTotal += taxAmount;\n                                      }\n                                    });\n                                  }\n                                }\n                                \n                                // Calculate service taxes and fees for each service individually\n                                const includedServiceIds = (() => {\n                                  if (!date.packageId) return [];\n                                  const pkg = (packages as any[])?.find((p: any) => p.id === date.packageId);\n                                  return pkg?.includedServices || [];\n                                })();\n                                \n                                (date.selectedServices || []).forEach(serviceId => {\n                                  if (includedServiceIds.includes(serviceId)) {\n                                    return; // Skip included services\n                                  }\n                                  \n                                  const service = (services as any[])?.find((s: any) => s.id === serviceId);\n                                  if (service) {\n                                    let serviceSubtotal = 0;\n                                    const servicePrice = date.pricingOverrides?.servicePrices?.[serviceId] ?? parseFloat(service.price || 0);\n                                    \n                                    if (service.pricingModel === 'per_person') {\n                                      serviceSubtotal = servicePrice * (date.guestCount || 1);\n                                    } else if (service.pricingModel === 'per_hour') {\n                                      serviceSubtotal = servicePrice * eventDuration;\n                                    } else {\n                                      const quantity = date.itemQuantities?.[serviceId] || 1;\n                                      serviceSubtotal = servicePrice * quantity;\n                                    }\n                                    \n                                    // Determine which fees and taxes apply to this service (including overrides)\n                                    const currentOverrides = date.serviceTaxOverrides?.[serviceId] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n                                    \n                                    // Calculate effective fee IDs (inherited + additional - disabled)\n                                    const inheritedFeeIds = service.enabledFeeIds || [];\n                                    const additionalFeeIds = currentOverrides.enabledFeeIds || [];\n                                    const disabledFeeIds = currentOverrides.disabledInheritedFeeIds || [];\n                                    const effectiveFeeIds = [...inheritedFeeIds.filter((id: string) => !disabledFeeIds.includes(id)), ...additionalFeeIds];\n                                    \n                                    // Calculate effective tax IDs (inherited + additional - disabled)\n                                    const inheritedTaxIds = service.enabledTaxIds || [];\n                                    const additionalTaxIds = currentOverrides.enabledTaxIds || [];\n                                    const disabledTaxIds = currentOverrides.disabledInheritedTaxIds || [];\n                                    const effectiveTaxIds = [...inheritedTaxIds.filter((id: string) => !disabledTaxIds.includes(id)), ...additionalTaxIds];\n                                    \n                                    // Apply service fees\n                                    effectiveFeeIds.forEach((feeId: string) => {\n                                      const feeSetting = taxSettings?.find((s) => s.id === feeId && s.isActive);\n                                      if (feeSetting && (feeSetting.type === 'fee' || feeSetting.type === 'service_charge')) {\n                                        let feeAmount = 0;\n                                        if (feeSetting.calculation === 'percentage') {\n                                          feeAmount = (serviceSubtotal * parseFloat(feeSetting.value)) / 100;\n                                        } else {\n                                          feeAmount = parseFloat(feeSetting.value);\n                                        }\n                                        \n                                        const existing = feeMap.get(feeId) || {name: feeSetting.name, amount: 0};\n                                        feeMap.set(feeId, {name: feeSetting.name, amount: existing.amount + feeAmount});\n                                        feesTotal += feeAmount;\n                                      }\n                                    });\n                                    \n                                    // Apply service taxes (to base service amount + fees if fee is taxable)\n                                    effectiveTaxIds.forEach((taxId: string) => {\n                                      const taxSetting = taxSettings?.find((s) => s.id === taxId && s.isActive);\n                                      if (taxSetting) {\n                                        // Tax on base service amount\n                                        let taxableAmount = serviceSubtotal;\n                                        \n                                        // Add fees to taxable amount if any applied fees are taxable\n                                        effectiveFeeIds.forEach((feeId: string) => {\n                                          const feeSetting = taxSettings?.find((s) => s.id === feeId && s.isActive);\n                                          if (feeSetting && feeSetting.isTaxable && (feeSetting.applicableTaxIds || []).includes(taxId)) {\n                                            let feeAmount = 0;\n                                            if (feeSetting.calculation === 'percentage') {\n                                              feeAmount = (serviceSubtotal * parseFloat(feeSetting.value)) / 100;\n                                            } else {\n                                              feeAmount = parseFloat(feeSetting.value);\n                                            }\n                                            taxableAmount += feeAmount;\n                                          }\n                                        });\n                                        \n                                        const taxAmount = (taxableAmount * parseFloat(taxSetting.value)) / 100;\n                                        \n                                        const existing = taxMap.get(taxId) || {name: taxSetting.name, amount: 0};\n                                        taxMap.set(taxId, {name: taxSetting.name, amount: existing.amount + taxAmount});\n                                        taxesTotal += taxAmount;\n                                      }\n                                    });\n                                  }\n                                });\n                              });\n                              \n                              // Convert maps to arrays for display\n                              appliedFees.push(...Array.from(feeMap.values()));\n                              appliedTaxes.push(...Array.from(taxMap.values()));\n                              \n                              const displayBreakdown = subtotal > 0;\n                              \n                              return displayBreakdown ? (\n                                <>\n                                  <div className=\"flex justify-between text-sm\">\n                                    <span className=\"text-slate-600\">Subtotal (Packages + Services):</span>\n                                    <span className=\"text-green-600 font-medium\">${subtotal.toFixed(2)}</span>\n                                  </div>\n                                  \n                                  {/* Individual Fees */}\n                                  {appliedFees.map((fee, index) => (\n                                    <div key={`fee-${index}`} className=\"flex justify-between text-sm text-blue-600\">\n                                      <span className=\"pl-2\">+ {fee.name}:</span>\n                                      <span>+${fee.amount.toFixed(2)}</span>\n                                    </div>\n                                  ))}\n                                  \n                                  {/* Individual Taxes */}\n                                  {appliedTaxes.map((tax, index) => (\n                                    <div key={`tax-${index}`} className=\"flex justify-between text-sm text-purple-600\">\n                                      <span className=\"pl-2\">+ {tax.name}:</span>\n                                      <span>+${tax.amount.toFixed(2)}</span>\n                                    </div>\n                                  ))}\n                                  \n                                  {(appliedFees.length > 0 || appliedTaxes.length > 0) && (\n                                    <div className=\"border-t pt-2 mt-2\">\n                                      <div className=\"flex justify-between font-semibold text-lg\">\n                                        <span>Grand Total:</span>\n                                        <span className=\"text-blue-700\">${totalPrice.toFixed(2)}</span>\n                                      </div>\n                                    </div>\n                                  )}\n                                  \n                                  {appliedFees.length === 0 && appliedTaxes.length === 0 && (\n                                    <div className=\"border-t pt-2 mt-2\">\n                                      <div className=\"flex justify-between font-semibold text-lg\">\n                                        <span>Total Price:</span>\n                                        <span className=\"text-green-600\">${totalPrice.toFixed(2)}</span>\n                                      </div>\n                                    </div>\n                                  )}\n                                </>\n                              ) : (\n                                <div className=\"flex justify-between font-semibold text-lg\">\n                                  <span>Total Price:</span>\n                                  <span>${totalPrice.toFixed(2)}</span>\n                                </div>\n                              );\n                            })()}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n\n            </div>\n          </div>\n\n          {/* Fixed Footer */}\n          <div className=\"border-t border-slate-200 p-3 sm:p-6 bg-white flex-shrink-0 mt-auto\">\n            <div className=\"flex flex-col lg:flex-row gap-4 justify-between items-start lg:items-center\">\n              {/* Left: Venue Selection & Summary */}\n              <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center\">\n                {currentStep === 1 && Array.isArray(venues) && venues.length > 1 && (\n                  <div className=\"flex items-center gap-3\">\n                    <Label className=\"text-sm font-medium text-slate-700 whitespace-nowrap flex items-center gap-1\">\n                      <MapPin className=\"w-4 h-4\" />\n                      Venue*\n                    </Label>\n                    <Select value={selectedVenue} onValueChange={setSelectedVenue}>\n                      <SelectTrigger className={cn(\"w-64\", !selectedVenue && \"border-red-200 bg-red-50/30\")}>\n                        <SelectValue placeholder=\"Select venue\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {(venues as any[]).map((venue: any) => (\n                          <SelectItem key={venue.id} value={venue.id}>\n                            {venue.name} ({venue.spaces?.length || 0} spaces)\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                )}\n                \n\n                \n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-sm text-slate-600\">Grand Total</span>\n                  <span className=\"text-lg font-semibold\">${totalPrice.toFixed(2)}</span>\n                </div>\n              </div>\n              \n              {/* Right: Action Buttons */}\n              <div className=\"flex flex-col sm:flex-row gap-2 sm:gap-3 w-full sm:w-auto\">\n                {currentStep === 3 && (\n                  <Button variant=\"outline\" onClick={prevStep}>\n                    Back\n                  </Button>\n                )}\n                {currentStep < 3 ? (\n                  <Button \n                    onClick={nextStep}\n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                    disabled={currentStep === 1 && (selectedDates.length === 0 || (Array.isArray(venues) && venues.length > 1 && !selectedVenue))}\n                  >\n                    {currentStep === 1 ? `Configure ${selectedDates.length} Event Date${selectedDates.length !== 1 ? 's' : ''}` : 'Next'}\n                  </Button>\n                ) : (\n                  <div className=\"flex gap-2\">\n                    <Button \n                      variant=\"outline\"\n                      onClick={() => handleSubmit('proposal')}\n                      disabled={!eventName || !selectedCustomer || selectedDates.length === 0 || createBooking.isPending}\n                      className=\"border-blue-500 text-blue-600 hover:bg-blue-50\"\n                    >\n                      <FileText className=\"h-4 w-4 mr-2\" />\n                      {createBooking.isPending ? 'Sending...' : 'Send as Proposal'}\n                    </Button>\n                    <Button \n                      onClick={() => handleSubmit('inquiry')}\n                      className=\"bg-blue-600 hover:bg-blue-700\"\n                      disabled={createBooking.isPending}\n                    >\n                      <Save className=\"h-4 w-4 mr-2\" />\n                      {createBooking.isPending ? 'Creating...' : 'Save Event'}\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n          </div>\n        </div>\n      </DialogContent>\n\n      {/* Apply Settings Modal */}\n      <Dialog open={showCopyModal} onOpenChange={setShowCopyModal}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Apply Settings</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-slate-600\">\n              Apply the current date's settings to selected dates below:\n            </p>\n            \n            <div className=\"space-y-2\">\n              {selectedDates.map((date, index) => {\n                if (index === activeTabIndex) return null; // Don't show current date\n                \n                const checkboxIndex = selectedDates\n                  .map((_, i) => i)\n                  .filter(i => i !== activeTabIndex)\n                  .indexOf(index);\n                \n                return (\n                  <label key={index} className=\"flex items-center gap-3 p-3 border rounded-lg hover:bg-slate-50 cursor-pointer\">\n                    <Checkbox \n                      checked={selectedCopyIndices.includes(index)}\n                      onCheckedChange={(checked) => {\n                        if (checked) {\n                          setSelectedCopyIndices(prev => [...prev, index]);\n                        } else {\n                          setSelectedCopyIndices(prev => prev.filter(i => i !== index));\n                        }\n                      }}\n                    />\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-sm\">{format(date.date, 'EEEE, MMMM d, yyyy')}</div>\n                      <div className=\"text-xs text-slate-600\">{date.startTime} - {date.endTime}</div>\n                    </div>\n                  </label>\n                );\n              })}\n            </div>\n            \n            <div className=\"flex gap-2 pt-4\">\n              <Button\n                onClick={() => {\n                  handleCopyConfig(selectedCopyIndices);\n                  setSelectedCopyIndices([]);\n                }}\n                disabled={selectedCopyIndices.length === 0}\n                className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n              >\n                Apply Settings ({selectedCopyIndices.length})\n              </Button>\n              <Button variant=\"outline\" onClick={() => {\n                setShowCopyModal(false);\n                setSelectedCopyIndices([]);\n              }}>\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* New Service Creation Modal */}\n      <Dialog open={showNewServiceForm} onOpenChange={setShowNewServiceForm}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Create New Service</DialogTitle>\n            <DialogDescription>\n              Add a new service that will be available as an add-on option.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"service-name\">Service Name *</Label>\n              <Input\n                id=\"service-name\"\n                value={newService.name}\n                onChange={(e) => setNewService(prev => ({ ...prev, name: e.target.value }))}\n                placeholder=\"e.g., Photography Package\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"service-description\">Description</Label>\n              <Input\n                id=\"service-description\"\n                value={newService.description}\n                onChange={(e) => setNewService(prev => ({ ...prev, description: e.target.value }))}\n                placeholder=\"Brief description of the service\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"service-category\">Category</Label>\n                <Select \n                  value={newService.category} \n                  onValueChange={(value) => setNewService(prev => ({ ...prev, category: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"additional\">Additional Services</SelectItem>\n                    <SelectItem value=\"catering\">Catering</SelectItem>\n                    <SelectItem value=\"entertainment\">Entertainment</SelectItem>\n                    <SelectItem value=\"decor\">Decor</SelectItem>\n                    <SelectItem value=\"photography\">Photography</SelectItem>\n                    <SelectItem value=\"equipment\">Equipment</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"service-pricing\">Pricing Model</Label>\n                <Select \n                  value={newService.pricingModel} \n                  onValueChange={(value) => setNewService(prev => ({ ...prev, pricingModel: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"fixed\">Fixed Price</SelectItem>\n                    <SelectItem value=\"per_person\">Per Person</SelectItem>\n                    <SelectItem value=\"per_hour\">Per Hour</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"service-price\">Price * ($)</Label>\n              <Input\n                id=\"service-price\"\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                value={newService.price}\n                onChange={(e) => setNewService(prev => ({ ...prev, price: e.target.value }))}\n                placeholder=\"0.00\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"flex justify-end gap-3 mt-6\">\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setShowNewServiceForm(false);\n                setNewService({ name: \"\", description: \"\", category: \"additional\", price: \"\", pricingModel: \"fixed\" });\n              }}\n            >\n              Cancel\n            </Button>\n            <Button \n              onClick={handleCreateService}\n              disabled={createService.isPending}\n            >\n              {createService.isPending ? 'Creating...' : 'Create Service'}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Voice Booking Panel Modal */}\n      <Dialog open={showVoicePanel} onOpenChange={setShowVoicePanel}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Voice Booking Assistant</DialogTitle>\n            <DialogDescription>\n              Use voice commands to create and populate booking forms. Perfect for capturing customer calls.\n            </DialogDescription>\n          </DialogHeader>\n          <VoiceBookingPanel \n            onBookingDataExtracted={handleVoiceDataExtracted}\n            isCallMode={true}\n          />\n        </DialogContent>\n      </Dialog>\n\n      {/* Summary Details Modal */}\n      <Dialog open={showSummaryDetails} onOpenChange={setShowSummaryDetails}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Event Details Summary</DialogTitle>\n            <DialogDescription>\n              Complete breakdown of all selected packages, services, and pricing for your event.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-6\">\n            {selectedDates.map((date, index) => {\n              const selectedPackage = date.packageId ? (packages as any[])?.find((p: any) => p.id === date.packageId) : null;\n              const selectedServicesList = (date.selectedServices || []).map(serviceId => \n                (services as any[])?.find((s: any) => s.id === serviceId)\n              ).filter(Boolean);\n              const dateTotal = calculateDateTotal(date);\n              \n              return (\n                <div key={index} className=\"border rounded-lg p-4 bg-white\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h5 className=\"font-semibold text-lg\">\n                      {format(date.date, 'EEEE, MMMM d, yyyy')}\n                    </h5>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm text-slate-600\">Date Total</div>\n                      <div className=\"font-semibold text-lg\">${dateTotal.toFixed(2)}</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    {/* Event Details */}\n                    <div>\n                      <h6 className=\"font-medium mb-3\">Event Details</h6>\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-slate-600\">Time:</span>\n                          <span>{date.startTime} - {date.endTime}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-slate-600\">Guests:</span>\n                          <span>{date.guestCount || 1}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-slate-600\">Space:</span>\n                          <span>\n                            {date.spaceId \n                              ? (venues as any[])?.find((v: any) => v.id === selectedVenue)?.spaces?.find((s: any) => s.id === date.spaceId)?.name || \"Not specified\"\n                              : \"Not specified\"\n                            }\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Package Information */}\n                    <div>\n                      <h6 className=\"font-medium mb-3\">Package & Pricing</h6>\n                      {selectedPackage ? (\n                        <div className=\"space-y-3\">\n                          <div className=\"p-3 bg-blue-50 rounded border border-blue-200\">\n                            <div className=\"font-medium text-sm\">{selectedPackage.name}</div>\n                            <div className=\"text-xs text-slate-600 mt-1\">{selectedPackage.description}</div>\n                            <div className=\"flex justify-between items-center mt-2\">\n                              <span className=\"text-xs text-slate-600\">Package Price:</span>\n                              <span className=\"text-sm font-medium\">\n                                ${(date.pricingOverrides?.packagePrice ?? parseFloat(selectedPackage.price)).toFixed(2)}\n                                {selectedPackage.pricingModel === 'per_person' && ` x ${date.guestCount || 1}`}\n                              </span>\n                            </div>\n                          </div>\n                          \n                          {/* Included Services */}\n                          {selectedPackage.includedServiceIds && selectedPackage.includedServiceIds.length > 0 && (\n                            <div>\n                              <div className=\"text-xs text-slate-600 mb-2\">Included Services:</div>\n                              <div className=\"space-y-1\">\n                                {selectedPackage.includedServiceIds.map((serviceId: string) => {\n                                  const service = (services as any[])?.find((s: any) => s.id === serviceId);\n                                  const quantity = date.itemQuantities?.[serviceId] || 1;\n                                  return service ? (\n                                    <div key={serviceId} className=\"flex justify-between text-xs\">\n                                      <span className=\"text-green-700\">{service.name}</span>\n                                      <span className=\"text-slate-600\">\n                                        {service.pricingModel !== 'per_person' && quantity > 1 ? `Qty: ${quantity}` : 'Included'}\n                                      </span>\n                                    </div>\n                                  ) : null;\n                                })}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      ) : (\n                        <div className=\"text-sm text-slate-500 italic\">No package selected</div>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {/* Additional Services */}\n                  {selectedServicesList.length > 0 && (\n                    <div className=\"mt-4 pt-4 border-t\">\n                      <h6 className=\"font-medium mb-3\">Additional Services</h6>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                        {selectedServicesList.map((service: any) => {\n                          const quantity = date.itemQuantities?.[service.id] || 1;\n                          const overridePrice = date.pricingOverrides?.servicePrices?.[service.id];\n                          const price = overridePrice ?? parseFloat(service.price || 0);\n                          const eventDuration = calculateEventDuration(date.startTime, date.endTime);\n                          const totalPrice = service.pricingModel === 'per_person' \n                            ? price * (date.guestCount || 1)\n                            : service.pricingModel === 'per_hour'\n                            ? price * eventDuration\n                            : price * quantity;\n                          \n                          return (\n                            <div key={service.id} className=\"p-3 bg-slate-50 rounded border\">\n                              <div className=\"font-medium text-sm\">{service.name}</div>\n                              <div className=\"text-xs text-slate-600 mt-1\">{service.description}</div>\n                              <div className=\"flex justify-between items-center mt-2\">\n                                <span className=\"text-xs text-slate-600\">\n                                  {service.pricingModel === 'per_person' \n                                    ? `$${price.toFixed(2)} x ${date.guestCount || 1} guests`\n                                    : service.pricingModel === 'per_hour'\n                                    ? `$${price.toFixed(2)} x ${eventDuration.toFixed(1)} hours`\n                                    : quantity > 1 \n                                      ? `$${price.toFixed(2)} x ${quantity}`\n                                      : `$${price.toFixed(2)}`\n                                  }\n                                </span>\n                                <span className=\"text-sm font-medium\">${totalPrice.toFixed(2)}</span>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {/* Tax and Fee Breakdown */}\n                  {(() => {\n                    // Calculate breakdown for this specific date\n                    let subtotal = 0;\n                    const feeBreakdown: Array<{name: string, amount: number, description: string}> = [];\n                    const taxBreakdown: Array<{name: string, amount: number, description: string}> = [];\n                    \n                    const eventDuration = calculateEventDuration(date.startTime, date.endTime);\n                    \n                    // Package subtotal\n                    if (date.packageId) {\n                      const pkg = (packages as any[])?.find((p: any) => p.id === date.packageId);\n                      if (pkg) {\n                        const packagePrice = date.pricingOverrides?.packagePrice ?? parseFloat(pkg.price || 0);\n                        if (pkg.pricingModel === 'per_person') {\n                          subtotal += packagePrice * (date.guestCount || 1);\n                        } else if (pkg.pricingModel === 'per_hour') {\n                          subtotal += packagePrice * eventDuration;\n                        } else {\n                          subtotal += packagePrice;\n                        }\n                      }\n                    }\n                    \n                    // Service subtotals\n                    const includedServiceIds = (() => {\n                      if (!date.packageId) return [];\n                      const pkg = (packages as any[])?.find((p: any) => p.id === date.packageId);\n                      return pkg?.includedServices || [];\n                    })();\n                    \n                    (date.selectedServices || []).forEach(serviceId => {\n                      if (includedServiceIds.includes(serviceId)) return;\n                      \n                      const service = (services as any[])?.find((s: any) => s.id === serviceId);\n                      if (service) {\n                        const servicePrice = date.pricingOverrides?.servicePrices?.[serviceId] ?? parseFloat(service.price || 0);\n                        let serviceSubtotal = 0;\n                        \n                        if (service.pricingModel === 'per_person') {\n                          serviceSubtotal = servicePrice * (date.guestCount || 1);\n                        } else if (service.pricingModel === 'per_hour') {\n                          serviceSubtotal = servicePrice * eventDuration;\n                        } else {\n                          const quantity = date.itemQuantities?.[serviceId] || 1;\n                          serviceSubtotal = servicePrice * quantity;\n                        }\n                        \n                        subtotal += serviceSubtotal;\n                        \n                        // Get effective tax/fee IDs for this service\n                        const currentOverrides = date.serviceTaxOverrides?.[serviceId] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n                        \n                        const inheritedFeeIds = service.enabledFeeIds || [];\n                        const additionalFeeIds = currentOverrides.enabledFeeIds || [];\n                        const disabledFeeIds = currentOverrides.disabledInheritedFeeIds || [];\n                        const effectiveFeeIds = [...inheritedFeeIds.filter((id: string) => !disabledFeeIds.includes(id)), ...additionalFeeIds];\n                        \n                        const inheritedTaxIds = service.enabledTaxIds || [];\n                        const additionalTaxIds = currentOverrides.enabledTaxIds || [];\n                        const disabledTaxIds = currentOverrides.disabledInheritedTaxIds || [];\n                        const effectiveTaxIds = [...inheritedTaxIds.filter((id: string) => !disabledTaxIds.includes(id)), ...additionalTaxIds];\n                        \n                        // Calculate fees for this service\n                        effectiveFeeIds.forEach((feeId: string) => {\n                          const feeSetting = taxSettings?.find((s) => s.id === feeId && s.isActive);\n                          if (feeSetting && (feeSetting.type === 'fee' || feeSetting.type === 'service_charge')) {\n                            let feeAmount = 0;\n                            if (feeSetting.calculation === 'percentage') {\n                              feeAmount = (serviceSubtotal * parseFloat(feeSetting.value)) / 100;\n                            } else {\n                              feeAmount = parseFloat(feeSetting.value);\n                            }\n                            \n                            const existing = feeBreakdown.find(f => f.name === feeSetting.name);\n                            if (existing) {\n                              existing.amount += feeAmount;\n                              existing.description += `, ${service.name}`;\n                            } else {\n                              feeBreakdown.push({\n                                name: feeSetting.name,\n                                amount: feeAmount,\n                                description: `Applied to ${service.name}`\n                              });\n                            }\n                          }\n                        });\n                        \n                        // Calculate taxes for this service\n                        effectiveTaxIds.forEach((taxId: string) => {\n                          const taxSetting = taxSettings?.find((s) => s.id === taxId && s.isActive);\n                          if (taxSetting) {\n                            let taxableAmount = serviceSubtotal;\n                            \n                            // Add fees to taxable amount if any applied fees are taxable\n                            effectiveFeeIds.forEach((feeId: string) => {\n                              const feeSetting = taxSettings?.find((s) => s.id === feeId && s.isActive);\n                              if (feeSetting && feeSetting.isTaxable && (feeSetting.applicableTaxIds || []).includes(taxId)) {\n                                let feeAmount = 0;\n                                if (feeSetting.calculation === 'percentage') {\n                                  feeAmount = (serviceSubtotal * parseFloat(feeSetting.value)) / 100;\n                                } else {\n                                  feeAmount = parseFloat(feeSetting.value);\n                                }\n                                taxableAmount += feeAmount;\n                              }\n                            });\n                            \n                            const taxAmount = (taxableAmount * parseFloat(taxSetting.value)) / 100;\n                            \n                            const existing = taxBreakdown.find(t => t.name === taxSetting.name);\n                            if (existing) {\n                              existing.amount += taxAmount;\n                              existing.description += `, ${service.name}`;\n                            } else {\n                              taxBreakdown.push({\n                                name: taxSetting.name,\n                                amount: taxAmount,\n                                description: `Applied to ${service.name}${taxableAmount > serviceSubtotal ? ' (incl. fees)' : ''}`\n                              });\n                            }\n                          }\n                        });\n                      }\n                    });\n                    \n                    // Only show if there are fees or taxes\n                    if (feeBreakdown.length > 0 || taxBreakdown.length > 0) {\n                      return (\n                        <div className=\"mt-4 pt-4 border-t\">\n                          <h6 className=\"font-medium mb-3\">Tax & Fee Breakdown</h6>\n                          <div className=\"space-y-3\">\n                            <div className=\"flex justify-between text-sm\">\n                              <span className=\"text-slate-600\">Subtotal:</span>\n                              <span className=\"font-medium\">${subtotal.toFixed(2)}</span>\n                            </div>\n                            \n                            {feeBreakdown.map((fee, idx) => (\n                              <div key={`fee-${idx}`} className=\"space-y-1\">\n                                <div className=\"flex justify-between text-sm\">\n                                  <span className=\"text-slate-600\">{fee.name}:</span>\n                                  <span>${fee.amount.toFixed(2)}</span>\n                                </div>\n                                <div className=\"text-xs text-slate-500 ml-2\">{fee.description}</div>\n                              </div>\n                            ))}\n                            \n                            {taxBreakdown.map((tax, idx) => (\n                              <div key={`tax-${idx}`} className=\"space-y-1\">\n                                <div className=\"flex justify-between text-sm\">\n                                  <span className=\"text-slate-600\">{tax.name}:</span>\n                                  <span>${tax.amount.toFixed(2)}</span>\n                                </div>\n                                <div className=\"text-xs text-slate-500 ml-2\">{tax.description}</div>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      );\n                    }\n                    return null;\n                  })()}\n                </div>\n              );\n            })}\n            \n            {/* Grand Total */}\n            <div className=\"border-t pt-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-lg font-semibold\">Grand Total</span>\n                <span className=\"text-xl font-bold text-blue-600\">${totalPrice.toFixed(2)}</span>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-end mt-6\">\n            <Button variant=\"outline\" onClick={() => setShowSummaryDetails(false)}>\n              Close\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Proposal Creation Modal */}\n      {showCreateProposal && (\n        <ProposalCreationModal\n          open={showCreateProposal}\n          onOpenChange={setShowCreateProposal}\n          eventData={{\n            eventName,\n            customerId: selectedCustomer,\n            eventDates: selectedDates.map(d => ({\n              date: d.date,\n              startTime: d.startTime,\n              endTime: d.endTime,\n              venue: selectedVenueData?.name || \"\",\n              space: d.spaceId ? (venues as any[])?.find((v: any) => v.id === selectedVenue)?.spaces?.find((s: any) => s.id === d.spaceId)?.name || \"\" : \"\",\n              guestCount: d.guestCount || 1,\n              selectedPackage: d.packageId ? (packages as any[])?.find((p: any) => p.id === d.packageId) : null,\n              selectedServices: d.selectedServices || [],\n              totalAmount: calculateDateTotal(d)\n            })),\n            totalAmount: totalPrice,\n            packageItems: selectedDates.map(d => d.packageId ? (packages as any[])?.find((p: any) => p.id === d.packageId) : null).filter(Boolean),\n            serviceItems: selectedDates.flatMap(d => (d.selectedServices || []).map(serviceId => (services as any[])?.find((s: any) => s.id === serviceId))).filter(Boolean)\n          }}\n        />\n      )}\n\n      {/* Proposal Email Modal */}\n      {showProposalEmail && selectedCustomer && (\n        <ProposalEmailModal\n          open={showProposalEmail}\n          onOpenChange={setShowProposalEmail}\n          eventData={{\n            eventName,\n            customerId: selectedCustomer,\n            customerEmail: (customers as any[])?.find((c: any) => c.id === selectedCustomer)?.email || \"\",\n            customerName: (customers as any[])?.find((c: any) => c.id === selectedCustomer)?.name || \"\",\n            totalAmount: totalPrice,\n            eventDates: selectedDates.map(d => ({\n              date: d.date,\n              startTime: d.startTime,\n              endTime: d.endTime,\n              venue: selectedVenueData?.name || \"\",\n              space: d.spaceId ? (venues as any[])?.find((v: any) => v.id === selectedVenue)?.spaces?.find((s: any) => s.id === d.spaceId)?.name || \"\" : \"\",\n              guestCount: d.guestCount || 1\n            }))\n          }}\n          onProposalSent={async (proposalId: string) => {\n            console.log('Proposal sent with ID:', proposalId);\n            \n            // Create the event with proposal_shared status (pending)\n            if (selectedDates.length === 1) {\n              // Single event - use regular booking endpoint\n              const firstDate = selectedDates[0];\n              const bookingData = {\n                eventName,\n                eventType: \"corporate\",\n                eventDate: firstDate.date,\n                startTime: convertTimeToHours(firstDate.startTime),\n                endTime: convertTimeToHours(firstDate.endTime),\n                guestCount: firstDate.guestCount || 1,\n                status: 'pending', // This displays as \"Proposal Shared\"\n                customerId: selectedCustomer,\n                venueId: selectedVenue,\n                spaceId: firstDate.spaceId,\n                setupStyle: firstDate.setupStyle || null,\n                packageId: firstDate.packageId || null,\n                selectedServices: firstDate.selectedServices?.length ? firstDate.selectedServices : null,\n                pricingModel: selectedPackageData?.pricingModel || \"fixed\",\n                itemQuantities: firstDate.itemQuantities || {},\n                pricingOverrides: firstDate.pricingOverrides || null,\n                serviceTaxOverrides: firstDate.serviceTaxOverrides || null,\n                totalAmount: totalPrice.toString(),\n                notes: `Package: ${selectedPackageData?.name || 'None'}, Services: ${firstDate.selectedServices?.length || 0} selected`,\n                proposalStatus: 'sent',\n                proposalSentAt: new Date().toISOString(),\n                proposalId: proposalId // Link the proposal to the booking\n              };\n\n              createBooking.mutate(bookingData);\n            } else {\n              // Multiple events - create contract with multiple bookings  \n              const contractData = {\n                customerId: selectedCustomer,\n                contractName: eventName,\n                description: `Multi-date event with ${selectedDates.length} dates`,\n                status: 'pending',\n                proposalId: proposalId // CRITICAL: Pass proposalId to link with contract\n              };\n\n              const bookingsData = selectedDates.map((date, index) => {\n                const datePrice = calculateDateTotal(date);\n\n                return {\n                  eventName: `${eventName} - Day ${index + 1}`,\n                  eventType: \"corporate\",\n                  eventDate: date.date,\n                  startTime: convertTimeToHours(date.startTime),\n                  endTime: convertTimeToHours(date.endTime),\n                  guestCount: date.guestCount || 1,\n                  status: 'pending', // This displays as \"Proposal Shared\"\n                  customerId: selectedCustomer,\n                  venueId: selectedVenue,\n                  spaceId: date.spaceId,\n                  setupStyle: date.setupStyle || null,\n                  packageId: date.packageId || null,\n                  selectedServices: date.selectedServices?.length ? date.selectedServices : null,\n                  pricingModel: selectedPackageData?.pricingModel || \"fixed\",\n                  itemQuantities: date.itemQuantities || {},\n                  pricingOverrides: date.pricingOverrides || null,\n                  serviceTaxOverrides: date.serviceTaxOverrides || null,\n                  totalAmount: datePrice.toString(),\n                  notes: `Package: ${selectedPackageData?.name || 'None'}, Services: ${date.selectedServices?.length || 0} selected`,\n                  proposalStatus: 'sent',\n                  proposalSentAt: new Date().toISOString()\n                };\n              });\n\n              console.log('Creating contract with proposalId:', proposalId);\n              createContract.mutate({ contractData, bookingsData });\n            }\n            \n            // Close both modals and refresh data\n            setShowProposalEmail(false);\n            onOpenChange(false);\n            // Reset form state\n            setEventName(\"\");\n            setSelectedCustomer(\"\");\n            setSelectedDates([]);\n            setSelectedVenue(\"\");\n            setCurrentStep(1);\n            setActiveTabIndex(0);\n          }}\n        />\n      )}\n\n      {/* Manage Employees Modal */}\n      <Dialog open={showManageEmployees} onOpenChange={setShowManageEmployees}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Manage Employees</DialogTitle>\n            <DialogDescription>\n              Add a new employee for {getCompanyById(selectedCompanyId)?.name}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 gap-3\">\n              <div>\n                <Label className=\"text-sm flex items-center gap-1\">\n                  Employee Name\n                  <span className=\"text-red-500 text-xs\">*</span>\n                </Label>\n                <Input\n                  value={newCustomer.name}\n                  onChange={(e) => setNewCustomer(prev => ({...prev, name: e.target.value}))}\n                  placeholder=\"Employee full name\"\n                  className={cn(\"mt-1\", !newCustomer.name.trim() && \"border-red-200 bg-red-50/30\")}\n                  data-testid=\"input-manage-employee-name\"\n                />\n              </div>\n              <div>\n                <Label className=\"text-sm flex items-center gap-1\">\n                  Email\n                  <span className=\"text-red-500 text-xs\">*</span>\n                </Label>\n                <Input\n                  type=\"email\"\n                  value={newCustomer.email}\n                  onChange={(e) => setNewCustomer(prev => ({...prev, email: e.target.value}))}\n                  placeholder=\"employee@company.com\"\n                  className={cn(\"mt-1\", !newCustomer.email.trim() && \"border-red-200 bg-red-50/30\")}\n                  data-testid=\"input-manage-employee-email\"\n                />\n              </div>\n              <div>\n                <Label className=\"text-sm\">Phone</Label>\n                <Input\n                  value={newCustomer.phone}\n                  onChange={(e) => setNewCustomer(prev => ({...prev, phone: e.target.value}))}\n                  placeholder=\"(555) 123-4567\"\n                  className=\"mt-1\"\n                  data-testid=\"input-manage-employee-phone\"\n                />\n              </div>\n              <div>\n                <Label className=\"text-sm\">Job Title</Label>\n                <Input\n                  value={newCustomer.jobTitle}\n                  onChange={(e) => setNewCustomer(prev => ({...prev, jobTitle: e.target.value}))}\n                  placeholder=\"e.g., Event Manager\"\n                  className=\"mt-1\"\n                  data-testid=\"input-manage-employee-job-title\"\n                />\n              </div>\n              <div>\n                <Label className=\"text-sm\">Department</Label>\n                <Input\n                  value={newCustomer.department}\n                  onChange={(e) => setNewCustomer(prev => ({...prev, department: e.target.value}))}\n                  placeholder=\"e.g., Marketing\"\n                  className=\"mt-1\"\n                  data-testid=\"input-manage-employee-department\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex gap-2 pt-4\">\n              <Button\n                onClick={() => {\n                  if (!newCustomer.name || !newCustomer.email) {\n                    toast({\n                      title: \"Required fields missing\",\n                      description: \"Please provide employee name and email\",\n                      variant: \"destructive\"\n                    });\n                    return;\n                  }\n                  \n                  const customerData = {\n                    name: newCustomer.name,\n                    email: newCustomer.email,\n                    phone: newCustomer.phone,\n                    customerType: \"business\",\n                    companyId: selectedCompanyId,\n                    jobTitle: newCustomer.jobTitle,\n                    department: newCustomer.department\n                  };\n                  \n                  createCustomer.mutate(customerData);\n                }}\n                disabled={createCustomer.isPending || !newCustomer.name || !newCustomer.email}\n                className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n                data-testid=\"button-add-employee\"\n              >\n                {createCustomer.isPending ? \"Adding...\" : \"Add Employee\"}\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setShowManageEmployees(false);\n                  setNewCustomer({ \n                    name: \"\", \n                    email: \"\", \n                    phone: \"\", \n                    company: \"\",\n                    customerType: \"individual\",\n                    companyId: \"\",\n                    jobTitle: \"\",\n                    department: \"\"\n                  });\n                }}\n                data-testid=\"button-cancel-manage-employee\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </Dialog>\n  );\n}","size_bytes":199131},"client/src/components/forms/proposal-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertProposalSchema } from \"@shared/schema\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useFormattedCurrency } from \"@/lib/currency\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\n\ninterface ProposalFormProps {\n  onSuccess?: () => void;\n}\n\nexport function ProposalForm({ onSuccess }: ProposalFormProps) {\n  const { toast } = useToast();\n  const { formatAmount } = useFormattedCurrency();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  const { data: customers } = useQuery({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const { data: bookings } = useQuery({\n    queryKey: [\"/api/bookings\"],\n  });\n\n  const form = useForm({\n    resolver: zodResolver(insertProposalSchema.omit({ createdAt: true, sentAt: true, viewedAt: true })),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n      customerId: \"\",\n      bookingId: \"\",\n      totalAmount: \"\",\n      status: \"draft\",\n      validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now\n    }\n  });\n\n  const generateAIProposal = async () => {\n    try {\n      setIsGenerating(true);\n      \n      const customerId = form.getValues(\"customerId\");\n      const bookingId = form.getValues(\"bookingId\");\n      \n      if (!customerId) {\n        toast({\n          title: \"Error\",\n          description: \"Please select a customer first\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      const customer = customers?.find((c: any) => c.id === customerId);\n      const booking = bookings?.find((b: any) => b.id === bookingId);\n\n      const eventDetails = booking ? {\n        eventName: booking.eventName,\n        eventType: booking.eventType,\n        eventDate: booking.eventDate,\n        guestCount: booking.guestCount,\n        startTime: booking.startTime,\n        endTime: booking.endTime,\n      } : {};\n\n      const venueDetails = {\n        name: \"Premium Event Venue\",\n        capacity: booking?.guestCount || 100,\n        amenities: [\"Audio/Visual Equipment\", \"Catering Kitchen\", \"Dance Floor\"]\n      };\n\n      const customerPreferences = {\n        name: customer?.name,\n        company: customer?.company,\n        eventHistory: []\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/proposals/generate\", {\n        eventDetails,\n        venueDetails,\n        customerPreferences\n      });\n\n      const result = await response.json();\n      \n      form.setValue(\"content\", result.content);\n      form.setValue(\"title\", `Proposal for ${customer?.name} - ${booking?.eventName || \"Event\"}`);\n      \n      toast({\n        title: \"Success\",\n        description: \"AI proposal generated successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate proposal\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const onSubmit = async (data: any) => {\n    try {\n      setIsSubmitting(true);\n      \n      const proposalData = {\n        ...data,\n        validUntil: data.validUntil instanceof Date ? data.validUntil : new Date(data.validUntil),\n        totalAmount: data.totalAmount ? data.totalAmount.toString() : null,\n      };\n\n      await apiRequest(\"POST\", \"/api/proposals\", proposalData);\n      await queryClient.invalidateQueries({ queryKey: [\"/api/proposals\"] });\n      \n      toast({\n        title: \"Success\",\n        description: \"Proposal created successfully\",\n      });\n      \n      form.reset();\n      onSuccess?.();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create proposal\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <FormField\n            control={form.control}\n            name=\"customerId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Customer</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select customer\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {customers?.map((customer: any) => (\n                      <SelectItem key={customer.id} value={customer.id}>\n                        {customer.name} - {customer.email}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"bookingId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Related Booking (Optional)</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select booking\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {bookings?.map((booking: any) => (\n                      <SelectItem key={booking.id} value={booking.id}>\n                        {booking.eventName} - {booking.eventType}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"title\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Proposal Title</FormLabel>\n              <FormControl>\n                <Input placeholder=\"e.g., Wedding Reception Proposal for Johnson Family\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex items-center justify-between\">\n          <FormLabel>Proposal Content</FormLabel>\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={generateAIProposal}\n            disabled={isGenerating}\n          >\n            {isGenerating ? \"Generating...\" : \"🤖 Generate with AI\"}\n          </Button>\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"content\"\n          render={({ field }) => (\n            <FormItem>\n              <FormControl>\n                <Textarea \n                  placeholder=\"Enter your proposal content here, or use AI to generate it...\"\n                  rows={10}\n                  className=\"min-h-[200px]\"\n                  {...field}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <FormField\n            control={form.control}\n            name=\"totalAmount\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Total Amount (Optional)</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"number\" \n                    placeholder=\"0.00\" \n                    step=\"0.01\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"status\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Status</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"draft\">Draft</SelectItem>\n                    <SelectItem value=\"sent\">Sent</SelectItem>\n                    <SelectItem value=\"viewed\">Viewed</SelectItem>\n                    <SelectItem value=\"accepted\">Accepted</SelectItem>\n                    <SelectItem value=\"rejected\">Rejected</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"validUntil\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Valid Until</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"date\" \n                    {...field}\n                    value={field.value instanceof Date ? field.value.toISOString().split('T')[0] : field.value}\n                    onChange={(e) => field.onChange(new Date(e.target.value))}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"flex justify-end space-x-3 pt-4\">\n          <Button type=\"button\" variant=\"outline\" onClick={() => onSuccess?.()}>\n            Cancel\n          </Button>\n          <Button type=\"submit\" disabled={isSubmitting} className=\"bg-blue-600 hover:bg-blue-700\">\n            {isSubmitting ? \"Creating...\" : \"Create Proposal\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":10336},"client/src/components/layout/header.tsx":{"content":"import { Search, Bell, Plus, Menu, Settings, PanelLeftClose, PanelLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useState, useEffect } from \"react\";\nimport { GlobalSearch } from \"@/components/search/global-search\";\n\ninterface HeaderProps {\n  title: string;\n  subtitle?: string;\n  action?: React.ReactNode;\n  onMobileMenuToggle?: () => void;\n  onNewBooking?: () => void;\n  onSidebarToggle?: () => void;\n  sidebarCollapsed?: boolean;\n}\n\ninterface HeaderPropsWithMobile extends HeaderProps {\n  mobileNavOpen?: boolean;\n  setMobileNavOpen?: (open: boolean) => void;\n}\n\nexport function Header({ title, subtitle, action, onMobileMenuToggle, onNewBooking, onSidebarToggle, sidebarCollapsed, mobileNavOpen, setMobileNavOpen }: HeaderPropsWithMobile) {\n  const [searchOpen, setSearchOpen] = useState(false);\n  \n  // Keyboard shortcut for search\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {\n        e.preventDefault();\n        setSearchOpen(true);\n      }\n    };\n    \n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, []);\n  \n  return (\n    <header className=\"bg-white border-b border-slate-200 px-4 sm:px-6 py-3 sm:py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3 flex-1 min-w-0\">\n          {/* Mobile Menu Button */}\n          <button \n            onClick={onMobileMenuToggle || (() => setMobileNavOpen && setMobileNavOpen(true))}\n            className=\"lg:hidden p-2 text-slate-600 hover:text-slate-900 hover:bg-slate-100 rounded-lg transition-colors\"\n          >\n            <Menu className=\"w-5 h-5\" />\n          </button>\n          \n          {/* Desktop Sidebar Toggle */}\n          {onSidebarToggle && (\n            <button \n              onClick={onSidebarToggle}\n              className=\"hidden lg:flex p-2 text-slate-600 hover:text-slate-900 hover:bg-slate-100 rounded-lg transition-colors\"\n              title={sidebarCollapsed ? \"Expand sidebar\" : \"Collapse sidebar\"}\n            >\n              {sidebarCollapsed ? <PanelLeft className=\"w-5 h-5\" /> : <PanelLeftClose className=\"w-5 h-5\" />}\n            </button>\n          )}\n          \n          <div className=\"flex-1 min-w-0\">\n            <h1 className=\"text-lg sm:text-2xl font-semibold text-slate-900 truncate\">{title}</h1>\n            {subtitle && (\n              <p className=\"text-xs sm:text-sm text-slate-600 mt-1 hidden sm:block\">{subtitle}</p>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-2 sm:space-x-4\">\n          {/* Search Button */}\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setSearchOpen(true)}\n            className=\"flex items-center gap-2\"\n          >\n            <Search className=\"w-4 h-4\" />\n            <span className=\"hidden md:inline\">Search...</span>\n            <kbd className=\"hidden lg:inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium opacity-100\">\n              <span className=\"text-xs\">⌘</span>K\n            </kbd>\n          </Button>\n\n          {/* Custom Action */}\n          {action || (\n            <Button \n              onClick={() => {\n                console.log('Header New Booking button clicked');\n                if (onNewBooking) {\n                  onNewBooking();\n                } else {\n                  window.location.href = '/events';\n                }\n              }}\n              className=\"bg-blue-600 text-white px-2 sm:px-4 py-2 rounded-lg text-xs sm:text-sm font-medium hover:bg-blue-700 transition-colors\"\n            >\n              <Plus className=\"w-4 h-4 sm:mr-2\" />\n              <span className=\"hidden sm:inline\">New Booking</span>\n            </Button>\n          )}\n\n          {/* Settings */}\n          <button \n            onClick={() => window.location.href = '/settings'}\n            className=\"p-2 text-slate-400 hover:text-slate-600 transition-colors\"\n            title=\"Settings\"\n          >\n            <Settings className=\"w-5 h-5 sm:w-6 sm:h-6\" />\n          </button>\n\n          {/* Notifications */}\n          <button className=\"relative p-2 text-slate-400 hover:text-slate-600 transition-colors\">\n            <Bell className=\"w-5 h-5 sm:w-6 sm:h-6\" />\n            <span className=\"absolute top-0 right-0 block h-2 w-2 rounded-full bg-red-400\"></span>\n          </button>\n        </div>\n      </div>\n      \n      <GlobalSearch isOpen={searchOpen} onClose={() => setSearchOpen(false)} />\n    </header>\n  );\n}\n","size_bytes":4745},"client/src/components/layout/mobile-nav.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  LayoutDashboard, \n  Calendar, \n  Users, \n  UserPlus,\n  FileText, \n  CreditCard, \n  CheckSquare,\n  Building,\n  Package,\n  Settings,\n  BarChart3,\n  X\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nconst navigationItems = [\n  { name: \"Dashboard\", href: \"/\", icon: LayoutDashboard },\n  { name: \"Events & Bookings\", href: \"/events\", icon: Calendar },\n  { name: \"Customers\", href: \"/customers\", icon: Users },\n  { name: \"Leads\", href: \"/leads\", icon: UserPlus },\n  { name: \"Proposals & Contracts\", href: \"/proposals\", icon: FileText },\n  { name: \"Payments\", href: \"/payments\", icon: CreditCard },\n  { name: \"Tasks & Team\", href: \"/tasks\", icon: CheckSquare },\n  { name: \"Venues\", href: \"/venues\", icon: Building },\n  { name: \"Packages & Services\", href: \"/packages\", icon: Package },\n  { name: \"Reports & Insights\", href: \"/reports\", icon: BarChart3 },\n  { name: \"Settings\", href: \"/settings\", icon: Settings },\n];\n\ninterface MobileNavProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function MobileNav({ isOpen, onClose }: MobileNavProps) {\n  const [location] = useLocation();\n\n  const isActive = (href: string) => {\n    if (href === \"/\") {\n      return location === \"/\";\n    }\n    return location.startsWith(href);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div \n        className=\"fixed inset-0 bg-black bg-opacity-50 z-50 lg:hidden\"\n        onClick={onClose}\n      />\n      \n      {/* Mobile Nav Panel */}\n      <div className=\"fixed inset-y-0 left-0 w-64 bg-white border-r border-slate-200 z-50 lg:hidden transform transition-transform duration-300 ease-in-out\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between px-6 py-4 border-b border-slate-200\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-sm\">V</span>\n            </div>\n            <span className=\"text-xl font-semibold text-slate-900\">Venuine</span>\n          </div>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"w-5 h-5\" />\n          </Button>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"px-4 py-4 space-y-1\">\n          {navigationItems.map((item) => {\n            const Icon = item.icon;\n            const active = isActive(item.href);\n            \n            return (\n              <Link key={item.name} href={item.href}>\n                <div\n                  onClick={onClose}\n                  className={`flex items-center px-3 py-3 rounded-lg text-sm font-medium transition-colors cursor-pointer ${\n                    active\n                      ? \"bg-blue-600 text-white\"\n                      : \"text-slate-600 hover:text-slate-900 hover:bg-slate-100\"\n                  }`}\n                >\n                  <Icon className=\"w-5 h-5 mr-3\" />\n                  {item.name}\n                </div>\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* Quick Actions */}\n        <div className=\"px-4 py-4 border-t border-slate-200 mt-4\">\n          <div className=\"space-y-2\">\n            <Button \n              onClick={() => {\n                console.log('Mobile nav: New Event clicked');\n                window.location.href = '/events';\n                onClose();\n              }}\n              className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n            >\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              New Event\n            </Button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":3750},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useState, useEffect } from \"react\";\nimport { usePermissions } from \"@/hooks/usePermissions\";\nimport { clearTenantCache } from \"@/lib/queryClient\";\nimport { \n  LayoutDashboard, \n  Calendar, \n  Users, \n  UserPlus,\n  FileText, \n  CreditCard, \n  CheckSquare,\n  MapPin,\n  Package,\n  Zap,\n  Mail,\n  BarChart3,\n  Star,\n  Settings,\n  Mic,\n  ChevronLeft,\n  ChevronRight,\n  Grid3X3,\n  Building2,\n  LogOut\n} from \"lucide-react\";\n\nconst navigationItems = [\n  { name: \"Dashboard\", href: \"/dashboard\", icon: LayoutDashboard, permission: \"view_dashboard\" },\n  { name: \"Events & Bookings\", href: \"/events\", icon: Calendar, permission: \"view_events\" },\n  { name: \"Customers\", href: \"/customers\", icon: Users, permission: \"view_customers\" },\n  { name: \"Leads\", href: \"/leads\", icon: UserPlus, permission: \"manage_leads\" },\n  { name: \"Proposals\", href: \"/proposals\", icon: FileText, permission: \"view_proposals\" },\n  { name: \"Payments\", href: \"/payments\", icon: CreditCard, permission: \"view_payments\" },\n  { name: \"Tasks & Team\", href: \"/tasks\", icon: CheckSquare, permission: \"view_events\" },\n  { name: \"Venues\", href: \"/venues\", icon: MapPin, permission: \"view_venues\" },\n  { name: \"Setup Styles\", href: \"/setup-styles\", icon: Grid3X3, permission: \"manage_venues\" },\n  { name: \"Packages & Services\", href: \"/packages\", icon: Package, permission: \"manage_venues\" },\n];\n\nconst aiFeatures = [\n  { name: \"AI Analytics & Reports\", href: \"/ai-analytics\", icon: BarChart3, permission: \"use_ai_features\" },\n  { name: \"Voice Booking\", href: \"/voice-booking\", icon: Mic, permission: \"use_ai_features\" },\n];\n\nconst analyticsItems = [\n  { name: \"Reports & Analytics\", href: \"/reports\", icon: BarChart3, permission: \"view_reports\" },\n  { name: \"Settings\", href: \"/settings\", icon: Settings, permission: \"manage_settings\" },\n];\n\nconst adminItems = [\n  { name: \"User Management\", href: \"/users\", icon: Users, permission: \"manage_users\" },\n];\n\ninterface SidebarProps {\n  collapsed?: boolean;\n}\n\nexport function Sidebar({ collapsed = false }: SidebarProps) {\n  const [location, setLocation] = useLocation();\n  const { user, hasPermission, canView, isTenantAdmin } = usePermissions();\n\n  const isActive = (href: string) => {\n    if (href === \"/\") {\n      return location === \"/\";\n    }\n    return location.startsWith(href);\n  };\n\n  const getUserInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(word => word.charAt(0))\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const getRoleDisplayName = (role: string) => {\n    switch (role) {\n      case 'super_admin': return 'Super Admin';\n      case 'tenant_admin': return 'Tenant Admin';\n      case 'tenant_user': return 'Venue Manager';\n      default: return 'User';\n    }\n  };\n\n  const handleLogout = () => {\n    // Clear tenant cache to prevent cross-contamination\n    clearTenantCache();\n    \n    // Clear tokens from localStorage\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('super_admin_token');\n    \n    // Redirect to appropriate login page\n    if (user?.role === 'super_admin') {\n      setLocation('/super-admin/login');\n    } else {\n      setLocation('/login');\n    }\n  };\n\n  return (\n    <div className={`${collapsed ? 'w-16' : 'w-64'} h-full bg-white border-r border-slate-200 flex flex-col transition-all duration-300`}>\n      {/* Logo and Brand */}\n      <div className=\"flex items-center px-6 py-4 border-b border-slate-200\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center\">\n            <span className=\"text-white font-bold text-sm\">V</span>\n          </div>\n          {!collapsed && <span className=\"text-xl font-semibold text-slate-900\">Venuine</span>}\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 px-4 py-4 space-y-1 sidebar-scroll overflow-y-auto\">\n        {/* Main Navigation */}\n        <div className=\"space-y-1\">\n          {navigationItems.filter(item => hasPermission(item.permission)).map((item) => {\n            const Icon = item.icon;\n            const active = isActive(item.href);\n            \n            return (\n              <Link key={item.name} href={item.href}>\n                <div\n                  className={`${collapsed ? \n                    'flex items-center justify-center w-10 h-10 mx-auto rounded-lg text-sm font-medium transition-colors cursor-pointer' :\n                    'flex items-center px-3 py-2 rounded-lg text-sm font-medium transition-colors cursor-pointer'\n                  } ${\n                    active\n                      ? \"bg-blue-600 text-white\"\n                      : \"text-slate-600 hover:text-slate-900 hover:bg-slate-100\"\n                  }`}\n                  title={collapsed ? item.name : undefined}\n                >\n                  <Icon className={collapsed ? \"w-5 h-5\" : \"w-5 h-5 mr-3\"} />\n                  {!collapsed && item.name}\n                </div>\n              </Link>\n            );\n          })}\n        </div>\n\n        {/* AI Features Section */}\n        {!collapsed && aiFeatures.some(item => hasPermission(item.permission)) && (\n          <div className=\"pt-4\">\n            <div className=\"px-3 mb-2\">\n              <div className=\"flex items-center\">\n                <span className=\"text-xs font-semibold text-slate-500 uppercase tracking-wider\">\n                  AI Features\n                </span>\n                <div className=\"ml-2 px-2 py-0.5 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full\">\n                  <span className=\"text-xs text-white font-medium\">NEW</span>\n                </div>\n              </div>\n            </div>\n            {aiFeatures.filter(item => hasPermission(item.permission)).map((item) => {\n              const Icon = item.icon;\n              const active = isActive(item.href);\n              \n              return (\n                <Link key={item.name} href={item.href}>\n                  <div\n                    className={`flex items-center px-3 py-2 rounded-lg text-sm font-medium transition-colors cursor-pointer ${\n                      active\n                        ? \"bg-blue-600 text-white\"\n                        : \"text-slate-600 hover:text-slate-900 hover:bg-slate-100\"\n                    }`}\n                    title={collapsed ? item.name : undefined}\n                  >\n                    <Icon className=\"w-5 h-5 mr-3\" />\n                    {!collapsed && item.name}\n                  </div>\n                </Link>\n              );\n            })}\n          </div>\n        )}\n        \n        {/* AI Features - Collapsed Icons Only */}\n        {collapsed && (\n          <div className=\"pt-4 space-y-1\">\n            {aiFeatures.filter(item => hasPermission(item.permission)).map((item) => {\n              const Icon = item.icon;\n              const active = isActive(item.href);\n              \n              return (\n                <Link key={item.name} href={item.href}>\n                  <div\n                    className={`flex items-center justify-center w-10 h-10 rounded-lg text-sm font-medium transition-colors cursor-pointer ${\n                      active\n                        ? \"bg-blue-600 text-white\"\n                        : \"text-slate-600 hover:text-slate-900 hover:bg-slate-100\"\n                    }`}\n                    title={item.name}\n                  >\n                    <Icon className=\"w-5 h-5\" />\n                  </div>\n                </Link>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Analytics Section - Expanded */}\n        {!collapsed && analyticsItems.some(item => hasPermission(item.permission)) && (\n          <div className=\"pt-4\">\n            <div className=\"px-3 mb-2\">\n              <span className=\"text-xs font-semibold text-slate-500 uppercase tracking-wider\">\n                Analytics\n              </span>\n            </div>\n            {analyticsItems.filter(item => hasPermission(item.permission)).map((item) => {\n              const Icon = item.icon;\n              const active = isActive(item.href);\n              \n              return (\n                <Link key={item.name} href={item.href}>\n                  <div\n                    className={`flex items-center px-3 py-2 rounded-lg text-sm font-medium transition-colors cursor-pointer ${\n                      active\n                        ? \"bg-blue-600 text-white\"\n                        : \"text-slate-600 hover:text-slate-900 hover:bg-slate-100\"\n                    }`}\n                  >\n                    <Icon className=\"w-5 h-5 mr-3\" />\n                    {item.name}\n                  </div>\n                </Link>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Admin Section - Only for users with admin permissions */}\n        {!collapsed && adminItems.some(item => hasPermission(item.permission)) && (\n          <div className=\"pt-4\">\n            <div className=\"px-3 mb-2\">\n              <div className=\"flex items-center\">\n                <span className=\"text-xs font-semibold text-slate-500 uppercase tracking-wider\">\n                  Administration\n                </span>\n                <div className=\"ml-2 px-2 py-0.5 bg-gradient-to-r from-red-500 to-pink-500 rounded-full\">\n                  <span className=\"text-xs text-white font-medium\">ADMIN</span>\n                </div>\n              </div>\n            </div>\n            {adminItems.filter(item => hasPermission(item.permission)).map((item) => {\n              const Icon = item.icon;\n              const active = isActive(item.href);\n              \n              return (\n                <Link key={item.name} href={item.href}>\n                  <div\n                    className={`flex items-center px-3 py-2 rounded-lg text-sm font-medium transition-colors cursor-pointer ${\n                      active\n                        ? \"bg-blue-600 text-white\"\n                        : \"text-slate-600 hover:text-slate-900 hover:bg-slate-100\"\n                    }`}\n                  >\n                    <Icon className=\"w-5 h-5 mr-3\" />\n                    {item.name}\n                  </div>\n                </Link>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Analytics Section - Collapsed */}\n        {collapsed && (\n          <div className=\"pt-4 space-y-1\">\n            {analyticsItems.filter(item => hasPermission(item.permission)).map((item) => {\n              const Icon = item.icon;\n              const active = isActive(item.href);\n              \n              return (\n                <Link key={item.name} href={item.href}>\n                  <div\n                    className={`flex items-center justify-center w-10 h-10 mx-auto rounded-lg text-sm font-medium transition-colors cursor-pointer ${\n                      active\n                        ? \"bg-blue-600 text-white\"\n                        : \"text-slate-600 hover:text-slate-900 hover:bg-slate-100\"\n                    }`}\n                    title={item.name}\n                  >\n                    <Icon className=\"w-5 h-5\" />\n                  </div>\n                </Link>\n              );\n            })}\n            \n            {/* Admin items for collapsed sidebar - only for users with admin permissions */}\n            {adminItems.filter(item => hasPermission(item.permission)).map((item) => {\n              const Icon = item.icon;\n              const active = isActive(item.href);\n              \n              return (\n                <Link key={item.name} href={item.href}>\n                  <div\n                    className={`flex items-center justify-center w-10 h-10 mx-auto rounded-lg text-sm font-medium transition-colors cursor-pointer ${\n                      active\n                        ? \"bg-blue-600 text-white\"\n                        : \"text-slate-600 hover:text-slate-900 hover:bg-slate-100\"\n                    }`}\n                    title={item.name}\n                  >\n                    <Icon className=\"w-5 h-5\" />\n                  </div>\n                </Link>\n              );\n            })}\n          </div>\n        )}\n      </nav>\n\n      {/* User Profile */}\n      <div className=\"border-t border-slate-200 p-4\">\n        {collapsed ? (\n          <div className=\"flex flex-col items-center space-y-2\">\n            <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\" title={user ? `${user.name} - ${getRoleDisplayName(user.role)}` : 'User'}>\n              <span className=\"text-sm font-medium text-blue-700\">\n                {user ? getUserInitials(user.name) : 'U'}\n              </span>\n            </div>\n            <button\n              onClick={handleLogout}\n              className=\"w-8 h-8 flex items-center justify-center rounded-lg text-slate-600 hover:text-red-600 hover:bg-red-50 transition-colors\"\n              title=\"Logout\"\n            >\n              <LogOut className=\"w-4 h-4\" />\n            </button>\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-sm font-medium text-blue-700\">\n                  {user ? getUserInitials(user.name) : 'U'}\n                </span>\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium text-slate-900 truncate\">\n                  {user ? user.name : 'Loading...'}\n                </p>\n                <p className=\"text-xs text-slate-500 truncate\">\n                  {user ? getRoleDisplayName(user.role) : 'User'}\n                </p>\n              </div>\n            </div>\n            <button\n              onClick={handleLogout}\n              className=\"w-full flex items-center justify-center px-3 py-2 text-sm font-medium text-red-600 bg-red-50 rounded-lg hover:bg-red-100 transition-colors\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Logout\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":14216},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}","size_bytes":4084},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":776},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\";\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\";\nimport { Circle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  );\n});\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName;\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  );\n});\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;\n\nexport { RadioGroup, RadioGroupItem };","size_bytes":1476},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = \"Textarea\";\n\nexport { Textarea };","size_bytes":776},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-4 sm:p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-bottom-full data-[state=open]:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4809},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/forms/enhanced-event-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { \n  ChevronLeft, \n  ChevronRight, \n  Plus, \n  Minus, \n  Check, \n  Mic, \n  MicOff, \n  User, \n  X, \n  Sparkles, \n  Bot, \n  Calendar as CalendarIcon, \n  MapPin, \n  Users as UsersIcon, \n  Clock,\n  Wand2,\n  MessageSquare,\n  ArrowRight\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface EnhancedEventModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst eventFormSchema = z.object({\n  eventName: z.string().min(1, \"Event name is required\"),\n  customerId: z.string().optional(),\n  customerName: z.string().optional(),\n  customerEmail: z.string().email().optional(),\n  eventType: z.string().min(1, \"Event type is required\"),\n  guestCount: z.number().min(1, \"Guest count must be at least 1\"),\n  budget: z.number().optional(),\n  specialRequests: z.string().optional(),\n  isMultiDay: z.boolean().default(false),\n  selectedDates: z.array(z.date()).min(1, \"At least one date must be selected\"),\n  packageId: z.string().optional(),\n  additionalServices: z.array(z.string()).optional()\n});\n\ntype EventFormData = z.infer<typeof eventFormSchema>;\n\nexport function EnhancedEventModal({ open, onOpenChange }: EnhancedEventModalProps) {\n  const { toast } = useToast();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [selectedDates, setSelectedDates] = useState<Date[]>([]);\n  const [selectedTimes, setSelectedTimes] = useState({ start: \"\", end: \"\" });\n  const [selectedVenue, setSelectedVenue] = useState(\"\");\n  const [selectedPackage, setSelectedPackage] = useState(\"\");\n  const [selectedServices, setSelectedServices] = useState<string[]>([]);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [totalCost, setTotalCost] = useState(0);\n  \n  // AI Assistant state\n  const [aiAssistantMode, setAiAssistantMode] = useState(false);\n  const [aiSuggestions, setAiSuggestions] = useState<string[]>([]);\n  const [isProcessingAI, setIsProcessingAI] = useState(false);\n  const [aiChatMessages, setAiChatMessages] = useState<Array<{type: 'user' | 'ai', content: string}>>([]);\n  const [aiInput, setAiInput] = useState(\"\");\n  \n  // Voice recording state\n  const [isListening, setIsListening] = useState(false);\n  const [voiceTranscript, setVoiceTranscript] = useState(\"\");\n\n  const { data: venues } = useQuery({\n    queryKey: [\"/api/venues\"],\n  });\n\n  const { data: customers } = useQuery({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const { data: packages } = useQuery({\n    queryKey: [\"/api/packages\"],\n  });\n\n  const { data: services } = useQuery({\n    queryKey: [\"/api/services\"],\n  });\n\n  const form = useForm<EventFormData>({\n    resolver: zodResolver(eventFormSchema),\n    defaultValues: {\n      eventName: \"\",\n      eventType: \"\",\n      guestCount: 50,\n      budget: 0,\n      specialRequests: \"\",\n      isMultiDay: false,\n      selectedDates: [],\n      packageId: \"\",\n      additionalServices: []\n    },\n  });\n\n  const eventTypes = [\n    \"Wedding\", \"Corporate Event\", \"Birthday Party\", \"Conference\", \n    \"Workshop\", \"Gala\", \"Fundraiser\", \"Product Launch\", \"Other\"\n  ];\n\n  const timeSlots = [\n    \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\", \n    \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\"\n  ];\n\n  // AI Assistant functions\n  const generateAISuggestions = async () => {\n    setIsProcessingAI(true);\n    try {\n      const eventType = form.getValues(\"eventType\");\n      const guestCount = form.getValues(\"guestCount\");\n      \n      // Simulate AI API call\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      const suggestions = [\n        `For a ${eventType} with ${guestCount} guests, consider our Premium Ballroom`,\n        `Based on similar events, afternoon slots (2-6 PM) are popular for ${eventType}s`,\n        `Add premium catering and photography package for enhanced experience`,\n        `Consider cocktail hour for networking - perfect for ${eventType} events`\n      ];\n      \n      setAiSuggestions(suggestions);\n    } catch (error) {\n      toast({\n        title: \"AI Error\",\n        description: \"Unable to generate suggestions\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsProcessingAI(false);\n    }\n  };\n\n  const handleAiChat = async () => {\n    if (!aiInput.trim()) return;\n    \n    const userMessage = aiInput.trim();\n    setAiChatMessages(prev => [...prev, { type: 'user', content: userMessage }]);\n    setAiInput(\"\");\n    setIsProcessingAI(true);\n\n    try {\n      // Simulate AI response\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      const aiResponse = `Based on your request \"${userMessage}\", I suggest considering our Gold Package which includes premium amenities and can accommodate your requirements perfectly.`;\n      \n      setAiChatMessages(prev => [...prev, { type: 'ai', content: aiResponse }]);\n    } catch (error) {\n      toast({\n        title: \"AI Chat Error\",\n        description: \"Unable to process your message\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsProcessingAI(false);\n    }\n  };\n\n  const startVoiceRecording = () => {\n    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\n      toast({\n        title: \"Not supported\",\n        description: \"Speech recognition is not supported in your browser\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    \n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n\n    setIsListening(true);\n\n    recognition.onresult = (event) => {\n      let transcript = '';\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        transcript += event.results[i][0].transcript;\n      }\n      setVoiceTranscript(transcript);\n    };\n\n    recognition.onerror = () => {\n      setIsListening(false);\n      toast({\n        title: \"Voice Error\",\n        description: \"Error occurred during voice recognition\",\n        variant: \"destructive\"\n      });\n    };\n\n    recognition.onend = () => {\n      setIsListening(false);\n    };\n\n    recognition.start();\n  };\n\n  const processVoiceInput = async () => {\n    if (!voiceTranscript.trim()) return;\n\n    try {\n      // Parse the voice transcript and extract event details\n      const lowerTranscript = voiceTranscript.toLowerCase();\n      \n      // Simple keyword extraction (in real app, use Gemini AI)\n      if (lowerTranscript.includes('wedding')) {\n        form.setValue(\"eventType\", \"Wedding\");\n      } else if (lowerTranscript.includes('corporate') || lowerTranscript.includes('business')) {\n        form.setValue(\"eventType\", \"Corporate Event\");\n      } else if (lowerTranscript.includes('birthday')) {\n        form.setValue(\"eventType\", \"Birthday Party\");\n      }\n\n      // Extract guest count\n      const guestMatch = lowerTranscript.match(/(\\d+)\\s*(guest|people|person)/);\n      if (guestMatch) {\n        form.setValue(\"guestCount\", parseInt(guestMatch[1]));\n      }\n\n      toast({\n        title: \"Voice Input Processed\",\n        description: \"Event details populated from voice input\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Processing Failed\",\n        description: \"Could not process voice input\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const onSubmit = async (data: EventFormData) => {\n    if (!selectedDate || !selectedTimes.start || !selectedTimes.end || !selectedVenue) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please complete all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Multi-day validation\n    if (isMultiDay && (!selectedEndDate || selectedEndDate <= selectedDate)) {\n      toast({\n        title: \"Invalid Date Range\",\n        description: \"End date must be after start date for multi-day events\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const eventData = {\n        eventName: data.eventName,\n        eventType: data.eventType,\n        eventDate: selectedDate.toISOString(),\n        endDate: isMultiDay && selectedEndDate ? selectedEndDate.toISOString() : null,\n        startTime: selectedTimes.start,\n        endTime: selectedTimes.end,\n        guestCount: data.guestCount,\n        venueId: selectedVenue,\n        customerId: data.customerId,\n        isMultiDay: isMultiDay,\n        notes: data.specialRequests,\n        totalAmount: data.budget?.toString() || \"0\"\n      };\n\n      console.log('Submitting event data:', eventData);\n      await apiRequest(\"POST\", \"/api/bookings\", eventData);\n      await queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n\n      toast({\n        title: \"🎉 Event Created Successfully!\",\n        description: `Your ${isMultiDay ? 'multi-day ' : ''}event \"${data.eventName}\" has been scheduled`,\n        duration: 6000,\n      });\n\n      onOpenChange(false);\n      form.reset();\n      setCurrentStep(1);\n      setSelectedDate(undefined);\n      setSelectedEndDate(undefined);\n      setSelectedTimes({ start: \"\", end: \"\" });\n      setSelectedVenue(\"\");\n      setIsMultiDay(false);\n    } catch (error: any) {\n      console.error('Event creation error:', error);\n      toast({\n        title: \"❌ Event Creation Failed\",\n        description: error?.response?.data?.message || \"Could not create event. Please check all required fields and try again.\",\n        variant: \"destructive\",\n        duration: 8000,\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const renderStep1 = () => (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <FormField\n          control={form.control}\n          name=\"eventName\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-sm font-medium\">Event Name</FormLabel>\n              <FormControl>\n                <Input \n                  placeholder=\"Enter event name...\" \n                  className=\"border-gray-200 focus:border-blue-500 transition-colors\"\n                  {...field} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"eventType\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-sm font-medium\">Event Type</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger className=\"border-gray-200 focus:border-blue-500\">\n                    <SelectValue placeholder=\"Select event type\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {eventTypes.map((type) => (\n                    <SelectItem key={type} value={type}>{type}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"guestCount\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-sm font-medium\">Guest Count</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"number\" \n                  placeholder=\"Number of guests\"\n                  className=\"border-gray-200 focus:border-blue-500 transition-colors\"\n                  {...field}\n                  onChange={e => field.onChange(parseInt(e.target.value) || 0)}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"budget\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-sm font-medium\">Budget (Optional)</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"number\" \n                  placeholder=\"Event budget\"\n                  className=\"border-gray-200 focus:border-blue-500 transition-colors\"\n                  {...field}\n                  onChange={e => field.onChange(parseInt(e.target.value) || 0)}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n\n      <FormField\n        control={form.control}\n        name=\"specialRequests\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel className=\"text-sm font-medium\">Special Requests</FormLabel>\n            <FormControl>\n              <Textarea \n                placeholder=\"Any special requirements or notes...\"\n                className=\"border-gray-200 focus:border-blue-500 transition-colors min-h-[100px]\"\n                {...field} \n              />\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n\n      {/* Voice Input Section */}\n      <Card className=\"border-purple-200 bg-purple-50/30\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            <Mic className=\"w-5 h-5 text-purple-600\" />\n            Voice-to-Text Booking\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"flex items-center gap-2\">\n            <Button\n              type=\"button\"\n              variant={isListening ? \"destructive\" : \"outline\"}\n              size=\"sm\"\n              onClick={isListening ? () => setIsListening(false) : startVoiceRecording}\n              disabled={isProcessingAI}\n            >\n              {isListening ? <MicOff className=\"w-4 h-4 mr-1\" /> : <Mic className=\"w-4 h-4 mr-1\" />}\n              {isListening ? \"Stop Recording\" : \"Start Speaking\"}\n            </Button>\n            {voiceTranscript && (\n              <Button\n                type=\"button\"\n                variant=\"secondary\"\n                size=\"sm\"\n                onClick={processVoiceInput}\n                disabled={isProcessingAI}\n              >\n                <Wand2 className=\"w-4 h-4 mr-1\" />\n                Process Voice\n              </Button>\n            )}\n          </div>\n          {voiceTranscript && (\n            <div className=\"p-3 bg-white rounded border text-sm\">\n              <strong>Transcript:</strong> {voiceTranscript}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const renderStep2 = () => (\n    <div className=\"space-y-6\">\n      {/* Multi-day toggle */}\n      <div className=\"flex items-center space-x-2\">\n        <input\n          type=\"checkbox\"\n          id=\"multiDay\"\n          checked={isMultiDay}\n          onChange={(e) => setIsMultiDay(e.target.checked)}\n          className=\"rounded border-gray-300 focus:ring-blue-500\"\n        />\n        <Label htmlFor=\"multiDay\" className=\"text-sm font-medium cursor-pointer\">\n          Multi-day event\n        </Label>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div>\n          <Label className=\"text-sm font-medium mb-3 block\">\n            {isMultiDay ? \"Start Date\" : \"Event Date\"}\n          </Label>\n          <Calendar\n            mode=\"single\"\n            selected={selectedDate}\n            onSelect={setSelectedDate}\n            disabled={(date) => date < new Date()}\n            className=\"rounded-md border border-gray-200\"\n          />\n          \n          {isMultiDay && (\n            <div className=\"mt-4\">\n              <Label className=\"text-sm font-medium mb-3 block\">End Date</Label>\n              <Calendar\n                mode=\"single\"\n                selected={selectedEndDate}\n                onSelect={setSelectedEndDate}\n                disabled={(date) => date < new Date() || (selectedDate && date <= selectedDate)}\n                className=\"rounded-md border border-gray-200\"\n              />\n            </div>\n          )}\n        </div>\n\n        <div className=\"space-y-4\">\n          <div>\n            <Label className=\"text-sm font-medium\">Venue Space</Label>\n            <Select value={selectedVenue} onValueChange={setSelectedVenue}>\n              <SelectTrigger className=\"border-gray-200 focus:border-blue-500 mt-2\">\n                <SelectValue placeholder=\"Select venue space\" />\n              </SelectTrigger>\n              <SelectContent>\n                {venues?.map((venue: any) => (\n                  <SelectItem key={venue.id} value={venue.id}>\n                    {venue.name} (Capacity: {venue.capacity})\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div>\n              <Label className=\"text-sm font-medium\">Start Time</Label>\n              <Select \n                value={selectedTimes.start} \n                onValueChange={(value) => setSelectedTimes(prev => ({ ...prev, start: value }))}\n              >\n                <SelectTrigger className=\"border-gray-200 focus:border-blue-500 mt-2\">\n                  <SelectValue placeholder=\"Start\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {timeSlots.map((time) => (\n                    <SelectItem key={time} value={time}>{time}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-medium\">End Time</Label>\n              <Select \n                value={selectedTimes.end} \n                onValueChange={(value) => setSelectedTimes(prev => ({ ...prev, end: value }))}\n              >\n                <SelectTrigger className=\"border-gray-200 focus:border-blue-500 mt-2\">\n                  <SelectValue placeholder=\"End\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {timeSlots.map((time) => (\n                    <SelectItem key={time} value={time}>{time}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {selectedDate && selectedTimes.start && selectedTimes.end && selectedVenue && (\n            <Card className=\"border-green-200 bg-green-50/30\">\n              <CardContent className=\"pt-4\">\n                <div className=\"flex items-center gap-2 text-green-700\">\n                  <Check className=\"w-4 h-4\" />\n                  <span className=\"text-sm font-medium\">Booking Summary</span>\n                </div>\n                <div className=\"mt-2 text-sm text-gray-600\">\n                  <div className=\"flex items-center gap-1\">\n                    <CalendarIcon className=\"w-3 h-3\" />\n                    {selectedDate.toLocaleDateString()}\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Clock className=\"w-3 h-3\" />\n                    {selectedTimes.start} - {selectedTimes.end}\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <MapPin className=\"w-3 h-3\" />\n                    {venues?.find((v: any) => v.id === selectedVenue)?.name}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderAIAssistant = () => (\n    <Card className=\"border-purple-200 bg-gradient-to-br from-purple-50 to-blue-50/30\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-lg flex items-center gap-2\">\n          <Bot className=\"w-5 h-5 text-purple-600\" />\n          AI Event Assistant\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* AI Chat Messages */}\n        <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n          {aiChatMessages.map((message, index) => (\n            <div\n              key={index}\n              className={`p-3 rounded-lg text-sm ${\n                message.type === 'user'\n                  ? 'bg-blue-100 text-blue-900 ml-8'\n                  : 'bg-white text-gray-700 mr-8 border'\n              }`}\n            >\n              {message.content}\n            </div>\n          ))}\n          {isProcessingAI && (\n            <div className=\"p-3 rounded-lg text-sm bg-gray-100 text-gray-600 mr-8 border\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"animate-spin w-3 h-3 border border-gray-400 border-t-transparent rounded-full\" />\n                AI is thinking...\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* AI Input */}\n        <div className=\"flex gap-2\">\n          <Input\n            placeholder=\"Ask AI for suggestions...\"\n            value={aiInput}\n            onChange={(e) => setAiInput(e.target.value)}\n            onKeyPress={(e) => e.key === 'Enter' && handleAiChat()}\n            className=\"flex-1\"\n            disabled={isProcessingAI}\n          />\n          <Button \n            onClick={handleAiChat} \n            size=\"sm\"\n            disabled={!aiInput.trim() || isProcessingAI}\n          >\n            <MessageSquare className=\"w-4 h-4\" />\n          </Button>\n        </div>\n\n        {/* AI Suggestions */}\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={generateAISuggestions}\n          disabled={isProcessingAI}\n          className=\"w-full\"\n        >\n          <Sparkles className=\"w-4 h-4 mr-1\" />\n          {isProcessingAI ? \"Generating...\" : \"Get AI Suggestions\"}\n        </Button>\n\n        {aiSuggestions.length > 0 && (\n          <div className=\"space-y-2\">\n            <h4 className=\"text-sm font-medium text-purple-700\">AI Suggestions:</h4>\n            {aiSuggestions.map((suggestion, index) => (\n              <div key={index} className=\"p-2 bg-white rounded border text-xs text-gray-600\">\n                {suggestion}\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"w-[95vw] max-w-[900px] max-h-[90vh] overflow-y-auto bg-gradient-to-br from-slate-50 to-blue-50/20 p-4 sm:p-6\">\n        <DialogHeader className=\"space-y-4 pb-6\">\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Create New Event\n            </DialogTitle>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant={aiAssistantMode ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setAiAssistantMode(!aiAssistantMode)}\n                className={aiAssistantMode ? \"bg-purple-600 hover:bg-purple-700\" : \"\"}\n              >\n                <Sparkles className=\"w-4 h-4 mr-1\" />\n                AI Assistant\n              </Button>\n            </div>\n          </div>\n          \n          {/* Progress Steps */}\n          <div className=\"flex items-center gap-2 sm:gap-4 text-xs sm:text-sm text-gray-600 overflow-x-auto\">\n            <div className=\"flex items-center gap-1 whitespace-nowrap\">\n              <div className={`w-2 h-2 rounded-full ${currentStep >= 1 ? 'bg-blue-600' : 'bg-gray-300'}`} />\n              <span className={currentStep >= 1 ? 'text-blue-600 font-medium' : ''}>Details</span>\n            </div>\n            <ArrowRight className=\"w-3 h-3 text-gray-400\" />\n            <div className=\"flex items-center gap-1 whitespace-nowrap\">\n              <div className={`w-2 h-2 rounded-full ${currentStep >= 2 ? 'bg-blue-600' : 'bg-gray-300'}`} />\n              <span className={currentStep >= 2 ? 'text-blue-600 font-medium' : ''}>Schedule</span>\n            </div>\n            <ArrowRight className=\"w-3 h-3 text-gray-400\" />\n            <div className=\"flex items-center gap-1 whitespace-nowrap\">\n              <div className={`w-2 h-2 rounded-full ${currentStep >= 3 ? 'bg-blue-600' : 'bg-gray-300'}`} />\n              <span className={currentStep >= 3 ? 'text-blue-600 font-medium' : ''}>Review</span>\n            </div>\n          </div>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 gap-6\">\n              <div className={aiAssistantMode ? \"lg:grid lg:grid-cols-3 lg:gap-6\" : \"\"}>\n                <div className={aiAssistantMode ? \"lg:col-span-2\" : \"\"}>\n                  {currentStep === 1 && renderStep1()}\n                  {currentStep === 2 && renderStep2()}\n                </div>\n                \n                {aiAssistantMode && (\n                  <div className=\"lg:col-span-1\">\n                    {renderAIAssistant()}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Navigation */}\n            <div className=\"flex flex-col sm:flex-row justify-between items-stretch sm:items-center gap-3 pt-6 border-t border-gray-200\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}\n                disabled={currentStep === 1}\n                className=\"order-2 sm:order-1\"\n              >\n                <ChevronLeft className=\"w-4 h-4 mr-1\" />\n                Previous\n              </Button>\n\n              {currentStep < 2 ? (\n                <Button\n                  type=\"button\"\n                  onClick={() => setCurrentStep(currentStep + 1)}\n                  className=\"bg-blue-600 hover:bg-blue-700 order-1 sm:order-2\"\n                >\n                  Next\n                  <ChevronRight className=\"w-4 h-4 ml-1\" />\n                </Button>\n              ) : (\n                <Button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"bg-green-600 hover:bg-green-700 order-1 sm:order-2 min-h-[44px]\"\n                >\n                  {isSubmitting ? \"Creating...\" : \"Create Event\"}\n                  <Check className=\"w-4 h-4 ml-1\" />\n                </Button>\n              )}\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Speech Recognition API types\ndeclare global {\n  interface Window {\n    SpeechRecognition: any;\n    webkitSpeechRecognition: any;\n  }\n}","size_bytes":27608},"client/src/components/dashboard/advanced-calendar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Calendar as CalendarIcon, \n  ChevronLeft, \n  ChevronRight, \n  Clock, \n  Users, \n  MapPin,\n  Grid3x3,\n  List,\n  Eye,\n  Plus\n} from \"lucide-react\";\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isSameDay, addMonths, subMonths } from \"date-fns\";\nimport { getStatusConfig, getAllStatuses, type EventStatus } from \"@shared/status-utils\";\n\ninterface CalendarEvent {\n  id: string;\n  title: string;\n  start: string;\n  status: string;\n  customerName: string;\n  venueName: string;\n  spaceName: string;\n  guestCount: number;\n  totalAmount: string;\n  startTime: string;\n  endTime: string;\n  color: string;\n}\n\ninterface VenueCalendarData {\n  venue: any;\n  spaces: any[];\n  bookings: any[];\n}\n\ninterface AdvancedCalendarProps {\n  onEventClick?: (event: any) => void;\n}\n\nexport function AdvancedCalendar({ onEventClick }: AdvancedCalendarProps) {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [viewMode, setViewMode] = useState<'events' | 'venues'>('events');\n\n  // Fetch calendar data based on mode\n  const { data: calendarData, isLoading } = useQuery({\n    queryKey: [`/api/calendar/events`, viewMode],\n    queryFn: async () => {\n      const response = await fetch(`/api/calendar/events?mode=${viewMode}`);\n      if (!response.ok) throw new Error('Failed to fetch calendar data');\n      return response.json();\n    }\n  });\n\n  const events = calendarData?.mode === 'events' ? calendarData.data as CalendarEvent[] : [];\n  const venueData = calendarData?.mode === 'venues' ? calendarData.data as VenueCalendarData[] : [];\n\n  // Generate calendar grid - completely rewritten to avoid duplicates\n  const monthStart = startOfMonth(currentDate);\n  const firstDayOfWeek = monthStart.getDay(); // 0 = Sunday\n  \n  // Start from the first day of the calendar week (could be previous month)\n  const calendarStart = new Date(monthStart);\n  calendarStart.setDate(monthStart.getDate() - firstDayOfWeek);\n  \n  // Generate exactly 42 consecutive days starting from calendar start\n  const paddedDays = [];\n  for (let i = 0; i < 42; i++) {\n    const date = new Date(calendarStart);\n    date.setDate(calendarStart.getDate() + i);\n    paddedDays.push(date);\n  }\n\n  // Get events for a specific day - exclude cancelled events from calendar view\n  const getEventsForDay = (date: Date) => {\n    const filteredEvents = events.filter(event => \n      isSameDay(new Date(event.start), date) && event.status !== 'cancelled'\n    );\n    // Debug logging to help identify duplicate event issues\n    if (filteredEvents.length > 0) {\n      console.log(`Events for ${format(date, 'yyyy-MM-dd')}:`, filteredEvents.map(e => ({\n        id: e.id,\n        title: e.title,\n        guestCount: e.guestCount,\n        status: e.status\n      })));\n    }\n    return filteredEvents;\n  };\n\n  // Navigate calendar\n  const previousMonth = () => setCurrentDate(subMonths(currentDate, 1));\n  const nextMonth = () => setCurrentDate(addMonths(currentDate, 1));\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full space-y-6\">\n      {/* Minimal Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <h2 className=\"text-2xl font-light text-slate-900\">\n            {format(currentDate, 'MMMM yyyy')}\n          </h2>\n          <div className=\"flex items-center gap-1\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={previousMonth}\n              className=\"h-8 w-8 hover:bg-slate-100 rounded-full\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={nextMonth}\n              className=\"h-8 w-8 hover:bg-slate-100 rounded-full\"\n            >\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n        \n        {/* Clean Mode Toggle */}\n        <div className=\"flex bg-slate-50 rounded-lg p-1\">\n          <button\n            onClick={() => setViewMode('events')}\n            className={`px-4 py-2 text-sm font-medium rounded-md transition-all ${\n              viewMode === 'events' \n                ? 'bg-white text-slate-900 shadow-sm' \n                : 'text-slate-500 hover:text-slate-900'\n            }`}\n          >\n            Events\n          </button>\n          <button\n            onClick={() => setViewMode('venues')}\n            className={`px-4 py-2 text-sm font-medium rounded-md transition-all ${\n              viewMode === 'venues' \n                ? 'bg-white text-slate-900 shadow-sm' \n                : 'text-slate-500 hover:text-slate-900'\n            }`}\n          >\n            Venues\n          </button>\n        </div>\n      </div>\n\n      {viewMode === 'events' ? (\n        <div>\n          {/* Mobile Calendar View */}\n          <div className=\"md:hidden space-y-3\">\n            {paddedDays.filter(day => {\n              const isCurrentMonth = isSameMonth(day, currentDate);\n              const dayEvents = getEventsForDay(day);\n              return isCurrentMonth && dayEvents.length > 0;\n            }).map((day, index) => {\n              const dayEvents = getEventsForDay(day);\n              const isToday = isSameDay(day, new Date());\n              \n              return (\n                <div key={index} className=\"bg-white border border-slate-200 rounded-lg p-4 shadow-sm\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className={`text-lg font-semibold ${isToday ? 'text-blue-600' : 'text-slate-900'}`}>\n                      {format(day, 'EEEE, MMM d')}\n                    </div>\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      {dayEvents.length} event{dayEvents.length !== 1 ? 's' : ''}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    {dayEvents.map((event, eventIndex) => {\n                      const statusConfig = getStatusConfig(event.status as EventStatus);\n                      const statusClasses = `${statusConfig.bgColor} ${statusConfig.textColor} ${statusConfig.borderColor} hover:opacity-90`;\n                      \n                      return (\n                        <div\n                          key={event.id}\n                          onClick={() => onEventClick?.(event)}\n                          className={`p-3 rounded-md cursor-pointer transition-all hover:shadow-sm border ${statusClasses}`}\n                        >\n                          <div className=\"font-semibold text-sm mb-2\">{event.title}</div>\n                          <div className=\"text-xs space-y-1\">\n                            <div className=\"flex items-center gap-2\">\n                              <Clock className=\"w-3 h-3\" />\n                              <span>{event.startTime} - {event.endTime}</span>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <Users className=\"w-3 h-3\" />\n                              <span>{event.guestCount} guests</span>\n                              <MapPin className=\"w-3 h-3 ml-2\" />\n                              <span>{event.spaceName}</span>\n                            </div>\n                            <div className=\"font-medium\">{event.customerName}</div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Desktop Calendar View */}\n          <div className=\"hidden md:block space-y-4\">\n            {/* Day Headers */}\n            <div className=\"grid grid-cols-7 gap-1\">\n              {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\n                <div key={day} className=\"text-center py-3 text-xs font-medium text-slate-400 uppercase tracking-wider\">\n                  {day}\n                </div>\n              ))}\n            </div>\n\n            {/* Calendar Grid - Enhanced with Better Event Cards */}\n            <div className=\"grid grid-cols-7 gap-1\">\n              {paddedDays.map((day, index) => {\n                const dayEvents = getEventsForDay(day);\n                const isCurrentMonth = isSameMonth(day, currentDate);\n                const isToday = isSameDay(day, new Date());\n                \n                return (\n                  <div \n                    key={index} \n                    className={`min-h-[160px] border border-slate-200 rounded-lg p-3 ${\n                      isCurrentMonth \n                        ? 'bg-white hover:bg-slate-50' \n                        : 'bg-slate-50/30'\n                    } transition-colors`}\n                  >\n                    {/* Day Number */}\n                    <div className={`text-sm font-semibold mb-3 ${\n                      isToday \n                        ? 'w-7 h-7 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs' \n                        : isCurrentMonth \n                          ? 'text-slate-900' \n                          : 'text-slate-400'\n                    }`}>\n                      {format(day, 'd')}\n                    </div>\n                    \n                    {/* Enhanced Event Cards */}\n                    <div className=\"space-y-2\">\n                      {dayEvents.slice(0, 3).map((event, eventIndex) => {\n                        const statusConfig = getStatusConfig(event.status as EventStatus);\n                        const statusClasses = `${statusConfig.bgColor} ${statusConfig.textColor} ${statusConfig.borderColor} hover:opacity-90`;\n                        \n                        return (\n                          <div\n                            key={event.id}\n                            onClick={() => onEventClick?.(event)}\n                            className={`text-xs p-2.5 rounded-md cursor-pointer transition-all hover:shadow-md border ${statusClasses}`}\n                            title={`${event.title} - ${event.customerName} - ${event.startTime}`}\n                          >\n                            <div className=\"font-semibold leading-tight mb-1.5 line-clamp-2 text-xs\">\n                              {event.title}\n                            </div>\n                            <div className=\"text-[10px] opacity-80 flex items-center gap-1 mb-1\">\n                              <Clock className=\"w-2.5 h-2.5 flex-shrink-0\" />\n                              <span className=\"truncate\">{event.startTime}</span>\n                            </div>\n                            <div className=\"text-[10px] opacity-80 flex items-center gap-1\">\n                              <Users className=\"w-2.5 h-2.5 flex-shrink-0\" />\n                              <span className=\"truncate\">{event.guestCount} guests</span>\n                            </div>\n                          </div>\n                        );\n                      })}\n                      \n                      {dayEvents.length > 3 && (\n                        <div className=\"text-xs text-slate-500 px-2 py-1.5 text-center bg-slate-50 rounded-md border border-slate-200\">\n                          +{dayEvents.length - 3} more\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          {/* Status Legend */}\n          <div className=\"mt-6 pt-4 border-t border-slate-200\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h4 className=\"text-sm font-semibold text-slate-700\">Status Legend</h4>\n              <div className=\"text-xs text-slate-500\">Hover for details</div>\n            </div>\n            \n            <div className=\"flex flex-wrap gap-3\">\n              {getAllStatuses().map((status) => {\n                const config = getStatusConfig(status.value);\n                return (\n                  <div \n                    key={status.value} \n                    className=\"group relative\"\n                    title={`${config.label}: ${config.description}`}\n                  >\n                    <div className=\"flex items-center gap-2 px-3 py-2 bg-white rounded-lg border border-slate-200 hover:border-slate-300 hover:shadow-sm transition-all duration-200 cursor-help\">\n                      <div \n                        className={`w-3 h-3 rounded-full border border-white shadow-sm`}\n                        style={{ backgroundColor: config.color }}\n                      />\n                      <span className=\"text-xs font-medium text-slate-700 whitespace-nowrap\">\n                        {config.label}\n                      </span>\n                    </div>\n                    \n                    {/* Tooltip on hover */}\n                    <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-slate-900 text-white text-xs rounded-lg shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-10 whitespace-nowrap\">\n                      {config.description}\n                      <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-slate-900\"></div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"space-y-6\">\n          {/* Venue Mode */}\n          {venueData.map((venue, index) => (\n            <Card key={index} className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"text-lg font-semibold\">{venue.venue.name}</h4>\n                <Badge variant=\"secondary\">\n                  {venue.bookings.length} booking{venue.bookings.length !== 1 ? 's' : ''}\n                </Badge>\n              </div>\n              \n              {venue.spaces.length > 0 && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-4\">\n                  {venue.spaces.map((space: any) => (\n                    <div key={space.id} className=\"p-3 bg-slate-50 rounded-lg\">\n                      <div className=\"font-medium\">{space.name}</div>\n                      <div className=\"text-sm text-slate-600\">\n                        Capacity: {space.capacity} • ${space.hourlyRate}/hour\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </Card>\n          ))}\n          \n          {/* Recent Bookings */}\n          {venueData.some(v => v.bookings.length > 0) && (\n            <Card className=\"p-6\">\n              <h5 className=\"text-lg font-semibold mb-4\">Recent Bookings</h5>\n              <div className=\"space-y-3\">\n                {venueData.flatMap(v => v.bookings).slice(0, 5).map((booking: any) => (\n                  <div key={booking.id} className=\"flex items-center justify-between p-3 bg-slate-50 rounded-lg\">\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium\">{booking.eventName}</div>\n                      <div className=\"text-sm text-slate-600\">\n                        {booking.venueName} • {booking.customerName} • {booking.guestCount} guests\n                      </div>\n                      <div className=\"text-xs text-slate-500\">\n                        {booking.eventDate ? format(new Date(booking.eventDate), 'MMM d, yyyy') : 'Date TBD'} • {booking.startTime} - {booking.endTime}\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge \n                        variant={booking.status === 'confirmed' ? 'default' : 'secondary'}\n                        className=\"mb-1\"\n                      >\n                        {booking.status}\n                      </Badge>\n                      <div className=\"text-sm font-medium\">\n                        ${parseFloat(booking.totalAmount || '0').toLocaleString()}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </Card>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":16789},"client/src/pages/packages.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { MobileNav } from \"@/components/layout/mobile-nav\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Package, Plus, Edit, Trash2, DollarSign, Check, Copy, Upload, Grid, List } from \"lucide-react\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useFormattedCurrency } from \"@/lib/currency\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { EditPackageModal } from \"@/components/forms/edit-package-modal\";\nimport { EditServiceModal } from \"@/components/forms/edit-service-modal\";\nimport { ImportMenuModal } from \"@/components/forms/import-menu-modal\";\n\nexport default function Packages() {\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n  const [showCreatePackageForm, setShowCreatePackageForm] = useState(false);\n  const [showCreateServiceForm, setShowCreateServiceForm] = useState(false);\n  const [editingPackage, setEditingPackage] = useState<any>(null);\n  const [editingService, setEditingService] = useState<any>(null);\n  const [showCategoryManager, setShowCategoryManager] = useState(false);\n  const [duplicatingService, setDuplicatingService] = useState<any>(null);\n  const [showImportPackages, setShowImportPackages] = useState(false);\n  const [showImportServices, setShowImportServices] = useState(false);\n  const [viewMode, setViewMode] = useState<'table' | 'cards'>('table');\n  const [categories, setCategories] = useState([\n    { id: \"catering\", name: \"Catering\", color: \"bg-orange-100 text-orange-800\" },\n    { id: \"entertainment\", name: \"Entertainment\", color: \"bg-purple-100 text-purple-800\" },\n    { id: \"decor\", name: \"Decor\", color: \"bg-pink-100 text-pink-800\" },\n    { id: \"photography\", name: \"Photography\", color: \"bg-blue-100 text-blue-800\" },\n    { id: \"equipment\", name: \"Equipment\", color: \"bg-gray-100 text-gray-800\" },\n    { id: \"additional\", name: \"Additional Services\", color: \"bg-green-100 text-green-800\" }\n  ]);\n  const [newCategory, setNewCategory] = useState({ name: \"\", color: \"bg-blue-100 text-blue-800\" });\n  const { toast } = useToast();\n  const { formatAmount } = useFormattedCurrency();\n\n  const getCategoryColor = (category: string) => {\n    const categoryConfig = categories.find(c => c.id === category);\n    return categoryConfig?.color || \"bg-gray-100 text-gray-800\";\n  };\n\n  const { data: packages, isLoading: packagesLoading } = useQuery({\n    queryKey: [\"/api/packages\"],\n  });\n\n  const { data: services, isLoading: servicesLoading } = useQuery({\n    queryKey: [\"/api/services\"],\n  });\n\n  const { data: taxSettings } = useQuery({\n    queryKey: [\"/api/tax-settings\"],\n  });\n\n  const [newPackage, setNewPackage] = useState({\n    name: \"\",\n    description: \"\",\n    basePrice: \"\",\n    category: \"wedding\",\n    includedServices: [] as string[]\n  });\n\n  const [newService, setNewService] = useState({\n    name: \"\",\n    description: \"\",\n    price: \"\",\n    category: \"additional\",\n    pricingModel: \"fixed\"\n  });\n\n  // Tax/Fee selection state\n  const [serviceTaxFeeSelection, setServiceTaxFeeSelection] = useState({\n    enabledTaxIds: [] as string[],\n    enabledFeeIds: [] as string[]\n  });\n\n  const [packageTaxFeeSelection, setPackageTaxFeeSelection] = useState({\n    enabledTaxIds: [] as string[],\n    enabledFeeIds: [] as string[]\n  });\n\n  // Live calculation functions\n  const calculateServiceTotal = () => {\n    if (!newService.price || !taxSettings) return 0;\n    \n    const basePrice = parseFloat(newService.price) || 0;\n    let total = basePrice;\n    \n    // Apply fees first\n    serviceTaxFeeSelection.enabledFeeIds.forEach(feeId => {\n      const fee = (taxSettings as any[]).find((t: any) => t.id === feeId);\n      if (fee) {\n        if (fee.calculation === 'percentage') {\n          total += (basePrice * parseFloat(fee.value)) / 100;\n        } else {\n          total += parseFloat(fee.value);\n        }\n      }\n    });\n    \n    // Apply taxes on the total including fees\n    serviceTaxFeeSelection.enabledTaxIds.forEach(taxId => {\n      const tax = (taxSettings as any[]).find((t: any) => t.id === taxId);\n      if (tax) {\n        total += (total * parseFloat(tax.value)) / 100;\n      }\n    });\n    \n    return total;\n  };\n\n  const calculatePackageTotal = () => {\n    if (!newPackage.basePrice || !taxSettings) return 0;\n    \n    const basePrice = parseFloat(newPackage.basePrice) || 0;\n    let total = basePrice;\n    \n    // Apply fees first\n    packageTaxFeeSelection.enabledFeeIds.forEach(feeId => {\n      const fee = (taxSettings as any[]).find((t: any) => t.id === feeId);\n      if (fee) {\n        if (fee.calculation === 'percentage') {\n          total += (basePrice * parseFloat(fee.value)) / 100;\n        } else {\n          total += parseFloat(fee.value);\n        }\n      }\n    });\n    \n    // Apply taxes on the total including fees\n    packageTaxFeeSelection.enabledTaxIds.forEach(taxId => {\n      const tax = (taxSettings as any[]).find((t: any) => t.id === taxId);\n      if (tax) {\n        total += (total * parseFloat(tax.value)) / 100;\n      }\n    });\n    \n    return total;\n  };\n\n  const createPackage = async () => {\n    if (!newPackage.name || !newPackage.basePrice) {\n      toast({\n        title: \"Required fields missing\",\n        description: \"Please provide package name and base price\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      await apiRequest(\"POST\", \"/api/packages\", {\n        name: newPackage.name,\n        description: newPackage.description,\n        category: newPackage.category,\n        price: parseFloat(newPackage.basePrice),\n        pricingModel: \"fixed\",\n        includedServiceIds: newPackage.includedServices,\n        enabledTaxIds: packageTaxFeeSelection.enabledTaxIds,\n        enabledFeeIds: packageTaxFeeSelection.enabledFeeIds\n      });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/packages\"] });\n      \n      setShowCreatePackageForm(false);\n      setNewPackage({\n        name: \"\",\n        description: \"\",\n        basePrice: \"\",\n        category: \"wedding\",\n        includedServices: [] as string[]\n      });\n      setPackageTaxFeeSelection({\n        enabledTaxIds: [],\n        enabledFeeIds: []\n      });\n      \n      toast({\n        title: \"Package created\",\n        description: `${newPackage.name} has been added successfully`\n      });\n    } catch (error) {\n      toast({\n        title: \"Creation failed\",\n        description: \"Could not create package\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const createService = async () => {\n    if (!newService.name || !newService.price) {\n      toast({\n        title: \"Required fields missing\",\n        description: \"Please provide service name and price\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      await apiRequest(\"POST\", \"/api/services\", {\n        ...newService,\n        price: parseFloat(newService.price),\n        enabledTaxIds: serviceTaxFeeSelection.enabledTaxIds,\n        enabledFeeIds: serviceTaxFeeSelection.enabledFeeIds\n      });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      \n      setShowCreateServiceForm(false);\n      setNewService({\n        name: \"\",\n        description: \"\",\n        price: \"\",\n        category: \"additional\",\n        pricingModel: \"fixed\"\n      });\n      setServiceTaxFeeSelection({\n        enabledTaxIds: [],\n        enabledFeeIds: []\n      });\n      \n      toast({\n        title: \"Service created\",\n        description: `${newService.name} has been added successfully`\n      });\n    } catch (error) {\n      toast({\n        title: \"Creation failed\",\n        description: \"Could not create service\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const duplicateService = async (service: any) => {\n    try {\n      const duplicatedService = {\n        name: `${service.name} (Copy)`,\n        description: service.description,\n        price: service.price,\n        category: service.category,\n        pricingModel: service.pricingModel\n      };\n      \n      await apiRequest(\"POST\", \"/api/services\", duplicatedService);\n      await queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      \n      toast({\n        title: \"Service duplicated\",\n        description: `${duplicatedService.name} has been created successfully`\n      });\n    } catch (error) {\n      toast({\n        title: \"Duplication failed\",\n        description: \"Could not duplicate service\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const duplicatePackage = async (packageData: any) => {\n    try {\n      const duplicatedPackage = {\n        name: `${packageData.name} (Copy)`,\n        description: packageData.description,\n        price: packageData.price,\n        services: packageData.services || [],\n        category: packageData.category\n      };\n      \n      await apiRequest(\"POST\", \"/api/packages\", duplicatedPackage);\n      await queryClient.invalidateQueries({ queryKey: [\"/api/packages\"] });\n      \n      toast({\n        title: \"Package duplicated\",\n        description: `${duplicatedPackage.name} has been created successfully`\n      });\n    } catch (error) {\n      toast({\n        title: \"Duplication failed\",\n        description: \"Could not duplicate package\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  if (packagesLoading || servicesLoading) {\n    return (\n      <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n        <div className=\"hidden lg:block\">\n          <Sidebar />\n        </div>\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          <Header title=\"Packages & Services\" subtitle=\"Manage event packages and add-on services\" />\n          <main className=\"flex-1 overflow-y-auto p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-8 bg-gray-200 rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <div className=\"hidden lg:block\">\n        <Sidebar />\n      </div>\n      \n      <MobileNav \n        isOpen={mobileNavOpen} \n        onClose={() => setMobileNavOpen(false)} \n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Packages & Services\" \n          subtitle=\"Manage event packages and additional services\"\n          onMobileMenuToggle={() => setMobileNavOpen(true)}\n          action={\n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowImportServices(true)}\n                className=\"border-gray-300 text-gray-600 hover:bg-gray-50\"\n              >\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Import Services\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowImportPackages(true)}\n                className=\"border-gray-300 text-gray-600 hover:bg-gray-50\"\n              >\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Import Packages\n              </Button>\n              <Dialog open={showCreateServiceForm} onOpenChange={setShowCreateServiceForm}>\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\" className=\"border-blue-600 text-blue-600 hover:bg-blue-50\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Service\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Create New Service</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label className=\"text-sm font-medium\">Service Name *</Label>\n                      <Input\n                        placeholder=\"e.g., Professional Photography\"\n                        value={newService.name}\n                        onChange={(e) => setNewService(prev => ({ ...prev, name: e.target.value }))}\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label className=\"text-sm font-medium\">Description</Label>\n                      <Textarea\n                        placeholder=\"Describe the service...\"\n                        value={newService.description}\n                        onChange={(e) => setNewService(prev => ({ ...prev, description: e.target.value }))}\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-3\">\n                      <div>\n                        <Label className=\"text-sm font-medium\">Price *</Label>\n                        <Input\n                          type=\"number\"\n                          placeholder=\"500\"\n                          value={newService.price}\n                          onChange={(e) => setNewService(prev => ({ ...prev, price: e.target.value }))}\n                          className=\"mt-1\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-sm font-medium\">Pricing Model</Label>\n                        <select\n                          value={newService.pricingModel || 'fixed'}\n                          onChange={(e) => setNewService(prev => ({ ...prev, pricingModel: e.target.value }))}\n                          className=\"w-full mt-1 px-3 py-2 border border-gray-300 rounded-md text-sm\"\n                        >\n                          <option value=\"fixed\">Fixed Price</option>\n                          <option value=\"per_person\">Per Person</option>\n                          <option value=\"per_hour\">Per Hour</option>\n                        </select>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label className=\"text-sm font-medium\">Category</Label>\n                      <select\n                        value={newService.category}\n                        onChange={(e) => setNewService(prev => ({ ...prev, category: e.target.value }))}\n                        className=\"w-full mt-1 px-3 py-2 border border-gray-300 rounded-md text-sm\"\n                      >\n                        {categories.map((category) => (\n                          <option key={category.id} value={category.id}>\n                            {category.name}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n\n                    {/* Tax & Fee Configuration */}\n                    {taxSettings && Array.isArray(taxSettings) && taxSettings.length > 0 && (\n                      <div className=\"space-y-3 border-t pt-4\">\n                        <div>\n                          <Label className=\"text-sm font-medium\">Tax & Fee Configuration</Label>\n                          <p className=\"text-xs text-slate-500 mb-3\">Select which taxes and fees apply to this service by default</p>\n                        </div>\n\n                        {/* Available Taxes */}\n                        {taxSettings.filter((item: any) => item.type === 'tax' && item.isActive).length > 0 && (\n                          <div>\n                            <Label className=\"text-xs font-medium text-slate-600 mb-2 block\">Taxes</Label>\n                            <div className=\"space-y-1 max-h-20 overflow-y-auto border rounded-md p-2 bg-slate-50\">\n                              {taxSettings\n                                .filter((item: any) => item.type === 'tax' && item.isActive)\n                                .map((tax: any) => (\n                                  <div key={tax.id} className=\"flex items-center space-x-2\">\n                                    <Checkbox\n                                      id={`service-tax-${tax.id}`}\n                                      checked={serviceTaxFeeSelection.enabledTaxIds.includes(tax.id)}\n                                      onCheckedChange={(checked) => {\n                                        setServiceTaxFeeSelection(prev => ({\n                                          ...prev,\n                                          enabledTaxIds: checked\n                                            ? [...prev.enabledTaxIds, tax.id]\n                                            : prev.enabledTaxIds.filter(id => id !== tax.id)\n                                        }));\n                                      }}\n                                    />\n                                    <label htmlFor={`service-tax-${tax.id}`} className=\"text-xs flex-1 cursor-pointer\">\n                                      {tax.name} ({tax.value}% {tax.applyTo})\n                                    </label>\n                                  </div>\n                                ))}\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Available Fees */}\n                        {taxSettings.filter((item: any) => (item.type === 'fee' || item.type === 'service_charge') && item.isActive).length > 0 && (\n                          <div>\n                            <Label className=\"text-xs font-medium text-slate-600 mb-2 block\">Fees</Label>\n                            <div className=\"space-y-1 max-h-20 overflow-y-auto border rounded-md p-2 bg-slate-50\">\n                              {taxSettings\n                                .filter((item: any) => (item.type === 'fee' || item.type === 'service_charge') && item.isActive)\n                                .map((fee: any) => (\n                                  <div key={fee.id} className=\"flex items-center space-x-2\">\n                                    <Checkbox\n                                      id={`service-fee-${fee.id}`}\n                                      checked={serviceTaxFeeSelection.enabledFeeIds.includes(fee.id)}\n                                      onCheckedChange={(checked) => {\n                                        setServiceTaxFeeSelection(prev => ({\n                                          ...prev,\n                                          enabledFeeIds: checked\n                                            ? [...prev.enabledFeeIds, fee.id]\n                                            : prev.enabledFeeIds.filter(id => id !== fee.id)\n                                        }));\n                                      }}\n                                    />\n                                    <label htmlFor={`service-fee-${fee.id}`} className=\"text-xs flex-1 cursor-pointer\">\n                                      {fee.name} (${fee.value} {fee.calculation === 'percentage' ? '%' : 'fixed'} {fee.applyTo})\n                                    </label>\n                                  </div>\n                                ))}\n                            </div>\n                          </div>\n                        )}\n\n                        <div className=\"text-xs text-slate-500 bg-blue-50 p-2 rounded\">\n                          <strong>Note:</strong> These settings can be overridden at the event level during booking.\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Live Pricing Preview */}\n                    {newService.price && parseFloat(newService.price) > 0 && (\n                      <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                        <h4 className=\"font-medium text-sm text-green-800 mb-2\">Pricing Preview</h4>\n                        <div className=\"space-y-1 text-sm\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-green-700\">Base Price:</span>\n                            <span className=\"font-medium\">${parseFloat(newService.price).toFixed(2)}</span>\n                          </div>\n                          \n                          {/* Show applied fees */}\n                          {serviceTaxFeeSelection.enabledFeeIds.length > 0 && (\n                            <>\n                              {serviceTaxFeeSelection.enabledFeeIds.map(feeId => {\n                                const fee = (taxSettings as any[])?.find((t: any) => t.id === feeId);\n                                if (!fee) return null;\n                                const basePrice = parseFloat(newService.price) || 0;\n                                const feeAmount = fee.calculation === 'percentage' \n                                  ? (basePrice * parseFloat(fee.value)) / 100 \n                                  : parseFloat(fee.value);\n                                return (\n                                  <div key={feeId} className=\"flex justify-between text-blue-600\">\n                                    <span>{fee.name}:</span>\n                                    <span>+${feeAmount.toFixed(2)}</span>\n                                  </div>\n                                );\n                              })}\n                            </>\n                          )}\n                          \n                          {/* Show applied taxes */}\n                          {serviceTaxFeeSelection.enabledTaxIds.length > 0 && (\n                            <>\n                              {serviceTaxFeeSelection.enabledTaxIds.map(taxId => {\n                                const tax = (taxSettings as any[])?.find((t: any) => t.id === taxId);\n                                if (!tax) return null;\n                                // Calculate tax on base + fees\n                                const baseWithFees = parseFloat(newService.price) || 0;\n                                let feeTotal = 0;\n                                serviceTaxFeeSelection.enabledFeeIds.forEach(fId => {\n                                  const f = (taxSettings as any[])?.find((t: any) => t.id === fId);\n                                  if (f) {\n                                    feeTotal += f.calculation === 'percentage' \n                                      ? (baseWithFees * parseFloat(f.value)) / 100 \n                                      : parseFloat(f.value);\n                                  }\n                                });\n                                const taxableAmount = baseWithFees + feeTotal;\n                                const taxAmount = (taxableAmount * parseFloat(tax.value)) / 100;\n                                return (\n                                  <div key={taxId} className=\"flex justify-between text-purple-600\">\n                                    <span>{tax.name}:</span>\n                                    <span>+${taxAmount.toFixed(2)}</span>\n                                  </div>\n                                );\n                              })}\n                            </>\n                          )}\n                          \n                          <div className=\"border-t border-green-300 pt-1 mt-2\">\n                            <div className=\"flex justify-between font-semibold text-green-800\">\n                              <span>Total Price:</span>\n                              <span>${calculateServiceTotal().toFixed(2)}</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                    \n                    <Button\n                      onClick={createService}\n                      className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                      disabled={!newService.name || !newService.price}\n                    >\n                      Create Service\n                    </Button>\n                  </div>\n                </DialogContent>\n              </Dialog>\n              \n              <Dialog open={showCreatePackageForm} onOpenChange={setShowCreatePackageForm}>\n                <DialogTrigger asChild>\n                  <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Package\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                  <DialogHeader>\n                    <DialogTitle>Create New Package</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"space-y-6\">\n                    {/* Basic Package Info */}\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label className=\"text-sm font-medium\">Package Name *</Label>\n                        <Input\n                          placeholder=\"e.g., Premium Wedding Package\"\n                          value={newPackage.name}\n                          onChange={(e) => setNewPackage(prev => ({ ...prev, name: e.target.value }))}\n                          className=\"mt-1\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label className=\"text-sm font-medium\">Description</Label>\n                        <Textarea\n                          placeholder=\"Describe what's included in this package...\"\n                          value={newPackage.description}\n                          onChange={(e) => setNewPackage(prev => ({ ...prev, description: e.target.value }))}\n                          className=\"mt-1\"\n                        />\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-3\">\n                        <div>\n                          <Label className=\"text-sm font-medium\">Base Price *</Label>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"2500\"\n                            value={newPackage.basePrice}\n                            onChange={(e) => setNewPackage(prev => ({ ...prev, basePrice: e.target.value }))}\n                            className=\"mt-1\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-sm font-medium\">Category</Label>\n                          <select\n                            value={newPackage.category}\n                            onChange={(e) => setNewPackage(prev => ({ ...prev, category: e.target.value }))}\n                            className=\"w-full mt-1 px-3 py-2 border border-gray-300 rounded-md text-sm\"\n                          >\n                            <option value=\"wedding\">Wedding</option>\n                            <option value=\"corporate\">Corporate</option>\n                            <option value=\"social\">Social</option>\n                            <option value=\"conference\">Conference</option>\n                          </select>\n                        </div>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    {/* Included Services Selection */}\n                    <div>\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <Label className=\"text-base font-medium\">Included Services</Label>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {newPackage.includedServices.length} selected\n                        </Badge>\n                      </div>\n                      \n                      {Array.isArray(services) && services.length > 0 ? (\n                        <div className=\"space-y-3 max-h-60 overflow-y-auto border rounded-lg p-3\">\n                          {services.map((service: any) => {\n                            const isSelected = newPackage.includedServices.includes(service.id);\n                            return (\n                              <div\n                                key={service.id}\n                                className={`p-3 border rounded-lg cursor-pointer transition-all ${\n                                  isSelected \n                                    ? 'border-blue-500 bg-blue-50' \n                                    : 'border-slate-200 hover:border-slate-300'\n                                }`}\n                                onClick={() => {\n                                  setNewPackage(prev => ({\n                                    ...prev,\n                                    includedServices: isSelected\n                                      ? prev.includedServices.filter((id: string) => id !== service.id)\n                                      : [...prev.includedServices, service.id]\n                                  }));\n                                }}\n                              >\n                                <div className=\"flex items-start justify-between\">\n                                  <div className=\"flex-1\">\n                                    <div className=\"font-medium text-sm\">{service.name}</div>\n                                    <div className=\"text-xs text-slate-600 mt-1\">\n                                      {service.description}\n                                    </div>\n                                    <div className=\"text-sm font-semibold text-green-600 mt-2\">\n                                      ${parseFloat(service.price).toFixed(2)}\n                                      <span className=\"text-xs text-slate-500\">\n                                        {service.pricingModel === 'per_person' && ' per person'}\n                                        {service.pricingModel === 'per_hour' && ' per hour'}\n                                        {service.pricingModel === 'fixed' && ' fixed'}\n                                      </span>\n                                    </div>\n                                  </div>\n                                  <div className=\"ml-3\">\n                                    {isSelected ? (\n                                      <div className=\"w-5 h-5 bg-blue-600 rounded flex items-center justify-center\">\n                                        <Check className=\"w-3 h-3 text-white\" />\n                                      </div>\n                                    ) : (\n                                      <div className=\"w-5 h-5 border-2 border-slate-300 rounded\"></div>\n                                    )}\n                                  </div>\n                                </div>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      ) : (\n                        <div className=\"text-center p-6 bg-slate-50 rounded-lg\">\n                          <p className=\"text-sm text-slate-600\">No services available</p>\n                          <p className=\"text-xs text-slate-500 mt-1\">Create services first to include them in packages</p>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Package Summary */}\n                    {newPackage.includedServices.length > 0 && (\n                      <div className=\"bg-slate-50 p-4 rounded-lg\">\n                        <h4 className=\"font-medium text-sm mb-3\">Package Summary</h4>\n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex justify-between\">\n                            <span>Base Price:</span>\n                            <span className=\"font-medium\">\n                              ${newPackage.basePrice ? parseFloat(newPackage.basePrice).toFixed(2) : '0.00'}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Included Services:</span>\n                            <span className=\"font-medium\">{newPackage.includedServices.length} services</span>\n                          </div>\n                          <div className=\"text-xs text-slate-600 mt-2\">\n                            Services are included in the base price. Additional services can be added during event creation.\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Tax & Fee Configuration */}\n                    {taxSettings && Array.isArray(taxSettings) && taxSettings.length > 0 && (\n                      <div className=\"space-y-4 border-t pt-4\">\n                        <div>\n                          <Label className=\"text-sm font-medium\">Tax & Fee Configuration</Label>\n                          <p className=\"text-xs text-slate-500 mb-3\">Select which taxes and fees apply to this package by default</p>\n                        </div>\n\n                        {/* Available Taxes */}\n                        {taxSettings.filter((item: any) => item.type === 'tax' && item.isActive).length > 0 && (\n                          <div>\n                            <Label className=\"text-xs font-medium text-slate-600 mb-2 block\">Taxes</Label>\n                            <div className=\"space-y-1 max-h-24 overflow-y-auto border rounded-md p-2 bg-slate-50\">\n                              {taxSettings\n                                .filter((item: any) => item.type === 'tax' && item.isActive)\n                                .map((tax: any) => (\n                                  <div key={tax.id} className=\"flex items-center space-x-2\">\n                                    <Checkbox\n                                      id={`package-tax-${tax.id}`}\n                                      checked={packageTaxFeeSelection.enabledTaxIds.includes(tax.id)}\n                                      onCheckedChange={(checked) => {\n                                        setPackageTaxFeeSelection(prev => ({\n                                          ...prev,\n                                          enabledTaxIds: checked\n                                            ? [...prev.enabledTaxIds, tax.id]\n                                            : prev.enabledTaxIds.filter(id => id !== tax.id)\n                                        }));\n                                      }}\n                                    />\n                                    <label htmlFor={`package-tax-${tax.id}`} className=\"text-xs flex-1 cursor-pointer\">\n                                      {tax.name} ({tax.value}% {tax.applyTo})\n                                    </label>\n                                  </div>\n                                ))}\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Available Fees */}\n                        {taxSettings.filter((item: any) => (item.type === 'fee' || item.type === 'service_charge') && item.isActive).length > 0 && (\n                          <div>\n                            <Label className=\"text-xs font-medium text-slate-600 mb-2 block\">Fees</Label>\n                            <div className=\"space-y-1 max-h-24 overflow-y-auto border rounded-md p-2 bg-slate-50\">\n                              {taxSettings\n                                .filter((item: any) => (item.type === 'fee' || item.type === 'service_charge') && item.isActive)\n                                .map((fee: any) => (\n                                  <div key={fee.id} className=\"flex items-center space-x-2\">\n                                    <Checkbox\n                                      id={`package-fee-${fee.id}`}\n                                      checked={packageTaxFeeSelection.enabledFeeIds.includes(fee.id)}\n                                      onCheckedChange={(checked) => {\n                                        setPackageTaxFeeSelection(prev => ({\n                                          ...prev,\n                                          enabledFeeIds: checked\n                                            ? [...prev.enabledFeeIds, fee.id]\n                                            : prev.enabledFeeIds.filter(id => id !== fee.id)\n                                        }));\n                                      }}\n                                    />\n                                    <label htmlFor={`package-fee-${fee.id}`} className=\"text-xs flex-1 cursor-pointer\">\n                                      {fee.name} (${fee.value} {fee.calculation === 'percentage' ? '%' : 'fixed'} {fee.applyTo})\n                                    </label>\n                                  </div>\n                                ))}\n                            </div>\n                          </div>\n                        )}\n\n                        <div className=\"text-xs text-slate-500 bg-blue-50 p-2 rounded\">\n                          <strong>Note:</strong> These settings can be overridden at the event level during booking.\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Live Pricing Preview */}\n                    {newPackage.basePrice && parseFloat(newPackage.basePrice) > 0 && (\n                      <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                        <h4 className=\"font-medium text-sm text-green-800 mb-2\">Pricing Preview</h4>\n                        <div className=\"space-y-1 text-sm\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-green-700\">Base Price:</span>\n                            <span className=\"font-medium\">${parseFloat(newPackage.basePrice).toFixed(2)}</span>\n                          </div>\n                          \n                          {/* Show applied fees */}\n                          {packageTaxFeeSelection.enabledFeeIds.length > 0 && (\n                            <>\n                              {packageTaxFeeSelection.enabledFeeIds.map(feeId => {\n                                const fee = (taxSettings as any[])?.find((t: any) => t.id === feeId);\n                                if (!fee) return null;\n                                const basePrice = parseFloat(newPackage.basePrice) || 0;\n                                const feeAmount = fee.calculation === 'percentage' \n                                  ? (basePrice * parseFloat(fee.value)) / 100 \n                                  : parseFloat(fee.value);\n                                return (\n                                  <div key={feeId} className=\"flex justify-between text-blue-600\">\n                                    <span>{fee.name}:</span>\n                                    <span>+${feeAmount.toFixed(2)}</span>\n                                  </div>\n                                );\n                              })}\n                            </>\n                          )}\n                          \n                          {/* Show applied taxes */}\n                          {packageTaxFeeSelection.enabledTaxIds.length > 0 && (\n                            <>\n                              {packageTaxFeeSelection.enabledTaxIds.map(taxId => {\n                                const tax = (taxSettings as any[])?.find((t: any) => t.id === taxId);\n                                if (!tax) return null;\n                                // Calculate tax on base + fees\n                                const baseWithFees = parseFloat(newPackage.basePrice) || 0;\n                                let feeTotal = 0;\n                                packageTaxFeeSelection.enabledFeeIds.forEach(fId => {\n                                  const f = (taxSettings as any[])?.find((t: any) => t.id === fId);\n                                  if (f) {\n                                    feeTotal += f.calculation === 'percentage' \n                                      ? (baseWithFees * parseFloat(f.value)) / 100 \n                                      : parseFloat(f.value);\n                                  }\n                                });\n                                const taxableAmount = baseWithFees + feeTotal;\n                                const taxAmount = (taxableAmount * parseFloat(tax.value)) / 100;\n                                return (\n                                  <div key={taxId} className=\"flex justify-between text-purple-600\">\n                                    <span>{tax.name}:</span>\n                                    <span>+${taxAmount.toFixed(2)}</span>\n                                  </div>\n                                );\n                              })}\n                            </>\n                          )}\n                          \n                          <div className=\"border-t border-green-300 pt-1 mt-2\">\n                            <div className=\"flex justify-between font-semibold text-green-800\">\n                              <span>Total Price:</span>\n                              <span>${calculatePackageTotal().toFixed(2)}</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                    \n                    <Button\n                      onClick={createPackage}\n                      className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                      disabled={!newPackage.name || !newPackage.basePrice}\n                    >\n                      Create Package\n                    </Button>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n          }\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6 space-y-8\">\n          {/* Event Packages Section */}\n          <div>\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center gap-2\">\n                <Package className=\"w-5 h-5 text-blue-600\" />\n                <h2 className=\"text-xl font-semibold\">Event Packages</h2>\n              </div>\n              <div className=\"flex items-center gap-1 border rounded-lg p-1\">\n                <Button\n                  variant={viewMode === 'table' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('table')}\n                  className=\"px-3 py-1\"\n                >\n                  <List className=\"w-4 h-4 mr-1\" />\n                  Table\n                </Button>\n                <Button\n                  variant={viewMode === 'cards' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('cards')}\n                  className=\"px-3 py-1\"\n                >\n                  <Grid className=\"w-4 h-4 mr-1\" />\n                  Cards\n                </Button>\n              </div>\n            </div>\n            \n            {viewMode === 'table' ? (\n              // Table View\n              <div className=\"bg-white rounded-lg border\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"text-left p-4 font-medium text-gray-600\">Package Name</th>\n                        <th className=\"text-left p-4 font-medium text-gray-600\">Category</th>\n                        <th className=\"text-left p-4 font-medium text-gray-600\">Price</th>\n                        <th className=\"text-left p-4 font-medium text-gray-600\">Pricing Model</th>\n                        <th className=\"text-left p-4 font-medium text-gray-600\">Included Services</th>\n                        <th className=\"text-left p-4 font-medium text-gray-600\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {Array.isArray(packages) && packages.map((pkg: any) => (\n                        <tr key={pkg.id} className=\"border-b hover:bg-gray-50\">\n                          <td className=\"p-4\">\n                            <div>\n                              <div className=\"font-medium text-gray-900\">{pkg.name}</div>\n                              <div className=\"text-sm text-gray-500 line-clamp-2\">\n                                {pkg.description || \"No description available\"}\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"p-4\">\n                            <Badge className={getCategoryColor(pkg.category)}>\n                              {pkg.category}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"font-semibold text-green-600\">\n                              ${pkg.price?.toLocaleString() || 0}\n                            </div>\n                          </td>\n                          <td className=\"p-4\">\n                            <Badge variant={pkg.pricingModel === 'fixed' ? 'default' : 'secondary'}>\n                              {pkg.pricingModel === 'fixed' ? 'Fixed Price' : 'Per Person'}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"text-sm text-gray-600\">\n                              {pkg.includedServiceIds && pkg.includedServiceIds.length > 0 ? (\n                                <div>\n                                  {pkg.includedServiceIds.length} service{pkg.includedServiceIds.length > 1 ? 's' : ''}\n                                  <div className=\"text-xs text-gray-400\">\n                                    {Array.isArray(services) && services\n                                      .filter((s: any) => pkg.includedServiceIds?.includes(s.id))\n                                      .slice(0, 2)\n                                      .map((s: any) => s.name)\n                                      .join(', ')}\n                                    {pkg.includedServiceIds.length > 2 && '...'}\n                                  </div>\n                                </div>\n                              ) : (\n                                <span className=\"text-gray-400\">No services</span>\n                              )}\n                            </div>\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"flex gap-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => setEditingPackage(pkg)}\n                              >\n                                <Edit className=\"w-3 h-3\" />\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleDeletePackage(pkg.id)}\n                                className=\"text-red-600 hover:bg-red-50\"\n                              >\n                                <Trash2 className=\"w-3 h-3\" />\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                      {(!packages || packages.length === 0) && (\n                        <tr>\n                          <td colSpan={6} className=\"p-8 text-center text-gray-500\">\n                            No packages available. Create your first package to get started.\n                          </td>\n                        </tr>\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            ) : (\n              // Cards View\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {Array.isArray(packages) && packages.map((pkg: any) => (\n                  <Card key={pkg.id} className=\"hover:shadow-lg transition-shadow group\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-lg\">{pkg.name}</CardTitle>\n                      <Badge className={getCategoryColor(pkg.category)}>\n                        {pkg.category}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <p className=\"text-sm text-gray-600 line-clamp-3\">\n                      {pkg.description || \"No description available\"}\n                    </p>\n                    \n                    <div className=\"text-2xl font-bold text-blue-600\">\n                      ${pkg.price?.toLocaleString() || 0}\n                    </div>\n                    \n                    {pkg.includedServiceIds && pkg.includedServiceIds.length > 0 && (\n                      <div className=\"space-y-1\">\n                        <p className=\"text-xs font-medium text-gray-700\">Included Services:</p>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {pkg.includedServiceIds.slice(0, 3).map((serviceId: string, index: number) => {\n                            const service = Array.isArray(services) ? services.find((s: any) => s.id === serviceId) : null;\n                            return (\n                              <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                {service?.name || 'Unknown Service'}\n                              </Badge>\n                            );\n                          })}\n                          {pkg.includedServiceIds.length > 3 && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              +{pkg.includedServiceIds.length - 3} more\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                    \n                    <div className=\"flex gap-2 pt-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1 text-xs\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setEditingPackage(pkg);\n                        }}\n                      >\n                        <Edit className=\"w-3 h-3 mr-1\" />\n                        Edit\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1 text-xs border-blue-200 text-blue-600 hover:bg-blue-50\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          duplicatePackage(pkg);\n                        }}\n                      >\n                        <Copy className=\"w-3 h-3 mr-1\" />\n                        Duplicate\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n                ))}\n              </div>\n            )}\n          </div>\n\n          <Separator />\n\n          {/* Service Categories Section */}\n          <div>\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center gap-2\">\n                <DollarSign className=\"w-5 h-5 text-green-600\" />\n                <h2 className=\"text-xl font-semibold\">Service Categories</h2>\n              </div>\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => setShowCategoryManager(true)}\n                className=\"border-green-600 text-green-600 hover:bg-green-50\"\n              >\n                <Edit className=\"w-4 h-4 mr-2\" />\n                Manage Categories\n              </Button>\n            </div>\n            \n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3 mb-6\">\n              {categories.map((category) => (\n                <div key={category.id} className=\"text-center\">\n                  <Badge className={`${category.color} px-3 py-2 w-full justify-center`}>\n                    {category.name}\n                  </Badge>\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    {Array.isArray(services) ? services.filter((s: any) => s.category === category.id).length : 0} services\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Services Section */}\n          <div>\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center gap-2\">\n                <DollarSign className=\"w-5 h-5 text-green-600\" />\n                <h2 className=\"text-xl font-semibold\">Services</h2>\n              </div>\n              <div className=\"flex items-center gap-1 border rounded-lg p-1\">\n                <Button\n                  variant={viewMode === 'table' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('table')}\n                  className=\"px-3 py-1\"\n                >\n                  <List className=\"w-4 h-4 mr-1\" />\n                  Table\n                </Button>\n                <Button\n                  variant={viewMode === 'cards' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('cards')}\n                  className=\"px-3 py-1\"\n                >\n                  <Grid className=\"w-4 h-4 mr-1\" />\n                  Cards\n                </Button>\n              </div>\n            </div>\n            \n            {viewMode === 'table' ? (\n              // Table View\n              <div className=\"bg-white rounded-lg border\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"text-left p-4 font-medium text-gray-600\">Service Name</th>\n                        <th className=\"text-left p-4 font-medium text-gray-600\">Category</th>\n                        <th className=\"text-left p-4 font-medium text-gray-600\">Price</th>\n                        <th className=\"text-left p-4 font-medium text-gray-600\">Pricing Model</th>\n                        <th className=\"text-left p-4 font-medium text-gray-600\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {Array.isArray(services) && services.map((service: any) => (\n                        <tr key={service.id} className=\"border-b hover:bg-gray-50\">\n                          <td className=\"p-4\">\n                            <div>\n                              <div className=\"font-medium text-gray-900\">{service.name}</div>\n                              <div className=\"text-sm text-gray-500 line-clamp-2\">\n                                {service.description || \"No description available\"}\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"p-4\">\n                            <Badge variant=\"outline\" className={`text-xs ${getCategoryColor(service.category)}`}>\n                              {service.category}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"font-semibold text-green-600\">\n                              ${service.price}\n                            </div>\n                          </td>\n                          <td className=\"p-4\">\n                            <Badge variant={service.pricingModel === 'fixed' ? 'default' : 'secondary'}>\n                              {service.pricingModel === 'fixed' ? 'Fixed Price' : \n                               service.pricingModel === 'per_person' ? 'Per Person' : \n                               service.pricingModel === 'per_hour' ? 'Per Hour' : 'Fixed Price'}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"flex gap-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => setEditingService(service)}\n                              >\n                                <Edit className=\"w-3 h-3\" />\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => setDuplicatingService(service)}\n                                className=\"border-blue-200 text-blue-600 hover:bg-blue-50\"\n                              >\n                                <Copy className=\"w-3 h-3\" />\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleDeleteService(service.id)}\n                                className=\"text-red-600 hover:bg-red-50\"\n                              >\n                                <Trash2 className=\"w-3 h-3\" />\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                      {(!services || services.length === 0) && (\n                        <tr>\n                          <td colSpan={5} className=\"p-8 text-center text-gray-500\">\n                            No services available. Create your first service to get started.\n                          </td>\n                        </tr>\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            ) : (\n              // Cards View\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                {Array.isArray(services) && services.map((service: any) => (\n                <Card key={service.id} className=\"hover:shadow-md transition-shadow group\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h3 className=\"font-medium text-sm\">{service.name}</h3>\n                      <Badge variant=\"outline\" className={`text-xs ${getCategoryColor(service.category)}`}>\n                        {service.category}\n                      </Badge>\n                    </div>\n                    \n                    <p className=\"text-xs text-gray-600 mb-3 line-clamp-2\">\n                      {service.description || \"No description\"}\n                    </p>\n                    \n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"text-lg font-semibold text-green-600\">\n                        ${service.price}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        {service.pricingModel === 'per_person' && 'per person'}\n                        {service.pricingModel === 'per_hour' && 'per hour'}\n                        {service.pricingModel === 'fixed' && 'fixed price'}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex gap-2 pt-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1 text-xs\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setEditingService(service);\n                        }}\n                      >\n                        <Edit className=\"w-3 h-3 mr-1\" />\n                        Edit\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1 text-xs border-blue-200 text-blue-600 hover:bg-blue-50\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          duplicateService(service);\n                        }}\n                      >\n                        <Copy className=\"w-3 h-3 mr-1\" />\n                        Duplicate\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n                ))}\n              </div>\n            )}\n          </div>\n          \n          <EditPackageModal \n            open={!!editingPackage} \n            onOpenChange={(open) => !open && setEditingPackage(null)} \n            package={editingPackage}\n          />\n          \n          <EditServiceModal \n            open={!!editingService} \n            onOpenChange={(open) => !open && setEditingService(null)} \n            service={editingService}\n          />\n          \n          {/* Category Management Modal */}\n          <Dialog open={showCategoryManager} onOpenChange={setShowCategoryManager}>\n            <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Manage Service Categories</DialogTitle>\n              </DialogHeader>\n              \n              <div className=\"space-y-6\">\n                {/* Add New Category */}\n                <div className=\"p-4 border rounded-lg bg-gray-50\">\n                  <h3 className=\"font-medium mb-3\">Add New Category</h3>\n                  <div className=\"flex gap-3\">\n                    <Input\n                      placeholder=\"Category name\"\n                      value={newCategory.name}\n                      onChange={(e) => setNewCategory(prev => ({ ...prev, name: e.target.value }))}\n                      className=\"flex-1\"\n                    />\n                    <select\n                      value={newCategory.color}\n                      onChange={(e) => setNewCategory(prev => ({ ...prev, color: e.target.value }))}\n                      className=\"px-3 py-2 border rounded-md text-sm\"\n                    >\n                      <option value=\"bg-blue-100 text-blue-800\">Blue</option>\n                      <option value=\"bg-green-100 text-green-800\">Green</option>\n                      <option value=\"bg-purple-100 text-purple-800\">Purple</option>\n                      <option value=\"bg-orange-100 text-orange-800\">Orange</option>\n                      <option value=\"bg-pink-100 text-pink-800\">Pink</option>\n                      <option value=\"bg-gray-100 text-gray-800\">Gray</option>\n                      <option value=\"bg-red-100 text-red-800\">Red</option>\n                      <option value=\"bg-yellow-100 text-yellow-800\">Yellow</option>\n                    </select>\n                    <Button\n                      onClick={() => {\n                        if (newCategory.name.trim()) {\n                          const id = newCategory.name.toLowerCase().replace(/[^a-z0-9]/g, '');\n                          setCategories(prev => [...prev, { \n                            id, \n                            name: newCategory.name.trim(), \n                            color: newCategory.color \n                          }]);\n                          setNewCategory({ name: \"\", color: \"bg-blue-100 text-blue-800\" });\n                          toast({ title: \"Category added successfully!\" });\n                        }\n                      }}\n                      disabled={!newCategory.name.trim()}\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add\n                    </Button>\n                  </div>\n                </div>\n                \n                {/* Existing Categories */}\n                <div>\n                  <h3 className=\"font-medium mb-3\">Existing Categories</h3>\n                  <div className=\"space-y-2\">\n                    {categories.map((category, index) => (\n                      <div key={category.id} className=\"flex items-center gap-3 p-3 border rounded-lg\">\n                        <Badge className={`${category.color} px-3 py-1`}>\n                          {category.name}\n                        </Badge>\n                        <span className=\"text-sm text-gray-500 flex-1\">\n                          ID: {category.id} • {Array.isArray(services) ? services.filter((s: any) => s.category === category.id).length : 0} services\n                        </span>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            if (confirm(`Delete category \"${category.name}\"? Services using this category will need to be updated.`)) {\n                              setCategories(prev => prev.filter((_, i) => i !== index));\n                              toast({ title: \"Category deleted successfully!\" });\n                            }\n                          }}\n                          className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex justify-end gap-3 mt-6\">\n                <Button variant=\"outline\" onClick={() => setShowCategoryManager(false)}>\n                  Close\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </main>\n      </div>\n      \n      {/* Import Modals */}\n      <ImportMenuModal \n        open={showImportPackages}\n        onOpenChange={setShowImportPackages}\n        type=\"packages\"\n      />\n      \n      <ImportMenuModal \n        open={showImportServices}\n        onOpenChange={setShowImportServices}\n        type=\"services\"\n      />\n    </div>\n  );\n}","size_bytes":67333},"client/src/pages/venues.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { MobileNav } from \"@/components/layout/mobile-nav\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { MapPin, Users, Plus, Edit, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { EditVenueModal } from \"@/components/forms/edit-venue-modal\";\nimport { EditSpaceModal } from \"@/components/forms/edit-space-modal\";\n\nexport default function Venues() {\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n  const [editingVenue, setEditingVenue] = useState<any>(null);\n  const [editingSpace, setEditingSpace] = useState<any>(null);\n  const [selectedVenueForSpaces, setSelectedVenueForSpaces] = useState<any>(null);\n  const { toast } = useToast();\n\n  const { data: venues, isLoading } = useQuery({\n    queryKey: [\"/api/venues-with-spaces\"],\n  });\n\n\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n        <div className=\"hidden lg:block\">\n          <Sidebar />\n        </div>\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          <Header title=\"Venues\" subtitle=\"Manage venue spaces and amenities\" />\n          <main className=\"flex-1 overflow-y-auto p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-8 bg-gray-200 rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <div className=\"hidden lg:block\">\n        <Sidebar />\n      </div>\n      \n      <MobileNav \n        isOpen={mobileNavOpen} \n        onClose={() => setMobileNavOpen(false)} \n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Venues\" \n          subtitle=\"Manage venue spaces and amenities\"\n          onMobileMenuToggle={() => setMobileNavOpen(true)}\n          action={\n            <Button \n              className=\"bg-blue-600 hover:bg-blue-700\"\n              onClick={() => setEditingVenue({})}\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Venue\n            </Button>\n          }\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"grid grid-cols-1 gap-6\">\n            {Array.isArray(venues) && venues.map((venue: any) => (\n              <Card key={venue.id} className=\"hover:shadow-lg transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">{venue.name}</CardTitle>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {venue.spaces?.length || 0} spaces\n                      </Badge>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setSelectedVenueForSpaces(venue);\n                          setEditingSpace({});\n                        }}\n                        className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-1\" />\n                        Add Space\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setEditingVenue(venue);\n                        }}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <p className=\"text-sm text-gray-600 line-clamp-2\">\n                    {venue.description || \"No description available\"}\n                  </p>\n                  \n                  <div className=\"flex items-center gap-4 text-sm text-gray-500\">\n                    {venue.location && (\n                      <div className=\"flex items-center gap-1\">\n                        <MapPin className=\"w-4 h-4\" />\n                        <span className=\"truncate\">{venue.location}</span>\n                      </div>\n                    )}\n                  </div>\n                  \n\n                  \n                  {/* Spaces List */}\n                  {venue.spaces && venue.spaces.length > 0 && (\n                    <div className=\"space-y-2\">\n                      <div className=\"text-sm font-medium text-slate-700\">Spaces:</div>\n                      <div className=\"space-y-1\">\n                        {venue.spaces.slice(0, 3).map((space: any) => (\n                          <div key={space.id} className=\"p-3 bg-slate-50 rounded-lg border border-slate-200\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <div className=\"flex items-center gap-2\">\n                                <span className=\"font-medium text-slate-900\">{space.name}</span>\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  {space.spaceType || 'hall'}\n                                </Badge>\n                              </div>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  setEditingSpace(space);\n                                  setSelectedVenueForSpaces(venue);\n                                }}\n                                className=\"h-6 w-6 p-0\"\n                              >\n                                <Edit className=\"w-3 h-3\" />\n                              </Button>\n                            </div>\n                            \n                            <div className=\"flex items-center gap-4 text-sm text-slate-600 mb-2\">\n                              <div className=\"flex items-center gap-1\">\n                                <Users className=\"w-3 h-3\" />\n                                <span>{space.capacity} guests</span>\n                              </div>\n                              {space.amenities && space.amenities.length > 0 && (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {space.amenities.length} amenities\n                                </Badge>\n                              )}\n                              {space.availableSetupStyles && space.availableSetupStyles.length > 0 && (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {space.availableSetupStyles.length} setups\n                                </Badge>\n                              )}\n                            </div>\n                            \n                            {space.description && (\n                              <p className=\"text-xs text-slate-500 line-clamp-1 mb-2\">{space.description}</p>\n                            )}\n                            \n                            {space.features && (\n                              <div className=\"text-xs text-slate-600\">\n                                <span className=\"font-medium\">Features: </span>\n                                <span className=\"line-clamp-1\">{space.features}</span>\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                        {venue.spaces.length > 3 && (\n                          <div className=\"text-xs text-slate-500 text-center py-1\">\n                            +{venue.spaces.length - 3} more spaces\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                  \n\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n          \n          <EditVenueModal \n            open={!!editingVenue} \n            onOpenChange={(open) => !open && setEditingVenue(null)} \n            venue={editingVenue}\n          />\n\n          <EditSpaceModal \n            open={!!editingSpace} \n            onOpenChange={(open) => !open && setEditingSpace(null)} \n            space={editingSpace}\n            venueId={selectedVenueForSpaces?.id}\n            venueName={selectedVenueForSpaces?.name}\n          />\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":9479},"client/src/components/forms/proposal-actions-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, CheckCircle, Send, Eye, FileText, ArrowRight, X } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  proposal: any;\n}\n\nexport function ProposalActionsModal({ open, onOpenChange, proposal }: Props) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [isConverting, setIsConverting] = useState(false);\n\n  const updateProposalStatus = useMutation({\n    mutationFn: async ({ status }: { status: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/proposals/${proposal?.id}`, { \n        status,\n        sentAt: status === 'sent' ? new Date() : undefined,\n        viewedAt: status === 'viewed' ? new Date() : undefined\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/proposals\"] });\n      toast({ title: \"Proposal status updated!\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to update proposal\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const convertToBooking = useMutation({\n    mutationFn: async () => {\n      setIsConverting(true);\n      const response = await apiRequest(\"POST\", `/api/proposals/${proposal?.id}/convert-to-booking`);\n      return response.json();\n    },\n    onSuccess: (booking) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/proposals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      toast({ \n        title: \"Proposal converted to booking!\", \n        description: `Event \"${booking.eventName}\" has been created and is ready for management.`\n      });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to convert proposal\", description: error.message, variant: \"destructive\" });\n      setIsConverting(false);\n    }\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"accepted\": return \"bg-green-100 text-green-800\";\n      case \"sent\": return \"bg-blue-100 text-blue-800\";\n      case \"viewed\": return \"bg-yellow-100 text-yellow-800\";\n      case \"draft\": return \"bg-gray-100 text-gray-800\";\n      case \"rejected\": return \"bg-red-100 text-red-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const canConvertToBooking = proposal?.status === 'accepted';\n  const canMarkAsSent = proposal?.status === 'draft';\n  const canMarkAsAccepted = proposal?.status === 'viewed' || proposal?.status === 'sent';\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-lg p-0\">\n        <DialogTitle className=\"sr-only\">Proposal Actions</DialogTitle>\n        <DialogDescription className=\"sr-only\">\n          Manage proposal status and convert accepted proposals to bookings.\n        </DialogDescription>\n        \n        <div className=\"border-b border-slate-200 p-6 flex items-center gap-3\">\n          <FileText className=\"h-5 w-5 text-blue-600\" />\n          <div>\n            <h2 className=\"text-xl font-semibold\">Proposal Actions</h2>\n            <p className=\"text-sm text-slate-600\">{proposal?.title || \"Untitled Proposal\"}</p>\n          </div>\n        </div>\n\n        <div className=\"p-6 space-y-6\">\n          {/* Current Status */}\n          <div className=\"flex items-center justify-between p-4 bg-slate-50 rounded-lg\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-700\">Current Status</p>\n              <div className=\"flex items-center gap-2 mt-1\">\n                <Badge className={getStatusColor(proposal?.status)}>\n                  {proposal?.status?.charAt(0).toUpperCase() + proposal?.status?.slice(1)}\n                </Badge>\n                {proposal?.sentAt && (\n                  <span className=\"text-xs text-slate-500\">\n                    Sent {format(new Date(proposal.sentAt), 'MMM d')}\n                  </span>\n                )}\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-lg font-semibold text-blue-600\">\n                ${proposal?.totalAmount?.toLocaleString() || '0'}\n              </p>\n              <p className=\"text-xs text-slate-500\">Total Value</p>\n            </div>\n          </div>\n\n          {/* Status Actions */}\n          <div className=\"space-y-3\">\n            <h3 className=\"font-medium text-slate-800\">Status Updates</h3>\n            \n            {canMarkAsSent && (\n              <Button \n                variant=\"outline\" \n                className=\"w-full justify-start\" \n                onClick={() => updateProposalStatus.mutate({ status: 'sent' })}\n                disabled={updateProposalStatus.isPending}\n              >\n                <Send className=\"w-4 h-4 mr-3\" />\n                Mark as Sent to Customer\n              </Button>\n            )}\n\n            <Button \n              variant=\"outline\" \n              className=\"w-full justify-start\" \n              onClick={() => updateProposalStatus.mutate({ status: 'viewed' })}\n              disabled={updateProposalStatus.isPending}\n            >\n              <Eye className=\"w-4 h-4 mr-3\" />\n              Mark as Viewed by Customer\n            </Button>\n\n            {canMarkAsAccepted && (\n              <Button \n                variant=\"outline\" \n                className=\"w-full justify-start\" \n                onClick={() => updateProposalStatus.mutate({ status: 'accepted' })}\n                disabled={updateProposalStatus.isPending}\n              >\n                <CheckCircle className=\"w-4 h-4 mr-3\" />\n                Mark as Accepted\n              </Button>\n            )}\n          </div>\n\n          {/* Convert to Booking */}\n          {canConvertToBooking && (\n            <div className=\"space-y-3\">\n              <div className=\"border-t pt-4\">\n                <h3 className=\"font-medium text-slate-800 mb-3\">Ready for Booking</h3>\n                <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                    <span className=\"font-medium text-green-800\">Proposal Accepted!</span>\n                  </div>\n                  <p className=\"text-sm text-green-700 mb-4\">\n                    This proposal has been accepted and is ready to be converted into an active booking for event management.\n                  </p>\n                  <Button \n                    className=\"w-full bg-green-600 hover:bg-green-700\" \n                    onClick={() => convertToBooking.mutate()}\n                    disabled={isConverting}\n                  >\n                    <Calendar className=\"w-4 h-4 mr-2\" />\n                    <ArrowRight className=\"w-4 h-4 mr-2\" />\n                    {isConverting ? 'Converting...' : 'Convert to Booking'}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Workflow Guide */}\n          <div className=\"text-xs text-slate-500 bg-slate-50 p-3 rounded\">\n            <p className=\"font-medium mb-1\">Workflow:</p>\n            <p>Draft → Sent → Viewed → Accepted → Booking Created</p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7724},"client/src/components/forms/event-details-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { \n  X, \n  User, \n  Users, \n  Calendar, \n  Clock, \n  MapPin, \n  DollarSign, \n  Trash2, \n  MessageSquare, \n  Edit3, \n  Phone,\n  Mail,\n  CalendarIcon,\n  Plus,\n  Minus\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\nimport { getStatusConfig } from \"@shared/status-utils\";\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  booking: any;\n}\n\nexport function EventDetailsModal({ open, onOpenChange, booking }: Props) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [activeTab, setActiveTab] = useState(\"details\");\n  const [isEditing, setIsEditing] = useState(false);\n  \n  // Editable fields\n  const [eventName, setEventName] = useState(\"\");\n  const [eventType, setEventType] = useState(\"\");\n  const [eventDate, setEventDate] = useState<Date | undefined>(undefined);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [guestCount, setGuestCount] = useState(1);\n  const [selectedVenue, setSelectedVenue] = useState(\"\");\n  const [selectedSpace, setSelectedSpace] = useState(\"\");\n  const [selectedPackage, setSelectedPackage] = useState(\"\");\n  const [selectedServices, setSelectedServices] = useState<string[]>([]);\n  const [selectedCustomer, setSelectedCustomer] = useState(\"\");\n  const [eventStatus, setEventStatus] = useState(\"\");\n  const [paymentStatus, setPaymentStatus] = useState(\"unpaid\");\n  const [totalAmount, setTotalAmount] = useState(\"\");\n  const [depositAmount, setDepositAmount] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n  \n  // Communication\n  const [showContactModal, setShowContactModal] = useState(false);\n  const [contactMethod, setContactMethod] = useState(\"email\");\n  const [contactMessage, setContactMessage] = useState(\"\");\n\n  // Data queries\n  const { data: venues = [] } = useQuery({ queryKey: [\"/api/venues-with-spaces\"] });\n  const { data: packages = [] } = useQuery({ queryKey: [\"/api/packages\"] });\n  const { data: services = [] } = useQuery({ queryKey: [\"/api/services\"] });\n  const { data: customers = [] } = useQuery({ queryKey: [\"/api/customers\"] });\n\n  // Initialize form data when booking changes\n  useEffect(() => {\n    if (booking) {\n      setEventName(booking.eventName || \"\");\n      setEventType(booking.eventType || \"\");\n      setEventDate(booking.eventDate ? new Date(booking.eventDate) : undefined);\n      setStartTime(booking.startTime || \"\");\n      setEndTime(booking.endTime || \"\");\n      setGuestCount(booking.guestCount || 1);\n      setSelectedVenue(booking.venueId || \"\");\n      setSelectedSpace(booking.spaceId || \"\");\n      setSelectedPackage(booking.packageId || \"\");\n      setSelectedServices(booking.serviceIds || []);\n      setSelectedCustomer(booking.customerId || \"\");\n      setEventStatus(booking.status || \"confirmed\");\n      setPaymentStatus(booking.depositPaid ? \"paid\" : \"unpaid\");\n      setTotalAmount(booking.totalAmount || \"\");\n      setDepositAmount(booking.depositAmount || \"\");\n      setNotes(booking.notes || \"\");\n    }\n  }, [booking]);\n\n  const selectedVenueData = venues.find((v: any) => v.id === selectedVenue);\n  const selectedPackageData = packages.find((p: any) => p.id === selectedPackage);\n  const selectedCustomerData = customers.find((c: any) => c.id === selectedCustomer);\n\n  // Calculate pricing\n  const packagePrice = selectedPackageData ? parseFloat(selectedPackageData.price) * guestCount : 0;\n  const servicesPrice = selectedServices.reduce((total, serviceId) => {\n    const service = services.find((s: any) => s.id === serviceId);\n    return total + (service ? parseFloat(service.price) * guestCount : 0);\n  }, 0);\n  const calculatedTotal = packagePrice + servicesPrice;\n\n  const updateBooking = useMutation({\n    mutationFn: async (updates: any) => {\n      const response = await apiRequest(\"PATCH\", `/api/bookings/${booking?.id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      toast({ title: \"Event updated successfully!\" });\n      setIsEditing(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to update event\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const handleSave = () => {\n    const updates = {\n      eventName,\n      eventType,\n      eventDate,\n      startTime,\n      endTime,\n      guestCount,\n      venueId: selectedVenue,\n      spaceId: selectedSpace,\n      packageId: selectedPackage,\n      serviceIds: selectedServices,\n      customerId: selectedCustomer,\n      status: eventStatus,\n      depositPaid: paymentStatus === \"paid\",\n      totalAmount: totalAmount || calculatedTotal.toString(),\n      depositAmount,\n      notes,\n    };\n    updateBooking.mutate(updates);\n  };\n\n  const handleCancel = () => {\n    setIsEditing(false);\n    // Reset form to original values\n    if (booking) {\n      setEventName(booking.eventName || \"\");\n      setEventType(booking.eventType || \"\");\n      setEventDate(booking.eventDate ? new Date(booking.eventDate) : undefined);\n      setStartTime(booking.startTime || \"\");\n      setEndTime(booking.endTime || \"\");\n      setGuestCount(booking.guestCount || 1);\n      setSelectedVenue(booking.venueId || \"\");\n      setSelectedSpace(booking.spaceId || \"\");\n      setSelectedPackage(booking.packageId || \"\");\n      setSelectedServices(booking.serviceIds || []);\n      setSelectedCustomer(booking.customerId || \"\");\n      setEventStatus(booking.status || \"confirmed\");\n      setPaymentStatus(booking.depositPaid ? \"paid\" : \"unpaid\");\n      setTotalAmount(booking.totalAmount || \"\");\n      setDepositAmount(booking.depositAmount || \"\");\n      setNotes(booking.notes || \"\");\n    }\n  };\n\n  const handleServiceToggle = (serviceId: string) => {\n    setSelectedServices(prev => \n      prev.includes(serviceId) \n        ? prev.filter(id => id !== serviceId)\n        : [...prev, serviceId]\n    );\n  };\n\n  const deleteBooking = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"DELETE\", `/api/bookings/${booking?.id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      toast({ title: \"Event cancelled successfully!\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to cancel event\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const handleSaveStatus = () => {\n    updateBooking.mutate({\n      status: eventStatus,\n      depositPaid: paymentStatus === \"paid\",\n      notes: notes\n    });\n  };\n\n  const handleContact = () => {\n    // Here you would integrate with email/SMS services\n    toast({ \n      title: `${contactMethod === 'email' ? 'Email' : 'SMS'} sent!`, \n      description: `Message sent to customer via ${contactMethod}` \n    });\n    setShowContactModal(false);\n    setContactMessage(\"\");\n  };\n\n  const getStatusColor = (status: string) => {\n    // Use the centralized status utils for consistent coloring\n    return getStatusConfig(status).bgColor + \" \" + getStatusConfig(status).textColor;\n  };\n\n  const getPaymentStatusColor = (status: string) => {\n    switch (status) {\n      case \"paid\": return \"bg-green-100 text-green-800\";\n      case \"partial\": return \"bg-yellow-100 text-yellow-800\";\n      case \"unpaid\": return \"bg-red-100 text-red-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  if (!booking) return null;\n\n  return (\n    <>\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"max-w-4xl p-0 max-h-[90vh] overflow-hidden\">\n          <DialogTitle className=\"sr-only\">Event Details</DialogTitle>\n          \n          <div className=\"border-b border-slate-200 p-6 flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-xl font-semibold\">{booking?.eventName}</h2>\n              <p className=\"text-sm text-slate-600\">Event #{booking?.id?.slice(-8)}</p>\n            </div>\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => onOpenChange(false)}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"flex-1 overflow-hidden\">\n            <div className=\"px-6\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"details\">Details</TabsTrigger>\n                <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n              </TabsList>\n            </div>\n\n            <div className=\"flex-1 overflow-hidden\">\n              <TabsContent value=\"details\" className=\"h-full overflow-y-auto p-6 space-y-6\">\n                {/* Customer & Guest Info */}\n                <div className=\"grid grid-cols-2 gap-6\">\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <User className=\"h-4 w-4 text-slate-500\" />\n                    <span>Booked for</span>\n                    <span className=\"font-medium\">Customer Name</span>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Users className=\"h-4 w-4 text-slate-500\" />\n                    <span>{booking?.guestCount || 0} guests</span>\n                  </div>\n                </div>\n\n                {/* Status Controls */}\n                <div className=\"grid grid-cols-2 gap-6\">\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Event Status</label>\n                    <Select value={eventStatus} onValueChange={setEventStatus}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"confirmed\">\n                          <Badge className=\"bg-green-100 text-green-800\">Confirmed</Badge>\n                        </SelectItem>\n                        <SelectItem value=\"pending\">\n                          <Badge className=\"bg-yellow-100 text-yellow-800\">Pending</Badge>\n                        </SelectItem>\n                        <SelectItem value=\"cancelled\">\n                          <Badge className=\"bg-red-100 text-red-800\">Cancelled</Badge>\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Payment Status</label>\n                    <Select value={paymentStatus} onValueChange={setPaymentStatus}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"paid\">\n                          <Badge className=\"bg-green-100 text-green-800\">Paid</Badge>\n                        </SelectItem>\n                        <SelectItem value=\"partial\">\n                          <Badge className=\"bg-yellow-100 text-yellow-800\">Partial</Badge>\n                        </SelectItem>\n                        <SelectItem value=\"unpaid\">\n                          <Badge className=\"bg-red-100 text-red-800\">Unpaid</Badge>\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                {/* Event Details */}\n                <div>\n                  <h3 className=\"font-medium mb-3\">Event Details</h3>\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <Calendar className=\"h-4 w-4 text-slate-500\" />\n                          <span>{booking?.eventDate ? format(new Date(booking.eventDate), 'EEEE, MMMM d, yyyy') : 'No date set'}</span>\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <Clock className=\"h-4 w-4 text-slate-500\" />\n                          <span>{booking?.startTime || '00:00'} - {booking?.endTime || '00:00'}</span>\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <MapPin className=\"h-4 w-4 text-slate-500\" />\n                          <span>Venue Location</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Pricing */}\n                <div>\n                  <h3 className=\"font-medium mb-3\">Pricing</h3>\n                  <div className=\"text-right\">\n                    <div className=\"text-3xl font-bold\">\n                      ${booking?.totalAmount ? parseFloat(booking.totalAmount).toLocaleString() : '0.00'}\n                    </div>\n                    {booking?.depositAmount && (\n                      <div className=\"text-sm text-slate-600 mt-1\">\n                        Deposit: ${parseFloat(booking.depositAmount).toLocaleString()}\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Internal Notes */}\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Internal Notes</label>\n                  <Textarea\n                    value={notes}\n                    onChange={(e) => setNotes(e.target.value)}\n                    placeholder=\"Add notes...\"\n                    className=\"min-h-[100px]\"\n                  />\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"timeline\" className=\"h-full overflow-y-auto p-6\">\n                <div className=\"space-y-4\">\n                  <h3 className=\"font-medium\">Communication Log</h3>\n                  <div className=\"space-y-3\">\n                    <Card>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <span className=\"font-medium text-sm\">Event Created</span>\n                          <span className=\"text-xs text-slate-500\">\n                            {booking?.createdAt ? format(new Date(booking.createdAt), 'MMM d, h:mm a') : 'Recently'}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-slate-600\">Initial booking created and confirmed</p>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n              </TabsContent>\n            </div>\n          </Tabs>\n\n          {/* Actions Footer */}\n          <div className=\"border-t border-slate-200 p-6 flex justify-between items-center\">\n            <Button variant=\"outline\" className=\"text-red-600 border-red-200\" onClick={() => deleteBooking.mutate()}>\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n              Cancel Event\n            </Button>\n            \n            <div className=\"flex gap-3\">\n              <Button variant=\"outline\" onClick={() => setShowContactModal(true)}>\n                <MessageSquare className=\"h-4 w-4 mr-2\" />\n                Contact\n              </Button>\n              <Button onClick={handleSaveStatus}>\n                <Edit3 className=\"h-4 w-4 mr-2\" />\n                Save Changes\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Contact Customer Modal */}\n      <Dialog open={showContactModal} onOpenChange={setShowContactModal}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogTitle>Contact Customer</DialogTitle>\n          <div className=\"space-y-4\">\n            <div>\n              <p className=\"text-sm text-slate-600 mb-4\">To: Customer Name (email@example.com)</p>\n            </div>\n            \n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Method:</label>\n              <div className=\"flex gap-2\">\n                <Button \n                  variant={contactMethod === 'email' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setContactMethod('email')}\n                >\n                  <Mail className=\"h-4 w-4 mr-1\" />\n                  Email\n                </Button>\n                <Button \n                  variant={contactMethod === 'phone' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setContactMethod('phone')}\n                >\n                  <Phone className=\"h-4 w-4 mr-1\" />\n                  SMS\n                </Button>\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Message</label>\n              <Textarea\n                value={contactMessage}\n                onChange={(e) => setContactMessage(e.target.value)}\n                placeholder=\"Type your message...\"\n                className=\"min-h-[120px]\"\n              />\n            </div>\n            \n            <div className=\"flex justify-end gap-3 pt-4\">\n              <Button variant=\"outline\" onClick={() => setShowContactModal(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleContact}>\n                <MessageSquare className=\"h-4 w-4 mr-2\" />\n                Send\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":18795},"client/src/components/forms/edit-venue-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { X, Edit, Edit3, Save, Trash2, Plus } from \"lucide-react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card } from \"@/components/ui/card\";\nimport { CreateSpaceModal } from \"@/components/forms/create-space-modal\";\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  venue: any;\n}\n\nexport function EditVenueModal({ open, onOpenChange, venue }: Props) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [showCreateSpaceModal, setShowCreateSpaceModal] = useState(false);\n  const [editingSpace, setEditingSpace] = useState<any>(null);\n  const [editSpaceName, setEditSpaceName] = useState(\"\");\n  const [editSpaceCapacity, setEditSpaceCapacity] = useState(\"\");\n  const [editSpaceDescription, setEditSpaceDescription] = useState(\"\");\n\n  // Get spaces for this venue\n  const { data: spaces = [] } = useQuery({\n    queryKey: [`/api/venues/${venue?.id}/spaces`],\n    enabled: !!venue?.id && open\n  }) as { data: any[] };\n\n  useEffect(() => {\n    if (venue && open) {\n      setName(venue.name || \"\");\n      setDescription(venue.description || \"\");\n      setAddress(venue.address || \"\");\n    }\n  }, [venue, open]);\n\n  const updateVenue = useMutation({\n    mutationFn: async (data: any) => {\n      if (venue?.id) {\n        // Update existing venue\n        return await apiRequest(\"PATCH\", `/api/venues/${venue.id}`, data);\n      } else {\n        // Create new venue\n        return await apiRequest(\"POST\", \"/api/venues\", data);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/venues\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/venues-with-spaces\"] });\n      toast({ title: venue?.id ? \"Venue updated successfully!\" : \"Venue created successfully!\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ title: venue?.id ? \"Failed to update venue\" : \"Failed to create venue\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const deleteVenue = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"DELETE\", `/api/venues/${venue.id}`, {});\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/venues\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/venues-with-spaces\"] });\n      toast({ title: \"Venue deleted successfully!\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to delete venue\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const handleSave = () => {\n    updateVenue.mutate({\n      name,\n      description,\n      address\n    });\n  };\n\n  const handleDelete = () => {\n    if (confirm(\"Are you sure you want to delete this venue? This will also delete all associated spaces and may affect existing bookings.\")) {\n      deleteVenue.mutate();\n    }\n  };\n\n  const deleteSpace = useMutation({\n    mutationFn: async (spaceId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/spaces/${spaceId}`, {});\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/venues/${venue.id}/spaces`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/venues-with-spaces\"] });\n      toast({ title: \"Space deleted successfully!\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to delete space\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const updateSpace = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"PATCH\", `/api/spaces/${editingSpace.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/venues/${venue.id}/spaces`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/venues-with-spaces\"] });\n      toast({ title: \"Space updated successfully!\" });\n      setEditingSpace(null);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to update space\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const handleEditSpace = (space: any) => {\n    setEditingSpace(space);\n    setEditSpaceName(space.name || \"\");\n    setEditSpaceCapacity(space.capacity?.toString() || \"\");\n    setEditSpaceDescription(space.description || \"\");\n  };\n\n  const handleSaveSpace = () => {\n    if (!editSpaceName.trim() || !editSpaceCapacity.trim()) {\n      toast({\n        title: \"Required fields missing\",\n        description: \"Please provide space name and capacity\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    updateSpace.mutate({\n      name: editSpaceName,\n      capacity: parseInt(editSpaceCapacity),\n      description: editSpaceDescription,\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl p-0 max-h-[90vh] overflow-hidden flex flex-col\">\n        <DialogTitle className=\"sr-only\">Edit Venue</DialogTitle>\n        <DialogDescription className=\"sr-only\">\n          Edit venue property information including name, capacity, spaces, and amenities.\n        </DialogDescription>\n        \n        <div className=\"border-b border-slate-200 p-6 flex items-center gap-3\">\n          <Edit className=\"h-5 w-5 text-blue-600\" />\n          <h2 className=\"text-xl font-semibold\">\n            {venue?.id ? 'Edit Venue Property' : 'Create New Venue'}\n          </h2>\n        </div>\n\n        <div className=\"overflow-y-auto flex-1 p-6 space-y-4\">\n          <div className=\"space-y-4\">\n            <div>\n              <Label>Venue Name *</Label>\n              <Input value={name} onChange={(e) => setName(e.target.value)} className=\"mt-1\" />\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 gap-3\">\n            <div>\n              <Label className=\"text-sm\">Description</Label>\n              <Input \n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n                className=\"mt-1 text-sm\"\n                placeholder=\"Describe this venue property...\"\n              />\n            </div>\n            \n            <div>\n              <Label className=\"text-sm\">Address</Label>\n              <Input \n                value={address}\n                onChange={(e) => setAddress(e.target.value)}\n                className=\"mt-1 text-sm\"\n                placeholder=\"Full venue address...\"\n              />\n            </div>\n            \n\n          </div>\n\n          {/* Spaces Section - only show for existing venues */}\n          {venue?.id && (\n            <div>\n              <div className=\"flex items-center justify-between mb-3\">\n                <Label className=\"text-base font-medium\">Spaces in this Venue</Label>\n                <Button variant=\"outline\" size=\"sm\" onClick={() => setShowCreateSpaceModal(true)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Space\n                </Button>\n              </div>\n            \n            {spaces.length > 0 ? (\n              <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n                {spaces.map((space: any) => (\n                  <Card key={space.id} className=\"p-3 border border-slate-200\">\n                    {editingSpace?.id === space.id ? (\n                      <div className=\"space-y-3\">\n                        <div className=\"grid grid-cols-2 gap-2\">\n                          <Input\n                            value={editSpaceName}\n                            onChange={(e) => setEditSpaceName(e.target.value)}\n                            placeholder=\"Space name\"\n                            className=\"text-sm\"\n                          />\n                          <Input\n                            type=\"number\"\n                            value={editSpaceCapacity}\n                            onChange={(e) => setEditSpaceCapacity(e.target.value)}\n                            placeholder=\"Capacity\"\n                            className=\"text-sm\"\n                          />\n                        </div>\n                        <Input\n                          value={editSpaceDescription}\n                          onChange={(e) => setEditSpaceDescription(e.target.value)}\n                          placeholder=\"Description (optional)\"\n                          className=\"text-sm\"\n                        />\n                        <div className=\"flex gap-2\">\n                          <Button size=\"sm\" onClick={handleSaveSpace} disabled={updateSpace.isPending}>\n                            <Save className=\"h-3 w-3 mr-1\" />\n                            Save\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => setEditingSpace(null)}\n                          >\n                            Cancel\n                          </Button>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium text-sm\">{space.name}</div>\n                          <div className=\"text-xs text-slate-600\">\n                            {space.capacity} guests • {space.description || 'No description'}\n                          </div>\n                        </div>\n                        <div className=\"flex gap-1\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => handleEditSpace(space)}\n                            className=\"text-xs px-2 py-1 h-6\"\n                          >\n                            <Edit3 className=\"h-3 w-3\" />\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => {\n                              if (confirm(`Delete space \"${space.name}\"? This cannot be undone.`)) {\n                                deleteSpace.mutate(space.id);\n                              }\n                            }}\n                            className=\"text-xs px-2 py-1 h-6 text-red-600 border-red-200 hover:bg-red-50\"\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center p-4 bg-slate-50 rounded-lg\">\n                <p className=\"text-sm text-slate-600\">No spaces configured</p>\n                <p className=\"text-xs text-slate-500 mt-1\">Add bookable spaces within this property</p>\n              </div>\n            )}\n            </div>\n          )}\n        </div>\n\n        <div className=\"border-t border-slate-200 p-6 flex justify-between bg-white flex-shrink-0\">\n          {venue?.id && (\n            <Button variant=\"destructive\" onClick={handleDelete} disabled={deleteVenue.isPending}>\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n              {deleteVenue.isPending ? 'Deleting...' : 'Delete Venue'}\n            </Button>\n          )}\n          {!venue?.id && <div></div>}\n          \n          <div className=\"flex gap-3\">\n            <Button variant=\"outline\" onClick={() => onOpenChange(false)}>Cancel</Button>\n            <Button onClick={handleSave} disabled={updateVenue.isPending || !name.trim()}>\n              <Save className=\"h-4 w-4 mr-2\" />\n              {updateVenue.isPending \n                ? (venue?.id ? 'Updating...' : 'Creating...') \n                : (venue?.id ? 'Save Changes' : 'Create Venue')\n              }\n            </Button>\n          </div>\n        </div>\n        \n        <CreateSpaceModal\n          open={showCreateSpaceModal}\n          onOpenChange={setShowCreateSpaceModal}\n          venueId={venue?.id || \"\"}\n          venueName={venue?.name || \"\"}\n        />\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":12741},"client/src/components/forms/event-edit-full-modal.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { cn } from \"@/lib/utils\";\nimport { format, addMonths, subMonths, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isSameDay, getDay } from \"date-fns\";\nimport { ChevronLeft, ChevronRight, X, Plus, RotateCcw, Trash2, Save, Edit, Minus, FileText, Send, MessageSquare, Mail, Phone, Users, Grid3X3, MapPin, Calendar as CalendarIcon } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  booking: any;\n}\n\ninterface SelectedDate {\n  date: Date;\n  startTime: string;\n  endTime: string;\n  spaceId?: string;\n  packageId?: string;\n  selectedServices?: string[];\n  guestCount?: number;\n  setupStyle?: string;\n  itemQuantities?: Record<string, number>;\n  pricingOverrides?: {\n    packagePrice?: number;\n    servicePrices?: Record<string, number>;\n  };\n  serviceTaxOverrides?: Record<string, {\n    enabledTaxIds: string[];\n    enabledFeeIds: string[];\n    disabledInheritedTaxIds?: string[];\n    disabledInheritedFeeIds?: string[];\n  }>;\n}\n\nexport function EventEditFullModal({ open, onOpenChange, booking }: Props) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Step management\n  const [currentStep, setCurrentStep] = useState(1);\n  const [currentDate, setCurrentDate] = useState(new Date());\n  \n  // Step 1: Date & Venue Selection\n  const [selectedVenue, setSelectedVenue] = useState(\"\");\n  const [selectedDates, setSelectedDates] = useState<SelectedDate[]>([]);\n  \n  // Step 2: Event Configuration - now managed per date\n  const [activeTabIndex, setActiveTabIndex] = useState(0);\n  \n  // Copy config functionality\n  const [showCopyModal, setShowCopyModal] = useState(false);\n  const [selectedCopyIndices, setSelectedCopyIndices] = useState<number[]>([]);\n  \n  // Package and service selection states\n  const [showPackageSelection, setShowPackageSelection] = useState(false);\n  const [showAdditionalServices, setShowAdditionalServices] = useState(false);\n  \n  // New service creation\n  const [showNewServiceForm, setShowNewServiceForm] = useState(false);\n  const [newService, setNewService] = useState({\n    name: \"\",\n    description: \"\",\n    category: \"addon\",\n    price: \"\",\n    pricingModel: \"fixed\"\n  });\n  \n  // Generate time slots for dropdowns (AM/PM format)\n  const timeSlots = useMemo(() => {\n    const slots = [];\n    for (let hour = 0; hour < 24; hour++) {\n      for (let minute = 0; minute < 60; minute += 30) {\n        const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;\n        const ampm = hour < 12 ? 'AM' : 'PM';\n        const minuteStr = minute.toString().padStart(2, '0');\n        const displayTime = `${displayHour}:${minuteStr} ${ampm}`;\n        const value = `${hour.toString().padStart(2, '0')}:${minuteStr}`; // Store in 24-hour format\n        slots.push({ display: displayTime, value });\n      }\n    }\n    return slots;\n  }, []);\n\n  // Helper function to convert 24-hour format to AM/PM display\n  const formatTimeForDisplay = (time24: string) => {\n    if (!time24) return '';\n    const [hours, minutes] = time24.split(':');\n    const hour24 = parseInt(hours, 10);\n    const displayHour = hour24 === 0 ? 12 : hour24 > 12 ? hour24 - 12 : hour24;\n    const ampm = hour24 < 12 ? 'AM' : 'PM';\n    return `${displayHour}:${minutes} ${ampm}`;\n  };\n  \n  // Step 3: Final Details\n  const [eventName, setEventName] = useState(\"\");\n  const [selectedCustomer, setSelectedCustomer] = useState(\"\");\n  const [eventStatus, setEventStatus] = useState(\"inquiry\");\n  \n  // Communication state\n  const [showCommunication, setShowCommunication] = useState(false);\n  const [communicationMessage, setCommunicationMessage] = useState(\"\");\n  const [communicationType, setCommunicationType] = useState(\"email\");\n  \n  // Customer creation\n  const [showNewCustomerForm, setShowNewCustomerForm] = useState(false);\n  const [newCustomer, setNewCustomer] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    company: \"\"\n  });\n\n  // Tax/Fee configuration\n  const [taxFeeOverrides, setTaxFeeOverrides] = useState<{\n    enabledTaxIds: string[];\n    enabledFeeIds: string[];\n  }>({\n    enabledTaxIds: [],\n    enabledFeeIds: []\n  });\n\n  // Data queries\n  const { data: venues = [] } = useQuery({ queryKey: [\"/api/venues-with-spaces\"] });\n  const { data: packages = [] } = useQuery({ queryKey: [\"/api/packages\"] });\n  const { data: services = [] } = useQuery({ queryKey: [\"/api/services\"] });\n  const { data: customers = [] } = useQuery({ queryKey: [\"/api/customers\"] });\n  const { data: taxSettings = [] } = useQuery({ queryKey: [\"/api/tax-settings\"] });\n\n  // Initialize form data when booking changes\n  useEffect(() => {\n    if (booking && open) {\n      if (booking.isContract && booking.contractEvents) {\n        // Handle contract with multiple events\n        setEventName(booking.contractInfo?.contractName || \"Multi-Date Contract\");\n        setEventStatus(booking.status || \"inquiry\");\n        setSelectedVenue(booking.venueId || \"\");\n        setSelectedCustomer(booking.customerId || \"\");\n        \n        // Initialize all contract events as selected dates - preserve original dates\n        const contractDates = booking.contractEvents.map((event: any) => ({\n          date: event.eventDate ? new Date(event.eventDate) : new Date(),\n          startTime: event.startTime || \"09:00\",\n          endTime: event.endTime || \"17:00\",\n          spaceId: event.spaceId,\n          packageId: event.packageId || \"\",\n          selectedServices: event.selectedServices || [],\n          guestCount: event.guestCount || 1,\n          itemQuantities: event.itemQuantities || {},\n          pricingOverrides: event.pricingOverrides || {},\n          serviceTaxOverrides: event.serviceTaxOverrides || {}\n        }));\n        \n        setSelectedDates(contractDates);\n        setActiveTabIndex(0);\n        \n        // Initialize tax/fee overrides from contract data if available\n        if (booking.contractEvents?.[0]?.taxFeeOverrides) {\n          setTaxFeeOverrides(booking.contractEvents[0].taxFeeOverrides);\n        }\n      } else {\n        // Handle single event\n        setEventName(booking.eventName || \"\");\n        setEventStatus(booking.status || \"inquiry\");\n        setSelectedVenue(booking.venueId || \"\");\n        setSelectedCustomer(booking.customerId || \"\");\n        \n        // Initialize dates with existing booking data - preserve original date\n        const bookingDate: SelectedDate = {\n          date: booking.eventDate ? new Date(booking.eventDate) : new Date(),\n          startTime: booking.startTime || \"09:00\",\n          endTime: booking.endTime || \"17:00\", \n          spaceId: booking.spaceId,\n          packageId: booking.packageId || \"\",\n          selectedServices: booking.selectedServices || [],\n          guestCount: booking.guestCount || 1,\n          itemQuantities: booking.itemQuantities || {},\n          pricingOverrides: booking.pricingOverrides || {},\n          serviceTaxOverrides: booking.serviceTaxOverrides || {}\n        };\n        \n        setSelectedDates([bookingDate]);\n        setActiveTabIndex(0);\n        \n        // Initialize tax/fee overrides from booking data\n        if (booking.taxFeeOverrides) {\n          setTaxFeeOverrides(booking.taxFeeOverrides);\n        }\n      }\n    }\n  }, [booking, open]);\n\n  // Calendar calculations\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  const calendarDays = eachDayOfInterval({ start: monthStart, end: monthEnd });\n  \n  // Pad calendar to show full weeks\n  const startDay = getDay(monthStart);\n  const paddedDays = [\n    ...Array(startDay).fill(null).map((_, i) => {\n      const date = new Date(monthStart);\n      date.setDate(date.getDate() - (startDay - i));\n      return date;\n    }),\n    ...calendarDays\n  ];\n\n  // Per-date configuration helpers (same as create modal)\n  const updateDateTime = (index: number, field: keyof SelectedDate, value: any) => {\n    setSelectedDates(prev => prev.map((date, i) => \n      i === index ? { ...date, [field]: value } : date\n    ));\n  };\n\n  const updateDateConfig = (field: keyof SelectedDate, value: any) => {\n    if (activeDate) {\n      updateDateTime(activeTabIndex, field, value);\n    }\n  };\n\n  // Get active date configuration\n  const activeDate = selectedDates[activeTabIndex];\n  const selectedVenueData = (venues as any[]).find((v: any) => v.id === selectedVenue);\n  const selectedPackageData = (packages as any[]).find((p: any) => p.id === activeDate?.packageId);\n\n  // Calculate total price including taxes and fees\n  const totalPrice = useMemo(() => {\n    let subtotal = selectedDates.reduce((total, dateConfig) => {\n      let dateTotal = 0;\n      \n      // Package price\n      if (dateConfig.packageId) {\n        const pkg = (packages as any[]).find((p: any) => p.id === dateConfig.packageId);\n        if (pkg) {\n          const packagePrice = dateConfig.pricingOverrides?.packagePrice ?? parseFloat(pkg.price || 0);\n          dateTotal += pkg.pricingModel === 'per_person' \n            ? packagePrice * (dateConfig.guestCount || 1)\n            : packagePrice;\n        }\n      }\n      \n      // Services price\n      dateConfig.selectedServices?.forEach(serviceId => {\n        const service = (services as any[]).find((s: any) => s.id === serviceId);\n        if (service) {\n          const servicePrice = dateConfig.pricingOverrides?.servicePrices?.[serviceId] ?? parseFloat(service.price || 0);\n          if (service.pricingModel === 'per_person') {\n            dateTotal += servicePrice * (dateConfig.guestCount || 1);\n          } else {\n            const quantity = dateConfig.itemQuantities?.[serviceId] || 1;\n            dateTotal += servicePrice * quantity;\n          }\n        }\n      });\n      \n      return total + dateTotal;\n    }, 0);\n\n    // Calculate fees\n    let feesTotal = 0;\n    (taxSettings as any[])?.forEach((fee: any) => {\n      if ((fee.type === 'fee' || fee.type === 'service_charge') && \n          fee.isActive && \n          taxFeeOverrides.enabledFeeIds.includes(fee.id)) {\n        \n        if (fee.calculation === 'percentage') {\n          feesTotal += subtotal * (parseFloat(fee.value) / 100);\n        } else {\n          feesTotal += parseFloat(fee.value);\n        }\n      }\n    });\n\n    // Calculate taxes on subtotal + taxable fees\n    const taxableFees = (taxSettings as any[])\n      ?.filter((fee: any) => \n        (fee.type === 'fee' || fee.type === 'service_charge') && \n        fee.isActive && \n        fee.isTaxable &&\n        taxFeeOverrides.enabledFeeIds.includes(fee.id))\n      .reduce((sum, fee) => {\n        const feeAmount = fee.calculation === 'percentage' \n          ? subtotal * (parseFloat(fee.value) / 100)\n          : parseFloat(fee.value);\n        return sum + feeAmount;\n      }, 0) || 0;\n\n    const taxableBase = subtotal + taxableFees;\n    \n    let taxesTotal = 0;\n    (taxSettings as any[])?.forEach((tax: any) => {\n      if (tax.type === 'tax' && \n          tax.isActive && \n          taxFeeOverrides.enabledTaxIds.includes(tax.id)) {\n        \n        taxesTotal += taxableBase * (parseFloat(tax.value) / 100);\n      }\n    });\n\n    return subtotal + feesTotal + taxesTotal;\n  }, [selectedDates, packages, services, taxSettings, taxFeeOverrides]);\n\n  // Create customer mutation\n  const createCustomer = useMutation({\n    mutationFn: async (customerData: any) => {\n      return await apiRequest(\"POST\", \"/api/customers\", customerData);\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      setSelectedCustomer(data.id);\n      setShowNewCustomerForm(false);\n      setNewCustomer({ name: \"\", email: \"\", phone: \"\", company: \"\" });\n      toast({ title: \"Customer created successfully!\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to create customer\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  // Create service mutation\n  const createService = useMutation({\n    mutationFn: async (serviceData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/services\", serviceData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      // Auto-select the new service if on the services configuration step\n      if (activeDate) {\n        updateDateConfig('selectedServices', [...(activeDate.selectedServices || []), data.id]);\n      }\n      setShowNewServiceForm(false);\n      setNewService({ name: \"\", description: \"\", category: \"addon\", price: \"\", pricingModel: \"fixed\" });\n      toast({ title: \"Service created successfully!\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to create service\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const updateBooking = useMutation({\n    mutationFn: async (bookingData: any) => {\n      const response = await apiRequest(\"PATCH\", `/api/bookings/${booking.id}`, bookingData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/metrics\"] });\n      toast({ title: \"Event updated successfully!\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to update event\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const deleteBooking = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"DELETE\", `/api/bookings/${booking.id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/metrics\"] });\n      toast({ title: \"Event deleted successfully!\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to delete event\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const nextStep = () => setCurrentStep(prev => Math.min(prev + 1, 3));\n  const prevStep = () => setCurrentStep(prev => Math.max(prev - 1, 1));\n\n  // Handle new service creation\n  const handleCreateNewService = () => {\n    if (!newService.name.trim() || !newService.price.trim()) {\n      toast({ title: \"Please fill in all required fields\", variant: \"destructive\" });\n      return;\n    }\n\n    createService.mutate({\n      ...newService,\n      price: parseFloat(newService.price)\n    });\n  };\n\n  // Copy configuration to other dates\n  const copyConfigToOtherDates = () => {\n    if (!activeDate) return;\n    \n    const configToCopy = {\n      packageId: activeDate.packageId,\n      selectedServices: activeDate.selectedServices,\n      itemQuantities: activeDate.itemQuantities,\n      pricingOverrides: activeDate.pricingOverrides\n    };\n    \n    setSelectedDates(prev => prev.map(date => \n      date === activeDate ? date : { ...date, ...configToCopy }\n    ));\n    \n    setShowCopyModal(false);\n    toast({ title: \"Configuration copied successfully!\" });\n  };\n\n  const handleDateClick = (day: Date) => {\n    if (!isSameMonth(day, currentDate)) return;\n    \n    const existingIndex = selectedDates.findIndex(d => isSameDay(d.date, day));\n    if (existingIndex >= 0) {\n      setSelectedDates(prev => prev.filter((_, i) => i !== existingIndex));\n      if (activeTabIndex >= selectedDates.length - 1) {\n        setActiveTabIndex(Math.max(0, selectedDates.length - 2));\n      }\n    } else {\n      setSelectedDates(prev => [...prev, {\n        date: day,\n        startTime: \"09:00 AM\",\n        endTime: \"05:00 PM\",\n        spaceId: selectedVenueData?.spaces?.[0]?.id || \"\",\n        guestCount: 1,\n        packageId: \"\",\n        selectedServices: [],\n        itemQuantities: {},\n        pricingOverrides: {}\n      }]);\n    }\n  };\n\n  const updateDateSlot = (index: number, field: keyof SelectedDate, value: any) => {\n    setSelectedDates(prev => prev.map((slot, i) => \n      i === index ? { ...slot, [field]: value } : slot\n    ));\n  };\n\n  const handleSubmit = () => {\n    if (!eventName.trim() || !selectedCustomer || selectedDates.length === 0) {\n      toast({\n        title: \"Required fields missing\",\n        description: \"Please fill in event name, customer, and select at least one date\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Calculate the correct total amount using the new per-service tax logic\n    let calculatedTotal = 0;\n    selectedDates.forEach(date => {\n      // Package price\n      if (date.packageId) {\n        const pkg = (packages as any[])?.find((p: any) => p.id === date.packageId);\n        if (pkg) {\n          const packagePrice = date.pricingOverrides?.packagePrice ?? parseFloat(pkg.price || 0);\n          let packageSubtotal = 0;\n          if (pkg.pricingModel === 'per_person') {\n            packageSubtotal = packagePrice * (date.guestCount || 1);\n          } else {\n            packageSubtotal = packagePrice;\n          }\n          calculatedTotal += packageSubtotal;\n\n          // Calculate package fees and taxes using serviceTaxOverrides\n          const currentOverrides = date.serviceTaxOverrides?.[pkg.id] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n          \n          // Calculate effective fee IDs (inherited + additional - disabled)\n          const inheritedFeeIds = pkg.enabledFeeIds || [];\n          const additionalFeeIds = currentOverrides.enabledFeeIds || [];\n          const disabledFeeIds = currentOverrides.disabledInheritedFeeIds || [];\n          const effectiveFeeIds = [...inheritedFeeIds.filter((id: string) => !disabledFeeIds.includes(id)), ...additionalFeeIds];\n          \n          // Apply package fees\n          effectiveFeeIds.forEach((feeId: string) => {\n            const fee = (taxSettings as any[])?.find(f => f.id === feeId);\n            if (fee && fee.isActive) {\n              let feeAmount = 0;\n              if (fee.calculation === 'percentage') {\n                feeAmount = packageSubtotal * (parseFloat(fee.value) / 100);\n              } else {\n                feeAmount = parseFloat(fee.value);\n              }\n              calculatedTotal += feeAmount;\n              \n              // Apply taxes to fees if the fee is taxable\n              if (fee.isTaxable && fee.applicableTaxIds && fee.applicableTaxIds.length > 0) {\n                fee.applicableTaxIds.forEach((taxId: string) => {\n                  const tax = (taxSettings as any[])?.find(t => t.id === taxId);\n                  if (tax && tax.isActive) {\n                    const taxOnFeeAmount = feeAmount * (parseFloat(tax.value) / 100);\n                    calculatedTotal += taxOnFeeAmount;\n                  }\n                });\n              }\n            }\n          });\n\n          // Calculate effective tax IDs (inherited + additional - disabled)\n          const inheritedTaxIds = pkg.enabledTaxIds || [];\n          const additionalTaxIds = currentOverrides.enabledTaxIds || [];\n          const disabledTaxIds = currentOverrides.disabledInheritedTaxIds || [];\n          const effectiveTaxIds = [...inheritedTaxIds.filter((id: string) => !disabledTaxIds.includes(id)), ...additionalTaxIds];\n          \n          // Apply package taxes\n          effectiveTaxIds.forEach((taxId: string) => {\n            const tax = (taxSettings as any[])?.find(t => t.id === taxId);\n            if (tax && tax.isActive) {\n              const taxAmount = packageSubtotal * (parseFloat(tax.value) / 100);\n              calculatedTotal += taxAmount;\n            }\n          });\n        }\n      }\n      \n      // Services price\n      date.selectedServices?.forEach(serviceId => {\n        const service = (services as any[]).find((s: any) => s.id === serviceId);\n        if (service) {\n          const servicePrice = date.pricingOverrides?.servicePrices?.[serviceId] ?? parseFloat(service.price || 0);\n          let serviceSubtotal = 0;\n          if (service.pricingModel === 'per_person') {\n            serviceSubtotal = servicePrice * (date.guestCount || 1);\n          } else {\n            const quantity = date.itemQuantities?.[serviceId] || 1;\n            serviceSubtotal = servicePrice * quantity;\n          }\n          calculatedTotal += serviceSubtotal;\n\n          // Calculate service fees and taxes using serviceTaxOverrides\n          const currentOverrides = date.serviceTaxOverrides?.[serviceId] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n          \n          // Calculate effective fee IDs (inherited + additional - disabled)\n          const inheritedFeeIds = service.enabledFeeIds || [];\n          const additionalFeeIds = currentOverrides.enabledFeeIds || [];\n          const disabledFeeIds = currentOverrides.disabledInheritedFeeIds || [];\n          const effectiveFeeIds = [...inheritedFeeIds.filter((id: string) => !disabledFeeIds.includes(id)), ...additionalFeeIds];\n          \n          // Apply service fees\n          effectiveFeeIds.forEach((feeId: string) => {\n            const fee = (taxSettings as any[])?.find(f => f.id === feeId);\n            if (fee && fee.isActive) {\n              let feeAmount = 0;\n              if (fee.calculation === 'percentage') {\n                feeAmount = serviceSubtotal * (parseFloat(fee.value) / 100);\n              } else {\n                feeAmount = parseFloat(fee.value);\n              }\n              calculatedTotal += feeAmount;\n              \n              // Apply taxes to fees if the fee is taxable\n              if (fee.isTaxable && fee.applicableTaxIds && fee.applicableTaxIds.length > 0) {\n                fee.applicableTaxIds.forEach((taxId: string) => {\n                  const tax = (taxSettings as any[])?.find(t => t.id === taxId);\n                  if (tax && tax.isActive) {\n                    const taxOnFeeAmount = feeAmount * (parseFloat(tax.value) / 100);\n                    calculatedTotal += taxOnFeeAmount;\n                  }\n                });\n              }\n            }\n          });\n\n          // Calculate effective tax IDs (inherited + additional - disabled)\n          const inheritedTaxIds = service.enabledTaxIds || [];\n          const additionalTaxIds = currentOverrides.enabledTaxIds || [];\n          const disabledTaxIds = currentOverrides.disabledInheritedTaxIds || [];\n          const effectiveTaxIds = [...inheritedTaxIds.filter((id: string) => !disabledTaxIds.includes(id)), ...additionalTaxIds];\n          \n          // Apply service taxes\n          effectiveTaxIds.forEach((taxId: string) => {\n            const tax = (taxSettings as any[])?.find(t => t.id === taxId);\n            if (tax && tax.isActive) {\n              const taxAmount = serviceSubtotal * (parseFloat(tax.value) / 100);\n              calculatedTotal += taxAmount;\n            }\n          });\n        }\n      });\n    });\n\n    // For multi-date events, we'll submit the primary date\n    const primaryDate = selectedDates[0];\n    const bookingData = {\n      eventName,\n      eventType: selectedPackageData?.name || \"Custom Event\",\n      eventDate: primaryDate.date,\n      startTime: primaryDate.startTime,\n      endTime: primaryDate.endTime,\n      guestCount: primaryDate.guestCount || 1,\n      venueId: selectedVenue,\n      spaceId: primaryDate.spaceId,\n      packageId: primaryDate.packageId || null,\n      selectedServices: primaryDate.selectedServices || [],\n      customerId: selectedCustomer,\n      status: eventStatus,\n      totalAmount: calculatedTotal.toString(),\n      depositAmount: (calculatedTotal * 0.3).toString(),\n      depositPaid: false,\n      notes: \"\",\n      itemQuantities: primaryDate.itemQuantities || {},\n      pricingOverrides: primaryDate.pricingOverrides || {},\n      serviceTaxOverrides: primaryDate.serviceTaxOverrides || null\n    };\n\n    updateBooking.mutate(bookingData);\n  };\n\n  const handleDelete = () => {\n    if (confirm(\"Are you sure you want to delete this event? This action cannot be undone.\")) {\n      deleteBooking.mutate();\n    }\n  };\n\n  const resetForm = () => {\n    setCurrentStep(1);\n    setSelectedDates([]);\n    setSelectedVenue(\"\");\n    setEventName(\"\");\n    setSelectedCustomer(\"\");\n    setEventStatus(\"inquiry\");\n    setShowNewCustomerForm(false);\n    setNewCustomer({ name: \"\", email: \"\", phone: \"\", company: \"\" });\n  };\n\n  const handleCreateCustomer = () => {\n    if (!newCustomer.name || !newCustomer.email) {\n      toast({\n        title: \"Required fields missing\",\n        description: \"Please provide customer name and email\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    const customerData = {\n      ...newCustomer,\n      customerType: \"individual\" // CRITICAL: Add missing customerType\n    };\n    \n    createCustomer.mutate(customerData);\n  };\n\n  const handleCreateService = () => {\n    if (!newService.name || !newService.price) {\n      toast({\n        title: \"Required fields missing\",\n        description: \"Please provide service name and price\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    const serviceData = {\n      ...newService,\n      price: parseFloat(newService.price)\n    };\n    \n    createService.mutate(serviceData);\n  };\n\n  // Copy configuration functionality\n  const handleCopyConfig = (targetDateIndices: number[]) => {\n    if (!activeDate) return;\n    \n    const configToCopy = {\n      // Copy all configuration fields except date, startTime, endTime which are unique per date\n      spaceId: activeDate.spaceId,\n      packageId: activeDate.packageId,\n      selectedServices: activeDate.selectedServices ? [...activeDate.selectedServices] : [],\n      guestCount: activeDate.guestCount,\n      setupStyle: activeDate.setupStyle,\n      itemQuantities: activeDate.itemQuantities ? { ...activeDate.itemQuantities } : {},\n      pricingOverrides: activeDate.pricingOverrides ? {\n        packagePrice: activeDate.pricingOverrides.packagePrice,\n        servicePrices: activeDate.pricingOverrides.servicePrices ? { ...activeDate.pricingOverrides.servicePrices } : {}\n      } : {}\n    };\n    \n    setSelectedDates(prev => prev.map((date, index) => \n      targetDateIndices.includes(index) \n        ? { ...date, ...configToCopy }\n        : date\n    ));\n    \n    setShowCopyModal(false);\n    toast({ title: \"Configuration copied successfully!\" });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"w-full max-w-[95vw] sm:max-w-6xl max-h-[90vh] p-0 flex flex-col mx-2 sm:mx-4 overflow-hidden\">\n        <DialogTitle className=\"sr-only\">Edit Event</DialogTitle>\n        <DialogDescription className=\"sr-only\">\n          Edit event booking with date selection, venue configuration, and customer details.\n        </DialogDescription>\n\n        <div className=\"flex h-full overflow-hidden\">\n          {/* Sidebar - Steps */}\n          {currentStep > 1 && (\n            <div className=\"hidden lg:block w-80 bg-slate-50 border-r border-slate-200 p-6 overflow-y-auto flex-shrink-0\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"font-medium text-slate-900 mb-3\">Selected Date & Venue</h3>\n                  {selectedDates.length > 0 ? (\n                    <div className=\"space-y-2\">\n                      {selectedDates.map((slot, index) => (\n                        <Card key={index} className=\"p-3 bg-white\">\n                          <div className=\"text-sm font-medium\">{format(slot.date, 'MMM d, yyyy')}</div>\n                          <div className=\"text-xs text-slate-600\">\n                            {slot.startTime} - {slot.endTime}\n                          </div>\n                          <div className=\"text-xs text-slate-600\">\n                            {selectedVenueData?.name}\n                          </div>\n                        </Card>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-sm text-slate-500\">No dates selected</div>\n                  )}\n                </div>\n\n                {currentStep >= 2 && (\n                  <div>\n                    <h3 className=\"font-medium text-slate-900 mb-3\">Configuration</h3>\n                    <div className=\"space-y-2 text-sm\">\n                      {activeDate && (\n                        <>\n                          <div>Guest Count: <span className=\"font-medium\">{activeDate.guestCount}</span></div>\n                          {selectedPackageData && (\n                            <div>Package: <span className=\"font-medium\">{selectedPackageData.name}</span></div>\n                          )}\n                          {activeDate.selectedServices && activeDate.selectedServices.length > 0 && (\n                            <div>Services: <span className=\"font-medium\">{activeDate.selectedServices.length} selected</span></div>\n                          )}\n                        </>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                {currentStep >= 3 && (\n                  <div>\n                    <h3 className=\"font-medium text-slate-900 mb-3\">Event Details</h3>\n                    <div className=\"space-y-2 text-sm\">\n                      <div>Event: <span className=\"font-medium\">{eventName}</span></div>\n                      <div>Status: <Badge className=\"text-xs\">{eventStatus}</Badge></div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Main content area */}\n          <div className=\"flex-1 flex flex-col min-h-0\">\n            {/* Header */}\n            <div className=\"border-b border-slate-200 p-3 sm:p-6 flex-shrink-0\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center gap-4\">\n                  {currentStep > 1 && (\n                    <Button variant=\"ghost\" size=\"sm\" onClick={prevStep}>\n                      <ChevronLeft className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                  <div className=\"flex items-center gap-3\">\n                    <Edit className=\"h-5 w-5 text-blue-600\" />\n                    <h2 className=\"text-lg sm:text-xl font-semibold\">\n                      {booking?.isContract ? \"Edit Contract\" : \"Edit Event\"}\n                    </h2>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <Button variant=\"ghost\" size=\"sm\" onClick={resetForm}>\n                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                    Reset\n                  </Button>\n                </div>\n              </div>\n              \n              {/* Contract Summary */}\n              {booking?.isContract && booking?.contractInfo && (\n                <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-4\">\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-800\">\n                          Contract\n                        </Badge>\n                        <h3 className=\"font-semibold text-purple-900\">\n                          {booking.contractInfo.contractName || \"Multi-Date Contract\"}\n                        </h3>\n                      </div>\n                      <div className=\"text-sm text-purple-700 space-y-1\">\n                        <div className=\"flex items-center gap-4\">\n                          <span>{booking.eventCount} events scheduled</span>\n                          <span>Total {booking.contractEvents?.reduce((sum: number, event: any) => sum + (event.guestCount || 0), 0)} guests</span>\n                        </div>\n                        <div className=\"text-xs\">\n                          Event dates: {booking.contractEvents?.map((event: any) => \n                            format(new Date(event.eventDate), \"MMM d, yyyy\")\n                          ).join(\" • \")}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm font-medium text-purple-900\">\n                        Total Contract Value\n                      </div>\n                      <div className=\"text-lg font-bold text-purple-800\">\n                        ${(() => {\n                          // Calculate real-time total for all contract events using current configuration\n                          let contractTotal = 0;\n                          \n                          selectedDates.forEach(date => {\n                            // Package price\n                            if (date.packageId) {\n                              const pkg = (packages as any[])?.find((p: any) => p.id === date.packageId);\n                              if (pkg) {\n                                const packagePrice = date.pricingOverrides?.packagePrice ?? parseFloat(pkg.price || 0);\n                                let packageSubtotal = 0;\n                                if (pkg.pricingModel === 'per_person') {\n                                  packageSubtotal = packagePrice * (date.guestCount || 1);\n                                } else {\n                                  packageSubtotal = packagePrice;\n                                }\n                                contractTotal += packageSubtotal;\n\n                                // Calculate package fees and taxes using serviceTaxOverrides\n                                const currentOverrides = date.serviceTaxOverrides?.[pkg.id] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n                                \n                                // Calculate effective fee IDs (inherited + additional - disabled)\n                                const inheritedFeeIds = pkg.enabledFeeIds || [];\n                                const additionalFeeIds = currentOverrides.enabledFeeIds || [];\n                                const disabledFeeIds = currentOverrides.disabledInheritedFeeIds || [];\n                                const effectiveFeeIds = [...inheritedFeeIds.filter((id: string) => !disabledFeeIds.includes(id)), ...additionalFeeIds];\n                                \n                                // Apply package fees\n                                effectiveFeeIds.forEach((feeId: string) => {\n                                  const fee = (taxSettings as any[])?.find(f => f.id === feeId);\n                                  if (fee && fee.isActive) {\n                                    let feeAmount = 0;\n                                    if (fee.calculation === 'percentage') {\n                                      feeAmount = packageSubtotal * (parseFloat(fee.value) / 100);\n                                    } else {\n                                      feeAmount = parseFloat(fee.value);\n                                    }\n                                    contractTotal += feeAmount;\n                                    \n                                    // Apply taxes to fees if the fee is taxable\n                                    if (fee.isTaxable && fee.applicableTaxIds && fee.applicableTaxIds.length > 0) {\n                                      fee.applicableTaxIds.forEach((taxId: string) => {\n                                        const tax = (taxSettings as any[])?.find(t => t.id === taxId);\n                                        if (tax && tax.isActive) {\n                                          const taxOnFeeAmount = feeAmount * (parseFloat(tax.value) / 100);\n                                          contractTotal += taxOnFeeAmount;\n                                        }\n                                      });\n                                    }\n                                  }\n                                });\n\n                                // Calculate effective tax IDs (inherited + additional - disabled)\n                                const inheritedTaxIds = pkg.enabledTaxIds || [];\n                                const additionalTaxIds = currentOverrides.enabledTaxIds || [];\n                                const disabledTaxIds = currentOverrides.disabledInheritedTaxIds || [];\n                                const effectiveTaxIds = [...inheritedTaxIds.filter((id: string) => !disabledTaxIds.includes(id)), ...additionalTaxIds];\n                                \n                                // Apply package taxes\n                                effectiveTaxIds.forEach((taxId: string) => {\n                                  const tax = (taxSettings as any[])?.find(t => t.id === taxId);\n                                  if (tax && tax.isActive) {\n                                    const taxAmount = packageSubtotal * (parseFloat(tax.value) / 100);\n                                    contractTotal += taxAmount;\n                                  }\n                                });\n                              }\n                            }\n                            \n                            // Services price\n                            date.selectedServices?.forEach(serviceId => {\n                              const service = (services as any[]).find((s: any) => s.id === serviceId);\n                              if (service) {\n                                const servicePrice = date.pricingOverrides?.servicePrices?.[serviceId] ?? parseFloat(service.price || 0);\n                                let serviceSubtotal = 0;\n                                if (service.pricingModel === 'per_person') {\n                                  serviceSubtotal = servicePrice * (date.guestCount || 1);\n                                } else {\n                                  const quantity = date.itemQuantities?.[serviceId] || 1;\n                                  serviceSubtotal = servicePrice * quantity;\n                                }\n                                contractTotal += serviceSubtotal;\n\n                                // Calculate service fees and taxes using serviceTaxOverrides\n                                const currentOverrides = date.serviceTaxOverrides?.[serviceId] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n                                \n                                // Calculate effective fee IDs (inherited + additional - disabled)\n                                const inheritedFeeIds = service.enabledFeeIds || [];\n                                const additionalFeeIds = currentOverrides.enabledFeeIds || [];\n                                const disabledFeeIds = currentOverrides.disabledInheritedFeeIds || [];\n                                const effectiveFeeIds = [...inheritedFeeIds.filter((id: string) => !disabledFeeIds.includes(id)), ...additionalFeeIds];\n                                \n                                // Apply service fees\n                                effectiveFeeIds.forEach((feeId: string) => {\n                                  const fee = (taxSettings as any[])?.find(f => f.id === feeId);\n                                  if (fee && fee.isActive) {\n                                    let feeAmount = 0;\n                                    if (fee.calculation === 'percentage') {\n                                      feeAmount = serviceSubtotal * (parseFloat(fee.value) / 100);\n                                    } else {\n                                      feeAmount = parseFloat(fee.value);\n                                    }\n                                    contractTotal += feeAmount;\n                                    \n                                    // Apply taxes to fees if the fee is taxable\n                                    if (fee.isTaxable && fee.applicableTaxIds && fee.applicableTaxIds.length > 0) {\n                                      fee.applicableTaxIds.forEach((taxId: string) => {\n                                        const tax = (taxSettings as any[])?.find(t => t.id === taxId);\n                                        if (tax && tax.isActive) {\n                                          const taxOnFeeAmount = feeAmount * (parseFloat(tax.value) / 100);\n                                          contractTotal += taxOnFeeAmount;\n                                        }\n                                      });\n                                    }\n                                  }\n                                });\n\n                                // Calculate effective tax IDs (inherited + additional - disabled)\n                                const inheritedTaxIds = service.enabledTaxIds || [];\n                                const additionalTaxIds = currentOverrides.enabledTaxIds || [];\n                                const disabledTaxIds = currentOverrides.disabledInheritedTaxIds || [];\n                                const effectiveTaxIds = [...inheritedTaxIds.filter((id: string) => !disabledTaxIds.includes(id)), ...additionalTaxIds];\n                                \n                                // Apply service taxes\n                                effectiveTaxIds.forEach((taxId: string) => {\n                                  const tax = (taxSettings as any[])?.find(t => t.id === taxId);\n                                  if (tax && tax.isActive) {\n                                    const taxAmount = serviceSubtotal * (parseFloat(tax.value) / 100);\n                                    contractTotal += taxAmount;\n                                  }\n                                });\n                              }\n                            });\n                          });\n\n                          return contractTotal.toLocaleString();\n                        })()}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Step Content */}\n            <div className=\"flex-1 overflow-hidden\">\n              <div className=\"h-full p-3 sm:p-6 overflow-y-auto\">\n                {/* Step 1: Date & Venue Selection */}\n              {currentStep === 1 && (\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-8 h-full\">\n                  {/* Left: Calendar */}\n                  <div>\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <Button\n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => setCurrentDate(subMonths(currentDate, 1))}\n                      >\n                        <ChevronLeft className=\"h-4 w-4\" />\n                      </Button>\n                      <h3 className=\"text-lg font-semibold\">\n                        {format(currentDate, 'MMMM yyyy')}\n                      </h3>\n                      <Button\n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => setCurrentDate(addMonths(currentDate, 1))}\n                      >\n                        <ChevronRight className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n\n                    <div className=\"grid grid-cols-7 gap-1 mb-2\">\n                      {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n                        <div key={day} className=\"p-2 text-center text-sm font-medium text-slate-600\">\n                          {day}\n                        </div>\n                      ))}\n                    </div>\n\n                    <div className=\"grid grid-cols-7 gap-1\">\n                      {paddedDays.map((day, index) => {\n                        const isCurrentMonth = isSameMonth(day, currentDate);\n                        const isSelected = selectedDates.some(d => isSameDay(d.date, day));\n                        \n                        return (\n                          <button\n                            key={index}\n                            onClick={() => handleDateClick(day)}\n                            className={cn(\n                              \"h-12 w-12 rounded-full flex items-center justify-center text-sm font-medium transition-colors\",\n                              isCurrentMonth \n                                ? \"text-slate-900 hover:bg-slate-100\" \n                                : \"text-slate-400\",\n                              isSelected && \"bg-blue-600 text-white hover:bg-blue-700\"\n                            )}\n                          >\n                            {format(day, 'd')}\n                          </button>\n                        );\n                      })}\n                    </div>\n                  </div>\n\n                  {/* Right: Venue & Time Configuration */}\n                  <div className=\"space-y-6\">\n                    <div>\n                      <Label className=\"text-base font-medium\">Venue</Label>\n                      <Select value={selectedVenue} onValueChange={setSelectedVenue}>\n                        <SelectTrigger className=\"mt-2\">\n                          <SelectValue placeholder=\"Select a venue (property)\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {(venues as any[]).map((venue: any) => (\n                            <SelectItem key={venue.id} value={venue.id}>\n                              {venue.name} - {venue.spaces?.length || 0} spaces available\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      {selectedVenueData && (\n                        <div className=\"mt-2 p-3 bg-slate-50 rounded border\">\n                          <p className=\"text-sm text-slate-600 mb-2\">Available spaces in this venue:</p>\n                          <div className=\"space-y-1\">\n                            {selectedVenueData.spaces?.map((space: any) => (\n                              <div key={space.id} className=\"text-sm\">\n                                <span className=\"font-medium\">{space.name}</span> - {space.capacity} guests\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Time Slots Configuration */}\n                    {selectedDates.length > 0 && (\n                      <div>\n                        <Label className=\"text-base font-medium\">Configure Dates ({selectedDates.length})</Label>\n                        <div className=\"mt-3 space-y-3 max-h-64 overflow-y-auto\">\n                          {selectedDates.map((slot, index) => (\n                            <Card key={index} className=\"group relative overflow-hidden border border-slate-200 bg-white shadow-sm hover:shadow-md transition-all duration-200\">\n                              {/* Modern gradient header */}\n                              <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border-b border-slate-100 p-4\">\n                                <div className=\"flex items-center justify-between\">\n                                  <div className=\"flex items-center gap-3\">\n                                    <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center text-white font-semibold text-sm\">\n                                      {format(slot.date, 'd')}\n                                    </div>\n                                    <div>\n                                      <h4 className=\"font-semibold text-slate-900 text-sm\">\n                                        {format(slot.date, 'EEEE, MMMM d')}\n                                      </h4>\n                                      <p className=\"text-xs text-slate-600 mt-0.5\">\n                                        {format(slot.date, 'yyyy')}\n                                      </p>\n                                    </div>\n                                  </div>\n                                  \n                                  {/* Availability indicator */}\n                                  <div className=\"flex items-center gap-2 px-3 py-1.5 bg-green-100 text-green-700 rounded-full text-xs font-medium\">\n                                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                                    Available\n                                  </div>\n                                </div>\n                              </div>\n\n                              {/* Form content */}\n                              <div className=\"p-5 space-y-4\">\n                                {/* Space Selection */}\n                                <div className=\"space-y-2\">\n                                  <Label className=\"text-sm font-medium text-slate-700 flex items-center gap-2\">\n                                    <MapPin className=\"w-4 h-4 text-slate-500\" />\n                                    Select Space\n                                    <span className=\"text-red-500 text-xs\">*</span>\n                                  </Label>\n                                  <Select\n                                    value={slot.spaceId || \"\"}\n                                    onValueChange={(value) => updateDateSlot(index, 'spaceId', value)}\n                                  >\n                                    <SelectTrigger className={cn(\n                                      \"w-full h-10 transition-colors\",\n                                      !slot.spaceId \n                                        ? \"border-red-200 bg-red-50/30 focus:border-red-400\" \n                                        : \"border-slate-200 hover:border-slate-300 focus:border-blue-400\"\n                                    )}>\n                                      <SelectValue placeholder=\"Choose a space\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      {selectedVenueData?.spaces?.map((space: any) => (\n                                        <SelectItem key={space.id} value={space.id}>\n                                          <div className=\"flex items-center justify-between w-full\">\n                                            <span>{space.name}</span>\n                                            <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                                              {space.capacity} guests\n                                            </Badge>\n                                          </div>\n                                        </SelectItem>\n                                      )) || <SelectItem value=\"no-spaces\" disabled>No spaces available</SelectItem>}\n                                    </SelectContent>\n                                  </Select>\n                                </div>\n                                \n                                {/* Time and Details Grid */}\n                                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                                  {/* Event Time */}\n                                  <div className=\"space-y-2\">\n                                    <Label className=\"text-sm font-medium text-slate-700 flex items-center gap-2\">\n                                      <CalendarIcon className=\"w-4 h-4 text-slate-500\" />\n                                      Event Time\n                                      <span className=\"text-red-500 text-xs\">*</span>\n                                    </Label>\n                                    <div className=\"flex items-center gap-2\">\n                                      <Select\n                                        value={slot.startTime}\n                                        onValueChange={(value) => updateDateSlot(index, 'startTime', value)}\n                                      >\n                                        <SelectTrigger className={cn(\n                                          \"flex-1 h-9 text-sm transition-colors\",\n                                          !slot.startTime \n                                            ? \"border-red-200 bg-red-50/30\" \n                                            : \"border-slate-200 hover:border-slate-300\"\n                                        )}>\n                                          <SelectValue placeholder=\"Start time\" />\n                                        </SelectTrigger>\n                                        <SelectContent>\n                                          {timeSlots.map((time) => (\n                                            <SelectItem key={time.value} value={time.value}>\n                                              {time.display}\n                                            </SelectItem>\n                                          ))}\n                                        </SelectContent>\n                                      </Select>\n                                      \n                                      <span className=\"text-slate-400 font-medium px-1\">→</span>\n                                      \n                                      <Select\n                                        value={slot.endTime}\n                                        onValueChange={(value) => updateDateSlot(index, 'endTime', value)}\n                                      >\n                                        <SelectTrigger className={cn(\n                                          \"flex-1 h-9 text-sm transition-colors\",\n                                          !slot.endTime \n                                            ? \"border-red-200 bg-red-50/30\" \n                                            : \"border-slate-200 hover:border-slate-300\"\n                                        )}>\n                                          <SelectValue placeholder=\"End time\" />\n                                        </SelectTrigger>\n                                        <SelectContent>\n                                          {timeSlots.map((time) => (\n                                            <SelectItem key={time.value} value={time.value}>\n                                              {time.display}\n                                            </SelectItem>\n                                          ))}\n                                        </SelectContent>\n                                      </Select>\n                                    </div>\n                                  </div>\n                                  \n                                  {/* Guests and Setup */}\n                                  <div className=\"grid grid-cols-2 gap-3\">\n                                    {/* Guest Count */}\n                                    <div className=\"space-y-2\">\n                                      <Label className=\"text-sm font-medium text-slate-700 flex items-center gap-1.5\">\n                                        <Users className=\"w-4 h-4 text-slate-500\" />\n                                        Guests\n                                        <span className=\"text-red-500 text-xs\">*</span>\n                                      </Label>\n                                      <div className=\"space-y-1\">\n                                        <Input\n                                          type=\"number\"\n                                          min=\"1\"\n                                          max=\"999\"\n                                          value={slot.guestCount || 1}\n                                          onChange={(e) => {\n                                            const value = Math.max(1, Math.min(999, parseInt(e.target.value) || 1));\n                                            updateDateSlot(index, 'guestCount', value);\n                                          }}\n                                          className=\"h-9 text-center text-sm font-medium\"\n                                        />\n                                        {(() => {\n                                          const selectedSpace = selectedVenueData?.spaces?.find((space: any) => space.id === slot.spaceId);\n                                          const guestCount = slot.guestCount || 1;\n                                          const capacity = selectedSpace?.capacity || 0;\n                                          \n                                          if (selectedSpace && guestCount > capacity) {\n                                            return (\n                                              <div className=\"flex items-center gap-1 text-xs text-amber-600\">\n                                                <div className=\"w-1 h-1 bg-amber-400 rounded-full\"></div>\n                                                Exceeds capacity ({capacity})\n                                              </div>\n                                            );\n                                          }\n                                          return null;\n                                        })()}\n                                      </div>\n                                    </div>\n\n                                    {/* Setup Style */}\n                                    <div className=\"space-y-2\">\n                                      <Label className=\"text-sm font-medium text-slate-700 flex items-center gap-1.5\">\n                                        <Grid3X3 className=\"w-4 h-4 text-slate-500\" />\n                                        Setup\n                                      </Label>\n                                      <Select\n                                        value={slot.setupStyle || ''}\n                                        onValueChange={(value) => updateDateSlot(index, 'setupStyle', value)}\n                                      >\n                                        <SelectTrigger className=\"h-9 text-sm border-slate-200 hover:border-slate-300\">\n                                          <SelectValue placeholder=\"Style\" />\n                                        </SelectTrigger>\n                                        <SelectContent>\n                                          <SelectItem value=\"round-tables\">Round Tables</SelectItem>\n                                          <SelectItem value=\"u-shape\">U-Shape</SelectItem>\n                                          <SelectItem value=\"classroom\">Classroom</SelectItem>\n                                          <SelectItem value=\"theater\">Theater</SelectItem>\n                                          <SelectItem value=\"cocktail\">Cocktail</SelectItem>\n                                          <SelectItem value=\"banquet\">Banquet</SelectItem>\n                                          <SelectItem value=\"conference\">Conference</SelectItem>\n                                          <SelectItem value=\"custom\">Custom</SelectItem>\n                                        </SelectContent>\n                                      </Select>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                            </Card>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {/* Step 2: Event Configuration */}\n              {currentStep === 2 && (\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-semibold\">Configure Each Event Date</h3>\n                    {selectedDates.length > 1 && (\n                      <span className=\"text-sm text-slate-600\">\n                        {selectedDates.length} dates selected\n                      </span>\n                    )}\n                  </div>\n\n                  {/* Date Configuration Tabs */}\n                  {selectedDates.length > 0 && (\n                    <div className=\"space-y-6\">\n                      {/* Tab Navigation */}\n                      {selectedDates.length > 1 && (\n                        <div className=\"flex gap-2 p-1 bg-slate-100 rounded-lg overflow-x-auto\">\n                          {selectedDates.map((date, index) => (\n                            <button\n                              key={index}\n                              onClick={() => setActiveTabIndex(index)}\n                              className={cn(\n                                \"px-4 py-2 rounded-md text-sm font-medium whitespace-nowrap transition-colors\",\n                                activeTabIndex === index \n                                  ? \"bg-white text-slate-900 shadow-sm\" \n                                  : \"text-slate-600 hover:text-slate-900\"\n                              )}\n                            >\n                              {format(date.date, 'MMM d')}\n                            </button>\n                          ))}\n                        </div>\n                      )}\n\n                      {/* Active Date Configuration */}\n                      {activeDate && (\n                        <div className=\"space-y-6\">\n                          {/* Package & Services Configuration - Full Width */}\n                          <div className=\"space-y-6\">\n                            {/* Modern gradient header for current date */}\n                            <Card className=\"overflow-hidden border-slate-200 bg-white shadow-sm\">\n                              <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border-b border-slate-100 p-4\">\n                                <div className=\"flex items-center justify-between\">\n                                  <div className=\"flex items-center gap-3\">\n                                    <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center text-white font-semibold text-sm\">\n                                      {format(activeDate.date, 'd')}\n                                    </div>\n                                    <div>\n                                      <h4 className=\"font-semibold text-slate-900 text-sm\">\n                                        {format(activeDate.date, 'EEEE, MMMM d')}\n                                      </h4>\n                                      <p className=\"text-xs text-slate-600 mt-0.5\">\n                                        {formatTimeForDisplay(activeDate.startTime)} - {formatTimeForDisplay(activeDate.endTime)}\n                                      </p>\n                                    </div>\n                                  </div>\n                                  <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-700 text-xs\">\n                                    Configuring\n                                  </Badge>\n                                </div>\n                              </div>\n                              \n                              {/* Configuration content inside the card */}\n                              <div className=\"p-4\">\n                                <div className=\"flex items-center gap-6\">\n                              {/* Guests Field - Simplified */}\n                              <div className=\"flex items-center gap-2\">\n                                <Label className=\"text-sm font-medium text-slate-700 flex items-center gap-1.5\">\n                                  <Users className=\"w-4 h-4 text-slate-500\" />\n                                  Guests\n                                  <span className=\"text-red-500 text-xs\">*</span>\n                                </Label>\n                                <Input\n                                  type=\"number\"\n                                  min=\"1\"\n                                  max=\"999\"\n                                  value={activeDate.guestCount || 1}\n                                  onChange={(e) => {\n                                    const value = Math.max(1, Math.min(999, parseInt(e.target.value) || 1));\n                                    updateDateConfig('guestCount', value);\n                                  }}\n                                  className=\"w-20 h-8 text-center text-sm\"\n                                />\n                                {(() => {\n                                  const selectedSpace = selectedVenueData?.spaces?.find((space: any) => space.id === activeDate.spaceId);\n                                  const guestCount = activeDate.guestCount || 1;\n                                  const capacity = selectedSpace?.capacity || 0;\n                                  \n                                  if (selectedSpace && guestCount > capacity) {\n                                    return (\n                                      <span className=\"text-xs text-amber-600\">\n                                        Exceeds capacity ({capacity})\n                                      </span>\n                                    );\n                                  }\n                                  return null;\n                                })()}\n                              </div>\n\n                              {/* Setup Style Field with Floor Plan Integration */}\n                              <div className=\"flex items-center gap-2\">\n                                <Label className=\"text-sm font-medium text-slate-700 flex items-center gap-1.5\">\n                                  <Grid3X3 className=\"w-4 h-4 text-slate-500\" />\n                                  Setup Style\n                                </Label>\n                                <div className=\"flex items-center gap-2\">\n                                  <Select\n                                    value={activeDate.setupStyle || ''}\n                                    onValueChange={(value) => updateDateConfig('setupStyle', value)}\n                                  >\n                                    <SelectTrigger className=\"w-40 h-8 text-sm\">\n                                      <SelectValue placeholder=\"Select style\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"round-tables\">Round Tables</SelectItem>\n                                      <SelectItem value=\"u-shape\">U-Shape</SelectItem>\n                                      <SelectItem value=\"classroom\">Classroom</SelectItem>\n                                      <SelectItem value=\"theater\">Theater</SelectItem>\n                                      <SelectItem value=\"cocktail\">Cocktail</SelectItem>\n                                      <SelectItem value=\"banquet\">Banquet</SelectItem>\n                                      <SelectItem value=\"conference\">Conference</SelectItem>\n                                      <SelectItem value=\"custom\">Custom</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n                                  {activeDate.setupStyle && (\n                                    <Button\n                                      type=\"button\"\n                                      variant=\"outline\"\n                                      size=\"sm\"\n                                      className=\"h-8 px-3 text-xs\"\n                                      onClick={() => {\n                                        // Open floor plan designer for this setup style\n                                        toast({\n                                          title: \"Floor Plan Designer\",\n                                          description: \"Visit Floor Plans & Setup section to design custom layouts for this setup style\"\n                                        });\n                                      }}\n                                    >\n                                      <Grid3X3 className=\"w-3 h-3 mr-1\" />\n                                      Edit Layout\n                                    </Button>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                            </Card>\n\n                          <div className=\"space-y-6\">\n                            {/* Package & Services - Full Width */}\n                            <div className=\"space-y-4\">\n\n                              {/* Package Selection */}\n                              <div>\n                                <div className=\"flex items-center justify-between mb-3\">\n                                  <Label className=\"text-base font-medium\">Event Package</Label>\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => setShowPackageSelection(!showPackageSelection)}\n                                    className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n                                  >\n                                    {showPackageSelection ? \"Hide Packages\" : \"Show Packages\"}\n                                  </Button>\n                                </div>\n                                \n                                {showPackageSelection && (\n                                  <div className=\"mt-3 max-h-80 overflow-y-auto\">\n                                  <div className=\"grid grid-cols-1 gap-3\">\n                                    <div\n                                      className={cn(\n                                        \"p-3 border rounded-lg cursor-pointer transition-all relative\",\n                                        !activeDate.packageId ? \"border-blue-500 bg-blue-50\" : \"border-slate-200 hover:border-slate-300\"\n                                      )}\n                                      onClick={() => updateDateConfig('packageId', \"\")}\n                                    >\n                                      {!activeDate.packageId && (\n                                        <div className=\"absolute top-2 right-2 w-5 h-5 bg-blue-500 rounded-full flex items-center justify-center\">\n                                          <svg className=\"w-3 h-3 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                            <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                                          </svg>\n                                        </div>\n                                      )}\n                                      <div className=\"font-medium text-sm\">No Package</div>\n                                      <div className=\"text-xs text-slate-600 mt-1\">Build custom event with individual services</div>\n                                      <div className=\"text-sm font-semibold text-green-600 mt-2\">$0.00</div>\n                                    </div>\n                                    \n                                    {(packages as any[]).map((pkg: any) => {\n                                      const isSelected = activeDate.packageId === pkg.id;\n                                      const basePrice = parseFloat(pkg.price);\n                                      const overridePrice = activeDate.pricingOverrides?.packagePrice;\n                                      const displayPrice = overridePrice ?? basePrice;\n                                      const totalPrice = pkg.pricingModel === 'per_person' \n                                        ? displayPrice * (activeDate.guestCount || 1)\n                                        : displayPrice;\n                                      \n                                      return (\n                                        <div\n                                          key={pkg.id}\n                                          className={cn(\n                                            \"p-3 border rounded-lg cursor-pointer transition-all relative\",\n                                            isSelected ? \"border-blue-500 bg-blue-50\" : \"border-slate-200 hover:border-slate-300\"\n                                          )}\n                                          onClick={() => updateDateConfig('packageId', pkg.id)}\n                                        >\n                                          {isSelected && (\n                                            <div className=\"absolute top-2 right-2 w-5 h-5 bg-blue-500 rounded-full flex items-center justify-center\">\n                                              <svg className=\"w-3 h-3 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                                <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                                              </svg>\n                                            </div>\n                                          )}\n                                          \n                                          <div className=\"pr-8\">\n                                            <div className=\"font-medium text-sm\">{pkg.name}</div>\n                                            <div className=\"text-xs text-slate-600 mt-1\">{pkg.description}</div>\n                                            \n                                            {/* Included Services */}\n                                            {pkg.includedServiceIds && pkg.includedServiceIds.length > 0 && (\n                                              <div className=\"mt-2\">\n                                                <div className=\"text-xs text-slate-500 mb-1\">Includes:</div>\n                                                <div className=\"space-y-1\">\n                                                  {pkg.includedServiceIds.map((serviceId: string) => {\n                                                    const service = (services as any[]).find((s: any) => s.id === serviceId);\n                                                    if (!service) return null;\n                                                    \n                                                    return (\n                                                      <div key={serviceId} className=\"flex items-center justify-between\">\n                                                        <span className=\"text-xs bg-green-100 text-green-700 px-2 py-0.5 rounded\">\n                                                          {service.name}\n                                                        </span>\n                                                        {isSelected && service.pricingModel !== 'per_person' && (\n                                                          <div className=\"flex items-center gap-1\">\n                                                            <span className=\"text-xs\">Qty:</span>\n                                                            <Input\n                                                              type=\"number\"\n                                                              min=\"1\"\n                                                              value={activeDate.itemQuantities?.[serviceId] || 1}\n                                                              onChange={(e) => {\n                                                                const newQuantities = {\n                                                                  ...activeDate.itemQuantities,\n                                                                  [serviceId]: Math.max(1, parseInt(e.target.value, 10) || 1)\n                                                                };\n                                                                updateDateConfig('itemQuantities', newQuantities);\n                                                              }}\n                                                              className=\"w-12 h-6 text-xs text-center\"\n                                                            />\n                                                          </div>\n                                                        )}\n                                                      </div>\n                                                    );\n                                                  })}\n                                                </div>\n                                              </div>\n                                            )}\n                                            \n                                            <div className=\"text-sm font-semibold text-green-600 mt-2\">\n                                              ${pkg.pricingModel === 'per_person' \n                                                ? `${displayPrice} per person` \n                                                : displayPrice.toFixed(2)}\n                                            </div>\n                                            {pkg.pricingModel === 'per_person' && (\n                                              <div className=\"text-xs text-slate-500\">\n                                                Total: ${totalPrice.toFixed(2)} for {activeDate.guestCount || 1} guests\n                                              </div>\n                                            )}\n                                            \n                                            {/* Package Price Override */}\n                                            {isSelected && (\n                                              <div className=\"mt-2 pt-2 border-t border-slate-200\">\n                                                <div className=\"flex items-center gap-2\">\n                                                  <span className=\"text-xs\">Custom Price: $</span>\n                                                  <Input\n                                                    type=\"number\"\n                                                    step=\"0.01\"\n                                                    value={activeDate.pricingOverrides?.packagePrice ?? ''}\n                                                    onChange={(e) => {\n                                                      const value = e.target.value === '' ? undefined : parseFloat(e.target.value);\n                                                      updateDateConfig('pricingOverrides', {\n                                                        ...activeDate.pricingOverrides,\n                                                        packagePrice: value\n                                                      });\n                                                    }}\n                                                    className=\"w-20 h-6 text-xs\"\n                                                    placeholder={pkg.price}\n                                                  />\n                                                </div>\n                                              </div>\n                                            )}\n\n                                            {/* Package Taxes & Fees */}\n                                            {isSelected && (\n                                              <div className=\"mt-2 pt-2 border-t border-slate-200 space-y-2\">\n                                                {/* Additional taxes for package */}\n                                                {taxSettings.filter((item: any) => item.type === 'tax' && item.isActive).length > 0 && (\n                                                  <div>\n                                                    <div className=\"text-xs text-slate-600 mb-1\">Additional Taxes:</div>\n                                                    <div className=\"flex flex-wrap gap-1\">\n                                                      {taxSettings\n                                                        .filter((item: any) => item.type === 'tax' && item.isActive)\n                                                        .map((tax: any) => {\n                                                          const isInherited = (pkg.enabledTaxIds || []).includes(tax.id);\n                                                          const isOverridden = (activeDate.serviceTaxOverrides?.[pkg.id]?.enabledTaxIds || []).includes(tax.id);\n                                                          const isDisabled = (activeDate.serviceTaxOverrides?.[pkg.id]?.disabledInheritedTaxIds || []).includes(tax.id);\n                                                          const isActive = (isInherited && !isDisabled) || isOverridden;\n                                                          \n                                                          return (\n                                                            <label key={tax.id} className=\"flex items-center gap-1 text-xs cursor-pointer\">\n                                                              <Checkbox\n                                                                checked={isActive}\n                                                                onCheckedChange={(checked) => {\n                                                                  const currentOverrides = activeDate.serviceTaxOverrides?.[pkg.id] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n                                                                  \n                                                                  if (isInherited) {\n                                                                    // Toggle inherited tax on/off\n                                                                    const newDisabledTaxIds = checked\n                                                                      ? currentOverrides.disabledInheritedTaxIds?.filter(id => id !== tax.id) || []\n                                                                      : [...(currentOverrides.disabledInheritedTaxIds || []), tax.id];\n                                                                    \n                                                                    updateDateConfig('serviceTaxOverrides', {\n                                                                      ...activeDate.serviceTaxOverrides,\n                                                                      [pkg.id]: {\n                                                                        ...currentOverrides,\n                                                                        disabledInheritedTaxIds: newDisabledTaxIds\n                                                                      }\n                                                                    });\n                                                                  } else {\n                                                                    // Toggle additional tax on/off\n                                                                    const newTaxIds = checked\n                                                                      ? [...(currentOverrides.enabledTaxIds || []), tax.id]\n                                                                      : currentOverrides.enabledTaxIds?.filter(id => id !== tax.id) || [];\n                                                                    \n                                                                    updateDateConfig('serviceTaxOverrides', {\n                                                                      ...activeDate.serviceTaxOverrides,\n                                                                      [pkg.id]: {\n                                                                        ...currentOverrides,\n                                                                        enabledTaxIds: newTaxIds\n                                                                      }\n                                                                    });\n                                                                  }\n                                                                }}\n                                                                className=\"w-3 h-3\"\n                                                              />\n                                                              <span className={isInherited ? \"text-blue-600\" : \"text-slate-700\"}>\n                                                                {tax.name} ({tax.value}%)\n                                                              </span>\n                                                            </label>\n                                                          );\n                                                        })}\n                                                    </div>\n                                                  </div>\n                                                )}\n\n                                                {/* Additional fees for package */}\n                                                {taxSettings.filter((item: any) => (item.type === 'fee' || item.type === 'service_charge') && item.isActive).length > 0 && (\n                                                  <div>\n                                                    <div className=\"text-xs text-slate-600 mb-1\">Additional Fees:</div>\n                                                    <div className=\"flex flex-wrap gap-1\">\n                                                      {taxSettings\n                                                        .filter((item: any) => (item.type === 'fee' || item.type === 'service_charge') && item.isActive)\n                                                        .map((fee: any) => {\n                                                          const isInherited = (pkg.enabledFeeIds || []).includes(fee.id);\n                                                          const isOverridden = (activeDate.serviceTaxOverrides?.[pkg.id]?.enabledFeeIds || []).includes(fee.id);\n                                                          const isDisabled = (activeDate.serviceTaxOverrides?.[pkg.id]?.disabledInheritedFeeIds || []).includes(fee.id);\n                                                          const isActive = (isInherited && !isDisabled) || isOverridden;\n                                                          \n                                                          return (\n                                                            <label key={fee.id} className=\"flex items-center gap-1 text-xs cursor-pointer\">\n                                                              <Checkbox\n                                                                checked={isActive}\n                                                                onCheckedChange={(checked) => {\n                                                                  const currentOverrides = activeDate.serviceTaxOverrides?.[pkg.id] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n                                                                  \n                                                                  if (isInherited) {\n                                                                    // Toggle inherited fee on/off\n                                                                    const newDisabledFeeIds = checked\n                                                                      ? currentOverrides.disabledInheritedFeeIds?.filter(id => id !== fee.id) || []\n                                                                      : [...(currentOverrides.disabledInheritedFeeIds || []), fee.id];\n                                                                    \n                                                                    updateDateConfig('serviceTaxOverrides', {\n                                                                      ...activeDate.serviceTaxOverrides,\n                                                                      [pkg.id]: {\n                                                                        ...currentOverrides,\n                                                                        disabledInheritedFeeIds: newDisabledFeeIds\n                                                                      }\n                                                                    });\n                                                                  } else {\n                                                                    // Toggle additional fee on/off\n                                                                    const newFeeIds = checked\n                                                                      ? [...(currentOverrides.enabledFeeIds || []), fee.id]\n                                                                      : currentOverrides.enabledFeeIds?.filter(id => id !== fee.id) || [];\n                                                                    \n                                                                    updateDateConfig('serviceTaxOverrides', {\n                                                                      ...activeDate.serviceTaxOverrides,\n                                                                      [pkg.id]: {\n                                                                        ...currentOverrides,\n                                                                        enabledFeeIds: newFeeIds\n                                                                      }\n                                                                    });\n                                                                  }\n                                                                }}\n                                                                className=\"w-3 h-3\"\n                                                              />\n                                                              <span className={isInherited ? \"text-blue-600\" : \"text-slate-700\"}>\n                                                                {fee.name} ({fee.calculation === 'percentage' ? `${fee.value}%` : `$${fee.value}`})\n                                                              </span>\n                                                            </label>\n                                                          );\n                                                        })}\n                                                    </div>\n                                                  </div>\n                                                )}\n                                              </div>\n                                            )}\n                                          </div>\n                                        </div>\n                                      );\n                                    })}\n                                  </div>\n                                  </div>\n                                )}\n                              </div>\n\n                              {/* Services Selection */}\n                              <div>\n                                <div className=\"flex items-center justify-between mb-3\">\n                                  <Label className=\"text-base font-medium\">Additional Services</Label>\n                                  <div className=\"flex gap-2\">\n                                    <Button\n                                      type=\"button\"\n                                      variant=\"outline\"\n                                      size=\"sm\"\n                                      onClick={() => setShowAdditionalServices(!showAdditionalServices)}\n                                      className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n                                    >\n                                      {showAdditionalServices ? \"Hide Services\" : \"Show Services\"}\n                                    </Button>\n                                    {showAdditionalServices && (\n                                      <Button\n                                        type=\"button\"\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={() => setShowNewServiceForm(!showNewServiceForm)}\n                                        className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n                                      >\n                                        <Plus className=\"w-4 h-4 mr-1\" />\n                                        {showNewServiceForm ? \"Cancel\" : \"New Service\"}\n                                      </Button>\n                                    )}\n                                  </div>\n                                </div>\n\n                                {showAdditionalServices && (\n                                  <div>\n                                    {/* New Service Form */}\n                                    {showNewServiceForm && (\n                                      <Card className=\"p-4 mb-4 border-blue-200 bg-blue-50\">\n                                        <h5 className=\"font-medium mb-3\">Create New Service</h5>\n                                        <div className=\"grid grid-cols-2 gap-3\">\n                                          <div>\n                                            <Label className=\"text-xs\">Name *</Label>\n                                            <Input\n                                              value={newService.name}\n                                              onChange={(e) => setNewService(prev => ({ ...prev, name: e.target.value }))}\n                                              placeholder=\"Service name\"\n                                              className=\"mt-1 h-8 text-xs\"\n                                            />\n                                          </div>\n                                          <div>\n                                            <Label className=\"text-xs\">Price *</Label>\n                                            <Input\n                                              type=\"number\"\n                                              step=\"0.01\"\n                                              value={newService.price}\n                                              onChange={(e) => setNewService(prev => ({ ...prev, price: e.target.value }))}\n                                              placeholder=\"0.00\"\n                                              className=\"mt-1 h-8 text-xs\"\n                                            />\n                                          </div>\n                                          <div className=\"col-span-2\">\n                                            <Label className=\"text-xs\">Description</Label>\n                                            <Input\n                                              value={newService.description}\n                                              onChange={(e) => setNewService(prev => ({ ...prev, description: e.target.value }))}\n                                              placeholder=\"Service description\"\n                                              className=\"mt-1 h-8 text-xs\"\n                                            />\n                                          </div>\n                                        </div>\n                                        <div className=\"flex gap-2 mt-3\">\n                                          <Button\n                                            type=\"button\"\n                                            size=\"sm\"\n                                            onClick={handleCreateNewService}\n                                            disabled={createService.isPending}\n                                            className=\"bg-blue-600 hover:bg-blue-700\"\n                                          >\n                                            {createService.isPending ? \"Creating...\" : \"Create Service\"}\n                                          </Button>\n                                          <Button\n                                            type=\"button\"\n                                            variant=\"outline\"\n                                            size=\"sm\"\n                                            onClick={() => setShowNewServiceForm(false)}\n                                          >\n                                            Cancel\n                                          </Button>\n                                        </div>\n                                      </Card>\n                                    )}\n\n                                    <div className=\"mt-3 space-y-3 max-h-80 overflow-y-auto\">\n                                      {(services as any[]).map((service: any) => {\n                                        const isSelected = activeDate.selectedServices?.includes(service.id) || false;\n                                        const basePrice = parseFloat(service.price || 0);\n                                        const overridePrice = activeDate.pricingOverrides?.servicePrices?.[service.id];\n                                        const displayPrice = overridePrice ?? basePrice;\n                                        \n                                        return (\n                                          <label key={service.id} className=\"block\">\n                                            <div className={cn(\n                                              \"p-3 border rounded-lg cursor-pointer transition-all\",\n                                              isSelected ? \"border-blue-500 bg-blue-50\" : \"border-slate-200 hover:border-slate-300\"\n                                            )}>\n                                              <div className=\"flex items-start gap-3\">\n                                                <Checkbox \n                                                  checked={isSelected}\n                                                  onCheckedChange={() => {\n                                                    const currentServices = activeDate.selectedServices || [];\n                                                const newServices = isSelected \n                                                  ? currentServices.filter(id => id !== service.id)\n                                                  : [...currentServices, service.id];\n                                                updateDateConfig('selectedServices', newServices);\n                                              }}\n                                            />\n                                            <div className=\"flex-1\">\n                                              <div className=\"font-medium text-sm\">{service.name}</div>\n                                              <div className=\"text-xs text-slate-600 mt-1\">{service.description}</div>\n                                              <div className=\"flex items-center gap-2 mt-2\">\n                                                <span className=\"text-sm font-medium text-green-600\">\n                                                  ${displayPrice}\n                                                </span>\n                                                <span className=\"text-xs text-slate-500 bg-slate-100 px-2 py-1 rounded\">\n                                                  {service.pricingModel === 'per_person' ? 'Per Person' : 'Fixed Price'}\n                                                </span>\n                                              </div>\n                                            </div>\n                                          </div>\n                                          \n                                          {isSelected && (\n                                            <div className=\"mt-3 pt-3 border-t border-slate-200 space-y-3\">\n                                              <div className=\"flex items-center gap-4\">\n                                                {service.pricingModel !== 'per_person' && (\n                                                  <div className=\"flex items-center gap-2\">\n                                                    <span className=\"text-sm\">Qty:</span>\n                                                    <Input\n                                                      type=\"number\"\n                                                      min=\"1\"\n                                                      value={activeDate.itemQuantities?.[service.id] || 1}\n                                                      onChange={(e) => {\n                                                        const newQuantities = {\n                                                          ...activeDate.itemQuantities,\n                                                          [service.id]: Math.max(1, parseInt(e.target.value, 10) || 1)\n                                                        };\n                                                        updateDateConfig('itemQuantities', newQuantities);\n                                                      }}\n                                                      className=\"w-16 h-8 text-xs\"\n                                                    />\n                                                  </div>\n                                                )}\n                                                <div className=\"flex items-center gap-1\">\n                                                  <span className=\"text-sm\">$</span>\n                                                  <Input\n                                                    type=\"number\"\n                                                    step=\"0.01\"\n                                                    value={activeDate.pricingOverrides?.servicePrices?.[service.id] ?? ''}\n                                                    onChange={(e) => {\n                                                      const value = e.target.value === '' ? undefined : parseFloat(e.target.value);\n                                                      updateDateConfig('pricingOverrides', {\n                                                        ...activeDate.pricingOverrides,\n                                                        servicePrices: {\n                                                          ...activeDate.pricingOverrides?.servicePrices,\n                                                          [service.id]: value\n                                                        }\n                                                      });\n                                                    }}\n                                                    className=\"w-20 h-8 text-xs\"\n                                                    placeholder={service.price}\n                                                  />\n                                                </div>\n                                              </div>\n\n                                              {/* Service Taxes & Fees */}\n                                              <div className=\"space-y-2\">\n                                                {/* Additional taxes for service */}\n                                                {taxSettings.filter((item: any) => item.type === 'tax' && item.isActive).length > 0 && (\n                                                  <div>\n                                                    <div className=\"text-xs text-slate-600 mb-1\">Additional Taxes:</div>\n                                                    <div className=\"flex flex-wrap gap-1\">\n                                                      {taxSettings\n                                                        .filter((item: any) => item.type === 'tax' && item.isActive)\n                                                        .map((tax: any) => {\n                                                          const isInherited = (service.enabledTaxIds || []).includes(tax.id);\n                                                          const isOverridden = (activeDate.serviceTaxOverrides?.[service.id]?.enabledTaxIds || []).includes(tax.id);\n                                                          const isDisabled = (activeDate.serviceTaxOverrides?.[service.id]?.disabledInheritedTaxIds || []).includes(tax.id);\n                                                          const isActive = (isInherited && !isDisabled) || isOverridden;\n                                                          \n                                                          return (\n                                                            <label key={tax.id} className=\"flex items-center gap-1 text-xs cursor-pointer\">\n                                                              <Checkbox\n                                                                checked={isActive}\n                                                                onCheckedChange={(checked) => {\n                                                                  const currentOverrides = activeDate.serviceTaxOverrides?.[service.id] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n                                                                  \n                                                                  if (isInherited) {\n                                                                    // Toggle inherited tax on/off\n                                                                    const newDisabledTaxIds = checked\n                                                                      ? currentOverrides.disabledInheritedTaxIds?.filter(id => id !== tax.id) || []\n                                                                      : [...(currentOverrides.disabledInheritedTaxIds || []), tax.id];\n                                                                    \n                                                                    updateDateConfig('serviceTaxOverrides', {\n                                                                      ...activeDate.serviceTaxOverrides,\n                                                                      [service.id]: {\n                                                                        ...currentOverrides,\n                                                                        disabledInheritedTaxIds: newDisabledTaxIds\n                                                                      }\n                                                                    });\n                                                                  } else {\n                                                                    // Toggle additional tax on/off\n                                                                    const newTaxIds = checked\n                                                                      ? [...(currentOverrides.enabledTaxIds || []), tax.id]\n                                                                      : currentOverrides.enabledTaxIds?.filter(id => id !== tax.id) || [];\n                                                                    \n                                                                    updateDateConfig('serviceTaxOverrides', {\n                                                                      ...activeDate.serviceTaxOverrides,\n                                                                      [service.id]: {\n                                                                        ...currentOverrides,\n                                                                        enabledTaxIds: newTaxIds\n                                                                      }\n                                                                    });\n                                                                  }\n                                                                }}\n                                                                className=\"w-3 h-3\"\n                                                              />\n                                                              <span className={isInherited ? \"text-blue-600\" : \"text-slate-700\"}>\n                                                                {tax.name} ({tax.value}%)\n                                                              </span>\n                                                            </label>\n                                                          );\n                                                        })}\n                                                    </div>\n                                                  </div>\n                                                )}\n\n                                                {/* Additional fees for service */}\n                                                {taxSettings.filter((item: any) => (item.type === 'fee' || item.type === 'service_charge') && item.isActive).length > 0 && (\n                                                  <div>\n                                                    <div className=\"text-xs text-slate-600 mb-1\">Additional Fees:</div>\n                                                    <div className=\"flex flex-wrap gap-1\">\n                                                      {taxSettings\n                                                        .filter((item: any) => (item.type === 'fee' || item.type === 'service_charge') && item.isActive)\n                                                        .map((fee: any) => {\n                                                          const isInherited = (service.enabledFeeIds || []).includes(fee.id);\n                                                          const isOverridden = (activeDate.serviceTaxOverrides?.[service.id]?.enabledFeeIds || []).includes(fee.id);\n                                                          const isDisabled = (activeDate.serviceTaxOverrides?.[service.id]?.disabledInheritedFeeIds || []).includes(fee.id);\n                                                          const isActive = (isInherited && !isDisabled) || isOverridden;\n                                                          \n                                                          return (\n                                                            <label key={fee.id} className=\"flex items-center gap-1 text-xs cursor-pointer\">\n                                                              <Checkbox\n                                                                checked={isActive}\n                                                                onCheckedChange={(checked) => {\n                                                                  const currentOverrides = activeDate.serviceTaxOverrides?.[service.id] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n                                                                  \n                                                                  if (isInherited) {\n                                                                    // Toggle inherited fee on/off\n                                                                    const newDisabledFeeIds = checked\n                                                                      ? currentOverrides.disabledInheritedFeeIds?.filter(id => id !== fee.id) || []\n                                                                      : [...(currentOverrides.disabledInheritedFeeIds || []), fee.id];\n                                                                    \n                                                                    updateDateConfig('serviceTaxOverrides', {\n                                                                      ...activeDate.serviceTaxOverrides,\n                                                                      [service.id]: {\n                                                                        ...currentOverrides,\n                                                                        disabledInheritedFeeIds: newDisabledFeeIds\n                                                                      }\n                                                                    });\n                                                                  } else {\n                                                                    // Toggle additional fee on/off\n                                                                    const newFeeIds = checked\n                                                                      ? [...(currentOverrides.enabledFeeIds || []), fee.id]\n                                                                      : currentOverrides.enabledFeeIds?.filter(id => id !== fee.id) || [];\n                                                                    \n                                                                    updateDateConfig('serviceTaxOverrides', {\n                                                                      ...activeDate.serviceTaxOverrides,\n                                                                      [service.id]: {\n                                                                        ...currentOverrides,\n                                                                        enabledFeeIds: newFeeIds\n                                                                      }\n                                                                    });\n                                                                  }\n                                                                }}\n                                                                className=\"w-3 h-3\"\n                                                              />\n                                                              <span className={isInherited ? \"text-blue-600\" : \"text-slate-700\"}>\n                                                                {fee.name} ({fee.calculation === 'percentage' ? `${fee.value}%` : `$${fee.value}`})\n                                                              </span>\n                                                            </label>\n                                                          );\n                                                        })}\n                                                    </div>\n                                                  </div>\n                                                )}\n                                              </div>\n                                            </div>\n                                          )}\n                                        </div>\n                                      </label>\n                                    );\n                                  })}\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n\n                            {/* Apply Settings for Multi-Date Events */}\n                            {selectedDates.length > 1 && (\n                              <Card className=\"p-4 border-blue-200 bg-blue-50\">\n                                <h5 className=\"font-medium mb-2\">Apply Settings</h5>\n                                <p className=\"text-sm text-slate-600 mb-3\">\n                                  Apply this date's settings to other dates\n                                </p>\n                                <Button\n                                  type=\"button\"\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => setShowCopyModal(true)}\n                                  className=\"w-full\"\n                                >\n                                  Apply to Other Dates\n                                </Button>\n                              </Card>\n                            )}\n\n                            {/* Price Summary */}\n                            <Card className=\"p-4\">\n                              <div className=\"space-y-4\">\n\n                                {/* Comprehensive Price Breakdown */}\n                                <div>\n                                  <h5 className=\"font-medium mb-3\">Price Breakdown</h5>\n                                  {(() => {\n                                    // Calculate comprehensive breakdown with taxes and fees using per-service logic\n                                    let subtotal = 0;\n                                    const feeBreakdown: Array<{name: string, amount: number, description: string}> = [];\n                                    const taxBreakdown: Array<{name: string, amount: number, description: string}> = [];\n                                    \n                                    // Package calculation\n                                    if (selectedPackageData && activeDate.packageId) {\n                                      const packagePrice = activeDate.pricingOverrides?.packagePrice ?? parseFloat(selectedPackageData.price || 0);\n                                      let packageSubtotal = 0;\n                                      \n                                      if (selectedPackageData.pricingModel === 'per_person') {\n                                        packageSubtotal = packagePrice * (activeDate.guestCount || 1);\n                                      } else {\n                                        packageSubtotal = packagePrice;\n                                      }\n                                      \n                                      subtotal += packageSubtotal;\n                                      \n                                      // Get effective fee and tax IDs for package (using serviceTaxOverrides logic)\n                                      const currentOverrides = activeDate.serviceTaxOverrides?.[selectedPackageData.id] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n                                      \n                                      // Calculate effective fee IDs (inherited + additional - disabled)\n                                      const inheritedFeeIds = selectedPackageData.enabledFeeIds || [];\n                                      const additionalFeeIds = currentOverrides.enabledFeeIds || [];\n                                      const disabledFeeIds = currentOverrides.disabledInheritedFeeIds || [];\n                                      const effectiveFeeIds = [...inheritedFeeIds.filter((id: string) => !disabledFeeIds.includes(id)), ...additionalFeeIds];\n                                      \n                                      // Calculate effective tax IDs (inherited + additional - disabled)\n                                      const inheritedTaxIds = selectedPackageData.enabledTaxIds || [];\n                                      const additionalTaxIds = currentOverrides.enabledTaxIds || [];\n                                      const disabledTaxIds = currentOverrides.disabledInheritedTaxIds || [];\n                                      const effectiveTaxIds = [...inheritedTaxIds.filter((id: string) => !disabledTaxIds.includes(id)), ...additionalTaxIds];\n                                      \n                                      // Apply package fees\n                                      effectiveFeeIds.forEach((feeId: string) => {\n                                        const fee = (taxSettings as any[])?.find(f => f.id === feeId);\n                                        if (fee && fee.isActive) {\n                                          let feeAmount = 0;\n                                          if (fee.calculation === 'percentage') {\n                                            feeAmount = packageSubtotal * (parseFloat(fee.value) / 100);\n                                          } else {\n                                            feeAmount = parseFloat(fee.value);\n                                          }\n                                          \n                                          feeBreakdown.push({\n                                            name: `${fee.name} (Package)`,\n                                            amount: feeAmount,\n                                            description: fee.calculation === 'percentage' \n                                              ? `${fee.value}% of package ($${packageSubtotal.toFixed(2)})`\n                                              : 'Fixed amount'\n                                          });\n                                        }\n                                      });\n                                      \n                                      // Store package tax IDs for later calculation\n                                      effectiveTaxIds.forEach((taxId: string) => {\n                                        const tax = (taxSettings as any[])?.find(t => t.id === taxId);\n                                        if (tax && tax.isActive) {\n                                          // Will be calculated after all fees are computed\n                                        }\n                                      });\n                                    }\n                                    \n                                    // Services calculation\n                                    activeDate.selectedServices?.forEach(serviceId => {\n                                      const service = (services as any[]).find((s: any) => s.id === serviceId);\n                                      if (service) {\n                                        const servicePrice = activeDate.pricingOverrides?.servicePrices?.[serviceId] ?? parseFloat(service.price || 0);\n                                        let serviceSubtotal = 0;\n                                        \n                                        if (service.pricingModel === 'per_person') {\n                                          serviceSubtotal = servicePrice * (activeDate.guestCount || 1);\n                                        } else {\n                                          const quantity = activeDate.itemQuantities?.[serviceId] || 1;\n                                          serviceSubtotal = servicePrice * quantity;\n                                        }\n                                        \n                                        subtotal += serviceSubtotal;\n                                        \n                                        // Get effective fee and tax IDs for service (using serviceTaxOverrides logic)\n                                        const currentOverrides = activeDate.serviceTaxOverrides?.[serviceId] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n                                        \n                                        // Calculate effective fee IDs (inherited + additional - disabled)\n                                        const inheritedFeeIds = service.enabledFeeIds || [];\n                                        const additionalFeeIds = currentOverrides.enabledFeeIds || [];\n                                        const disabledFeeIds = currentOverrides.disabledInheritedFeeIds || [];\n                                        const effectiveFeeIds = [...inheritedFeeIds.filter((id: string) => !disabledFeeIds.includes(id)), ...additionalFeeIds];\n                                        \n                                        // Apply service fees\n                                        effectiveFeeIds.forEach((feeId: string) => {\n                                          const fee = (taxSettings as any[])?.find(f => f.id === feeId);\n                                          if (fee && fee.isActive) {\n                                            let feeAmount = 0;\n                                            if (fee.calculation === 'percentage') {\n                                              feeAmount = serviceSubtotal * (parseFloat(fee.value) / 100);\n                                            } else {\n                                              feeAmount = parseFloat(fee.value);\n                                            }\n                                            \n                                            feeBreakdown.push({\n                                              name: `${fee.name} (${service.name})`,\n                                              amount: feeAmount,\n                                              description: fee.calculation === 'percentage' \n                                                ? `${fee.value}% of service ($${serviceSubtotal.toFixed(2)})`\n                                                : 'Fixed amount'\n                                            });\n                                          }\n                                        });\n                                      }\n                                    });\n\n                                    // Calculate total fees\n                                    const feesTotal = feeBreakdown.reduce((sum, fee) => sum + fee.amount, 0);\n\n                                    // Calculate taxes on subtotal + taxable fees\n                                    const taxableFees = feeBreakdown\n                                      .filter(fee => {\n                                        // Extract fee name without service/package prefix\n                                        const baseName = fee.name.replace(/ \\(.+\\)$/, '');\n                                        const feeData = (taxSettings as any[])?.find(f => f.name === baseName);\n                                        return feeData?.isTaxable;\n                                      })\n                                      .reduce((sum, fee) => sum + fee.amount, 0);\n\n                                    const taxableBase = subtotal + taxableFees;\n                                    \n                                    // Apply taxes from package\n                                    if (selectedPackageData && activeDate.packageId) {\n                                      const currentOverrides = activeDate.serviceTaxOverrides?.[selectedPackageData.id] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n                                      const inheritedTaxIds = selectedPackageData.enabledTaxIds || [];\n                                      const additionalTaxIds = currentOverrides.enabledTaxIds || [];\n                                      const disabledTaxIds = currentOverrides.disabledInheritedTaxIds || [];\n                                      const effectiveTaxIds = [...inheritedTaxIds.filter((id: string) => !disabledTaxIds.includes(id)), ...additionalTaxIds];\n                                      \n                                      effectiveTaxIds.forEach((taxId: string) => {\n                                        const tax = (taxSettings as any[])?.find(t => t.id === taxId);\n                                        if (tax && tax.isActive) {\n                                          const taxAmount = taxableBase * (parseFloat(tax.value) / 100);\n                                          taxBreakdown.push({\n                                            name: `${tax.name} (Package)`,\n                                            amount: taxAmount,\n                                            description: `${tax.value}% of taxable amount ($${taxableBase.toFixed(2)})`\n                                          });\n                                        }\n                                      });\n                                    }\n                                    \n                                    // Apply taxes from services\n                                    activeDate.selectedServices?.forEach(serviceId => {\n                                      const service = (services as any[]).find((s: any) => s.id === serviceId);\n                                      if (service) {\n                                        const currentOverrides = activeDate.serviceTaxOverrides?.[serviceId] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n                                        const inheritedTaxIds = service.enabledTaxIds || [];\n                                        const additionalTaxIds = currentOverrides.enabledTaxIds || [];\n                                        const disabledTaxIds = currentOverrides.disabledInheritedTaxIds || [];\n                                        const effectiveTaxIds = [...inheritedTaxIds.filter((id: string) => !disabledTaxIds.includes(id)), ...additionalTaxIds];\n                                        \n                                        effectiveTaxIds.forEach((taxId: string) => {\n                                          const tax = (taxSettings as any[])?.find(t => t.id === taxId);\n                                          if (tax && tax.isActive) {\n                                            // Avoid duplicate taxes\n                                            const existingTax = taxBreakdown.find(t => t.name.startsWith(tax.name));\n                                            if (!existingTax) {\n                                              const taxAmount = taxableBase * (parseFloat(tax.value) / 100);\n                                              taxBreakdown.push({\n                                                name: `${tax.name} (${service.name})`,\n                                                amount: taxAmount,\n                                                description: `${tax.value}% of taxable amount ($${taxableBase.toFixed(2)})`\n                                              });\n                                            }\n                                          }\n                                        });\n                                      }\n                                    });\n\n                                    // Note: Global taxes/fees are no longer supported in the edit modal\n                                    // since taxes and fees are now applied per-service/package inline\n\n                                    const taxesTotal = taxBreakdown.reduce((sum, tax) => sum + tax.amount, 0);\n                                    const grandTotal = subtotal + feesTotal + taxesTotal;\n\n                                    return (\n                                      <div className=\"space-y-3\">\n                                        {/* Items breakdown */}\n                                        <div className=\"space-y-2 text-sm\">\n                                          {selectedPackageData && activeDate.packageId && (\n                                            <div className=\"flex justify-between\">\n                                              <span>{selectedPackageData.name}</span>\n                                              <span>\n                                                ${selectedPackageData.pricingModel === 'per_person' \n                                                  ? ((activeDate.pricingOverrides?.packagePrice ?? parseFloat(selectedPackageData.price)) * (activeDate.guestCount || 1)).toFixed(2)\n                                                  : (activeDate.pricingOverrides?.packagePrice ?? parseFloat(selectedPackageData.price)).toFixed(2)}\n                                              </span>\n                                            </div>\n                                          )}\n                                          \n                                          {activeDate.selectedServices?.map(serviceId => {\n                                            const service = (services as any[]).find((s: any) => s.id === serviceId);\n                                            if (!service) return null;\n                                            \n                                            const basePrice = parseFloat(service.price || 0);\n                                            const overridePrice = activeDate.pricingOverrides?.servicePrices?.[serviceId];\n                                            const price = overridePrice ?? basePrice;\n                                            const quantity = activeDate.itemQuantities?.[serviceId] || 1;\n                                            const total = service.pricingModel === 'per_person' \n                                              ? price * (activeDate.guestCount || 1)\n                                              : price * quantity;\n                                            \n                                            return (\n                                              <div key={serviceId} className=\"flex justify-between\">\n                                                <span>{service.name}</span>\n                                                <span>${total.toFixed(2)}</span>\n                                              </div>\n                                            );\n                                          })}\n                                        </div>\n\n                                        {/* Subtotal */}\n                                        <div className=\"border-t border-slate-200 pt-2\">\n                                          <div className=\"flex justify-between text-sm font-medium\">\n                                            <span>Subtotal:</span>\n                                            <span>${subtotal.toFixed(2)}</span>\n                                          </div>\n                                        </div>\n                                        \n                                        {/* Fees breakdown */}\n                                        {feeBreakdown.map((fee, idx) => (\n                                          <div key={`fee-${idx}`} className=\"space-y-1\">\n                                            <div className=\"flex justify-between text-sm\">\n                                              <span className=\"text-blue-600\">{fee.name}:</span>\n                                              <span className=\"text-blue-600\">${fee.amount.toFixed(2)}</span>\n                                            </div>\n                                            <div className=\"text-xs text-slate-500 ml-2\">{fee.description}</div>\n                                          </div>\n                                        ))}\n                                        \n                                        {/* Tax breakdown */}\n                                        {taxBreakdown.map((tax, idx) => (\n                                          <div key={`tax-${idx}`} className=\"space-y-1\">\n                                            <div className=\"flex justify-between text-sm\">\n                                              <span className=\"text-purple-600\">{tax.name}:</span>\n                                              <span className=\"text-purple-600\">${tax.amount.toFixed(2)}</span>\n                                            </div>\n                                            <div className=\"text-xs text-slate-500 ml-2\">{tax.description}</div>\n                                          </div>\n                                        ))}\n                                        \n                                        {/* Grand total */}\n                                        <div className=\"border-t-2 border-slate-300 pt-2\">\n                                          <div className=\"flex justify-between font-semibold text-base\">\n                                            <span>Date Total:</span>\n                                            <span className=\"text-green-600\">${grandTotal.toFixed(2)}</span>\n                                          </div>\n                                        </div>\n                                      </div>\n                                    );\n                                  })()}\n                                </div>\n                              </div>\n                            </Card>\n                          </div>\n                        </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Step 3: Final Details */}\n              {currentStep === 3 && (\n                <div className=\"space-y-6\">\n                  <h3 className=\"text-lg font-semibold\">Final Event Details</h3>\n                  \n                  <div className=\"grid grid-cols-2 gap-6\">\n                    <div>\n                      <Label className=\"text-base font-medium\">Event Name *</Label>\n                      <Input\n                        value={eventName}\n                        onChange={(e) => setEventName(e.target.value)}\n                        placeholder=\"Enter event name\"\n                        className=\"mt-2\"\n                      />\n                    </div>\n\n                    <div>\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <Label className=\"text-base font-medium\">Customer *</Label>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setShowNewCustomerForm(!showNewCustomerForm)}\n                          className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n                        >\n                          <Plus className=\"w-4 h-4 mr-1\" />\n                          {showNewCustomerForm ? \"Cancel\" : \"New Customer\"}\n                        </Button>\n                      </div>\n                      \n                      {!showNewCustomerForm ? (\n                        <Select value={selectedCustomer} onValueChange={setSelectedCustomer}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select customer\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {(customers as any[]).map((customer: any) => (\n                              <SelectItem key={customer.id} value={customer.id}>\n                                {customer.name} - {customer.email}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      ) : (\n                        <Card className=\"p-4 border-blue-200 bg-blue-50\">\n                          <div className=\"space-y-4\">\n                            <h4 className=\"font-medium text-sm\">Create New Customer</h4>\n                            <div className=\"grid grid-cols-2 gap-3\">\n                              <div>\n                                <Label className=\"text-sm\">Name *</Label>\n                                <Input\n                                  value={newCustomer.name}\n                                  onChange={(e) => setNewCustomer(prev => ({...prev, name: e.target.value}))}\n                                  placeholder=\"Customer name\"\n                                  className=\"mt-1\"\n                                />\n                              </div>\n                              <div>\n                                <Label className=\"text-sm\">Email *</Label>\n                                <Input\n                                  type=\"email\"\n                                  value={newCustomer.email}\n                                  onChange={(e) => setNewCustomer(prev => ({...prev, email: e.target.value}))}\n                                  placeholder=\"customer@example.com\"\n                                  className=\"mt-1\"\n                                />\n                              </div>\n                              <div>\n                                <Label className=\"text-sm\">Phone</Label>\n                                <Input\n                                  value={newCustomer.phone}\n                                  onChange={(e) => setNewCustomer(prev => ({...prev, phone: e.target.value}))}\n                                  placeholder=\"(555) 123-4567\"\n                                  className=\"mt-1\"\n                                />\n                              </div>\n                              <div>\n                                <Label className=\"text-sm\">Company</Label>\n                                <Input\n                                  value={newCustomer.company}\n                                  onChange={(e) => setNewCustomer(prev => ({...prev, company: e.target.value}))}\n                                  placeholder=\"Company name\"\n                                  className=\"mt-1\"\n                                />\n                              </div>\n                            </div>\n                            <Button\n                              type=\"button\"\n                              onClick={handleCreateCustomer}\n                              disabled={createCustomer.isPending || !newCustomer.name || !newCustomer.email}\n                              className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                            >\n                              {createCustomer.isPending ? \"Creating...\" : \"Create Customer\"}\n                            </Button>\n                          </div>\n                        </Card>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Event Summary */}\n                  <div className=\"border-t pt-6\">\n                    <h4 className=\"font-medium mb-4\">Event Summary</h4>\n                    <div className=\"bg-slate-50 p-4 rounded-lg space-y-3\">\n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-slate-600\">Event:</span>\n                          <div className=\"font-medium\">{eventName || \"Untitled Event\"}</div>\n                        </div>\n                        <div>\n                          <span className=\"text-slate-600\">Guest Count:</span>\n                          <div className=\"font-medium\">{activeDate?.guestCount || 0}</div>\n                        </div>\n                        <div>\n                          <span className=\"text-slate-600\">Venue:</span>\n                          <div className=\"font-medium\">{selectedVenueData?.name || \"No venue selected\"}</div>\n                        </div>\n                      </div>\n                      \n                      {selectedDates.length > 0 && (\n                        <div>\n                          <span className=\"text-slate-600 text-sm\">Dates & Times:</span>\n                          {selectedDates.map((slot, index) => (\n                            <div key={index} className=\"font-medium text-sm\">\n                              {format(slot.date, 'MMM d, yyyy')} • {slot.startTime} - {slot.endTime}\n                            </div>\n                          ))}\n                        </div>\n                      )}\n\n                      {/* Pricing Breakdown */}\n                      <div className=\"border-t pt-3\">\n                        {(() => {\n                          let subtotal = 0;\n                          let totalFees = 0;\n                          let totalTaxes = 0;\n                          const appliedFees: any[] = [];\n                          const appliedTaxes: any[] = [];\n\n                          // Calculate total across all dates using the new per-service tax override logic\n                          selectedDates.forEach(date => {\n                            // Package price\n                            if (date.packageId) {\n                              const pkg = (packages as any[])?.find((p: any) => p.id === date.packageId);\n                              if (pkg) {\n                                const packagePrice = date.pricingOverrides?.packagePrice ?? parseFloat(pkg.price || 0);\n                                let packageSubtotal = 0;\n                                if (pkg.pricingModel === 'per_person') {\n                                  packageSubtotal = packagePrice * (date.guestCount || 1);\n                                } else {\n                                  packageSubtotal = packagePrice;\n                                }\n                                subtotal += packageSubtotal;\n\n                                // Calculate package fees and taxes using serviceTaxOverrides\n                                const currentOverrides = date.serviceTaxOverrides?.[pkg.id] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n                                \n                                // Calculate effective fee IDs (inherited + additional - disabled)\n                                const inheritedFeeIds = pkg.enabledFeeIds || [];\n                                const additionalFeeIds = currentOverrides.enabledFeeIds || [];\n                                const disabledFeeIds = currentOverrides.disabledInheritedFeeIds || [];\n                                const effectiveFeeIds = [...inheritedFeeIds.filter((id: string) => !disabledFeeIds.includes(id)), ...additionalFeeIds];\n                                \n                                // Apply package fees\n                                effectiveFeeIds.forEach((feeId: string) => {\n                                  const fee = (taxSettings as any[])?.find(f => f.id === feeId);\n                                  if (fee && fee.isActive) {\n                                    let feeAmount = 0;\n                                    if (fee.calculation === 'percentage') {\n                                      feeAmount = packageSubtotal * (parseFloat(fee.value) / 100);\n                                    } else {\n                                      feeAmount = parseFloat(fee.value);\n                                    }\n                                    totalFees += feeAmount;\n                                    appliedFees.push({ name: fee.name, amount: feeAmount });\n                                  }\n                                });\n\n                                // Calculate effective tax IDs (inherited + additional - disabled)\n                                const inheritedTaxIds = pkg.enabledTaxIds || [];\n                                const additionalTaxIds = currentOverrides.enabledTaxIds || [];\n                                const disabledTaxIds = currentOverrides.disabledInheritedTaxIds || [];\n                                const effectiveTaxIds = [...inheritedTaxIds.filter((id: string) => !disabledTaxIds.includes(id)), ...additionalTaxIds];\n                                \n                                // Apply package taxes\n                                effectiveTaxIds.forEach((taxId: string) => {\n                                  const tax = (taxSettings as any[])?.find(t => t.id === taxId);\n                                  if (tax && tax.isActive) {\n                                    const taxAmount = packageSubtotal * (parseFloat(tax.value) / 100);\n                                    totalTaxes += taxAmount;\n                                    appliedTaxes.push({ name: tax.name, amount: taxAmount });\n                                  }\n                                });\n                              }\n                            }\n                            \n                            // Services price\n                            date.selectedServices?.forEach(serviceId => {\n                              const service = (services as any[]).find((s: any) => s.id === serviceId);\n                              if (service) {\n                                const servicePrice = date.pricingOverrides?.servicePrices?.[serviceId] ?? parseFloat(service.price || 0);\n                                let serviceSubtotal = 0;\n                                if (service.pricingModel === 'per_person') {\n                                  serviceSubtotal = servicePrice * (date.guestCount || 1);\n                                } else {\n                                  const quantity = date.itemQuantities?.[serviceId] || 1;\n                                  serviceSubtotal = servicePrice * quantity;\n                                }\n                                subtotal += serviceSubtotal;\n\n                                // Calculate service fees and taxes using serviceTaxOverrides\n                                const currentOverrides = date.serviceTaxOverrides?.[serviceId] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n                                \n                                // Calculate effective fee IDs (inherited + additional - disabled)\n                                const inheritedFeeIds = service.enabledFeeIds || [];\n                                const additionalFeeIds = currentOverrides.enabledFeeIds || [];\n                                const disabledFeeIds = currentOverrides.disabledInheritedFeeIds || [];\n                                const effectiveFeeIds = [...inheritedFeeIds.filter((id: string) => !disabledFeeIds.includes(id)), ...additionalFeeIds];\n                                \n                                // Apply service fees\n                                effectiveFeeIds.forEach((feeId: string) => {\n                                  const fee = (taxSettings as any[])?.find(f => f.id === feeId);\n                                  if (fee && fee.isActive) {\n                                    let feeAmount = 0;\n                                    if (fee.calculation === 'percentage') {\n                                      feeAmount = serviceSubtotal * (parseFloat(fee.value) / 100);\n                                    } else {\n                                      feeAmount = parseFloat(fee.value);\n                                    }\n                                    totalFees += feeAmount;\n                                    appliedFees.push({ name: fee.name, amount: feeAmount });\n                                  }\n                                });\n\n                                // Calculate effective tax IDs (inherited + additional - disabled)\n                                const inheritedTaxIds = service.enabledTaxIds || [];\n                                const additionalTaxIds = currentOverrides.enabledTaxIds || [];\n                                const disabledTaxIds = currentOverrides.disabledInheritedTaxIds || [];\n                                const effectiveTaxIds = [...inheritedTaxIds.filter((id: string) => !disabledTaxIds.includes(id)), ...additionalTaxIds];\n                                \n                                // Apply service taxes\n                                effectiveTaxIds.forEach((taxId: string) => {\n                                  const tax = (taxSettings as any[])?.find(t => t.id === taxId);\n                                  if (tax && tax.isActive) {\n                                    const taxAmount = serviceSubtotal * (parseFloat(tax.value) / 100);\n                                    totalTaxes += taxAmount;\n                                    appliedTaxes.push({ name: tax.name, amount: taxAmount });\n                                  }\n                                });\n                              }\n                            });\n                          });\n\n                          const grandTotal = subtotal + totalFees + totalTaxes;\n                          const hasFeesOrTaxes = appliedFees.length > 0 || appliedTaxes.length > 0;\n\n                          return (\n                            <>\n                              {hasFeesOrTaxes ? (\n                                <>\n                                  {/* Subtotal */}\n                                  <div className=\"flex justify-between text-sm\">\n                                    <span>Subtotal:</span>\n                                    <span>${subtotal.toFixed(2)}</span>\n                                  </div>\n                                  \n                                  {/* Individual Fees */}\n                                  {appliedFees.map((fee, index) => (\n                                    <div key={`fee-${index}`} className=\"flex justify-between text-sm text-blue-600\">\n                                      <span className=\"pl-2\">+ {fee.name}:</span>\n                                      <span>+${fee.amount.toFixed(2)}</span>\n                                    </div>\n                                  ))}\n                                  \n                                  {/* Individual Taxes */}\n                                  {appliedTaxes.map((tax, index) => (\n                                    <div key={`tax-${index}`} className=\"flex justify-between text-sm text-purple-600\">\n                                      <span className=\"pl-2\">+ {tax.name}:</span>\n                                      <span>+${tax.amount.toFixed(2)}</span>\n                                    </div>\n                                  ))}\n                                  \n                                  <div className=\"border-t pt-2 mt-2\">\n                                    <div className=\"flex justify-between font-semibold text-lg\">\n                                      <span>Grand Total:</span>\n                                      <span className=\"text-blue-700\">${grandTotal.toFixed(2)}</span>\n                                    </div>\n                                  </div>\n                                </>\n                              ) : (\n                                <div className=\"flex justify-between font-semibold text-lg\">\n                                  <span>Total Price:</span>\n                                  <span className=\"text-green-600\">${grandTotal.toFixed(2)}</span>\n                                </div>\n                              )}\n                            </>\n                          );\n                        })()}\n                        \n                        <div className=\"text-sm text-slate-600 mt-1\">\n                          Includes {selectedPackageData ? 'package' : 'services'} and {activeDate?.selectedServices?.length || 0} additional services\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                )}\n              </div>\n            </div>\n\n            {/* Fixed Footer */}\n            <div className=\"border-t border-slate-200 p-3 sm:p-6 flex flex-col sm:flex-row gap-3 sm:gap-0 justify-between items-center bg-white flex-shrink-0 mt-auto\">\n              <div className=\"flex items-center gap-4\">\n                {/* Enhanced pricing display with per-service tax/fee breakdown */}\n                {(() => {\n                  let subtotal = 0;\n                  let totalFees = 0;\n                  let totalTaxes = 0;\n\n                  // Calculate total across all dates using the new per-service tax override logic\n                  selectedDates.forEach(date => {\n                    // Package price\n                    if (date.packageId) {\n                      const pkg = (packages as any[])?.find((p: any) => p.id === date.packageId);\n                      if (pkg) {\n                        const packagePrice = date.pricingOverrides?.packagePrice ?? parseFloat(pkg.price || 0);\n                        let packageSubtotal = 0;\n                        if (pkg.pricingModel === 'per_person') {\n                          packageSubtotal = packagePrice * (date.guestCount || 1);\n                        } else {\n                          packageSubtotal = packagePrice;\n                        }\n                        subtotal += packageSubtotal;\n\n                        // Calculate package fees and taxes using serviceTaxOverrides\n                        const currentOverrides = date.serviceTaxOverrides?.[pkg.id] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n                        \n                        // Calculate effective fee IDs (inherited + additional - disabled)\n                        const inheritedFeeIds = pkg.enabledFeeIds || [];\n                        const additionalFeeIds = currentOverrides.enabledFeeIds || [];\n                        const disabledFeeIds = currentOverrides.disabledInheritedFeeIds || [];\n                        const effectiveFeeIds = [...inheritedFeeIds.filter((id: string) => !disabledFeeIds.includes(id)), ...additionalFeeIds];\n                        \n                        // Apply package fees\n                        effectiveFeeIds.forEach((feeId: string) => {\n                          const fee = (taxSettings as any[])?.find(f => f.id === feeId);\n                          if (fee && fee.isActive) {\n                            let feeAmount = 0;\n                            if (fee.calculation === 'percentage') {\n                              feeAmount = packageSubtotal * (parseFloat(fee.value) / 100);\n                            } else {\n                              feeAmount = parseFloat(fee.value);\n                            }\n                            totalFees += feeAmount;\n                            \n                            // Apply taxes to fees if the fee is taxable\n                            if (fee.isTaxable && fee.applicableTaxIds && fee.applicableTaxIds.length > 0) {\n                              fee.applicableTaxIds.forEach((taxId: string) => {\n                                const tax = (taxSettings as any[])?.find(t => t.id === taxId);\n                                if (tax && tax.isActive) {\n                                  const taxOnFeeAmount = feeAmount * (parseFloat(tax.value) / 100);\n                                  totalTaxes += taxOnFeeAmount;\n                                }\n                              });\n                            }\n                          }\n                        });\n\n                        // Calculate effective tax IDs (inherited + additional - disabled)\n                        const inheritedTaxIds = pkg.enabledTaxIds || [];\n                        const additionalTaxIds = currentOverrides.enabledTaxIds || [];\n                        const disabledTaxIds = currentOverrides.disabledInheritedTaxIds || [];\n                        const effectiveTaxIds = [...inheritedTaxIds.filter((id: string) => !disabledTaxIds.includes(id)), ...additionalTaxIds];\n                        \n                        // Apply package taxes\n                        effectiveTaxIds.forEach((taxId: string) => {\n                          const tax = (taxSettings as any[])?.find(t => t.id === taxId);\n                          if (tax && tax.isActive) {\n                            const taxAmount = packageSubtotal * (parseFloat(tax.value) / 100);\n                            totalTaxes += taxAmount;\n                          }\n                        });\n                      }\n                    }\n                    \n                    // Services price\n                    date.selectedServices?.forEach(serviceId => {\n                      const service = (services as any[]).find((s: any) => s.id === serviceId);\n                      if (service) {\n                        const servicePrice = date.pricingOverrides?.servicePrices?.[serviceId] ?? parseFloat(service.price || 0);\n                        let serviceSubtotal = 0;\n                        if (service.pricingModel === 'per_person') {\n                          serviceSubtotal = servicePrice * (date.guestCount || 1);\n                        } else {\n                          const quantity = date.itemQuantities?.[serviceId] || 1;\n                          serviceSubtotal = servicePrice * quantity;\n                        }\n                        subtotal += serviceSubtotal;\n\n                        // Calculate service fees and taxes using serviceTaxOverrides\n                        const currentOverrides = date.serviceTaxOverrides?.[serviceId] || { enabledTaxIds: [], enabledFeeIds: [], disabledInheritedTaxIds: [], disabledInheritedFeeIds: [] };\n                        \n                        // Calculate effective fee IDs (inherited + additional - disabled)\n                        const inheritedFeeIds = service.enabledFeeIds || [];\n                        const additionalFeeIds = currentOverrides.enabledFeeIds || [];\n                        const disabledFeeIds = currentOverrides.disabledInheritedFeeIds || [];\n                        const effectiveFeeIds = [...inheritedFeeIds.filter((id: string) => !disabledFeeIds.includes(id)), ...additionalFeeIds];\n                        \n                        // Apply service fees\n                        effectiveFeeIds.forEach((feeId: string) => {\n                          const fee = (taxSettings as any[])?.find(f => f.id === feeId);\n                          if (fee && fee.isActive) {\n                            let feeAmount = 0;\n                            if (fee.calculation === 'percentage') {\n                              feeAmount = serviceSubtotal * (parseFloat(fee.value) / 100);\n                            } else {\n                              feeAmount = parseFloat(fee.value);\n                            }\n                            totalFees += feeAmount;\n                            \n                            // Apply taxes to fees if the fee is taxable\n                            if (fee.isTaxable && fee.applicableTaxIds && fee.applicableTaxIds.length > 0) {\n                              fee.applicableTaxIds.forEach((taxId: string) => {\n                                const tax = (taxSettings as any[])?.find(t => t.id === taxId);\n                                if (tax && tax.isActive) {\n                                  const taxOnFeeAmount = feeAmount * (parseFloat(tax.value) / 100);\n                                  totalTaxes += taxOnFeeAmount;\n                                }\n                              });\n                            }\n                          }\n                        });\n\n                        // Calculate effective tax IDs (inherited + additional - disabled)\n                        const inheritedTaxIds = service.enabledTaxIds || [];\n                        const additionalTaxIds = currentOverrides.enabledTaxIds || [];\n                        const disabledTaxIds = currentOverrides.disabledInheritedTaxIds || [];\n                        const effectiveTaxIds = [...inheritedTaxIds.filter((id: string) => !disabledTaxIds.includes(id)), ...additionalTaxIds];\n                        \n                        // Apply service taxes\n                        effectiveTaxIds.forEach((taxId: string) => {\n                          const tax = (taxSettings as any[])?.find(t => t.id === taxId);\n                          if (tax && tax.isActive) {\n                            const taxAmount = serviceSubtotal * (parseFloat(tax.value) / 100);\n                            totalTaxes += taxAmount;\n                          }\n                        });\n                      }\n                    });\n                  });\n\n                  const grandTotal = subtotal + totalFees + totalTaxes;\n                  const hasFeesOrTaxes = totalFees > 0 || totalTaxes > 0;\n\n                  return (\n                    <div className=\"flex items-center gap-2\">\n                      {hasFeesOrTaxes ? (\n                        <div className=\"text-right\">\n                          <div className=\"text-xs text-slate-500\">\n                            Subtotal: ${subtotal.toFixed(2)}\n                            {totalFees > 0 && ` + Fees: $${totalFees.toFixed(2)}`}\n                            {totalTaxes > 0 && ` + Taxes: $${totalTaxes.toFixed(2)}`}\n                          </div>\n                          <div>\n                            <span className=\"text-sm text-slate-600\">Grand Total</span>\n                            <span className=\"text-lg font-semibold ml-2 text-blue-700\">${grandTotal.toFixed(2)}</span>\n                          </div>\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-sm text-slate-600\">Total</span>\n                          <span className=\"text-lg font-semibold text-green-600\">${grandTotal.toFixed(2)}</span>\n                        </div>\n                      )}\n                    </div>\n                  );\n                })()}\n                \n                <Button \n                  variant=\"outline\" \n                  onClick={handleDelete}\n                  className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                >\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete Event\n                </Button>\n              </div>\n              \n              <div className=\"flex flex-col sm:flex-row gap-2 sm:gap-3 w-full sm:w-auto\">\n                {currentStep === 3 && (\n                  <Button variant=\"outline\" onClick={prevStep}>\n                    Back\n                  </Button>\n                )}\n                {currentStep < 3 ? (\n                  <Button \n                    onClick={nextStep}\n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                    disabled={currentStep === 1 && selectedDates.length === 0}\n                  >\n                    {currentStep === 1 ? `Configure ${selectedDates.length} Event Slot(s)` : 'Next'}\n                  </Button>\n                ) : (\n                  <Button \n                    onClick={handleSubmit}\n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                    disabled={updateBooking.isPending}\n                  >\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    {updateBooking.isPending ? 'Saving...' : 'Save Changes'}\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n\n      {/* Apply Settings Modal */}\n      <Dialog open={showCopyModal} onOpenChange={setShowCopyModal}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Apply Settings</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-slate-600\">\n              Apply the current date's settings to selected dates below:\n            </p>\n            \n            <div className=\"space-y-2\">\n              {selectedDates.map((date, index) => {\n                if (index === activeTabIndex) return null; // Don't show current date\n                \n                return (\n                  <label key={index} className=\"flex items-center gap-3 p-3 border rounded-lg hover:bg-slate-50 cursor-pointer\">\n                    <Checkbox \n                      checked={selectedCopyIndices.includes(index)}\n                      onCheckedChange={(checked) => {\n                        if (checked) {\n                          setSelectedCopyIndices(prev => [...prev, index]);\n                        } else {\n                          setSelectedCopyIndices(prev => prev.filter(i => i !== index));\n                        }\n                      }}\n                    />\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-sm\">{format(date.date, 'EEEE, MMMM d, yyyy')}</div>\n                      <div className=\"text-xs text-slate-600\">{date.startTime} - {date.endTime}</div>\n                    </div>\n                  </label>\n                );\n              })}\n            </div>\n            \n            <div className=\"flex gap-2 pt-4\">\n              <Button\n                onClick={() => {\n                  handleCopyConfig(selectedCopyIndices);\n                  setSelectedCopyIndices([]);\n                }}\n                disabled={selectedCopyIndices.length === 0}\n                className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n              >\n                Apply Settings ({selectedCopyIndices.length})\n              </Button>\n              <Button variant=\"outline\" onClick={() => {\n                setShowCopyModal(false);\n                setSelectedCopyIndices([]);\n              }}>\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </Dialog>\n  );\n}","size_bytes":169867},"client/src/components/forms/event-summary-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { EnhancedBeoModal } from \"./enhanced-beo-modal\";\nimport { CreateEventModal } from \"./create-event-modal\";\nimport { StatusSelector } from \"../events/status-selector\";\nimport { ProposalTrackingModal } from \"../proposals/proposal-tracking-modal\";\nimport { type EventStatus, getStatusConfig } from \"@shared/status-utils\";\nimport { \n  X, \n  Edit3, \n  Calendar, \n  Clock, \n  MapPin, \n  Users, \n  DollarSign, \n  MessageSquare, \n  Phone,\n  Mail,\n  FileText,\n  Send,\n  Copy,\n  FileOutput,\n  Eye\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  booking: any;\n  onEditClick: () => void;\n}\n\nexport function EventSummaryModal({ open, onOpenChange, booking, onEditClick }: Props) {\n  const [showCommunication, setShowCommunication] = useState(false);\n  const [communicationMessage, setCommunicationMessage] = useState(\"\");\n  const [communicationType, setCommunicationType] = useState(\"email\");\n  const [showBeoModal, setShowBeoModal] = useState(false);\n  const [showDuplicateModal, setShowDuplicateModal] = useState(false);\n  const [showProposalModal, setShowProposalModal] = useState(false);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const { data: venues = [] } = useQuery({ queryKey: [\"/api/venues-with-spaces\"] });\n  const { data: packages = [] } = useQuery({ queryKey: [\"/api/packages\"] });\n  const { data: services = [] } = useQuery({ queryKey: [\"/api/services\"] });\n  const { data: customers = [] } = useQuery({ queryKey: [\"/api/customers\"] });\n  const { data: communications = [] } = useQuery({ \n    queryKey: [\"/api/communications\", booking?.id], \n    enabled: !!booking?.id \n  });\n\n  // Get proposal data if this booking has a proposal\n  const { data: proposals = [] } = useQuery({ \n    queryKey: [\"/api/proposals\"] \n  });\n  \n  // Find the proposal associated with this booking\n  const bookingProposal = proposals.find((p: any) => p.customerId === booking?.customerId && p.eventName === booking?.eventName);\n\n  // Status update mutation - moved before early return to maintain hook order\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ bookingId, newStatus }: { bookingId: string; newStatus: EventStatus }) => {\n      return apiRequest(\"PATCH\", `/api/bookings/${bookingId}`, { status: newStatus });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Status updated\",\n        description: \"Event status has been successfully updated.\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error updating status\",\n        description: error.response?.data?.message || \"An error occurred while updating the status.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleStatusChange = (newStatus: EventStatus) => {\n    if (booking?.id) {\n      updateStatusMutation.mutate({ bookingId: booking.id, newStatus });\n    }\n  };\n\n  if (!booking) return null;\n\n  // Use enhanced data from calendar API if available, otherwise fallback to lookup\n  const selectedVenueData = booking.venueData || (venues as any[]).find((v: any) => v.id === booking.venueId);\n  const selectedSpaceData = booking.spaceData || selectedVenueData?.spaces?.find((s: any) => s.id === booking.spaceId);\n  const selectedPackageData = (packages as any[]).find((p: any) => p.id === booking.packageId);\n  const selectedCustomerData = booking.customerData || (customers as any[]).find((c: any) => c.id === booking.customerId);\n  const selectedServicesData = (services as any[]).filter((s: any) => booking.serviceIds?.includes(s.id));\n\n\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[85vh] overflow-y-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex flex-col gap-2\">\n            <DialogTitle className=\"text-2xl font-bold\">\n              {booking.isContract \n                ? booking.contractInfo?.contractName || \"Multi-Date Contract\"\n                : booking.eventName\n              }\n            </DialogTitle>\n            {/* Proposal Status */}\n            {booking.proposalStatus && booking.proposalStatus !== 'none' && (\n              <div className=\"flex items-center gap-2\">\n                <FileText className=\"h-4 w-4 text-blue-600\" />\n                <Badge variant=\"outline\" className={`${\n                  booking.proposalStatus === 'sent' ? 'border-blue-500 text-blue-600' :\n                  booking.proposalStatus === 'viewed' ? 'border-yellow-500 text-yellow-600' :\n                  booking.proposalStatus === 'accepted' ? 'border-green-500 text-green-600' :\n                  booking.proposalStatus === 'declined' ? 'border-red-500 text-red-600' :\n                  'border-gray-500 text-gray-600'\n                }`}>\n                  Proposal {booking.proposalStatus}\n                </Badge>\n                {booking.proposalSentAt && (\n                  <span className=\"text-sm text-gray-500\">\n                    Sent {format(new Date(booking.proposalSentAt), 'MMM d, yyyy')}\n                  </span>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Status Selector in top right corner */}\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm font-medium text-slate-600\">Status:</span>\n              <StatusSelector\n                currentStatus={booking.status as EventStatus}\n                onStatusChange={handleStatusChange}\n                eventId={booking.id}\n                eventTitle={booking.eventName}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Contract Summary Banner */}\n        {booking.isContract && (\n          <div className=\"mb-6 bg-gradient-to-r from-purple-50 to-purple-100 border border-purple-200 rounded-lg p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <Badge className=\"bg-purple-100 text-purple-800\">Contract</Badge>\n                <div>\n                  <h3 className=\"font-semibold text-purple-900\">\n                    {booking.contractInfo?.contractName || \"Multi-Date Event Contract\"}\n                  </h3>\n                  <p className=\"text-sm text-purple-700\">\n                    {booking.eventCount} events • Total: ${parseFloat(booking.totalAmount || '0').toLocaleString()}\n                  </p>\n                </div>\n              </div>\n              <div className=\"text-right text-sm text-purple-700\">\n                <div>Contract ID: {booking.contractInfo?.id?.slice(-8)}</div>\n                <div>{booking.status?.charAt(0).toUpperCase() + booking.status?.slice(1)}</div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {/* Left Column - Event Details */}\n          <div className=\"space-y-6\">\n            {/* Basic Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-5 w-5\" />\n                  Event Details\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">Status</span>\n                  <Badge className={`${getStatusConfig(booking.status).bgColor} ${getStatusConfig(booking.status).textColor} ${getStatusConfig(booking.status).borderColor} border`}>\n                    {getStatusConfig(booking.status).label}\n                  </Badge>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">Event Type</span>\n                  <span className=\"font-medium\">{booking.eventType || 'General Event'}</span>\n                </div>\n\n                {booking.isContract ? (\n                  <>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-600\">Event Dates</span>\n                      <span className=\"font-medium\">{booking.eventCount} events</span>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <span className=\"text-sm text-gray-600\">Schedule:</span>\n                      <div className=\"max-h-32 overflow-y-auto space-y-1\">\n                        {booking.contractEvents?.map((event: any, index: number) => (\n                          <div key={index} className=\"text-sm bg-gray-50 p-2 rounded\">\n                            <div className=\"font-medium\">\n                              {event.eventDate ? format(new Date(event.eventDate), 'MMM d, yyyy') : 'Date TBD'}\n                            </div>\n                            <div className=\"text-gray-600\">\n                              {event.startTime} - {event.endTime} • {event.guestCount} guests\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-600\">Total Guests</span>\n                      <span className=\"font-medium flex items-center gap-1\">\n                        <Users className=\"h-4 w-4\" />\n                        {booking.contractEvents?.reduce((sum: number, event: any) => sum + (event.guestCount || 0), 0)}\n                      </span>\n                    </div>\n                  </>\n                ) : (\n                  <>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-600\">Date</span>\n                      <span className=\"font-medium\">\n                        {booking.eventDate ? format(new Date(booking.eventDate), 'EEEE, MMMM d, yyyy') : 'No date set'}\n                      </span>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-600\">Time</span>\n                      <span className=\"font-medium\">{booking.startTime} - {booking.endTime}</span>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-600\">Guests</span>\n                      <span className=\"font-medium flex items-center gap-1\">\n                        <Users className=\"h-4 w-4\" />\n                        {booking.guestCount}\n                      </span>\n                    </div>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Venue & Space */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MapPin className=\"h-5 w-5\" />\n                  Venue & Space\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {booking.isContract ? (\n                  <div className=\"space-y-3\">\n                    <span className=\"text-sm text-gray-600\">Venues & Spaces Used:</span>\n                    <div className=\"max-h-24 overflow-y-auto space-y-2\">\n                      {booking.contractEvents?.map((event: any, index: number) => {\n                        const eventVenue = (venues as any[]).find((v: any) => v.id === event.venueId);\n                        const eventSpace = eventVenue?.spaces?.find((s: any) => s.id === event.spaceId);\n                        return (\n                          <div key={index} className=\"text-sm bg-gray-50 p-2 rounded\">\n                            <div className=\"font-medium\">{eventVenue?.name || 'Unknown Venue'}</div>\n                            <div className=\"text-gray-600\">\n                              {eventSpace?.name || 'Unknown Space'} • {event.eventDate ? format(new Date(event.eventDate), 'MMM d') : 'TBD'}\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                ) : (\n                  <>\n                    <div>\n                      <span className=\"text-sm text-gray-600\">Venue</span>\n                      <div className=\"font-medium\">{selectedVenueData?.name || 'Venue not found'}</div>\n                    </div>\n                    \n                    <div>\n                      <span className=\"text-sm text-gray-600\">Space</span>\n                      <div className=\"font-medium\">{selectedSpaceData?.name || 'Space not found'}</div>\n                      {selectedSpaceData && (\n                        <div className=\"text-sm text-gray-500\">Capacity: {selectedSpaceData.capacity} guests</div>\n                      )}\n                    </div>\n\n                    {selectedVenueData?.address && (\n                      <div>\n                        <span className=\"text-sm text-gray-600\">Address</span>\n                        <div className=\"text-sm\">{selectedVenueData.address}</div>\n                      </div>\n                    )}\n                  </>\n                )}\n              </CardContent>\n            </Card>\n\n\n          </div>\n\n          {/* Right Column - Services & Pricing */}\n          <div className=\"space-y-6\">\n            {/* Package & Services */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Package & Services</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {booking.isContract ? (\n                  <div className=\"space-y-4\">\n                    {/* Contract Packages Summary */}\n                    {booking.contractEvents?.map((event: any, index: number) => {\n                      const eventPackage = (packages as any[]).find((p: any) => p.id === event.packageId);\n                      const eventServices = (services as any[]).filter((s: any) => event.selectedServices?.includes(s.id));\n                      \n                      return (\n                        <div key={index} className=\"border border-gray-200 rounded-lg p-3\">\n                          <div className=\"text-sm font-medium text-gray-800 mb-2\">\n                            {event.eventDate ? format(new Date(event.eventDate), 'MMM d, yyyy') : 'TBD'}\n                          </div>\n                          \n                          {eventPackage ? (\n                            <div className=\"border-l-4 border-blue-500 bg-blue-50 p-3 rounded-r mb-3\">\n                              <div className=\"font-medium text-blue-900\">{eventPackage.name}</div>\n                              <div className=\"text-sm text-blue-700\">{eventPackage.description}</div>\n                              <div className=\"text-sm font-medium text-blue-800 mt-1\">\n                                ${eventPackage.price} {eventPackage.pricingModel === 'per_person' ? '/ person' : 'total'}\n                              </div>\n                            </div>\n                          ) : (\n                            <div className=\"text-sm text-gray-500 mb-3\">No package selected</div>\n                          )}\n\n                          {eventServices.length > 0 && (\n                            <div>\n                              <div className=\"text-sm font-medium text-gray-700 mb-2\">Services:</div>\n                              <div className=\"space-y-1\">\n                                {eventServices.map((service: any) => (\n                                  <div key={service.id} className=\"flex justify-between items-center p-2 bg-gray-50 rounded text-sm\">\n                                    <span className=\"font-medium\">{service.name}</span>\n                                    <span>${service.price} {service.pricingModel === 'per_person' ? '/ person' : ''}</span>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                ) : (\n                  <>\n                    {selectedPackageData ? (\n                      <div className=\"border-l-4 border-blue-500 bg-blue-50 p-3 rounded-r\">\n                        <div className=\"font-medium text-blue-900\">{selectedPackageData.name}</div>\n                        <div className=\"text-sm text-blue-700\">{selectedPackageData.description}</div>\n                        <div className=\"text-sm font-medium text-blue-800 mt-1\">\n                          ${selectedPackageData.price} {selectedPackageData.pricingModel === 'per_person' ? '/ person' : 'total'}\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"text-sm text-gray-500\">No package selected</div>\n                    )}\n\n                    {selectedServicesData.length > 0 && (\n                      <div>\n                        <div className=\"text-sm font-medium text-gray-700 mb-2\">Additional Services:</div>\n                        <div className=\"space-y-2\">\n                          {selectedServicesData.map((service: any) => (\n                            <div key={service.id} className=\"flex justify-between items-center p-2 bg-gray-50 rounded\">\n                              <div>\n                                <div className=\"font-medium text-sm\">{service.name}</div>\n                                <div className=\"text-xs text-gray-600\">{service.description}</div>\n                              </div>\n                              <div className=\"text-sm font-medium\">\n                                ${service.price} {service.pricingModel === 'per_person' ? '/ person' : 'total'}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Pricing Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <DollarSign className=\"h-5 w-5\" />\n                  Pricing\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Total Amount</span>\n                  <span className=\"font-semibold text-lg\">${booking.totalAmount || '0.00'}</span>\n                </div>\n                \n                {booking.depositAmount && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-gray-600\">Deposit Amount</span>\n                    <span className=\"font-medium\">${booking.depositAmount}</span>\n                  </div>\n                )}\n\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Payment Status</span>\n                  <Badge className={booking.depositPaid ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>\n                    {booking.depositPaid ? 'Paid' : 'Unpaid'}\n                  </Badge>\n                </div>\n\n                {booking.depositAmount && (\n                  <div className=\"border-t pt-3\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-600\">Remaining Balance</span>\n                      <span className=\"font-medium\">\n                        ${((parseFloat(booking.totalAmount || '0') - parseFloat(booking.depositAmount || '0')).toFixed(2))}\n                      </span>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Notes */}\n            {booking.notes && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <MessageSquare className=\"h-5 w-5\" />\n                    Notes\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm\">{booking.notes}</p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n\n        {/* Customer Information - Full Width at Bottom */}\n        {selectedCustomerData && (\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                Customer\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <div className=\"font-medium\">{selectedCustomerData.name}</div>\n                <div className=\"text-sm text-gray-600\">{selectedCustomerData.email}</div>\n                {selectedCustomerData.phone && (\n                  <div className=\"text-sm text-gray-600\">{selectedCustomerData.phone}</div>\n                )}\n              </div>\n              \n              <div className=\"flex gap-2 pt-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"gap-1\"\n                  onClick={() => setShowCommunication(!showCommunication)}\n                >\n                  <MessageSquare className=\"h-3 w-3\" />\n                  Contact\n                </Button>\n                {selectedCustomerData.phone && (\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"gap-1\"\n                    onClick={() => window.open(`tel:${selectedCustomerData.phone}`)}\n                  >\n                    <Phone className=\"h-3 w-3\" />\n                    Call\n                  </Button>\n                )}\n              </div>\n              \n              {/* Communication Panel */}\n              {showCommunication && (\n                <div className=\"mt-4 p-4 border border-gray-200 rounded-lg bg-gray-50\">\n                  <h4 className=\"font-medium mb-3\">Send Message to {selectedCustomerData.name}</h4>\n                  <div className=\"space-y-3\">\n                    <select \n                      value={communicationType}\n                      onChange={(e) => setCommunicationType(e.target.value)}\n                      className=\"w-full p-2 border border-gray-300 rounded-md text-sm\"\n                    >\n                      <option value=\"email\">Email</option>\n                      <option value=\"sms\">SMS</option>\n                      <option value=\"internal\">Internal Note</option>\n                    </select>\n                    \n                    <textarea\n                      value={communicationMessage}\n                      onChange={(e) => setCommunicationMessage(e.target.value)}\n                      placeholder={`Write your ${communicationType} message here...`}\n                      className=\"w-full p-3 border border-gray-300 rounded-md text-sm min-h-[100px] resize-none\"\n                    />\n                    \n                    <div className=\"flex gap-2\">\n                      <Button \n                        size=\"sm\" \n                        className=\"gap-1\"\n                        onClick={async () => {\n                          try {\n                            // Save communication to database\n                            const response = await fetch('/api/communications', {\n                              method: 'POST',\n                              headers: { 'Content-Type': 'application/json' },\n                              body: JSON.stringify({\n                                bookingId: booking.id,\n                                customerId: selectedCustomerData.id,\n                                type: communicationType,\n                                direction: 'outbound',\n                                message: communicationMessage,\n                                subject: communicationType === 'email' ? `Regarding your event: ${booking.eventName}` : null,\n                                sentBy: 'Venue Manager'\n                              })\n                            });\n                            \n                            if (response.ok) {\n                              console.log('Communication saved successfully');\n                              // Refresh the page to show the new communication\n                              window.location.reload();\n                            } else {\n                              console.error('Failed to save communication');\n                            }\n                          } catch (error) {\n                            console.error('Error saving communication:', error);\n                          }\n                          \n                          setCommunicationMessage(\"\");\n                          setShowCommunication(false);\n                        }}\n                        disabled={!communicationMessage.trim()}\n                      >\n                        <Send className=\"h-3 w-3\" />\n                        Send {communicationType === 'email' ? 'Email' : communicationType === 'sms' ? 'SMS' : 'Note'}\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => setShowCommunication(false)}\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              )}\n              \n              {/* Communication History */}\n              {(communications as any[]).length > 0 && (\n                <div className=\"mt-4 p-4 border border-blue-200 rounded-lg bg-blue-50\">\n                  <h4 className=\"font-medium mb-3 text-blue-900\">Communication History</h4>\n                  <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n                    {(communications as any[]).map((comm: any) => (\n                      <div key={comm.id} className=\"p-3 bg-white rounded border text-sm\">\n                        <div className=\"flex justify-between items-start mb-1\">\n                          <span className=\"font-medium text-blue-800 capitalize\">\n                            {comm.type === 'proposal' ? 'Proposal Email' : comm.type} {comm.direction === 'outbound' ? '→' : '←'}\n                          </span>\n                          <span className=\"text-xs text-gray-500\">\n                            {comm.sentAt ? format(new Date(comm.sentAt), 'MMM d, h:mm a') : 'No date'}\n                          </span>\n                        </div>\n                        {comm.subject && (\n                          <div className=\"text-xs text-gray-600 mb-1\">Subject: {comm.subject}</div>\n                        )}\n                        \n                        {/* Proposal Status Indicators */}\n                        {comm.type === 'proposal' && (\n                          <div className=\"flex gap-2 mb-2\">\n                            <Badge variant={comm.proposalViewed ? \"default\" : \"secondary\"} className=\"text-xs\">\n                              {comm.proposalViewed ? \"✓ Viewed\" : \"Not Viewed\"}\n                            </Badge>\n                            {comm.proposalStatus && (\n                              <Badge \n                                variant={\n                                  comm.proposalStatus === 'accepted' ? \"default\" : \n                                  comm.proposalStatus === 'declined' ? \"destructive\" : \n                                  \"secondary\"\n                                } \n                                className=\"text-xs\"\n                              >\n                                {comm.proposalStatus.charAt(0).toUpperCase() + comm.proposalStatus.slice(1)}\n                              </Badge>\n                            )}\n                            {comm.depositPaid && (\n                              <Badge variant=\"default\" className=\"text-xs bg-green-600\">\n                                ✓ Deposit Paid\n                              </Badge>\n                            )}\n                          </div>\n                        )}\n                        \n                        <div className=\"text-gray-700\">{comm.message}</div>\n                        {comm.sentBy && (\n                          <div className=\"text-xs text-gray-500 mt-1\">by {comm.sentBy}</div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Action Buttons - Sticky at bottom */}\n        <div className=\"sticky bottom-0 left-0 right-0 bg-background/95 backdrop-blur-sm border-t mt-6 pt-4 -mx-6 px-6 -mb-6 pb-6\">\n          <div className=\"flex gap-3 justify-end\">\n            {bookingProposal && (\n              <Button variant=\"outline\" className=\"gap-2\" onClick={() => setShowProposalModal(true)}>\n                <Eye className=\"h-4 w-4\" />\n                View Proposal\n              </Button>\n            )}\n            <Button variant=\"outline\" onClick={onEditClick} className=\"gap-2\">\n              <Edit3 className=\"h-4 w-4\" />\n              Edit {booking.isContract ? \"Contract\" : \"Event\"}\n            </Button>\n            <Button variant=\"outline\" className=\"gap-2\" onClick={() => setShowDuplicateModal(true)}>\n              <Copy className=\"h-4 w-4\" />\n              Duplicate Event\n            </Button>\n            <Button variant=\"outline\" className=\"gap-2\" onClick={() => setShowBeoModal(true)}>\n              <FileOutput className=\"h-4 w-4\" />\n              BEO\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n      \n      {/* Enhanced BEO Modal */}\n      <EnhancedBeoModal \n        isOpen={showBeoModal} \n        onClose={() => setShowBeoModal(false)} \n        booking={booking} \n      />\n      \n      {/* Duplicate Event Modal */}\n      <CreateEventModal\n        open={showDuplicateModal}\n        onOpenChange={setShowDuplicateModal}\n        duplicateFromBooking={booking}\n      />\n      \n      {/* Proposal Tracking Modal */}\n      {bookingProposal && (\n        <ProposalTrackingModal\n          open={showProposalModal}\n          onOpenChange={setShowProposalModal}\n          proposalId={bookingProposal.id}\n        />\n      )}\n    </Dialog>\n  );\n}","size_bytes":31526},"client/src/components/forms/edit-package-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { X, Edit, Save, Trash2 } from \"lucide-react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  package: any;\n}\n\nexport function EditPackageModal({ open, onOpenChange, package: pkg }: Props) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [selectedServices, setSelectedServices] = useState<string[]>([]);\n  const [taxFeeSelection, setTaxFeeSelection] = useState({\n    enabledTaxIds: [] as string[],\n    enabledFeeIds: [] as string[]\n  });\n\n  const { data: services = [] } = useQuery({ queryKey: [\"/api/services\"] });\n  const { data: taxSettings = [] } = useQuery({ queryKey: [\"/api/tax-settings\"] });\n\n  useEffect(() => {\n    if (pkg && open) {\n      setName(pkg.name || \"\");\n      setDescription(pkg.description || \"\");\n      setPrice(pkg.price?.toString() || \"\");\n      setSelectedServices(pkg.includedServiceIds || []);\n      setTaxFeeSelection({\n        enabledTaxIds: pkg.enabledTaxIds || [],\n        enabledFeeIds: pkg.enabledFeeIds || []\n      });\n    }\n  }, [pkg, open]);\n\n  const updatePackage = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"PATCH\", `/api/packages/${pkg.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/packages\"] });\n      toast({ title: \"Package updated successfully!\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to update package\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const deletePackage = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"DELETE\", `/api/packages/${pkg.id}`, {});\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/packages\"] });\n      toast({ title: \"Package deleted successfully!\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to delete package\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  // Calculate live pricing with taxes and fees\n  const calculatePackageTotal = () => {\n    const basePrice = parseFloat(price) || 0;\n    if (basePrice === 0) return 0;\n    \n    let total = basePrice;\n    \n    // Apply fees first\n    taxFeeSelection.enabledFeeIds.forEach(feeId => {\n      const fee = (taxSettings as any[]).find((t: any) => t.id === feeId);\n      if (fee) {\n        if (fee.calculation === 'percentage') {\n          total += (basePrice * parseFloat(fee.value)) / 100;\n        } else {\n          total += parseFloat(fee.value);\n        }\n      }\n    });\n    \n    // Apply taxes on the total including fees\n    taxFeeSelection.enabledTaxIds.forEach(taxId => {\n      const tax = (taxSettings as any[]).find((t: any) => t.id === taxId);\n      if (tax) {\n        total += (total * parseFloat(tax.value)) / 100;\n      }\n    });\n    \n    return total;\n  };\n\n  const handleSave = () => {\n    updatePackage.mutate({\n      name,\n      description,\n      price: parseFloat(price) || 0,\n      includedServiceIds: selectedServices,\n      enabledTaxIds: taxFeeSelection.enabledTaxIds,\n      enabledFeeIds: taxFeeSelection.enabledFeeIds\n    });\n  };\n\n  const handleDelete = () => {\n    if (confirm(\"Are you sure you want to delete this package? This may affect existing bookings.\")) {\n      deletePackage.mutate();\n    }\n  };\n\n  const toggleService = (serviceId: string) => {\n    setSelectedServices(prev => \n      prev.includes(serviceId) \n        ? prev.filter(id => id !== serviceId)\n        : [...prev, serviceId]\n    );\n  };\n\n  const selectedServicesData = services.filter((s: any) => selectedServices.includes(s.id));\n  const totalServicePrice = selectedServicesData.reduce((sum: number, service: any) => sum + parseFloat(service.price || 0), 0);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-3xl p-0 max-h-[90vh] overflow-y-auto\">\n        <DialogTitle className=\"sr-only\">Edit Package</DialogTitle>\n        <DialogDescription className=\"sr-only\">\n          Edit package information including name, price, and included services.\n        </DialogDescription>\n        \n        <div className=\"border-b border-slate-200 p-6 flex items-center gap-3\">\n          <Edit className=\"h-5 w-5 text-blue-600\" />\n          <h2 className=\"text-xl font-semibold\">Edit Package</h2>\n        </div>\n\n        <div className=\"p-6 space-y-6\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label>Package Name *</Label>\n              <Input value={name} onChange={(e) => setName(e.target.value)} className=\"mt-1\" />\n            </div>\n            \n            <div>\n              <Label>Package Price *</Label>\n              <Input \n                type=\"number\" \n                step=\"0.01\"\n                value={price} \n                onChange={(e) => setPrice(e.target.value)} \n                className=\"mt-1\"\n                placeholder=\"0.00\"\n              />\n            </div>\n          </div>\n          \n          <div>\n            <Label>Description</Label>\n            <textarea\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              className=\"w-full p-3 border rounded-md mt-1 h-20 resize-none text-sm\"\n              placeholder=\"Describe what's included in this package...\"\n            />\n          </div>\n\n          {/* Services Selection */}\n          <div>\n            <Label className=\"text-base font-medium\">Included Services</Label>\n            <p className=\"text-sm text-slate-600 mb-3\">Select services that are bundled in this package</p>\n            \n            <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n              {services.map((service: any) => (\n                <Card \n                  key={service.id} \n                  className={`p-3 cursor-pointer transition-colors ${\n                    selectedServices.includes(service.id) ? 'bg-blue-50 border-blue-200' : 'hover:bg-slate-50'\n                  }`}\n                  onClick={() => toggleService(service.id)}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedServices.includes(service.id)}\n                        onChange={() => toggleService(service.id)}\n                        className=\"rounded\"\n                      />\n                      <div>\n                        <div className=\"font-medium\">{service.name}</div>\n                        <div className=\"text-sm text-slate-600\">{service.description}</div>\n                      </div>\n                    </div>\n                    <Badge variant=\"secondary\">${service.price}</Badge>\n                  </div>\n                </Card>\n              ))}\n            </div>\n\n            {selectedServices.length > 0 && (\n              <div className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\n                <div className=\"flex justify-between items-center mb-2\">\n                  <span className=\"font-medium\">Selected Services ({selectedServices.length})</span>\n                  <span className=\"font-medium\">Individual Total: ${totalServicePrice.toFixed(2)}</span>\n                </div>\n                <div className=\"text-sm space-y-1\">\n                  {selectedServicesData.map((service: any) => (\n                    <div key={service.id} className=\"flex justify-between\">\n                      <span>{service.name}</span>\n                      <span>${service.price}</span>\n                    </div>\n                  ))}\n                </div>\n                {parseFloat(price) > 0 && parseFloat(price) !== totalServicePrice && (\n                  <div className=\"mt-2 pt-2 border-t border-blue-200\">\n                    <div className=\"flex justify-between font-medium\">\n                      <span>Package Price (Bundled)</span>\n                      <span>${parseFloat(price).toFixed(2)}</span>\n                    </div>\n                    <div className=\"text-xs text-blue-600\">\n                      Savings: ${(totalServicePrice - parseFloat(price)).toFixed(2)}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Tax and Fee Selection */}\n          {(taxSettings as any[])?.length > 0 && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-base font-medium\">Apply Taxes & Fees</Label>\n                <p className=\"text-sm text-slate-600 mb-3\">Select which taxes and fees apply to this package by default</p>\n              </div>\n              \n              <div className=\"grid grid-cols-1 gap-3\">\n                {(taxSettings as any[]).map((setting: any) => (\n                  <label key={setting.id} className=\"flex items-center gap-3 p-3 border rounded-lg hover:bg-slate-50 cursor-pointer\">\n                    <Checkbox \n                      checked={\n                        setting.type === 'tax' \n                          ? taxFeeSelection.enabledTaxIds.includes(setting.id)\n                          : taxFeeSelection.enabledFeeIds.includes(setting.id)\n                      }\n                      onCheckedChange={(checked) => {\n                        if (setting.type === 'tax') {\n                          setTaxFeeSelection(prev => ({\n                            ...prev,\n                            enabledTaxIds: checked \n                              ? [...prev.enabledTaxIds, setting.id]\n                              : prev.enabledTaxIds.filter(id => id !== setting.id)\n                          }));\n                        } else {\n                          setTaxFeeSelection(prev => ({\n                            ...prev,\n                            enabledFeeIds: checked \n                              ? [...prev.enabledFeeIds, setting.id]\n                              : prev.enabledFeeIds.filter(id => id !== setting.id)\n                          }));\n                        }\n                      }}\n                    />\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-sm\">{setting.name}</div>\n                      <div className=\"text-xs text-slate-600\">\n                        {setting.type === 'tax' ? 'Tax' : 'Fee'} • {setting.value}%\n                        {setting.calculation === 'fixed' && ' (Fixed)'}\n                      </div>\n                    </div>\n                  </label>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Live Pricing Preview */}\n          {price && parseFloat(price) > 0 && (\n            <div className=\"bg-slate-50 border rounded-lg p-4\">\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-slate-600\">Base Price:</span>\n                  <span className=\"text-green-600 font-medium\">${parseFloat(price).toFixed(2)}</span>\n                </div>\n                \n                {/* Show individual fees */}\n                {taxFeeSelection.enabledFeeIds.map(feeId => {\n                  const fee = (taxSettings as any[]).find((t: any) => t.id === feeId);\n                  if (!fee) return null;\n                  const basePrice = parseFloat(price) || 0;\n                  const feeAmount = fee.calculation === 'percentage' \n                    ? (basePrice * parseFloat(fee.value)) / 100\n                    : parseFloat(fee.value);\n                  return (\n                    <div key={feeId} className=\"flex justify-between text-blue-600\">\n                      <span className=\"pl-2\">+ {fee.name}:</span>\n                      <span>+${feeAmount.toFixed(2)}</span>\n                    </div>\n                  );\n                })}\n                \n                {/* Show individual taxes */}\n                {taxFeeSelection.enabledTaxIds.map(taxId => {\n                  const tax = (taxSettings as any[]).find((t: any) => t.id === taxId);\n                  if (!tax) return null;\n                  const basePrice = parseFloat(price) || 0;\n                  let subtotalWithFees = basePrice;\n                  \n                  // Add fees to subtotal for tax calculation\n                  taxFeeSelection.enabledFeeIds.forEach(feeId => {\n                    const fee = (taxSettings as any[]).find((t: any) => t.id === feeId);\n                    if (fee) {\n                      if (fee.calculation === 'percentage') {\n                        subtotalWithFees += (basePrice * parseFloat(fee.value)) / 100;\n                      } else {\n                        subtotalWithFees += parseFloat(fee.value);\n                      }\n                    }\n                  });\n                  \n                  const taxAmount = (subtotalWithFees * parseFloat(tax.value)) / 100;\n                  return (\n                    <div key={taxId} className=\"flex justify-between text-purple-600\">\n                      <span className=\"pl-2\">+ {tax.name}:</span>\n                      <span>+${taxAmount.toFixed(2)}</span>\n                    </div>\n                  );\n                })}\n                \n                <div className=\"border-t pt-2 mt-2\">\n                  <div className=\"flex justify-between font-semibold\">\n                    <span>Total with Taxes & Fees:</span>\n                    <span className=\"text-blue-700\">${calculatePackageTotal().toFixed(2)}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"border-t border-slate-200 p-6 flex justify-between\">\n          <Button variant=\"destructive\" onClick={handleDelete} disabled={deletePackage.isPending}>\n            <Trash2 className=\"h-4 w-4 mr-2\" />\n            {deletePackage.isPending ? 'Deleting...' : 'Delete Package'}\n          </Button>\n          \n          <div className=\"flex gap-3\">\n            <Button variant=\"outline\" onClick={() => onOpenChange(false)}>Cancel</Button>\n            <Button onClick={handleSave} disabled={updatePackage.isPending || !name.trim() || !price}>\n              <Save className=\"h-4 w-4 mr-2\" />\n              {updatePackage.isPending ? 'Saving...' : 'Save Changes'}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":15256},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { MobileNav } from \"@/components/layout/mobile-nav\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/api\";\nimport { cn } from \"@/lib/utils\";\nimport { TaxesAndFeesSettings } from \"@/components/taxes-and-fees-settings\";\nimport { NotificationTestPanel } from \"@/components/NotificationTestPanel\";\nimport { \n  Building2, \n  Mail, \n  CreditCard, \n  Shield, \n  Save,\n  Key,\n  AlertCircle,\n  CheckCircle,\n  Globe,\n  FileOutput,\n  Bell,\n  Users,\n  Settings as SettingsIcon,\n  Trash2,\n  Plus,\n  Edit3,\n  Copy,\n  Eye,\n  EyeOff,\n  ExternalLink,\n  Check,\n  XCircle,\n  RefreshCw,\n  Play\n} from \"lucide-react\";\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"general\");\n  const [showApiKeys, setShowApiKeys] = useState(false);\n\n  // Fetch current settings\n  const { data: settings, isLoading } = useQuery({\n    queryKey: [\"/api/settings\"],\n    staleTime: 0\n  });\n\n  // Local state for form data\n  const [formData, setFormData] = useState({\n    business: {\n      companyName: \"\",\n      companyEmail: \"\",\n      companyPhone: \"\",\n      companyAddress: \"\",\n      website: \"\",\n      timezone: \"America/New_York\",\n      currency: \"USD\",\n      logo: \"\"\n    },\n    notifications: {\n      emailNotifications: true,\n      smsNotifications: false,\n      pushNotifications: true,\n      bookingConfirmations: true,\n      paymentReminders: true,\n      maintenanceAlerts: false,\n      marketingEmails: false\n    },\n    integrations: {\n      stripeConnected: false,\n      emailProvider: \"gmail\",\n      smsProvider: \"twilio\",\n      calendarSync: \"google\",\n      analyticsEnabled: true,\n      gmailSettings: {\n        email: \"\",\n        appPassword: \"\",\n        isConfigured: false\n      }\n    },\n    security: {\n      sessionTimeout: 60,\n      passwordPolicy: \"strong\",\n      auditLogging: true,\n      dataBackupFrequency: \"daily\",\n      twoFactorEnabled: false,\n      ipWhitelist: \"\"\n    },\n    beo: {\n      defaultTemplate: \"standard\",\n      enabledBeoTypes: [\"floor_plan\", \"timeline\", \"catering\", \"av_requirements\"],\n      autoGenerate: true,\n      includeVendorInfo: true,\n      showPricing: false,\n      customHeader: \"\",\n      customFooter: \"\"\n    },\n    taxes: {\n      defaultTaxRate: 8.5,\n      taxName: \"Sales Tax\",\n      taxNumber: \"\",\n      applyToServices: true,\n      applyToPackages: true,\n      includeTaxInPrice: false\n    }\n  });\n\n  // Initialize form data when settings load\n  useEffect(() => {\n    if (settings) {\n      console.log('Settings loaded:', settings);\n      setFormData(prev => {\n        const newData = {\n          ...prev,\n          ...settings\n        };\n        console.log('Form data updated:', newData);\n        return newData;\n      });\n    }\n  }, [settings]);\n\n  // Save settings mutation\n  const saveSettingsMutation = useMutation({\n    mutationFn: async (data: any) => {\n      // Use the batch update endpoint\n      const response = await apiRequest(\"PUT\", \"/api/settings\", data);\n      return response;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Settings saved\",\n        description: \"Your settings have been updated successfully\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error saving settings\",\n        description: error.message || \"Failed to save settings\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSaveSection = (section: string) => {\n    const sectionData = { [section]: formData[section as keyof typeof formData] };\n    console.log('Saving section:', section, 'with data:', sectionData);\n    saveSettingsMutation.mutate(sectionData);\n  };\n\n  const handleSaveAll = () => {\n    saveSettingsMutation.mutate(formData);\n  };\n\n  const updateFormData = (section: string, field: string, value: any) => {\n    console.log('Updating form data:', section, field, value);\n    setFormData(prev => ({\n      ...prev,\n      [section]: {\n        ...(prev[section as keyof typeof prev] as any),\n        [field]: value\n      }\n    }));\n  };\n\n  const toggleArrayItem = (section: string, field: string, item: string) => {\n    const currentArray = (formData[section as keyof typeof formData] as any)[field] || [];\n    const newArray = currentArray.includes(item)\n      ? currentArray.filter((i: string) => i !== item)\n      : [...currentArray, item];\n    \n    updateFormData(section, field, newArray);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n        <div className=\"hidden lg:block\">\n          <Sidebar />\n        </div>\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n            <p className=\"text-slate-600\">Loading settings...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <div className=\"hidden lg:block\">\n        <Sidebar />\n      </div>\n      \n      <MobileNav \n        isOpen={mobileNavOpen} \n        onClose={() => setMobileNavOpen(false)} \n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Settings\" \n          subtitle=\"Customize your venue management experience\"\n          onMobileMenuToggle={() => setMobileNavOpen(true)}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"max-w-7xl mx-auto p-6 space-y-8\">\n            \n            {/* Header Actions */}\n            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-slate-900\">Settings</h1>\n                <p className=\"text-slate-600 mt-1\">Configure your venue management system to match your business needs</p>\n              </div>\n              <div className=\"flex gap-3\">\n                <Button \n                  variant=\"outline\"\n                  onClick={() => window.location.reload()}\n                  className=\"bg-white\"\n                >\n                  Reset Changes\n                </Button>\n                <Button \n                  onClick={handleSaveAll}\n                  disabled={saveSettingsMutation.isPending}\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                >\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  {saveSettingsMutation.isPending ? \"Saving...\" : \"Save All\"}\n                </Button>\n              </div>\n            </div>\n\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-1 h-auto p-1 bg-slate-100\">\n                <TabsTrigger value=\"general\" className=\"data-[state=active]:bg-white flex flex-col gap-1 py-3 px-2\">\n                  <Building2 className=\"w-4 h-4\" />\n                  <span className=\"text-xs\">General</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"notifications\" className=\"data-[state=active]:bg-white flex flex-col gap-1 py-3 px-2\">\n                  <Bell className=\"w-4 h-4\" />\n                  <span className=\"text-xs\">Notifications</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"integrations\" className=\"data-[state=active]:bg-white flex flex-col gap-1 py-3 px-2\">\n                  <Key className=\"w-4 h-4\" />\n                  <span className=\"text-xs\">Integrations</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"beo\" className=\"data-[state=active]:bg-white flex flex-col gap-1 py-3 px-2\">\n                  <FileOutput className=\"w-4 h-4\" />\n                  <span className=\"text-xs\">BEO</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"taxes\" className=\"data-[state=active]:bg-white flex flex-col gap-1 py-3 px-2\">\n                  <CreditCard className=\"w-4 h-4\" />\n                  <span className=\"text-xs\">Taxes</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"security\" className=\"data-[state=active]:bg-white flex flex-col gap-1 py-3 px-2\">\n                  <Shield className=\"w-4 h-4\" />\n                  <span className=\"text-xs\">Security</span>\n                </TabsTrigger>\n              </TabsList>\n\n              {/* General Settings */}\n              <TabsContent value=\"general\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Building2 className=\"w-5 h-5 text-blue-600\" />\n                      Business Information\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"companyName\">Company Name</Label>\n                        <Input\n                          id=\"companyName\"\n                          value={formData.business.companyName}\n                          onChange={(e) => updateFormData(\"business\", \"companyName\", e.target.value)}\n                          placeholder=\"Your venue name\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"companyEmail\">Business Email</Label>\n                        <Input\n                          id=\"companyEmail\"\n                          type=\"email\"\n                          value={formData.business.companyEmail}\n                          onChange={(e) => updateFormData(\"business\", \"companyEmail\", e.target.value)}\n                          placeholder=\"contact@yourvenue.com\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"companyPhone\">Phone Number</Label>\n                        <Input\n                          id=\"companyPhone\"\n                          value={formData.business.companyPhone}\n                          onChange={(e) => updateFormData(\"business\", \"companyPhone\", e.target.value)}\n                          placeholder=\"+1 (555) 123-4567\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"website\">Website</Label>\n                        <Input\n                          id=\"website\"\n                          value={formData.business.website}\n                          onChange={(e) => updateFormData(\"business\", \"website\", e.target.value)}\n                          placeholder=\"https://yourvenue.com\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"companyAddress\">Business Address</Label>\n                      <Textarea\n                        id=\"companyAddress\"\n                        value={formData.business.companyAddress}\n                        onChange={(e) => updateFormData(\"business\", \"companyAddress\", e.target.value)}\n                        placeholder=\"123 Business Street, City, State 12345\"\n                        rows={3}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"timezone\">Timezone</Label>\n                        <Select \n                          value={formData.business.timezone} \n                          onValueChange={(value) => updateFormData(\"business\", \"timezone\", value)}\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {/* North America */}\n                            <SelectItem value=\"America/New_York\">🇺🇸 Eastern Time (ET)</SelectItem>\n                            <SelectItem value=\"America/Chicago\">🇺🇸 Central Time (CT)</SelectItem>\n                            <SelectItem value=\"America/Denver\">🇺🇸 Mountain Time (MT)</SelectItem>\n                            <SelectItem value=\"America/Los_Angeles\">🇺🇸 Pacific Time (PT)</SelectItem>\n                            <SelectItem value=\"America/Anchorage\">🇺🇸 Alaska Time (AKT)</SelectItem>\n                            <SelectItem value=\"Pacific/Honolulu\">🇺🇸 Hawaii Time (HST)</SelectItem>\n                            <SelectItem value=\"America/Toronto\">🇨🇦 Eastern Canada</SelectItem>\n                            <SelectItem value=\"America/Vancouver\">🇨🇦 Pacific Canada</SelectItem>\n                            <SelectItem value=\"America/Mexico_City\">🇲🇽 Mexico City</SelectItem>\n                            \n                            {/* Europe */}\n                            <SelectItem value=\"Europe/London\">🇬🇧 London (GMT/BST)</SelectItem>\n                            <SelectItem value=\"Europe/Paris\">🇫🇷 Paris (CET/CEST)</SelectItem>\n                            <SelectItem value=\"Europe/Berlin\">🇩🇪 Berlin (CET/CEST)</SelectItem>\n                            <SelectItem value=\"Europe/Rome\">🇮🇹 Rome (CET/CEST)</SelectItem>\n                            <SelectItem value=\"Europe/Madrid\">🇪🇸 Madrid (CET/CEST)</SelectItem>\n                            <SelectItem value=\"Europe/Amsterdam\">🇳🇱 Amsterdam (CET/CEST)</SelectItem>\n                            <SelectItem value=\"Europe/Stockholm\">🇸🇪 Stockholm (CET/CEST)</SelectItem>\n                            <SelectItem value=\"Europe/Moscow\">🇷🇺 Moscow (MSK)</SelectItem>\n                            \n                            {/* Asia Pacific */}\n                            <SelectItem value=\"Asia/Tokyo\">🇯🇵 Tokyo (JST)</SelectItem>\n                            <SelectItem value=\"Asia/Shanghai\">🇨🇳 Shanghai (CST)</SelectItem>\n                            <SelectItem value=\"Asia/Hong_Kong\">🇭🇰 Hong Kong (HKT)</SelectItem>\n                            <SelectItem value=\"Asia/Singapore\">🇸🇬 Singapore (SGT)</SelectItem>\n                            <SelectItem value=\"Asia/Seoul\">🇰🇷 Seoul (KST)</SelectItem>\n                            <SelectItem value=\"Asia/Mumbai\">🇮🇳 Mumbai (IST)</SelectItem>\n                            <SelectItem value=\"Asia/Dubai\">🇦🇪 Dubai (GST)</SelectItem>\n                            <SelectItem value=\"Australia/Sydney\">🇦🇺 Sydney (AEST/AEDT)</SelectItem>\n                            <SelectItem value=\"Australia/Melbourne\">🇦🇺 Melbourne (AEST/AEDT)</SelectItem>\n                            <SelectItem value=\"Australia/Perth\">🇦🇺 Perth (AWST)</SelectItem>\n                            <SelectItem value=\"Pacific/Auckland\">🇳🇿 Auckland (NZST/NZDT)</SelectItem>\n                            \n                            {/* South America */}\n                            <SelectItem value=\"America/Sao_Paulo\">🇧🇷 São Paulo (BRT)</SelectItem>\n                            <SelectItem value=\"America/Argentina/Buenos_Aires\">🇦🇷 Buenos Aires (ART)</SelectItem>\n                            <SelectItem value=\"America/Santiago\">🇨🇱 Santiago (CLT)</SelectItem>\n                            <SelectItem value=\"America/Lima\">🇵🇪 Lima (PET)</SelectItem>\n                            \n                            {/* Africa */}\n                            <SelectItem value=\"Africa/Cairo\">🇪🇬 Cairo (EET)</SelectItem>\n                            <SelectItem value=\"Africa/Johannesburg\">🇿🇦 Johannesburg (SAST)</SelectItem>\n                            <SelectItem value=\"Africa/Lagos\">🇳🇬 Lagos (WAT)</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"currency\">Currency</Label>\n                        <Select \n                          value={formData.business.currency} \n                          onValueChange={(value) => updateFormData(\"business\", \"currency\", value)}\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"USD\">🇺🇸 USD - US Dollar</SelectItem>\n                            <SelectItem value=\"EUR\">🇪🇺 EUR - Euro</SelectItem>\n                            <SelectItem value=\"GBP\">🇬🇧 GBP - British Pound</SelectItem>\n                            <SelectItem value=\"CAD\">🇨🇦 CAD - Canadian Dollar</SelectItem>\n                            <SelectItem value=\"AUD\">🇦🇺 AUD - Australian Dollar</SelectItem>\n                            <SelectItem value=\"JPY\">🇯🇵 JPY - Japanese Yen</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <div className=\"pt-4 border-t\">\n                      <Button \n                        onClick={() => handleSaveSection(\"business\")}\n                        disabled={saveSettingsMutation.isPending}\n                        className=\"bg-blue-600 hover:bg-blue-700\"\n                      >\n                        <Save className=\"w-4 h-4 mr-2\" />\n                        Save Business Settings\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Notifications Settings */}\n              <TabsContent value=\"notifications\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Bell className=\"w-5 h-5 text-green-600\" />\n                      Notification Preferences\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-base font-medium\">Email Notifications</Label>\n                          <p className=\"text-sm text-slate-600\">Receive notifications via email</p>\n                        </div>\n                        <Switch\n                          checked={formData.notifications.emailNotifications}\n                          onCheckedChange={(checked) => updateFormData(\"notifications\", \"emailNotifications\", checked)}\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-base font-medium\">Push Notifications</Label>\n                          <p className=\"text-sm text-slate-600\">Browser push notifications</p>\n                        </div>\n                        <Switch\n                          checked={formData.notifications.pushNotifications}\n                          onCheckedChange={(checked) => updateFormData(\"notifications\", \"pushNotifications\", checked)}\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-base font-medium\">Booking Confirmations</Label>\n                          <p className=\"text-sm text-slate-600\">Automatic booking confirmation emails</p>\n                        </div>\n                        <Switch\n                          checked={formData.notifications.bookingConfirmations}\n                          onCheckedChange={(checked) => updateFormData(\"notifications\", \"bookingConfirmations\", checked)}\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-base font-medium\">Payment Reminders</Label>\n                          <p className=\"text-sm text-slate-600\">Send automatic payment reminder emails</p>\n                        </div>\n                        <Switch\n                          checked={formData.notifications.paymentReminders}\n                          onCheckedChange={(checked) => updateFormData(\"notifications\", \"paymentReminders\", checked)}\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-base font-medium\">Maintenance Alerts</Label>\n                          <p className=\"text-sm text-slate-600\">System maintenance notifications</p>\n                        </div>\n                        <Switch\n                          checked={formData.notifications.maintenanceAlerts}\n                          onCheckedChange={(checked) => updateFormData(\"notifications\", \"maintenanceAlerts\", checked)}\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"pt-4 border-t\">\n                      <Button \n                        onClick={() => handleSaveSection(\"notifications\")}\n                        disabled={saveSettingsMutation.isPending}\n                        className=\"bg-green-600 hover:bg-green-700\"\n                      >\n                        <Save className=\"w-4 h-4 mr-2\" />\n                        Save Notification Settings\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Notification Testing Panel */}\n                <NotificationTestPanel />\n              </TabsContent>\n\n\n\n              {/* Integrations Settings */}\n              <TabsContent value=\"integrations\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Key className=\"w-5 h-5 text-orange-600\" />\n                      Integrations & Services\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    \n                    {/* Stripe Payment Integration */}\n                    <StripePaymentSection />\n\n                    {/* Email Provider */}\n                    <div className=\"space-y-3\">\n                      <Label>Email Service Provider</Label>\n                      <Select \n                        value={formData.integrations.emailProvider} \n                        onValueChange={(value) => updateFormData(\"integrations\", \"emailProvider\", value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"gmail\">Gmail</SelectItem>\n                          <SelectItem value=\"sendgrid\">SendGrid</SelectItem>\n                          <SelectItem value=\"mailgun\">Mailgun</SelectItem>\n                          <SelectItem value=\"resend\">Resend</SelectItem>\n                          <SelectItem value=\"postmark\">Postmark</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {/* Gmail Configuration - Show when Gmail is selected */}\n                    {formData.integrations.emailProvider === \"gmail\" && (\n                      <div className=\"space-y-4\">\n                        {/* Gmail Setup */}\n                        <div className=\"p-4 border rounded-lg bg-blue-50\">\n                          <div className=\"flex items-center gap-3 mb-4\">\n                            <Mail className=\"w-5 h-5 text-blue-600\" />\n                            <div>\n                              <h4 className=\"font-medium text-blue-900\">Gmail Configuration</h4>\n                              <p className=\"text-sm text-blue-700\">Set up Gmail to send proposals directly from your system</p>\n                            </div>\n                            <Badge variant={formData.integrations.gmailSettings?.isConfigured ? \"default\" : \"secondary\"}>\n                              {formData.integrations.gmailSettings?.isConfigured ? \"Configured\" : \"Not Configured\"}\n                            </Badge>\n                          </div>\n                        </div>\n                        \n                        <div className=\"space-y-4\">\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"gmailEmail\">Gmail Address</Label>\n                            <Input\n                              id=\"gmailEmail\"\n                              type=\"email\"\n                              placeholder=\"your-business@gmail.com\"\n                              value={formData.integrations.gmailSettings?.email || \"\"}\n                              onChange={(e) => updateFormData(\"integrations\", \"gmailSettings\", {\n                                ...formData.integrations.gmailSettings,\n                                email: e.target.value\n                              })}\n                            />\n                            <p className=\"text-xs text-blue-600\">Use your business Gmail account that will send proposals</p>\n                          </div>\n                          \n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"gmailAppPassword\">App Password</Label>\n                            <Input\n                              id=\"gmailAppPassword\"\n                              type=\"password\"\n                              placeholder=\"Enter 16-character app password\"\n                              value={formData.integrations.gmailSettings?.appPassword || \"\"}\n                              onChange={(e) => updateFormData(\"integrations\", \"gmailSettings\", {\n                                ...formData.integrations.gmailSettings,\n                                appPassword: e.target.value\n                              })}\n                            />\n                            <div className=\"text-xs space-y-3 p-4 bg-blue-50 dark:bg-blue-950/20 rounded-md border border-blue-200 dark:border-blue-800\">\n                              <div>\n                                <p className=\"font-semibold text-blue-800 dark:text-blue-200 mb-2\">📧 Gmail App Password Setup Required:</p>\n                                <div className=\"space-y-1 text-blue-700 dark:text-blue-300\">\n                                  <p><strong>1.</strong> Enable 2-Factor Authentication on your Gmail account</p>\n                                  <p><strong>2.</strong> Go to <a href=\"https://myaccount.google.com/apppasswords\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"underline hover:text-blue-900 dark:hover:text-blue-100\">Google App Passwords</a></p>\n                                  <p><strong>3.</strong> Select \"Mail\" or \"Other (Custom)\" and create app password</p>\n                                  <p><strong>4.</strong> Copy the 16-character password (format: \"abcd efgh ijkl mnop\")</p>\n                                  <p><strong>5.</strong> Paste that password here (NOT your regular Gmail password)</p>\n                                </div>\n                              </div>\n                              \n                              <div className=\"border-t border-blue-200 dark:border-blue-700 pt-3\">\n                                <p className=\"font-semibold text-amber-700 dark:text-amber-300 mb-1\">🔧 Troubleshooting Authentication Issues:</p>\n                                <div className=\"space-y-1 text-amber-600 dark:text-amber-400 text-xs\">\n                                  <p>• If you get \"Invalid credentials\" error, generate a NEW App Password</p>\n                                  <p>• App Passwords expire - create a fresh one if it stopped working</p>\n                                  <p>• Make sure you copy the password exactly (16 characters, no spaces)</p>\n                                  <p>• Delete old App Passwords and create new ones if needed</p>\n                                </div>\n                              </div>\n                              \n                              <div className=\"text-red-600 dark:text-red-400 font-medium bg-red-50 dark:bg-red-950/20 p-3 rounded border border-red-200 dark:border-red-800\">\n                                ⚠️ NEVER use your regular Gmail password - only 16-character App Passwords work!\n                                <div className=\"mt-2 text-xs\">\n                                  <strong>Getting \"Authentication Failed\"?</strong>\n                                  <br />→ Generate a NEW App Password right now and try again\n                                  <br />→ Old App Passwords expire and stop working\n                                </div>\n                              </div>\n                              \n                              <div className=\"bg-green-50 dark:bg-green-950/20 border border-green-200 dark:border-green-800 rounded p-3\">\n                                <p className=\"text-green-800 dark:text-green-200 font-semibold text-xs mb-1\">\n                                  🔑 Quick Fix for Authentication Errors:\n                                </p>\n                                <div className=\"text-green-700 dark:text-green-300 text-xs space-y-1\">\n                                  <p>1. <a href=\"https://myaccount.google.com/apppasswords\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"underline hover:text-green-900 dark:hover:text-green-100\">Click here to generate a fresh App Password</a></p>\n                                  <p>2. Delete your old App Password from Google first</p>\n                                  <p>3. Create new one → Copy the 16 characters exactly</p>\n                                  <p>4. Paste it here and test connection</p>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex gap-2\">\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={async () => {\n                                if (formData.integrations.gmailSettings?.email && formData.integrations.gmailSettings?.appPassword) {\n                                  try {\n                                    const response = await fetch('/api/gmail/test', {\n                                      method: 'POST',\n                                      headers: { 'Content-Type': 'application/json' },\n                                      body: JSON.stringify({\n                                        email: formData.integrations.gmailSettings.email,\n                                        appPassword: formData.integrations.gmailSettings.appPassword\n                                      })\n                                    });\n\n                                    const result = await response.json();\n                                    \n                                    if (result.success) {\n                                      updateFormData(\"integrations\", \"gmailSettings\", {\n                                        ...formData.integrations.gmailSettings,\n                                        isConfigured: true\n                                      });\n                                      \n                                      toast({\n                                        title: \"Gmail Connected!\",\n                                        description: \"Your Gmail account is now ready to send proposals and monitor replies.\",\n                                        variant: \"default\"\n                                      });\n                                    } else {\n                                      throw new Error(result.message);\n                                    }\n                                  } catch (error: any) {\n                                    updateFormData(\"integrations\", \"gmailSettings\", {\n                                      ...formData.integrations.gmailSettings,\n                                      isConfigured: false\n                                    });\n                                    \n                                    toast({\n                                      title: \"Gmail Connection Failed\",\n                                      description: error.message || \"Please generate a new Gmail App Password and try again.\",\n                                      variant: \"destructive\"\n                                    });\n                                  }\n                                }\n                              }}\n                              disabled={!formData.integrations.gmailSettings?.email || !formData.integrations.gmailSettings?.appPassword}\n                            >\n                              <Check className=\"w-4 h-4 mr-2\" />\n                              Test Connection\n                            </Button>\n                            \n                            {formData.integrations.gmailSettings?.isConfigured && (\n                              <Button \n                                variant=\"default\" \n                                size=\"sm\"\n                                onClick={async () => {\n                                  try {\n                                    await fetch('/api/gmail/send-test', {\n                                      method: 'POST',\n                                      headers: { 'Content-Type': 'application/json' }\n                                    });\n                                    \n                                    toast({\n                                      title: \"Test Email Sent!\",\n                                      description: \"Check your Gmail inbox for the test email.\",\n                                      variant: \"default\"\n                                    });\n                                  } catch (error: any) {\n                                    toast({\n                                      title: \"Failed to Send\",\n                                      description: error.message || \"Failed to send test email.\",\n                                      variant: \"destructive\"\n                                    });\n                                  }\n                                }}\n                              >\n                                <Mail className=\"w-4 h-4 mr-2\" />\n                                Send Test Email\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                        \n                        {/* Email Monitoring Configuration */}\n                        <div className=\"p-4 border rounded-lg bg-green-50\">\n                          <div className=\"flex items-center gap-3 mb-4\">\n                            <Bell className=\"w-5 h-5 text-green-600\" />\n                            <div>\n                              <h4 className=\"font-medium text-green-900\">Automatic Customer Reply Detection</h4>\n                              <p className=\"text-sm text-green-700\">Monitor Gmail for customer replies to proposals and automatically record them</p>\n                            </div>\n                          </div>\n\n                          <div className=\"space-y-4\">\n                            <div className=\"text-sm space-y-3 p-3 bg-green-100 rounded-md border border-green-200\">\n                              <p className=\"font-semibold text-green-800\">✨ How it works:</p>\n                              <div className=\"space-y-1 text-green-700\">\n                                <p>• When you send proposals via email, they're tracked automatically</p>\n                                <p>• Customer replies to those emails are detected in real-time</p>\n                                <p>• Replies automatically appear in the proposal's communication history</p>\n                                <p>• No manual entry needed - everything happens automatically!</p>\n                              </div>\n                            </div>\n\n                            <div className=\"flex gap-2\">\n                              <Button \n                                variant=\"default\" \n                                size=\"sm\"\n                                onClick={async () => {\n                                  if (!formData.integrations.gmailSettings?.isConfigured) {\n                                    toast({\n                                      title: \"Gmail Not Configured\",\n                                      description: \"Please configure your Gmail settings first before starting email monitoring.\",\n                                      variant: \"destructive\"\n                                    });\n                                    return;\n                                  }\n\n                                  try {\n                                    const response = await fetch('/api/emails/start-monitoring', {\n                                      method: 'POST',\n                                      headers: { 'Content-Type': 'application/json' },\n                                      body: JSON.stringify({\n                                        email: formData.integrations.gmailSettings.email,\n                                        appPassword: formData.integrations.gmailSettings.appPassword\n                                      })\n                                    });\n\n                                    const result = await response.json();\n                                    if (result.success) {\n                                      toast({\n                                        title: \"Email Monitoring Started!\",\n                                        description: \"Now monitoring for customer replies to proposals. They'll appear automatically in communication history.\",\n                                      });\n                                    } else {\n                                      throw new Error(result.message);\n                                    }\n                                  } catch (error: any) {\n                                    toast({\n                                      title: \"Failed to Start Monitoring\",\n                                      description: error.message || \"Unable to start email monitoring\",\n                                      variant: \"destructive\"\n                                    });\n                                  }\n                                }}\n                                disabled={!formData.integrations.gmailSettings?.isConfigured}\n                              >\n                                <Play className=\"w-4 h-4 mr-2\" />\n                                Start Monitoring\n                              </Button>\n                              \n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\"\n                                onClick={async () => {\n                                  try {\n                                    const response = await fetch('/api/emails/monitoring-status');\n                                    const status = await response.json();\n                                    \n                                    toast({\n                                      title: \"Monitoring Status\",\n                                      description: status.isActive ? \n                                        `Active since ${new Date(status.startedAt).toLocaleString()}. Checking every 30 seconds.` :\n                                        \"Email monitoring is not currently active.\",\n                                      variant: status.isActive ? \"default\" : \"secondary\"\n                                    });\n                                  } catch (error: any) {\n                                    toast({\n                                      title: \"Error\",\n                                      description: \"Unable to check monitoring status\",\n                                      variant: \"destructive\"\n                                    });\n                                  }\n                                }}\n                              >\n                                <Eye className=\"w-4 h-4 mr-2\" />\n                                Check Status\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* API Keys Section */}\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <Label className=\"text-base font-medium\">API Keys</Label>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setShowApiKeys(!showApiKeys)}\n                        >\n                          {showApiKeys ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                          {showApiKeys ? \"Hide\" : \"Show\"}\n                        </Button>\n                      </div>\n                      \n                      {showApiKeys && (\n                        <div className=\"space-y-3 p-4 bg-slate-50 rounded-lg\">\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"emailApiKey\">Email API Key</Label>\n                            <Input\n                              id=\"emailApiKey\"\n                              type=\"password\"\n                              placeholder=\"Enter your email service API key\"\n                            />\n                          </div>\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"smsApiKey\">SMS API Key (Twilio)</Label>\n                            <Input\n                              id=\"smsApiKey\"\n                              type=\"password\"\n                              placeholder=\"Enter your Twilio API key\"\n                            />\n                          </div>\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"pt-4 border-t\">\n                      <Button \n                        onClick={() => handleSaveSection(\"integrations\")}\n                        disabled={saveSettingsMutation.isPending}\n                        className=\"bg-orange-600 hover:bg-orange-700\"\n                      >\n                        <Save className=\"w-4 h-4 mr-2\" />\n                        Save Integration Settings\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* BEO Settings */}\n              <TabsContent value=\"beo\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <FileOutput className=\"w-5 h-5 text-indigo-600\" />\n                      BEO (Banquet Event Orders)\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"space-y-6\">\n                      <div className=\"space-y-4\">\n                        <Label className=\"text-base font-medium\">BEO Template Design</Label>\n                        <p className=\"text-sm text-slate-600\">Choose the visual design for your Banquet Event Orders</p>\n                        \n                        <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4\">\n                          {[\n                            {\n                              id: \"standard\",\n                              name: \"Standard\",\n                              description: \"Clean and professional template\",\n                              features: [\"Header with logo\", \"Structured sections\", \"Standard fonts\"],\n                              preview: {\n                                bgColor: \"bg-white\",\n                                headerColor: \"bg-slate-100\",\n                                textColor: \"text-slate-900\",\n                                accentColor: \"border-slate-300\"\n                              }\n                            },\n                            {\n                              id: \"luxury\",\n                              name: \"Luxury\",\n                              description: \"Elegant design with premium styling\",\n                              features: [\"Gold accents\", \"Elegant typography\", \"Premium layout\"],\n                              preview: {\n                                bgColor: \"bg-gradient-to-br from-amber-50 to-white\",\n                                headerColor: \"bg-gradient-to-r from-amber-100 to-amber-50\",\n                                textColor: \"text-amber-900\",\n                                accentColor: \"border-amber-300\"\n                              }\n                            },\n                            {\n                              id: \"corporate\",\n                              name: \"Corporate\",\n                              description: \"Professional business template\",\n                              features: [\"Bold headers\", \"Business colors\", \"Structured layout\"],\n                              preview: {\n                                bgColor: \"bg-white\",\n                                headerColor: \"bg-blue-600\",\n                                textColor: \"text-blue-900\",\n                                accentColor: \"border-blue-300\"\n                              }\n                            },\n                            {\n                              id: \"wedding\",\n                              name: \"Wedding\",\n                              description: \"Romantic design for wedding events\",\n                              features: [\"Soft colors\", \"Decorative elements\", \"Elegant styling\"],\n                              preview: {\n                                bgColor: \"bg-gradient-to-br from-rose-50 to-pink-50\",\n                                headerColor: \"bg-gradient-to-r from-rose-100 to-pink-100\",\n                                textColor: \"text-rose-900\",\n                                accentColor: \"border-rose-300\"\n                              }\n                            },\n                            {\n                              id: \"minimal\",\n                              name: \"Minimal\",\n                              description: \"Simple and clean design\",\n                              features: [\"Minimal styling\", \"Clean typography\", \"Simple layout\"],\n                              preview: {\n                                bgColor: \"bg-white\",\n                                headerColor: \"bg-gray-50\",\n                                textColor: \"text-gray-900\",\n                                accentColor: \"border-gray-200\"\n                              }\n                            },\n                            {\n                              id: \"executive\",\n                              name: \"Executive\",\n                              description: \"Professional document-style layout\",\n                              features: [\"Document header\", \"Sectioned layout\", \"Professional fonts\"],\n                              preview: {\n                                bgColor: \"bg-white\",\n                                headerColor: \"bg-gradient-to-r from-slate-800 to-slate-700\",\n                                textColor: \"text-slate-800\",\n                                accentColor: \"border-slate-400\"\n                              }\n                            }\n                          ].map((template) => {\n                            const isSelected = formData.beo.defaultTemplate === template.id;\n                            return (\n                              <div\n                                key={template.id}\n                                className={cn(\n                                  \"relative border-2 rounded-lg p-4 cursor-pointer transition-all\",\n                                  isSelected \n                                    ? \"border-blue-500 bg-blue-50 shadow-md\" \n                                    : \"border-slate-200 hover:border-slate-300 hover:shadow-sm\"\n                                )}\n                                onClick={() => updateFormData(\"beo\", \"defaultTemplate\", template.id)}\n                              >\n                                {isSelected && (\n                                  <div className=\"absolute top-2 right-2 w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center\">\n                                    <Check className=\"w-4 h-4 text-white\" />\n                                  </div>\n                                )}\n                                \n                                {/* Template Preview */}\n                                <div className={cn(\"w-full h-32 rounded border overflow-hidden mb-3\", template.preview.bgColor)}>\n                                  {template.id === \"executive\" ? (\n                                    // Executive template with document-style layout\n                                    <>\n                                      <div className={cn(\"h-10 w-full\", template.preview.headerColor, \"border-b flex items-center px-3\")}>\n                                        <div className=\"flex items-center justify-between w-full\">\n                                          <div className=\"h-3 w-16 bg-white opacity-80 rounded\"></div>\n                                          <div className=\"h-2 w-24 bg-white opacity-60 rounded\"></div>\n                                        </div>\n                                      </div>\n                                      <div className=\"p-3 space-y-1.5\">\n                                        <div className=\"flex justify-between items-center\">\n                                          <div className={cn(\"h-2.5 bg-current opacity-40 rounded w-20\", template.preview.textColor)}></div>\n                                          <div className={cn(\"h-2 bg-current opacity-25 rounded w-16\", template.preview.textColor)}></div>\n                                        </div>\n                                        <div className=\"border-t pt-1.5 space-y-1\">\n                                          <div className={cn(\"h-2 bg-current opacity-20 rounded w-full\", template.preview.textColor)}></div>\n                                          <div className={cn(\"h-2 bg-current opacity-20 rounded w-4/5\", template.preview.textColor)}></div>\n                                        </div>\n                                        <div className=\"pt-1 space-y-1\">\n                                          <div className={cn(\"h-1.5 bg-current opacity-15 rounded w-3/5\", template.preview.textColor)}></div>\n                                          <div className={cn(\"h-1.5 bg-current opacity-15 rounded w-2/3\", template.preview.textColor)}></div>\n                                        </div>\n                                      </div>\n                                    </>\n                                  ) : (\n                                    // Standard preview for other templates\n                                    <>\n                                      <div className={cn(\"h-8 w-full\", template.preview.headerColor, template.preview.accentColor, \"border-b\")}>\n                                        <div className=\"px-3 py-2\">\n                                          <div className=\"h-4 w-20 bg-current opacity-20 rounded\"></div>\n                                        </div>\n                                      </div>\n                                      <div className=\"p-3 space-y-2\">\n                                        <div className={cn(\"h-3 bg-current opacity-30 rounded w-3/4\", template.preview.textColor)}></div>\n                                        <div className={cn(\"h-2 bg-current opacity-20 rounded w-full\", template.preview.textColor)}></div>\n                                        <div className={cn(\"h-2 bg-current opacity-20 rounded w-5/6\", template.preview.textColor)}></div>\n                                        <div className=\"pt-2\">\n                                          <div className={cn(\"h-2 bg-current opacity-15 rounded w-2/3\", template.preview.textColor)}></div>\n                                        </div>\n                                      </div>\n                                    </>\n                                  )}\n                                </div>\n                                \n                                <div className=\"space-y-2\">\n                                  <h3 className=\"font-medium text-sm\">{template.name}</h3>\n                                  <p className=\"text-xs text-slate-600\">{template.description}</p>\n                                  <div className=\"space-y-1\">\n                                    {template.features.map((feature, index) => (\n                                      <div key={index} className=\"flex items-center gap-1\">\n                                        <div className=\"w-1 h-1 bg-slate-400 rounded-full\"></div>\n                                        <span className=\"text-xs text-slate-500\">{feature}</span>\n                                      </div>\n                                    ))}\n                                  </div>\n                                </div>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Sample Template Preview */}\n                    {formData.beo.defaultTemplate && (\n                      <div className=\"space-y-4\">\n                        <div className=\"border-t pt-6\">\n                          <Label className=\"text-base font-medium\">Template Preview</Label>\n                          <p className=\"text-sm text-slate-600 mb-4\">\n                            Preview of the {formData.beo.defaultTemplate} template design\n                          </p>\n                          \n                          <div className=\"bg-white border rounded-lg p-6 max-w-2xl\">\n                            {formData.beo.defaultTemplate === \"executive\" ? (\n                              // Executive template sample\n                              <div className=\"space-y-4 text-sm\">\n                                <div className=\"bg-gradient-to-r from-slate-800 to-slate-700 text-white p-4 rounded\">\n                                  <div className=\"flex justify-between items-start\">\n                                    <div>\n                                      <h3 className=\"text-lg font-bold\">BANQUET EVENT ORDER</h3>\n                                      <p className=\"text-slate-200 text-xs\">Venuine Events</p>\n                                    </div>\n                                    <div className=\"text-right text-xs\">\n                                      <p className=\"text-slate-200\">BEO No.</p>\n                                      <p className=\"font-semibold\">#001234</p>\n                                    </div>\n                                  </div>\n                                </div>\n                                \n                                <div className=\"grid grid-cols-2 gap-4 text-xs\">\n                                  <div>\n                                    <h4 className=\"font-semibold border-b border-slate-300 pb-1 mb-2\">EVENT DETAILS</h4>\n                                    <div className=\"space-y-1\">\n                                      <div className=\"flex justify-between\">\n                                        <span>Event:</span>\n                                        <span>Corporate Gala</span>\n                                      </div>\n                                      <div className=\"flex justify-between\">\n                                        <span>Date:</span>\n                                        <span>March 15, 2025</span>\n                                      </div>\n                                      <div className=\"flex justify-between\">\n                                        <span>Guests:</span>\n                                        <span>150</span>\n                                      </div>\n                                    </div>\n                                  </div>\n                                  <div>\n                                    <h4 className=\"font-semibold border-b border-slate-300 pb-1 mb-2\">CLIENT INFO</h4>\n                                    <div className=\"space-y-1\">\n                                      <div className=\"flex justify-between\">\n                                        <span>Name:</span>\n                                        <span>Tech Corp</span>\n                                      </div>\n                                      <div className=\"flex justify-between\">\n                                        <span>Contact:</span>\n                                        <span>john@techcorp.com</span>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                                \n                                <div>\n                                  <h4 className=\"font-semibold border-b border-slate-300 pb-1 mb-2 text-xs\">SERVICES</h4>\n                                  <div className=\"space-y-2\">\n                                    <div className=\"border border-slate-200 p-2 rounded text-xs\">\n                                      <div className=\"font-medium\">Audio/Visual Setup</div>\n                                      <div className=\"text-slate-600\">Professional sound system and presentation equipment</div>\n                                    </div>\n                                    <div className=\"border border-slate-200 p-2 rounded text-xs\">\n                                      <div className=\"font-medium\">Catering Service</div>\n                                      <div className=\"text-slate-600\">Three-course dinner with wine service</div>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                            ) : formData.beo.defaultTemplate === \"luxury\" ? (\n                              // Luxury template sample\n                              <div className=\"space-y-4\">\n                                <div className=\"bg-gradient-to-r from-amber-100 to-amber-50 p-4 rounded border border-amber-300\">\n                                  <h3 className=\"text-lg font-bold text-amber-900\">Banquet Event Order</h3>\n                                  <p className=\"text-amber-700 text-sm\">Premium Event Services</p>\n                                </div>\n                                <div className=\"text-sm space-y-3\">\n                                  <div className=\"grid grid-cols-2 gap-4\">\n                                    <div>\n                                      <h4 className=\"font-semibold text-amber-900\">Event Details</h4>\n                                      <p className=\"text-slate-600\">Wedding Reception • March 15, 2025 • 120 guests</p>\n                                    </div>\n                                    <div>\n                                      <h4 className=\"font-semibold text-amber-900\">Client</h4>\n                                      <p className=\"text-slate-600\">Mr. & Mrs. Smith</p>\n                                    </div>\n                                  </div>\n                                  <div className=\"bg-amber-50 p-3 rounded border border-amber-200\">\n                                    <h4 className=\"font-medium text-amber-900\">Premium Services</h4>\n                                    <p className=\"text-slate-700 text-sm\">• Elegant floral arrangements • Fine dining service • Premium bar package</p>\n                                  </div>\n                                </div>\n                              </div>\n                            ) : formData.beo.defaultTemplate === \"corporate\" ? (\n                              // Corporate template sample\n                              <div className=\"space-y-4\">\n                                <div className=\"bg-blue-600 text-white p-4 rounded\">\n                                  <h3 className=\"text-lg font-bold\">BANQUET EVENT ORDER</h3>\n                                  <p className=\"text-blue-100 text-sm\">Professional Event Management</p>\n                                </div>\n                                <div className=\"text-sm space-y-3\">\n                                  <div className=\"grid grid-cols-2 gap-4\">\n                                    <div>\n                                      <h4 className=\"font-semibold text-blue-900\">Event Information</h4>\n                                      <p className=\"text-slate-600\">Corporate Meeting • March 15, 2025 • 80 attendees</p>\n                                    </div>\n                                    <div>\n                                      <h4 className=\"font-semibold text-blue-900\">Organization</h4>\n                                      <p className=\"text-slate-600\">Business Solutions Inc.</p>\n                                    </div>\n                                  </div>\n                                  <div className=\"border border-blue-200 p-3 rounded\">\n                                    <h4 className=\"font-medium text-blue-900\">Business Services</h4>\n                                    <p className=\"text-slate-700 text-sm\">• Conference room setup • A/V equipment • Catered lunch</p>\n                                  </div>\n                                </div>\n                              </div>\n                            ) : formData.beo.defaultTemplate === \"wedding\" ? (\n                              // Wedding template sample\n                              <div className=\"space-y-4\">\n                                <div className=\"bg-gradient-to-r from-rose-100 to-pink-100 p-4 rounded border border-rose-300\">\n                                  <h3 className=\"text-lg font-bold text-rose-900\">Banquet Event Order</h3>\n                                  <p className=\"text-rose-700 text-sm\">Romantic Wedding Celebration</p>\n                                </div>\n                                <div className=\"text-sm space-y-3\">\n                                  <div className=\"grid grid-cols-2 gap-4\">\n                                    <div>\n                                      <h4 className=\"font-semibold text-rose-900\">Wedding Details</h4>\n                                      <p className=\"text-slate-600\">Reception • March 15, 2025 • 100 guests</p>\n                                    </div>\n                                    <div>\n                                      <h4 className=\"font-semibold text-rose-900\">Couple</h4>\n                                      <p className=\"text-slate-600\">Sarah & Michael</p>\n                                    </div>\n                                  </div>\n                                  <div className=\"bg-rose-50 p-3 rounded border border-rose-200\">\n                                    <h4 className=\"font-medium text-rose-900\">Wedding Services</h4>\n                                    <p className=\"text-slate-700 text-sm\">• Romantic lighting • Floral centerpieces • Wedding cake service</p>\n                                  </div>\n                                </div>\n                              </div>\n                            ) : (\n                              // Standard and Minimal template sample\n                              <div className=\"space-y-4\">\n                                <div className=\"bg-slate-100 p-4 rounded border border-slate-300\">\n                                  <h3 className=\"text-lg font-bold text-slate-900\">Banquet Event Order</h3>\n                                  <p className=\"text-slate-600 text-sm\">Professional Event Services</p>\n                                </div>\n                                <div className=\"text-sm space-y-3\">\n                                  <div className=\"grid grid-cols-2 gap-4\">\n                                    <div>\n                                      <h4 className=\"font-semibold\">Event Details</h4>\n                                      <p className=\"text-slate-600\">Company Event • March 15, 2025 • 75 guests</p>\n                                    </div>\n                                    <div>\n                                      <h4 className=\"font-semibold\">Client</h4>\n                                      <p className=\"text-slate-600\">ABC Company</p>\n                                    </div>\n                                  </div>\n                                  <div className=\"border border-slate-200 p-3 rounded\">\n                                    <h4 className=\"font-medium\">Event Services</h4>\n                                    <p className=\"text-slate-700 text-sm\">• Room setup • Catering • Basic A/V equipment</p>\n                                  </div>\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    <div className=\"space-y-4\">\n                      <Label className=\"text-base font-medium\">BEO Sections</Label>\n                      <div className=\"grid grid-cols-2 gap-3\">\n                        {[\n                          { id: \"floor_plan\", label: \"Floor Plan\" },\n                          { id: \"timeline\", label: \"Timeline\" },\n                          { id: \"catering\", label: \"Catering\" },\n                          { id: \"av_requirements\", label: \"AV Requirements\" },\n                          { id: \"vendor_info\", label: \"Vendor Information\" },\n                          { id: \"setup_breakdown\", label: \"Setup/Breakdown\" }\n                        ].map((item) => (\n                          <div key={item.id} className=\"flex items-center space-x-2\">\n                            <Switch\n                              checked={formData.beo.enabledBeoTypes.includes(item.id)}\n                              onCheckedChange={() => toggleArrayItem(\"beo\", \"enabledBeoTypes\", item.id)}\n                            />\n                            <Label className=\"text-sm\">{item.label}</Label>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-base font-medium\">Auto-Generate BEO</Label>\n                          <p className=\"text-sm text-slate-600\">Automatically create BEO when event is confirmed</p>\n                        </div>\n                        <Switch\n                          checked={formData.beo.autoGenerate}\n                          onCheckedChange={(checked) => updateFormData(\"beo\", \"autoGenerate\", checked)}\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-base font-medium\">Show Pricing</Label>\n                          <p className=\"text-sm text-slate-600\">Include pricing information in BEO documents</p>\n                        </div>\n                        <Switch\n                          checked={formData.beo.showPricing}\n                          onCheckedChange={(checked) => updateFormData(\"beo\", \"showPricing\", checked)}\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"pt-4 border-t\">\n                      <Button \n                        onClick={() => handleSaveSection(\"beo\")}\n                        disabled={saveSettingsMutation.isPending}\n                        className=\"bg-indigo-600 hover:bg-indigo-700\"\n                      >\n                        <Save className=\"w-4 h-4 mr-2\" />\n                        Save BEO Settings\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Taxes and Fees Settings */}\n              <TabsContent value=\"taxes\" className=\"space-y-6\">\n                <TaxesAndFeesSettings />\n              </TabsContent>\n\n              {/* Security Settings */}\n              <TabsContent value=\"security\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Shield className=\"w-5 h-5 text-red-600\" />\n                      Security & Privacy\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"sessionTimeout\">Session Timeout (minutes)</Label>\n                        <Select \n                          value={formData.security.sessionTimeout.toString()} \n                          onValueChange={(value) => updateFormData(\"security\", \"sessionTimeout\", parseInt(value))}\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"30\">30 minutes</SelectItem>\n                            <SelectItem value=\"60\">1 hour</SelectItem>\n                            <SelectItem value=\"120\">2 hours</SelectItem>\n                            <SelectItem value=\"480\">8 hours</SelectItem>\n                            <SelectItem value=\"1440\">24 hours</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"passwordPolicy\">Password Policy</Label>\n                        <Select \n                          value={formData.security.passwordPolicy} \n                          onValueChange={(value) => updateFormData(\"security\", \"passwordPolicy\", value)}\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"basic\">Basic (8+ characters)</SelectItem>\n                            <SelectItem value=\"strong\">Strong (8+ chars, mixed case, numbers)</SelectItem>\n                            <SelectItem value=\"strict\">Strict (12+ chars, mixed case, numbers, symbols)</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-base font-medium\">Audit Logging</Label>\n                          <p className=\"text-sm text-slate-600\">Track user actions and system events</p>\n                        </div>\n                        <Switch\n                          checked={formData.security.auditLogging}\n                          onCheckedChange={(checked) => updateFormData(\"security\", \"auditLogging\", checked)}\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-base font-medium\">Two-Factor Authentication</Label>\n                          <p className=\"text-sm text-slate-600\">Require 2FA for all users</p>\n                        </div>\n                        <Switch\n                          checked={formData.security.twoFactorEnabled}\n                          onCheckedChange={(checked) => updateFormData(\"security\", \"twoFactorEnabled\", checked)}\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"dataBackupFrequency\">Data Backup Frequency</Label>\n                      <Select \n                        value={formData.security.dataBackupFrequency} \n                        onValueChange={(value) => updateFormData(\"security\", \"dataBackupFrequency\", value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"hourly\">Hourly</SelectItem>\n                          <SelectItem value=\"daily\">Daily</SelectItem>\n                          <SelectItem value=\"weekly\">Weekly</SelectItem>\n                          <SelectItem value=\"monthly\">Monthly</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"pt-4 border-t\">\n                      <Button \n                        onClick={() => handleSaveSection(\"security\")}\n                        disabled={saveSettingsMutation.isPending}\n                        className=\"bg-red-600 hover:bg-red-700\"\n                      >\n                        <Save className=\"w-4 h-4 mr-2\" />\n                        Save Security Settings\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\n// Stripe Payment Integration Component\nfunction StripePaymentSection() {\n  const { toast } = useToast();\n  const [testingPayment, setTestingPayment] = useState(false);\n  \n  // Query Stripe status\n  const stripeStatusQuery = useQuery({\n    queryKey: [\"/api/stripe/status\"],\n    staleTime: 30000, // Cache for 30 seconds\n  });\n  \n  const { data: stripeStatus, isLoading: statusLoading } = stripeStatusQuery;\n\n  // Test payment intent creation\n  const testPaymentMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/stripe/create-payment-intent\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ \n          amount: 10.00, // $10 test amount\n          metadata: { test: true, booking_id: \"test-\" + Date.now() }\n        }),\n      });\n      if (!response.ok) throw new Error(\"Failed to create payment intent\");\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Payment Test Successful\",\n        description: `Payment intent created: ${data.paymentIntentId}`,\n      });\n      setTestingPayment(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Payment Test Failed\",\n        description: error.message || \"Failed to create payment intent\",\n        variant: \"destructive\",\n      });\n      setTestingPayment(false);\n    },\n  });\n\n  const handleTestPayment = () => {\n    setTestingPayment(true);\n    testPaymentMutation.mutate();\n  };\n\n  const isConfigured = stripeStatus?.configured;\n  const isReady = stripeStatus?.ready;\n\n  return (\n    <div className=\"p-4 border rounded-lg\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <CreditCard className=\"w-5 h-5 text-purple-600\" />\n          <div>\n            <h4 className=\"font-medium\">Stripe Payments</h4>\n            <p className=\"text-sm text-slate-600\">Accept credit card payments for bookings and events</p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Badge variant={isReady ? \"default\" : \"secondary\"}>\n            {statusLoading ? \"Checking...\" : isReady ? \"Ready\" : \"Setup Required\"}\n          </Badge>\n          <Button\n            onClick={() => {\n              stripeStatusQuery.refetch();\n            }}\n            variant=\"ghost\"\n            size=\"sm\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Configuration Status */}\n      <div className=\"space-y-3 mb-4\">\n        <div className=\"flex items-center justify-between text-sm\">\n          <span className=\"text-slate-600\">Stripe Connect Account:</span>\n          <div className=\"flex items-center gap-2\">\n            {isConfigured ? (\n              <>\n                <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                <span className=\"text-green-600\">Connected</span>\n              </>\n            ) : (\n              <>\n                <XCircle className=\"w-4 h-4 text-red-600\" />\n                <span className=\"text-red-600\">Not Connected</span>\n              </>\n            )}\n          </div>\n        </div>\n        \n        {isConfigured && (\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-slate-600\">Payment Processing:</span>\n            <div className=\"flex items-center gap-2\">\n              {isReady ? (\n                <>\n                  <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                  <span className=\"text-green-600\">Active</span>\n                </>\n              ) : (\n                <>\n                  <AlertCircle className=\"w-4 h-4 text-amber-600\" />\n                  <span className=\"text-amber-600\">Setup Required</span>\n                </>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Setup Instructions */}\n      {!isConfigured && (\n        <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-3 mb-4\">\n          <div className=\"flex items-start gap-3\">\n            <AlertCircle className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n            <div>\n              <p className=\"font-medium text-blue-800 dark:text-blue-200\">Connect Your Stripe Account</p>\n              <p className=\"text-blue-700 dark:text-blue-300 text-sm mt-1\">\n                Connect your Stripe account to start accepting payments through the venue management system.\n              </p>\n              <div className=\"mt-3\">\n                <Button \n                  onClick={async () => {\n                    // Initialize the connection process\n                    try {\n                      await apiRequest(\"POST\", \"/api/stripe/connect/initialize\");\n                      // Open the Stripe Connect onboarding\n                      window.open(\n                        \"https://connect.stripe.com/d/setup/s/_SqBRbOzYAs1NHOUIfHZJLBpBD4/YWNjdF8xUnVWNHlSQ1ROTFBEaDJ2/9f48a3151cb6a548c\",\n                        \"_blank\"\n                      );\n                      \n                      // Refresh status after a delay\n                      setTimeout(() => {\n                        stripeStatusQuery.refetch();\n                      }, 2000);\n                      \n                      toast({\n                        title: \"Opening Stripe Connect\",\n                        description: \"Complete the setup in the new window, then return here.\",\n                      });\n                    } catch (error) {\n                      toast({\n                        title: \"Error\",\n                        description: \"Failed to initialize Stripe Connect\",\n                        variant: \"destructive\"\n                      });\n                    }\n                  }}\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                >\n                  <ExternalLink className=\"w-4 h-4 mr-2\" />\n                  Connect Stripe Account\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Manage Connected Account */}\n      {isConfigured && (\n        <div className=\"space-y-3 mb-4\">\n          <Button\n            onClick={async () => {\n              try {\n                const response = await apiRequest(\"POST\", \"/api/stripe/connect/create-login-link\");\n                const data = await response.json();\n                window.open(data.loginUrl, '_blank');\n              } catch (error) {\n                toast({\n                  title: \"Error\",\n                  description: \"Failed to open Stripe dashboard\",\n                  variant: \"destructive\"\n                });\n              }\n            }}\n            variant=\"outline\"\n            className=\"w-full\"\n          >\n            <ExternalLink className=\"w-4 h-4 mr-2\" />\n            Manage Stripe Dashboard\n          </Button>\n          \n          <Button\n            onClick={async () => {\n              try {\n                await apiRequest(\"DELETE\", \"/api/stripe/connect/disconnect\");\n                toast({\n                  title: \"Success\",\n                  description: \"Stripe account disconnected successfully\"\n                });\n                stripeStatusQuery.refetch();\n              } catch (error) {\n                toast({\n                  title: \"Error\",\n                  description: \"Failed to disconnect Stripe account\",\n                  variant: \"destructive\"\n                });\n              }\n            }}\n            variant=\"outline\"\n            className=\"w-full text-red-600 hover:text-red-700 border-red-200 hover:border-red-300\"\n          >\n            <XCircle className=\"w-4 h-4 mr-2\" />\n            Disconnect Stripe Account\n          </Button>\n        </div>\n      )}\n\n      {/* Test Payment Button */}\n      {isReady && (\n        <div className=\"space-y-2\">\n          <Button\n            onClick={handleTestPayment}\n            disabled={testingPayment || testPaymentMutation.isPending}\n            variant=\"outline\"\n            className=\"w-full\"\n          >\n            <CreditCard className=\"w-4 h-4 mr-2\" />\n            {testingPayment || testPaymentMutation.isPending ? \"Testing...\" : \"Test Payment Integration\"}\n          </Button>\n        </div>\n      )}\n\n      {/* Info Section */}\n      <div className=\"mt-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-3\">\n        <div className=\"flex items-start gap-2\">\n          <CreditCard className=\"w-4 h-4 text-blue-600 mt-0.5\" />\n          <div className=\"text-sm text-blue-800 dark:text-blue-200\">\n            <p className=\"font-medium mb-1\">About Stripe Integration</p>\n            <p>\n              This integration uses Stripe Connect to securely process payments for venue bookings and events. \n              Stripe Connect provides a complete payment solution with built-in compliance and fraud protection.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":85238},"client/src/components/ai/voice-booking-modal.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Dialog, DialogContent, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Mic, MicOff, Play, Square, Sparkles, Calendar, MapPin, Users, Clock } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format, parse } from \"date-fns\";\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onEventCreated?: () => void;\n}\n\ninterface VoiceBookingData {\n  eventName: string;\n  eventDate: string;\n  startTime: string;\n  endTime: string;\n  guestCount: number;\n  eventType: string;\n  customerName: string;\n  customerEmail: string;\n  customerPhone: string;\n  specialRequests: string;\n  suggestedVenue: string;\n  suggestedServices: string[];\n  confidence?: number;\n  corrections?: string[];\n}\n\nexport function VoiceBookingModal({ open, onOpenChange, onEventCreated }: Props) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isRecording, setIsRecording] = useState(false);\n  const [transcript, setTranscript] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [extractedData, setExtractedData] = useState<VoiceBookingData | null>(null);\n  const [audioBlob, setAudioBlob] = useState<Blob | null>(null);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const audioChunksRef = useRef<Blob[]>([]);\n\n  const processVoiceBooking = useMutation({\n    mutationFn: async (transcriptText: string) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/parse-voice\", {\n        transcript: transcriptText\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Convert the parsed data to match our VoiceBookingData interface\n      const formattedData = {\n        eventName: data.eventName || \"\",\n        eventDate: data.eventDate || \"\",\n        startTime: data.startTime || \"\",\n        endTime: data.endTime || \"\",\n        guestCount: data.guestCount || 0,\n        eventType: data.eventType || \"\",\n        customerName: data.customerName || \"\",\n        customerEmail: data.customerEmail || \"\",\n        customerPhone: data.customerPhone || \"\",\n        specialRequests: data.specialRequests || \"\",\n        suggestedVenue: data.suggestedVenue || \"\",\n        suggestedServices: data.suggestedServices || []\n      };\n      \n      setExtractedData(formattedData);\n      setIsProcessing(false);\n      \n      // Show corrections made by AI if any\n      const correctionsMessage = data.corrections && data.corrections.length > 0 \n        ? `AI made corrections: ${data.corrections.join(\", \")}`\n        : \"AI successfully extracted booking details\";\n      \n      toast({\n        title: \"Voice booking processed!\",\n        description: `${correctionsMessage}. Confidence: ${data.confidence || 0}%`\n      });\n    },\n    onError: (error: any) => {\n      setIsProcessing(false);\n      toast({\n        title: \"Processing failed\",\n        description: error.message || \"Failed to process voice booking\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const createBookingFromVoice = useMutation({\n    mutationFn: async (bookingData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/bookings\", bookingData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      toast({\n        title: \"Booking created successfully!\",\n        description: \"Voice booking has been converted to an event.\"\n      });\n      onEventCreated?.();\n      onOpenChange(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to create booking\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });\n        setAudioBlob(audioBlob);\n        \n        // Start speech recognition\n        startSpeechRecognition();\n      };\n\n      mediaRecorder.start();\n      setIsRecording(true);\n      toast({\n        title: \"Recording started\",\n        description: \"Speak clearly about your event booking details\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Recording failed\",\n        description: \"Could not access microphone\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      \n      // Stop all tracks\n      mediaRecorderRef.current.stream?.getTracks().forEach(track => track.stop());\n      \n      toast({\n        title: \"Recording stopped\",\n        description: \"Processing your voice booking...\"\n      });\n    }\n  };\n\n  const startSpeechRecognition = () => {\n    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\n      toast({\n        title: \"Speech recognition not supported\",\n        description: \"Please use Chrome, Safari, or Edge for voice booking\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    \n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n    recognition.maxAlternatives = 3; // Get multiple alternatives for better accuracy\n\n    let finalTranscript = '';\n\n    recognition.onresult = (event: any) => {\n      let interimTranscript = '';\n      \n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          finalTranscript += transcript + ' ';\n        } else {\n          interimTranscript += transcript;\n        }\n      }\n      \n      // Update display with interim results\n      setTranscript(finalTranscript + interimTranscript);\n    };\n\n    recognition.onend = () => {\n      if (finalTranscript.trim()) {\n        setIsProcessing(true);\n        toast({\n          title: \"Processing speech...\",\n          description: \"AI is analyzing and correcting your voice input\"\n        });\n        processVoiceBooking.mutate(finalTranscript.trim());\n      } else {\n        toast({\n          title: \"No speech detected\",\n          description: \"Please try recording again and speak clearly\",\n          variant: \"destructive\"\n        });\n      }\n    };\n\n    recognition.onerror = (event: any) => {\n      const errorMessages = {\n        'no-speech': 'No speech was detected. Please try again.',\n        'audio-capture': 'No microphone was found. Please check your microphone.',\n        'not-allowed': 'Microphone permission denied. Please allow microphone access.',\n        'network': 'Network error occurred. Please check your connection.',\n        'aborted': 'Speech recognition was aborted.',\n        'language-not-supported': 'Language not supported.',\n        'service-not-allowed': 'Speech recognition service not allowed.'\n      };\n      \n      const errorMessage = errorMessages[event.error as keyof typeof errorMessages] || 'Speech recognition error occurred';\n      \n      toast({\n        title: \"Speech Recognition Error\",\n        description: errorMessage,\n        variant: \"destructive\"\n      });\n    };\n\n    recognition.start();\n  };\n\n  const confirmBooking = () => {\n    if (!extractedData) return;\n\n    // Check for missing required fields and suggest them\n    const missingFields = [];\n    if (!extractedData.eventName) missingFields.push(\"event name\");\n    if (!extractedData.eventDate) missingFields.push(\"event date\");\n    if (!extractedData.customerName) missingFields.push(\"customer name\");\n    if (!extractedData.customerEmail) missingFields.push(\"customer email\");\n\n    if (missingFields.length > 0) {\n      toast({\n        title: \"Missing Information\",\n        description: `Please provide: ${missingFields.join(\", \")}. Try recording again with these details.`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Format the booking data properly for the API\n    const bookingData = {\n      eventName: extractedData.eventName,\n      eventType: extractedData.eventType || \"Meeting\", \n      eventDate: extractedData.eventDate, // API expects ISO date string or Date object\n      startTime: extractedData.startTime || \"09:00\",\n      endTime: extractedData.endTime || \"17:00\",\n      guestCount: parseInt(extractedData.guestCount?.toString() || \"1\"),\n      status: \"inquiry\",\n      customerName: extractedData.customerName,\n      customerEmail: extractedData.customerEmail,\n      customerPhone: extractedData.customerPhone || \"\",\n      notes: extractedData.specialRequests || \"Created via AI Voice Booking\",\n      // Default to first venue if no match found  \n      venueId: \"5337f504-a61b-442a-9e8b-9e197c421aca\", // Grand Ballroom ID\n      spaceId: \"space-1\", // Default space\n      selectedServices: extractedData.suggestedServices || [],\n      totalAmount: \"0\", // Will be calculated by the API\n      depositAmount: \"0\"\n    };\n\n    createBookingFromVoice.mutate(bookingData);\n  };\n\n  const resetForm = () => {\n    setTranscript(\"\");\n    setExtractedData(null);\n    setAudioBlob(null);\n    setIsProcessing(false);\n    setIsRecording(false);\n  };\n\n  const playRecording = () => {\n    if (audioBlob) {\n      const audioUrl = URL.createObjectURL(audioBlob);\n      const audio = new Audio(audioUrl);\n      audio.play();\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[85vh] overflow-y-auto\">\n        <DialogTitle className=\"flex items-center gap-2\">\n          <Sparkles className=\"h-5 w-5 text-purple-600\" />\n          AI Voice Booking\n        </DialogTitle>\n        <DialogDescription>\n          Speak naturally about your event booking and let AI extract all the details for you.\n        </DialogDescription>\n\n        <div className=\"space-y-6\">\n          {/* Recording Section */}\n          <Card className=\"p-6\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"flex justify-center\">\n                <div className={`w-20 h-20 rounded-full flex items-center justify-center ${\n                  isRecording ? 'bg-red-100 animate-pulse' : 'bg-purple-100'\n                }`}>\n                  {isRecording ? (\n                    <MicOff className=\"w-8 h-8 text-red-600\" />\n                  ) : (\n                    <Mic className=\"w-8 h-8 text-purple-600\" />\n                  )}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <h3 className=\"font-semibold\">\n                  {isRecording ? \"Recording...\" : \"Ready to Record\"}\n                </h3>\n                <p className=\"text-sm text-gray-600\">\n                  {isRecording \n                    ? \"Speak clearly about your event details, venue preferences, and requirements\" \n                    : \"Click start and describe your event booking in natural language\"\n                  }\n                </p>\n              </div>\n\n              <div className=\"flex justify-center gap-3\">\n                {!isRecording ? (\n                  <Button onClick={startRecording} className=\"bg-purple-600 hover:bg-purple-700\">\n                    <Mic className=\"w-4 h-4 mr-2\" />\n                    Start Recording\n                  </Button>\n                ) : (\n                  <Button onClick={stopRecording} variant=\"destructive\">\n                    <Square className=\"w-4 h-4 mr-2\" />\n                    Stop Recording\n                  </Button>\n                )}\n\n                {audioBlob && (\n                  <Button onClick={playRecording} variant=\"outline\">\n                    <Play className=\"w-4 h-4 mr-2\" />\n                    Play Recording\n                  </Button>\n                )}\n              </div>\n            </div>\n          </Card>\n\n          {/* Transcript Section */}\n          {transcript && (\n            <Card className=\"p-4\">\n              <h4 className=\"font-medium mb-2 flex items-center gap-2\">\n                <Sparkles className=\"w-4 h-4 text-purple-600\" />\n                Voice Transcript\n              </h4>\n              <p className=\"text-sm text-gray-700 bg-gray-50 p-3 rounded italic\">\n                \"{transcript}\"\n              </p>\n            </Card>\n          )}\n\n          {/* Processing Indicator */}\n          {isProcessing && (\n            <Card className=\"p-4 text-center\">\n              <div className=\"flex items-center justify-center gap-2\">\n                <Sparkles className=\"w-5 h-5 text-purple-600 animate-spin\" />\n                <span>AI is extracting booking details...</span>\n              </div>\n            </Card>\n          )}\n\n          {/* Extracted Data Section */}\n          {extractedData && (\n            <Card className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"font-semibold flex items-center gap-2\">\n                  <Sparkles className=\"w-4 h-4 text-purple-600\" />\n                  Extracted Booking Details\n                </h4>\n                <div className=\"flex gap-2\">\n                  {extractedData.confidence && (\n                    <Badge variant=\"outline\" className={`${\n                      extractedData.confidence >= 80 ? 'bg-green-100 text-green-800' :\n                      extractedData.confidence >= 60 ? 'bg-yellow-100 text-yellow-800' :\n                      'bg-red-100 text-red-800'\n                    }`}>\n                      {extractedData.confidence}% Confidence\n                    </Badge>\n                  )}\n                  <Badge className=\"bg-purple-100 text-purple-800\">\n                    AI Processed\n                  </Badge>\n                </div>\n              </div>\n\n              {/* AI Corrections Display */}\n              {extractedData.corrections && extractedData.corrections.length > 0 && (\n                <div className=\"mb-4 p-3 bg-blue-50 rounded border border-blue-200\">\n                  <p className=\"font-medium text-blue-800 mb-1\">AI Made These Corrections:</p>\n                  <ul className=\"text-sm text-blue-700 list-disc list-inside\">\n                    {extractedData.corrections.map((correction, index) => (\n                      <li key={index}>{correction}</li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <Calendar className=\"w-4 h-4 text-blue-600\" />\n                    <div>\n                      <p className=\"font-medium\">{extractedData.eventName}</p>\n                      <p className=\"text-sm text-gray-600\">{extractedData.eventType}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-2\">\n                    <Clock className=\"w-4 h-4 text-green-600\" />\n                    <div>\n                      <p className=\"font-medium\">{extractedData.eventDate}</p>\n                      <p className=\"text-sm text-gray-600\">\n                        {extractedData.startTime} - {extractedData.endTime}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-2\">\n                    <Users className=\"w-4 h-4 text-orange-600\" />\n                    <div>\n                      <p className=\"font-medium\">{extractedData.guestCount} Guests</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div>\n                    <p className=\"font-medium\">Customer</p>\n                    <p className=\"text-sm text-gray-600\">{extractedData.customerName}</p>\n                    <p className=\"text-sm text-gray-600\">{extractedData.customerEmail}</p>\n                    <p className=\"text-sm text-gray-600\">{extractedData.customerPhone}</p>\n                  </div>\n\n                  {extractedData.suggestedVenue && (\n                    <div>\n                      <p className=\"font-medium\">Suggested Venue</p>\n                      <p className=\"text-sm text-gray-600\">{extractedData.suggestedVenue}</p>\n                    </div>\n                  )}\n\n                  {extractedData.suggestedServices.length > 0 && (\n                    <div>\n                      <p className=\"font-medium mb-2\">Suggested Services</p>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {extractedData.suggestedServices.map((service, index) => (\n                          <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                            {service}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {extractedData.specialRequests && (\n                <div className=\"mt-4 p-3 bg-yellow-50 rounded\">\n                  <p className=\"font-medium text-yellow-800\">Special Requests</p>\n                  <p className=\"text-sm text-yellow-700\">{extractedData.specialRequests}</p>\n                </div>\n              )}\n\n              {/* Missing Fields Warning */}\n              {(() => {\n                const missingFields = [];\n                if (!extractedData.eventName) missingFields.push(\"event name\");\n                if (!extractedData.eventDate) missingFields.push(\"event date\");\n                if (!extractedData.customerName) missingFields.push(\"customer name\");\n                if (!extractedData.customerEmail) missingFields.push(\"customer email\");\n                \n                if (missingFields.length > 0) {\n                  return (\n                    <div className=\"mt-4 p-3 bg-orange-50 rounded border border-orange-200\">\n                      <p className=\"font-medium text-orange-800\">Missing Information</p>\n                      <p className=\"text-sm text-orange-700\">\n                        Please record again and mention: {missingFields.join(\", \")}\n                      </p>\n                    </div>\n                  );\n                }\n                return null;\n              })()}\n\n              <div className=\"flex justify-end gap-3 mt-6\">\n                <Button variant=\"outline\" onClick={resetForm}>\n                  Start Over\n                </Button>\n                <Button \n                  onClick={confirmBooking}\n                  disabled={createBookingFromVoice.isPending}\n                  className=\"bg-purple-600 hover:bg-purple-700\"\n                >\n                  {createBookingFromVoice.isPending ? \"Creating...\" : \"Create Booking\"}\n                </Button>\n              </div>\n            </Card>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":19773},"client/src/pages/ai-analytics.tsx":{"content":"import { useState } from \"react\";\nimport { AnalyticsDashboard } from \"@/components/ai/analytics-dashboard\";\nimport { CreatePackageModal } from \"@/components/forms/create-package-modal\";\nimport { CreateServiceModal } from \"@/components/forms/create-service-modal\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { MobileNav } from \"@/components/layout/mobile-nav\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AIAnalytics() {\n  const [showCreatePackage, setShowCreatePackage] = useState(false);\n  const [showCreateService, setShowCreateService] = useState(false);\n  const [prefilledPackageData, setPrefilledPackageData] = useState<any>(null);\n  const [prefilledServiceData, setPrefilledServiceData] = useState<any>(null);\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n  const { toast } = useToast();\n\n  const handleCreatePackage = (packageData: any) => {\n    setPrefilledPackageData(packageData);\n    setShowCreatePackage(true);\n    toast({\n      title: \"AI Package Suggestion\",\n      description: `Opening package creation with AI-recommended data for ${packageData.name}`\n    });\n  };\n\n  const handleCreateService = (serviceData: any) => {\n    setPrefilledServiceData(serviceData);\n    setShowCreateService(true);\n    toast({\n      title: \"AI Service Suggestion\", \n      description: `Opening service creation with AI-recommended data for ${serviceData.name}`\n    });\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      {/* Desktop Sidebar */}\n      <div className=\"hidden lg:block\">\n        <Sidebar />\n      </div>\n\n      {/* Mobile Navigation */}\n      <MobileNav open={mobileNavOpen} onOpenChange={setMobileNavOpen} />\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header onMobileNavToggle={() => setMobileNavOpen(true)} />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <AnalyticsDashboard \n            onCreatePackage={handleCreatePackage}\n            onCreateService={handleCreateService}\n          />\n        </main>\n      </div>\n      \n      <CreatePackageModal\n        open={showCreatePackage}\n        onOpenChange={(open) => {\n          setShowCreatePackage(open);\n          if (!open) setPrefilledPackageData(null);\n        }}\n        initialData={prefilledPackageData}\n      />\n\n      <CreateServiceModal\n        open={showCreateService}\n        onOpenChange={(open) => {\n          setShowCreateService(open);\n          if (!open) setPrefilledServiceData(null);\n        }}\n        initialData={prefilledServiceData}\n      />\n    </div>\n  );\n}","size_bytes":2674},"client/src/pages/functional-settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { CollapsibleSidebar, MobileSidebar } from \"@/components/layout/collapsible-sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { \n  Building2, \n  Bell, \n  Sparkles, \n  CreditCard, \n  Shield, \n  Settings as SettingsIcon,\n  User,\n  Mail,\n  Phone,\n  MapPin,\n  Globe,\n  Check,\n  AlertCircle,\n  ExternalLink,\n  Save,\n  Trash2,\n  Plus,\n  X,\n  Key,\n  Database,\n  Clock,\n  DollarSign,\n  Palette,\n  Calendar as CalendarIcon\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\n\n// Form schemas\nconst businessSettingsSchema = z.object({\n  companyName: z.string().min(1, \"Company name is required\"),\n  companyEmail: z.string().email(\"Valid email is required\"),\n  companyPhone: z.string().min(1, \"Phone number is required\"),\n  companyAddress: z.string().min(1, \"Address is required\"),\n  website: z.string().url().optional().or(z.literal(\"\")),\n  taxId: z.string().optional(),\n  description: z.string().optional(),\n  timezone: z.string(),\n  currency: z.string(),\n  dateFormat: z.string(),\n  timeFormat: z.string()\n});\n\nconst notificationSettingsSchema = z.object({\n  emailNotifications: z.boolean(),\n  smsNotifications: z.boolean(),\n  pushNotifications: z.boolean(),\n  bookingConfirmations: z.boolean(),\n  paymentAlerts: z.boolean(),\n  reminderEmails: z.boolean(),\n  marketingEmails: z.boolean(),\n  weeklyReports: z.boolean(),\n  lowInventoryAlerts: z.boolean(),\n  taskDeadlines: z.boolean(),\n  customerMessages: z.boolean(),\n  leadAssignments: z.boolean()\n});\n\nconst depositsSettingsSchema = z.object({\n  defaultDepositPercentage: z.number().min(0).max(100),\n  requireDepositForBooking: z.boolean(),\n  allowDepositAmendment: z.boolean(),\n  depositDueDays: z.number().min(0),\n  depositDescription: z.string().optional(),\n  refundPolicy: z.string().optional()\n});\n\ntype BusinessSettings = z.infer<typeof businessSettingsSchema>;\ntype NotificationSettings = z.infer<typeof notificationSettingsSchema>;\ntype DepositsSettings = z.infer<typeof depositsSettingsSchema>;\n\nexport default function FunctionalSettings() {\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"business\");\n  const [stripeConnected, setStripeConnected] = useState(false);\n  const [stripeAccountId, setStripeAccountId] = useState(\"\");\n  const { toast } = useToast();\n\n  // Fetch current settings\n  const { data: currentSettings, isLoading } = useQuery({\n    queryKey: [\"/api/settings\"],\n  });\n\n  // Business Settings Form\n  const businessForm = useForm<BusinessSettings>({\n    resolver: zodResolver(businessSettingsSchema),\n    defaultValues: {\n      companyName: \"Venuine Events\",\n      companyEmail: \"contact@venuine.com\",\n      companyPhone: \"+1 (555) 123-4567\",\n      companyAddress: \"123 Business Street, City, State 12345\",\n      website: \"https://venuine.com\",\n      taxId: \"12-3456789\",\n      description: \"Premier venue management and event planning services\",\n      timezone: \"America/New_York\",\n      currency: \"USD\",\n      dateFormat: \"MM/DD/YYYY\",\n      timeFormat: \"12h\"\n    }\n  });\n\n  // Notification Settings Form\n  const notificationForm = useForm<NotificationSettings>({\n    resolver: zodResolver(notificationSettingsSchema),\n    defaultValues: {\n      emailNotifications: true,\n      smsNotifications: false,\n      pushNotifications: true,\n      bookingConfirmations: true,\n      paymentAlerts: true,\n      reminderEmails: true,\n      marketingEmails: false,\n      weeklyReports: true,\n      lowInventoryAlerts: true,\n      taskDeadlines: true,\n      customerMessages: true,\n      leadAssignments: true\n    }\n  });\n\n  // Deposits Settings Form\n  const depositsForm = useForm<DepositsSettings>({\n    resolver: zodResolver(depositsSettingsSchema),\n    defaultValues: {\n      defaultDepositPercentage: 25,\n      requireDepositForBooking: true,\n      allowDepositAmendment: true,\n      depositDueDays: 7,\n      depositDescription: \"A deposit is required to secure your booking\",\n      refundPolicy: \"Deposits are refundable up to 14 days before the event date\"\n    }\n  });\n\n  // AI Settings State\n  const [aiSettings, setAiSettings] = useState({\n    enableAiSuggestions: true,\n    autoEmailReplies: false,\n    leadScoring: true,\n    smartScheduling: true,\n    voiceBooking: true,\n    predictiveAnalytics: false,\n    aiChatAssistant: true,\n    contentGeneration: false\n  });\n\n  // Security Settings State\n  const [securitySettings, setSecuritySettings] = useState({\n    twoFactorAuth: false,\n    sessionTimeout: \"60\",\n    passwordPolicy: \"medium\",\n    loginNotifications: true,\n    dataEncryption: true,\n    backupFrequency: \"daily\",\n    auditLog: true,\n    ipWhitelist: \"\"\n  });\n\n  // Integration Settings State\n  const [integrationSettings, setIntegrationSettings] = useState({\n    googleCalendar: false,\n    outlookCalendar: false,\n    zapier: false,\n    mailchimp: false,\n    slack: false,\n    webhooks: [],\n    apiKeys: []\n  });\n\n  // Mutations for saving settings\n  const saveBusinessSettings = useMutation({\n    mutationFn: (data: BusinessSettings) => apiRequest(\"PUT\", \"/api/settings/business\", data),\n    onSuccess: () => {\n      toast({ title: \"Business settings saved successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n    },\n    onError: () => {\n      toast({ title: \"Failed to save business settings\", variant: \"destructive\" });\n    }\n  });\n\n  const saveNotificationSettings = useMutation({\n    mutationFn: (data: NotificationSettings) => apiRequest(\"PUT\", \"/api/settings/notifications\", data),\n    onSuccess: () => {\n      toast({ title: \"Notification settings saved successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to save notification settings\", variant: \"destructive\" });\n    }\n  });\n\n  const saveDepositsSettings = useMutation({\n    mutationFn: (data: DepositsSettings) => apiRequest(\"PUT\", \"/api/settings/deposits\", data),\n    onSuccess: () => {\n      toast({ title: \"Deposits settings saved successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n    },\n    onError: () => {\n      toast({ title: \"Failed to save deposits settings\", variant: \"destructive\" });\n    }\n  });\n\n  const saveAiSettings = useMutation({\n    mutationFn: (data: any) => apiRequest(\"PUT\", \"/api/settings/ai\", data),\n    onSuccess: () => {\n      toast({ title: \"AI settings saved successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to save AI settings\", variant: \"destructive\" });\n    }\n  });\n\n  // Stripe Connect Integration\n  const handleStripeConnect = () => {\n    const stripeConnectUrl = \"https://connect.stripe.com/d/setup/s/_Sp7dm2dq26znMMPAWRggSop3RU/YWNjdF8xUnRUT1lJYlBaRTlUYlNP/8b90735cfa91f5a5d\";\n    window.open(stripeConnectUrl, '_blank');\n  };\n\n  const disconnectStripe = useMutation({\n    mutationFn: () => apiRequest(\"DELETE\", \"/api/stripe/disconnect\"),\n    onSuccess: () => {\n      setStripeConnected(false);\n      setStripeAccountId(\"\");\n      toast({ title: \"Stripe account disconnected successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to disconnect Stripe account\", variant: \"destructive\" });\n    }\n  });\n\n  // Check Stripe connection status\n  useEffect(() => {\n    const checkStripeConnection = async () => {\n      try {\n        const response = await apiRequest(\"GET\", \"/api/stripe/status\");\n        const data = await response.json();\n        setStripeConnected(data.connected);\n        setStripeAccountId(data.accountId || \"\");\n      } catch (error) {\n        console.error(\"Failed to check Stripe status:\", error);\n      }\n    };\n    checkStripeConnection();\n  }, []);\n\n  const renderBusinessSettings = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Building2 className=\"w-5 h-5\" />\n            Company Information\n          </CardTitle>\n          <CardDescription>\n            Basic information about your venue business\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...businessForm}>\n            <form onSubmit={businessForm.handleSubmit((data) => saveBusinessSettings.mutate(data))} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <FormField\n                  control={businessForm.control}\n                  name=\"companyName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Company Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={businessForm.control}\n                  name=\"companyEmail\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Company Email</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={businessForm.control}\n                  name=\"companyPhone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone Number</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={businessForm.control}\n                  name=\"website\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Website</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"https://yourwebsite.com\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <FormField\n                control={businessForm.control}\n                name=\"companyAddress\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Business Address</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <FormField\n                  control={businessForm.control}\n                  name=\"timezone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Timezone</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"America/New_York\">Eastern Time</SelectItem>\n                          <SelectItem value=\"America/Chicago\">Central Time</SelectItem>\n                          <SelectItem value=\"America/Denver\">Mountain Time</SelectItem>\n                          <SelectItem value=\"America/Los_Angeles\">Pacific Time</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={businessForm.control}\n                  name=\"currency\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Currency</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"USD\">USD ($)</SelectItem>\n                          <SelectItem value=\"EUR\">EUR (€)</SelectItem>\n                          <SelectItem value=\"GBP\">GBP (£)</SelectItem>\n                          <SelectItem value=\"CAD\">CAD (C$)</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <Button type=\"submit\" disabled={saveBusinessSettings.isPending}>\n                <Save className=\"w-4 h-4 mr-2\" />\n                {saveBusinessSettings.isPending ? \"Saving...\" : \"Save Business Settings\"}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const renderNotificationSettings = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Bell className=\"w-5 h-5\" />\n            Notification Preferences\n          </CardTitle>\n          <CardDescription>\n            Customize how and when you receive notifications\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...notificationForm}>\n            <form onSubmit={notificationForm.handleSubmit((data) => saveNotificationSettings.mutate(data))} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium\">General Notifications</h4>\n                  <FormField\n                    control={notificationForm.control}\n                    name=\"emailNotifications\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex items-center justify-between\">\n                        <div>\n                          <FormLabel>Email Notifications</FormLabel>\n                          <p className=\"text-sm text-gray-500\">Receive notifications via email</p>\n                        </div>\n                        <FormControl>\n                          <Switch checked={field.value} onCheckedChange={field.onChange} />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={notificationForm.control}\n                    name=\"smsNotifications\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex items-center justify-between\">\n                        <div>\n                          <FormLabel>SMS Notifications</FormLabel>\n                          <p className=\"text-sm text-gray-500\">Receive notifications via SMS</p>\n                        </div>\n                        <FormControl>\n                          <Switch checked={field.value} onCheckedChange={field.onChange} />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={notificationForm.control}\n                    name=\"pushNotifications\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex items-center justify-between\">\n                        <div>\n                          <FormLabel>Push Notifications</FormLabel>\n                          <p className=\"text-sm text-gray-500\">Browser push notifications</p>\n                        </div>\n                        <FormControl>\n                          <Switch checked={field.value} onCheckedChange={field.onChange} />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium\">Event Notifications</h4>\n                  <FormField\n                    control={notificationForm.control}\n                    name=\"bookingConfirmations\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex items-center justify-between\">\n                        <div>\n                          <FormLabel>Booking Confirmations</FormLabel>\n                          <p className=\"text-sm text-gray-500\">New booking confirmations</p>\n                        </div>\n                        <FormControl>\n                          <Switch checked={field.value} onCheckedChange={field.onChange} />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={notificationForm.control}\n                    name=\"paymentAlerts\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex items-center justify-between\">\n                        <div>\n                          <FormLabel>Payment Alerts</FormLabel>\n                          <p className=\"text-sm text-gray-500\">Payment received notifications</p>\n                        </div>\n                        <FormControl>\n                          <Switch checked={field.value} onCheckedChange={field.onChange} />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={notificationForm.control}\n                    name=\"reminderEmails\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex items-center justify-between\">\n                        <div>\n                          <FormLabel>Reminder Emails</FormLabel>\n                          <p className=\"text-sm text-gray-500\">Event reminder emails</p>\n                        </div>\n                        <FormControl>\n                          <Switch checked={field.value} onCheckedChange={field.onChange} />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n              <Button type=\"submit\" disabled={saveNotificationSettings.isPending}>\n                <Save className=\"w-4 h-4 mr-2\" />\n                {saveNotificationSettings.isPending ? \"Saving...\" : \"Save Notification Settings\"}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const renderAiSettings = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Sparkles className=\"w-5 h-5\" />\n            AI Features\n          </CardTitle>\n          <CardDescription>\n            Configure AI-powered features and automation\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium\">Smart Booking</h4>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>AI Suggestions</Label>\n                  <p className=\"text-sm text-gray-500\">Smart venue and package recommendations</p>\n                </div>\n                <Switch \n                  checked={aiSettings.enableAiSuggestions}\n                  onCheckedChange={(checked) => setAiSettings(prev => ({ ...prev, enableAiSuggestions: checked }))}\n                />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Voice Booking</Label>\n                  <p className=\"text-sm text-gray-500\">Voice-to-text event creation</p>\n                </div>\n                <Switch \n                  checked={aiSettings.voiceBooking}\n                  onCheckedChange={(checked) => setAiSettings(prev => ({ ...prev, voiceBooking: checked }))}\n                />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Smart Scheduling</Label>\n                  <p className=\"text-sm text-gray-500\">AI-optimized time slot suggestions</p>\n                </div>\n                <Switch \n                  checked={aiSettings.smartScheduling}\n                  onCheckedChange={(checked) => setAiSettings(prev => ({ ...prev, smartScheduling: checked }))}\n                />\n              </div>\n            </div>\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium\">Customer Experience</h4>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Auto Email Replies</Label>\n                  <p className=\"text-sm text-gray-500\">AI-generated email responses</p>\n                </div>\n                <Switch \n                  checked={aiSettings.autoEmailReplies}\n                  onCheckedChange={(checked) => setAiSettings(prev => ({ ...prev, autoEmailReplies: checked }))}\n                />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Lead Scoring</Label>\n                  <p className=\"text-sm text-gray-500\">AI-powered lead prioritization</p>\n                </div>\n                <Switch \n                  checked={aiSettings.leadScoring}\n                  onCheckedChange={(checked) => setAiSettings(prev => ({ ...prev, leadScoring: checked }))}\n                />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Predictive Analytics</Label>\n                  <p className=\"text-sm text-gray-500\">Revenue and demand forecasting</p>\n                </div>\n                <Switch \n                  checked={aiSettings.predictiveAnalytics}\n                  onCheckedChange={(checked) => setAiSettings(prev => ({ ...prev, predictiveAnalytics: checked }))}\n                />\n              </div>\n            </div>\n          </div>\n          <Button onClick={() => saveAiSettings.mutate(aiSettings)} disabled={saveAiSettings.isPending}>\n            <Save className=\"w-4 h-4 mr-2\" />\n            {saveAiSettings.isPending ? \"Saving...\" : \"Save AI Settings\"}\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const renderPaymentSettings = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <CreditCard className=\"w-5 h-5\" />\n            Payment Integration\n          </CardTitle>\n          <CardDescription>\n            Configure payment processing for your venue\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"border rounded-lg p-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <CreditCard className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <div>\n                  <h4 className=\"font-medium\">Stripe Connect</h4>\n                  <p className=\"text-sm text-gray-500\">\n                    {stripeConnected ? \"Connected and ready to process payments\" : \"Connect your Stripe account to start accepting payments\"}\n                  </p>\n                </div>\n              </div>\n              <Badge variant={stripeConnected ? \"default\" : \"secondary\"} className={stripeConnected ? \"bg-green-100 text-green-800\" : \"\"}>\n                {stripeConnected ? (\n                  <>\n                    <Check className=\"w-3 h-3 mr-1\" />\n                    Connected\n                  </>\n                ) : (\n                  <>\n                    <AlertCircle className=\"w-3 h-3 mr-1\" />\n                    Not Connected\n                  </>\n                )}\n              </Badge>\n            </div>\n            \n            {stripeConnected ? (\n              <div className=\"space-y-3\">\n                <div className=\"text-sm\">\n                  <span className=\"font-medium\">Account ID:</span> {stripeAccountId}\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button variant=\"outline\" size=\"sm\" onClick={() => window.open('https://dashboard.stripe.com', '_blank')}>\n                    <ExternalLink className=\"w-4 h-4 mr-1\" />\n                    Open Stripe Dashboard\n                  </Button>\n                  <Button variant=\"destructive\" size=\"sm\" onClick={() => disconnectStripe.mutate()}>\n                    <X className=\"w-4 h-4 mr-1\" />\n                    Disconnect\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                <p className=\"text-sm text-gray-600\">\n                  Connect your Stripe account with one click to start processing payments securely. \n                  No need to manually enter API keys - everything is handled automatically.\n                </p>\n                <Button onClick={handleStripeConnect} className=\"bg-blue-600 hover:bg-blue-700\">\n                  <ExternalLink className=\"w-4 h-4 mr-2\" />\n                  Connect with Stripe\n                </Button>\n              </div>\n            )}\n          </div>\n\n          {stripeConnected && (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm\">Payment Methods</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <Check className=\"w-3 h-3 text-green-600\" />\n                      Credit Cards\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Check className=\"w-3 h-3 text-green-600\" />\n                      Debit Cards\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Check className=\"w-3 h-3 text-green-600\" />\n                      ACH Bank Transfers\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Check className=\"w-3 h-3 text-green-600\" />\n                      Digital Wallets\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm\">Processing Fees</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2 text-sm\">\n                    <div>Online payments: 2.9% + 30¢</div>\n                    <div>In-person: 2.7% + 5¢</div>\n                    <div>International: +1.5%</div>\n                    <div className=\"text-xs text-gray-500 mt-2\">\n                      Standard Stripe rates apply\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const renderSecuritySettings = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"w-5 h-5\" />\n            Security & Privacy\n          </CardTitle>\n          <CardDescription>\n            Protect your account and data with advanced security features\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium\">Authentication</h4>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Two-Factor Authentication</Label>\n                  <p className=\"text-sm text-gray-500\">Add an extra layer of security</p>\n                </div>\n                <Switch \n                  checked={securitySettings.twoFactorAuth}\n                  onCheckedChange={(checked) => setSecuritySettings(prev => ({ ...prev, twoFactorAuth: checked }))}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label>Session Timeout (minutes)</Label>\n                <Select value={securitySettings.sessionTimeout} onValueChange={(value) => setSecuritySettings(prev => ({ ...prev, sessionTimeout: value }))}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"30\">30 minutes</SelectItem>\n                    <SelectItem value=\"60\">1 hour</SelectItem>\n                    <SelectItem value=\"120\">2 hours</SelectItem>\n                    <SelectItem value=\"480\">8 hours</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium\">Data Protection</h4>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Login Notifications</Label>\n                  <p className=\"text-sm text-gray-500\">Email alerts for new logins</p>\n                </div>\n                <Switch \n                  checked={securitySettings.loginNotifications}\n                  onCheckedChange={(checked) => setSecuritySettings(prev => ({ ...prev, loginNotifications: checked }))}\n                />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Data Encryption</Label>\n                  <p className=\"text-sm text-gray-500\">Encrypt sensitive data</p>\n                </div>\n                <Switch \n                  checked={securitySettings.dataEncryption}\n                  onCheckedChange={(checked) => setSecuritySettings(prev => ({ ...prev, dataEncryption: checked }))}\n                />\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const renderDepositsSettings = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <DollarSign className=\"w-5 h-5\" />\n            Deposit Management\n          </CardTitle>\n          <CardDescription>\n            Configure default deposit requirements and policies for bookings\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...depositsForm}>\n            <form onSubmit={depositsForm.handleSubmit((data) => saveDepositsSettings.mutate(data))} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-6\">\n                <FormField\n                  control={depositsForm.control}\n                  name=\"defaultDepositPercentage\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Default Deposit Percentage</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            type=\"number\"\n                            min=\"0\"\n                            max=\"100\"\n                            step=\"1\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                            className=\"pr-8\"\n                          />\n                          <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500\">%</span>\n                        </div>\n                      </FormControl>\n                      <FormDescription>\n                        Default percentage of total booking cost required as deposit\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={depositsForm.control}\n                  name=\"depositDueDays\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Deposit Due (Days)</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          step=\"1\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        Number of days from booking confirmation to deposit due date\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"space-y-4\">\n                <FormField\n                  control={depositsForm.control}\n                  name=\"requireDepositForBooking\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base\">Require Deposit for Booking</FormLabel>\n                        <FormDescription>\n                          Customers must pay deposit to confirm their booking\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={depositsForm.control}\n                  name=\"allowDepositAmendment\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base\">Allow Deposit Amendment</FormLabel>\n                        <FormDescription>\n                          Allow staff to modify deposit percentage when sending proposals\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={depositsForm.control}\n                name=\"depositDescription\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Deposit Description</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        {...field}\n                        placeholder=\"A deposit is required to secure your booking...\"\n                        className=\"min-h-[100px]\"\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      This message will appear on proposals and booking confirmations\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={depositsForm.control}\n                name=\"refundPolicy\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Refund Policy</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        {...field}\n                        placeholder=\"Deposits are refundable up to 14 days before the event date...\"\n                        className=\"min-h-[100px]\"\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Clear refund terms that will be displayed to customers\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button type=\"submit\" disabled={saveDepositsSettings.isPending}>\n                <Save className=\"w-4 h-4 mr-2\" />\n                {saveDepositsSettings.isPending ? \"Saving...\" : \"Save Deposit Settings\"}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const renderIntegrationSettings = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Globe className=\"w-5 h-5\" />\n            Integrations\n          </CardTitle>\n          <CardDescription>\n            Connect with external services and tools\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n            <div className=\"border rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center gap-2\">\n                  <CalendarIcon className=\"w-5 h-5\" />\n                  <span className=\"font-medium\">Google Calendar</span>\n                </div>\n                <Switch \n                  checked={integrationSettings.googleCalendar}\n                  onCheckedChange={(checked) => setIntegrationSettings(prev => ({ ...prev, googleCalendar: checked }))}\n                />\n              </div>\n              <p className=\"text-sm text-gray-500\">Sync events with Google Calendar</p>\n            </div>\n            \n            <div className=\"border rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center gap-2\">\n                  <Mail className=\"w-5 h-5\" />\n                  <span className=\"font-medium\">Mailchimp</span>\n                </div>\n                <Switch \n                  checked={integrationSettings.mailchimp}\n                  onCheckedChange={(checked) => setIntegrationSettings(prev => ({ ...prev, mailchimp: checked }))}\n                />\n              </div>\n              <p className=\"text-sm text-gray-500\">Email marketing automation</p>\n            </div>\n\n            <div className=\"border rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center gap-2\">\n                  <Globe className=\"w-5 h-5\" />\n                  <span className=\"font-medium\">Zapier</span>\n                </div>\n                <Switch \n                  checked={integrationSettings.zapier}\n                  onCheckedChange={(checked) => setIntegrationSettings(prev => ({ ...prev, zapier: checked }))}\n                />\n              </div>\n              <p className=\"text-sm text-gray-500\">Automate workflows</p>\n            </div>\n\n            <div className=\"border rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center gap-2\">\n                  <Globe className=\"w-5 h-5\" />\n                  <span className=\"font-medium\">Slack</span>\n                </div>\n                <Switch \n                  checked={integrationSettings.slack}\n                  onCheckedChange={(checked) => setIntegrationSettings(prev => ({ ...prev, slack: checked }))}\n                />\n              </div>\n              <p className=\"text-sm text-gray-500\">Team notifications</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n        <CollapsibleSidebar \n          isCollapsed={sidebarCollapsed} \n          onToggle={() => setSidebarCollapsed(!sidebarCollapsed)}\n          className=\"hidden lg:flex\"\n        />\n        <MobileSidebar isOpen={mobileNavOpen} onClose={() => setMobileNavOpen(false)} />\n        \n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          <Header \n            title=\"Settings\" \n            subtitle=\"Configure your venue management preferences\"\n            mobileNavOpen={mobileNavOpen}\n            setMobileNavOpen={setMobileNavOpen}\n          />\n          <main className=\"flex-1 overflow-y-auto p-4 sm:p-6\">\n            <div className=\"animate-pulse space-y-4\">\n              <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n              <div className=\"h-32 bg-gray-200 rounded\"></div>\n              <div className=\"h-32 bg-gray-200 rounded\"></div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <CollapsibleSidebar \n        isCollapsed={sidebarCollapsed} \n        onToggle={() => setSidebarCollapsed(!sidebarCollapsed)}\n        className=\"hidden lg:flex\"\n      />\n      <MobileSidebar isOpen={mobileNavOpen} onClose={() => setMobileNavOpen(false)} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Settings\" \n          subtitle=\"Configure your venue management preferences\"\n          mobileNavOpen={mobileNavOpen}\n          setMobileNavOpen={setMobileNavOpen}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-4 sm:p-6\">\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <div className=\"w-full overflow-x-auto mobile-tabs\">\n              <TabsList className=\"flex w-max min-w-full justify-start sm:justify-center lg:grid lg:grid-cols-7 gap-1 p-1\">\n                <TabsTrigger value=\"business\" className=\"flex items-center gap-1 text-xs sm:text-sm px-3 py-2 whitespace-nowrap\">\n                  <Building2 className=\"w-4 h-4\" />\n                  <span>Business</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"notifications\" className=\"flex items-center gap-1 text-xs sm:text-sm px-3 py-2 whitespace-nowrap\">\n                  <Bell className=\"w-4 h-4\" />\n                  <span className=\"hidden xs:inline\">Notifications</span>\n                  <span className=\"xs:hidden\">Notify</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"deposits\" className=\"flex items-center gap-1 text-xs sm:text-sm px-3 py-2 whitespace-nowrap\">\n                  <DollarSign className=\"w-4 h-4\" />\n                  <span>Deposits</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"ai\" className=\"flex items-center gap-1 text-xs sm:text-sm px-3 py-2 whitespace-nowrap\">\n                  <Sparkles className=\"w-4 h-4\" />\n                  <span>AI</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"payment\" className=\"flex items-center gap-1 text-xs sm:text-sm px-3 py-2 whitespace-nowrap\">\n                  <CreditCard className=\"w-4 h-4\" />\n                  <span>Payment</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"security\" className=\"flex items-center gap-1 text-xs sm:text-sm px-3 py-2 whitespace-nowrap\">\n                  <Shield className=\"w-4 h-4\" />\n                  <span>Security</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"integrations\" className=\"flex items-center gap-1 text-xs sm:text-sm px-3 py-2 whitespace-nowrap\">\n                  <Globe className=\"w-4 h-4\" />\n                  <span className=\"hidden xs:inline\">Integrations</span>\n                  <span className=\"xs:hidden\">Integra.</span>\n                </TabsTrigger>\n              </TabsList>\n            </div>\n\n            <TabsContent value=\"business\">\n              {renderBusinessSettings()}\n            </TabsContent>\n\n            <TabsContent value=\"notifications\">\n              {renderNotificationSettings()}\n            </TabsContent>\n\n            <TabsContent value=\"deposits\">\n              {renderDepositsSettings()}\n            </TabsContent>\n\n            <TabsContent value=\"ai\">\n              {renderAiSettings()}\n            </TabsContent>\n\n            <TabsContent value=\"payment\">\n              {renderPaymentSettings()}\n            </TabsContent>\n\n            <TabsContent value=\"security\">\n              {renderSecuritySettings()}\n            </TabsContent>\n\n            <TabsContent value=\"integrations\">\n              {renderIntegrationSettings()}\n            </TabsContent>\n          </Tabs>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":46811},"client/src/pages/reports.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { MobileNav } from \"@/components/layout/mobile-nav\";\nimport { \n  BarChart3, TrendingUp, DollarSign, Calendar, Users, MapPin,\n  Download, Filter, Sparkles, RefreshCw, Eye, AlertTriangle,\n  Target, Zap, Clock, Award, ChevronUp, ChevronDown, PieChart,\n  Building, CreditCard, UserPlus, FileText, Activity, Star\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useFormattedCurrency } from \"@/lib/currency\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, \n  AreaChart, Area, PieChart as RechartsPieChart, Pie, Cell, LineChart, Line\n} from \"recharts\";\nimport { format } from \"date-fns\";\n\ninterface AnalyticsData {\n  totalBookings: number;\n  revenue: number;\n  activeLeads: number;\n  utilization: number;\n  revenueGrowth: number;\n  bookingGrowth: number;\n  averageBookingValue: number;\n  conversionRate: number;\n  proposalConversionRate: number;\n  monthlyTrends: Array<{\n    month: string;\n    bookings: number;\n    revenue: number;\n    utilization: number;\n  }>;\n  venuePerformance: Array<{\n    name: string;\n    bookings: number;\n    revenue: number;\n    utilization: number;\n  }>;\n  revenueByEventType: Array<{\n    type: string;\n    revenue: number;\n    count: number;\n  }>;\n  completedEvents: number;\n  cancelledEvents: number;\n  cancellationRate: number;\n  averageLeadValue: number;\n  totalDepositsCollected: number;\n  outstandingRevenue: number;\n  sentProposals: number;\n  acceptedProposals: number;\n  totalPayments: number;\n  leadSources: Record<string, number>;\n  customerTypes: Record<string, number>;\n}\n\ninterface RevenueAnalytics {\n  revenueByStatus: {\n    collected: number;\n    pending: number;\n    outstanding: number;\n  };\n  paymentBreakdown: {\n    deposits: number;\n    finalPayments: number;\n    refunds: number;\n  };\n  monthlyRevenue: Array<{\n    month: string;\n    revenue: number;\n    transactions: number;\n  }>;\n  revenueByCustomerType: Record<string, {\n    total: number;\n    count: number;\n    average: number;\n  }>;\n  totalRevenue: number;\n  projectedRevenue: number;\n}\n\ninterface CustomerAnalytics {\n  totalCustomers: number;\n  totalLeads: number;\n  acquisitionTrends: Array<{\n    month: string;\n    customers: number;\n    leads: number;\n    conversion: number;\n  }>;\n  customerLTV: Array<{\n    id: string;\n    name: string;\n    type: string;\n    totalValue: number;\n    bookingCount: number;\n    averageBookingValue: number;\n  }>;\n  leadSources: Record<string, {\n    leads: number;\n    converted: number;\n    revenue: number;\n    conversionRate: number;\n    averageRevenue: number;\n  }>;\n}\n\ninterface VenueAnalytics {\n  venueMetrics: Array<{\n    id: string;\n    name: string;\n    capacity: number;\n    totalBookings: number;\n    confirmedBookings: number;\n    totalRevenue: number;\n    averageRevenue: number;\n    utilization: number;\n    averageGuestCount: number;\n  }>;\n  eventTypesByVenue: Record<string, Record<string, number>>;\n  spaceMetrics: Array<{\n    id: string;\n    name: string;\n    venueName: string;\n    capacity: number;\n    bookings: number;\n    revenue: number;\n  }>;\n  totalVenues: number;\n  totalSpaces: number;\n}\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D'];\n\nexport default function Reports() {\n  const [dateRange, setDateRange] = useState(\"3months\");\n  const [reportType, setReportType] = useState(\"overview\");\n  const [autoRefresh, setAutoRefresh] = useState(true);\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const { toast } = useToast();\n  const { formatAmount } = useFormattedCurrency();\n  const queryClient = useQueryClient();\n\n  // Fetch comprehensive analytics data\n  const { data: analyticsData, isLoading: analyticsLoading, refetch: refetchAnalytics } = useQuery<AnalyticsData>({\n    queryKey: [\"/api/reports/analytics\", dateRange],\n    refetchInterval: autoRefresh ? 30000 : false,\n  });\n\n  // Fetch revenue analytics\n  const { data: revenueData, isLoading: revenueLoading } = useQuery<RevenueAnalytics>({\n    queryKey: [\"/api/reports/revenue\", dateRange],\n    enabled: reportType === \"revenue\",\n  });\n\n  // Fetch customer analytics\n  const { data: customerData, isLoading: customerLoading } = useQuery<CustomerAnalytics>({\n    queryKey: [\"/api/reports/customers\", dateRange],\n    enabled: reportType === \"customers\",\n  });\n\n  // Fetch venue analytics\n  const { data: venueData, isLoading: venueLoading } = useQuery<VenueAnalytics>({\n    queryKey: [\"/api/reports/venues\", dateRange],\n    enabled: reportType === \"venues\",\n  });\n\n  // Export report mutation  \n  const exportReport = useMutation({\n    mutationFn: async (format: string) => {\n      const response = await apiRequest(\"POST\", \"/api/reports/export\", { \n        format, \n        dateRange, \n        reportType \n      });\n      return response.json();\n    },\n    onSuccess: (data, format) => {\n      toast({\n        title: \"Report Exported\",\n        description: `Report downloaded as ${format.toUpperCase()} file`\n      });\n    }\n  });\n\n  // Auto-refresh every 30 seconds\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (autoRefresh) {\n      interval = setInterval(() => {\n        refetchAnalytics();\n      }, 30000);\n    }\n    return () => clearInterval(interval);\n  }, [autoRefresh, refetchAnalytics]);\n\n  const formatGrowth = (value: number) => {\n    const isPositive = value >= 0;\n    return (\n      <div className=\"flex items-center\">\n        {isPositive ? (\n          <ChevronUp className=\"w-4 h-4 text-green-600\" />\n        ) : (\n          <ChevronDown className=\"w-4 h-4 text-red-600\" />\n        )}\n        <span className={`text-sm font-medium ${isPositive ? 'text-green-600' : 'text-red-600'}`}>\n          {Math.abs(value)}%\n        </span>\n      </div>\n    );\n  };\n\n  if (analyticsLoading) {\n    return (\n      <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n        <div className=\"hidden lg:block\">\n          <Sidebar collapsed={sidebarCollapsed} />\n        </div>\n        \n        <MobileNav \n          isOpen={mobileNavOpen} \n          onClose={() => setMobileNavOpen(false)} \n        />\n        \n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          <Header \n            title=\"Reports & Analytics\" \n            subtitle=\"Comprehensive insights and real-time analytics\"\n            onMobileMenuToggle={() => setMobileNavOpen(true)}\n            onSidebarToggle={() => setSidebarCollapsed(!sidebarCollapsed)}\n            sidebarCollapsed={sidebarCollapsed}\n          />\n          \n          <main className=\"flex-1 overflow-y-auto p-6\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                {[...Array(4)].map((_, i) => (\n                  <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n                ))}\n              </div>\n              <div className=\"h-96 bg-gray-200 rounded\"></div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <div className=\"hidden lg:block\">\n        <Sidebar collapsed={sidebarCollapsed} />\n      </div>\n      \n      <MobileNav \n        isOpen={mobileNavOpen} \n        onClose={() => setMobileNavOpen(false)} \n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Reports & Analytics\" \n          subtitle=\"Comprehensive insights and real-time analytics powered by your venue data\"\n          onMobileMenuToggle={() => setMobileNavOpen(true)}\n          onSidebarToggle={() => setSidebarCollapsed(!sidebarCollapsed)}\n          sidebarCollapsed={sidebarCollapsed}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"space-y-6\">\n            {/* Header Controls */}\n            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n              <div className=\"flex items-center gap-3\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setAutoRefresh(!autoRefresh)}\n                  className={autoRefresh ? \"bg-green-50 border-green-200\" : \"\"}\n                >\n                  <RefreshCw className={`w-4 h-4 mr-2 ${autoRefresh ? 'animate-spin text-green-600' : ''}`} />\n                  {autoRefresh ? 'Live' : 'Manual'}\n                </Button>\n                \n                <Select value={dateRange} onValueChange={setDateRange}>\n                  <SelectTrigger className=\"w-36\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"7days\">Last 7 Days</SelectItem>\n                    <SelectItem value=\"30days\">Last 30 Days</SelectItem>\n                    <SelectItem value=\"3months\">Last 3 Months</SelectItem>\n                    <SelectItem value=\"6months\">Last 6 Months</SelectItem>\n                    <SelectItem value=\"1year\">Last Year</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"flex items-center gap-3\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => exportReport.mutate('pdf')}\n                  disabled={exportReport.isPending}\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export PDF\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => exportReport.mutate('excel')}\n                  disabled={exportReport.isPending}\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Excel\n                </Button>\n              </div>\n            </div>\n\n            {/* Real-time Status Bar */}\n            <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\n                      <span className=\"text-sm font-medium\">Live Data</span>\n                    </div>\n                    <div className=\"text-sm text-gray-600\">\n                      Last updated: {format(new Date(), 'HH:mm:ss')}\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-4 text-sm\">\n                    <span className=\"text-green-600 font-medium\">\n                      {analyticsData?.totalBookings || 0} Total Bookings\n                    </span>\n                    <span className=\"text-blue-600 font-medium\">\n                      {formatAmount(analyticsData?.revenue || 0)} Revenue\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Tabs value={reportType} onValueChange={setReportType} className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                <TabsTrigger value=\"revenue\">Revenue</TabsTrigger>\n                <TabsTrigger value=\"customers\">Customers</TabsTrigger>\n                <TabsTrigger value=\"venues\">Venues</TabsTrigger>\n              </TabsList>\n\n              {/* Overview Tab */}\n              <TabsContent value=\"overview\" className=\"space-y-6\">\n                {/* Key Metrics Grid */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-600\">Total Revenue</p>\n                          <p className=\"text-3xl font-bold text-gray-900\">\n                            {formatAmount(analyticsData?.revenue || 0)}\n                          </p>\n                          {formatGrowth(analyticsData?.revenueGrowth || 0)}\n                        </div>\n                        <div className=\"w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center\">\n                          <DollarSign className=\"w-6 h-6 text-green-600\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-600\">Total Bookings</p>\n                          <p className=\"text-3xl font-bold text-gray-900\">{analyticsData?.totalBookings || 0}</p>\n                          {formatGrowth(analyticsData?.bookingGrowth || 0)}\n                        </div>\n                        <div className=\"w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center\">\n                          <Calendar className=\"w-6 h-6 text-blue-600\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-600\">Active Leads</p>\n                          <p className=\"text-3xl font-bold text-gray-900\">{analyticsData?.activeLeads || 0}</p>\n                          <p className=\"text-sm text-gray-600 mt-1\">\n                            {Math.round((analyticsData?.conversionRate || 0) * 100)}% conversion rate\n                          </p>\n                        </div>\n                        <div className=\"w-12 h-12 bg-orange-50 rounded-lg flex items-center justify-center\">\n                          <UserPlus className=\"w-6 h-6 text-orange-600\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-600\">Venue Utilization</p>\n                          <p className=\"text-3xl font-bold text-gray-900\">{analyticsData?.utilization || 0}%</p>\n                          <p className=\"text-sm text-gray-600 mt-1\">Average across all venues</p>\n                        </div>\n                        <div className=\"w-12 h-12 bg-purple-50 rounded-lg flex items-center justify-center\">\n                          <BarChart3 className=\"w-6 h-6 text-purple-600\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Additional Key Metrics */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-600\">Avg Booking Value</p>\n                          <p className=\"text-2xl font-bold text-gray-900\">\n                            {formatAmount(analyticsData?.averageBookingValue || 0)}\n                          </p>\n                        </div>\n                        <div className=\"w-10 h-10 bg-indigo-50 rounded-lg flex items-center justify-center\">\n                          <TrendingUp className=\"w-5 h-5 text-indigo-600\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-600\">Proposal Success</p>\n                          <p className=\"text-2xl font-bold text-gray-900\">\n                            {Math.round((analyticsData?.proposalConversionRate || 0) * 100)}%\n                          </p>\n                          <p className=\"text-sm text-gray-600 mt-1\">\n                            {analyticsData?.acceptedProposals || 0}/{analyticsData?.sentProposals || 0} accepted\n                          </p>\n                        </div>\n                        <div className=\"w-10 h-10 bg-emerald-50 rounded-lg flex items-center justify-center\">\n                          <FileText className=\"w-5 h-5 text-emerald-600\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-600\">Outstanding Revenue</p>\n                          <p className=\"text-2xl font-bold text-gray-900\">\n                            {formatAmount(analyticsData?.outstandingRevenue || 0)}\n                          </p>\n                        </div>\n                        <div className=\"w-10 h-10 bg-yellow-50 rounded-lg flex items-center justify-center\">\n                          <Clock className=\"w-5 h-5 text-yellow-600\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-600\">Cancellation Rate</p>\n                          <p className=\"text-2xl font-bold text-gray-900\">\n                            {analyticsData?.cancellationRate || 0}%\n                          </p>\n                          <p className=\"text-sm text-gray-600 mt-1\">\n                            {analyticsData?.cancelledEvents || 0} cancelled\n                          </p>\n                        </div>\n                        <div className=\"w-10 h-10 bg-red-50 rounded-lg flex items-center justify-center\">\n                          <AlertTriangle className=\"w-5 h-5 text-red-600\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Charts */}\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <TrendingUp className=\"w-5 h-5 text-blue-600\" />\n                        Revenue Trend\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={300}>\n                        <AreaChart data={analyticsData?.monthlyTrends || []}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"month\" />\n                          <YAxis />\n                          <Tooltip formatter={(value) => [formatAmount(value as number), 'Revenue']} />\n                          <Area \n                            type=\"monotone\" \n                            dataKey=\"revenue\" \n                            stroke=\"#3B82F6\" \n                            fill=\"#3B82F6\"\n                            fillOpacity={0.1}\n                          />\n                        </AreaChart>\n                      </ResponsiveContainer>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Calendar className=\"w-5 h-5 text-green-600\" />\n                        Booking Volume\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={300}>\n                        <BarChart data={analyticsData?.monthlyTrends || []}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"month\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Bar dataKey=\"bookings\" fill=\"#10B981\" />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Event Types and Lead Sources */}\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <PieChart className=\"w-5 h-5 text-purple-600\" />\n                        Revenue by Event Type\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={300}>\n                        <RechartsPieChart>\n                          <Pie\n                            data={analyticsData?.revenueByEventType || []}\n                            dataKey=\"revenue\"\n                            nameKey=\"type\"\n                            cx=\"50%\"\n                            cy=\"50%\"\n                            outerRadius={80}\n                            label\n                          >\n                            {(analyticsData?.revenueByEventType || []).map((entry, index) => (\n                              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                            ))}\n                          </Pie>\n                          <Tooltip formatter={(value) => [formatAmount(value as number), 'Revenue']} />\n                        </RechartsPieChart>\n                      </ResponsiveContainer>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Target className=\"w-5 h-5 text-orange-600\" />\n                        Lead Sources\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {Object.entries(analyticsData?.leadSources || {}).map(([source, count]) => (\n                          <div key={source} className=\"flex items-center justify-between\">\n                            <span className=\"text-sm font-medium\">{source}</span>\n                            <Badge variant=\"secondary\">{count} leads</Badge>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              {/* Revenue Tab */}\n              <TabsContent value=\"revenue\" className=\"space-y-6\">\n                {revenueLoading ? (\n                  <div className=\"animate-pulse space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                      {[...Array(3)].map((_, i) => (\n                        <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n                      ))}\n                    </div>\n                  </div>\n                ) : (\n                  <>\n                    {/* Revenue Status Cards */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                      <Card>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <p className=\"text-sm font-medium text-gray-600\">Collected Revenue</p>\n                              <p className=\"text-3xl font-bold text-green-600\">\n                                {formatAmount(revenueData?.revenueByStatus.collected || 0)}\n                              </p>\n                            </div>\n                            <div className=\"w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center\">\n                              <DollarSign className=\"w-6 h-6 text-green-600\" />\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n\n                      <Card>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <p className=\"text-sm font-medium text-gray-600\">Outstanding Revenue</p>\n                              <p className=\"text-3xl font-bold text-yellow-600\">\n                                {formatAmount(revenueData?.revenueByStatus.outstanding || 0)}\n                              </p>\n                            </div>\n                            <div className=\"w-12 h-12 bg-yellow-50 rounded-lg flex items-center justify-center\">\n                              <Clock className=\"w-6 h-6 text-yellow-600\" />\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n\n                      <Card>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <p className=\"text-sm font-medium text-gray-600\">Projected Total</p>\n                              <p className=\"text-3xl font-bold text-blue-600\">\n                                {formatAmount(revenueData?.projectedRevenue || 0)}\n                              </p>\n                            </div>\n                            <div className=\"w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center\">\n                              <TrendingUp className=\"w-6 h-6 text-blue-600\" />\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </div>\n\n                    {/* Revenue Charts */}\n                    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                      <Card>\n                        <CardHeader>\n                          <CardTitle>Monthly Revenue Trend</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <ResponsiveContainer width=\"100%\" height={300}>\n                            <LineChart data={revenueData?.monthlyRevenue || []}>\n                              <CartesianGrid strokeDasharray=\"3 3\" />\n                              <XAxis dataKey=\"month\" />\n                              <YAxis />\n                              <Tooltip formatter={(value) => [formatAmount(value as number), 'Revenue']} />\n                              <Line type=\"monotone\" dataKey=\"revenue\" stroke=\"#3B82F6\" strokeWidth={2} />\n                            </LineChart>\n                          </ResponsiveContainer>\n                        </CardContent>\n                      </Card>\n\n                      <Card>\n                        <CardHeader>\n                          <CardTitle>Payment Breakdown</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"space-y-4\">\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"text-sm font-medium\">Deposits Collected</span>\n                              <span className=\"text-lg font-bold text-green-600\">\n                                {formatAmount(revenueData?.paymentBreakdown.deposits || 0)}\n                              </span>\n                            </div>\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"text-sm font-medium\">Final Payments</span>\n                              <span className=\"text-lg font-bold text-blue-600\">\n                                {formatAmount(revenueData?.paymentBreakdown.finalPayments || 0)}\n                              </span>\n                            </div>\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"text-sm font-medium\">Refunds</span>\n                              <span className=\"text-lg font-bold text-red-600\">\n                                {formatAmount(revenueData?.paymentBreakdown.refunds || 0)}\n                              </span>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </>\n                )}\n              </TabsContent>\n\n              {/* Customer Tab */}\n              <TabsContent value=\"customers\" className=\"space-y-6\">\n                {customerLoading ? (\n                  <div className=\"animate-pulse space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      {[...Array(2)].map((_, i) => (\n                        <div key={i} className=\"h-64 bg-gray-200 rounded\"></div>\n                      ))}\n                    </div>\n                  </div>\n                ) : (\n                  <>\n                    {/* Customer Metrics */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <Card>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <p className=\"text-sm font-medium text-gray-600\">Total Customers</p>\n                              <p className=\"text-3xl font-bold text-gray-900\">{customerData?.totalCustomers || 0}</p>\n                            </div>\n                            <div className=\"w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center\">\n                              <Users className=\"w-6 h-6 text-blue-600\" />\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n\n                      <Card>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <p className=\"text-sm font-medium text-gray-600\">Active Leads</p>\n                              <p className=\"text-3xl font-bold text-gray-900\">{customerData?.totalLeads || 0}</p>\n                            </div>\n                            <div className=\"w-12 h-12 bg-orange-50 rounded-lg flex items-center justify-center\">\n                              <UserPlus className=\"w-6 h-6 text-orange-600\" />\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </div>\n\n                    {/* Customer Acquisition */}\n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Customer Acquisition Trends</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <ResponsiveContainer width=\"100%\" height={300}>\n                          <BarChart data={customerData?.acquisitionTrends || []}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"month\" />\n                            <YAxis />\n                            <Tooltip />\n                            <Bar dataKey=\"customers\" fill=\"#3B82F6\" name=\"New Customers\" />\n                            <Bar dataKey=\"leads\" fill=\"#F59E0B\" name=\"New Leads\" />\n                          </BarChart>\n                        </ResponsiveContainer>\n                      </CardContent>\n                    </Card>\n\n                    {/* Top Customers */}\n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Top Customers by Lifetime Value</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-4\">\n                          {customerData?.customerLTV.slice(0, 10).map((customer, index) => (\n                            <div key={customer.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                              <div className=\"flex items-center gap-3\">\n                                <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                                  <span className=\"text-sm font-bold text-blue-600\">{index + 1}</span>\n                                </div>\n                                <div>\n                                  <p className=\"font-medium\">{customer.name}</p>\n                                  <p className=\"text-sm text-gray-600\">{customer.bookingCount} bookings</p>\n                                </div>\n                              </div>\n                              <div className=\"text-right\">\n                                <p className=\"font-bold text-green-600\">{formatAmount(customer.totalValue)}</p>\n                                <p className=\"text-sm text-gray-600\">Avg: {formatAmount(customer.averageBookingValue)}</p>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </>\n                )}\n              </TabsContent>\n\n              {/* Venues Tab */}\n              <TabsContent value=\"venues\" className=\"space-y-6\">\n                {venueLoading ? (\n                  <div className=\"animate-pulse space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      {[...Array(2)].map((_, i) => (\n                        <div key={i} className=\"h-64 bg-gray-200 rounded\"></div>\n                      ))}\n                    </div>\n                  </div>\n                ) : (\n                  <>\n                    {/* Venue Overview */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <Card>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <p className=\"text-sm font-medium text-gray-600\">Total Venues</p>\n                              <p className=\"text-3xl font-bold text-gray-900\">{venueData?.totalVenues || 0}</p>\n                            </div>\n                            <div className=\"w-12 h-12 bg-purple-50 rounded-lg flex items-center justify-center\">\n                              <Building className=\"w-6 h-6 text-purple-600\" />\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n\n                      <Card>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <p className=\"text-sm font-medium text-gray-600\">Total Spaces</p>\n                              <p className=\"text-3xl font-bold text-gray-900\">{venueData?.totalSpaces || 0}</p>\n                            </div>\n                            <div className=\"w-12 h-12 bg-indigo-50 rounded-lg flex items-center justify-center\">\n                              <MapPin className=\"w-6 h-6 text-indigo-600\" />\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </div>\n\n                    {/* Venue Performance */}\n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Venue Performance</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-4\">\n                          {venueData?.venueMetrics.map((venue) => (\n                            <div key={venue.id} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                              <div>\n                                <p className=\"font-medium\">{venue.name}</p>\n                                <p className=\"text-sm text-gray-600\">\n                                  Capacity: {venue.capacity} | {venue.totalBookings} bookings\n                                </p>\n                              </div>\n                              <div className=\"text-right\">\n                                <p className=\"font-bold text-green-600\">{formatAmount(venue.totalRevenue)}</p>\n                                <p className=\"text-sm text-gray-600\">{venue.utilization}% utilization</p>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </>\n                )}\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":38869},"client/src/components/ai/analytics-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  TrendingUp, \n  TrendingDown, \n  Sparkles, \n  Calendar, \n  DollarSign, \n  Users, \n  Package, \n  BarChart3,\n  Target,\n  Lightbulb,\n  Leaf,\n  Snowflake,\n  Sun,\n  CloudRain\n} from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useFormattedCurrency } from \"@/lib/currency\";\n\ninterface AnalyticsData {\n  totalRevenue: number;\n  bookingsGrowth: number;\n  avgBookingValue: number;\n  utilizationRate: number;\n  topPerformingPackages: Array<{\n    name: string;\n    revenue: number;\n    bookings: number;\n  }>;\n  predictions: {\n    nextMonth: {\n      revenue: number;\n      bookings: number;\n    };\n    nextQuarter: {\n      revenue: number;\n      bookings: number;\n    };\n  };\n}\n\n\ninterface SeasonalRecommendation {\n  season: string;\n  icon: any;\n  color: string;\n  packages: {\n    name: string;\n    demand: number;\n    revenue: number;\n    trend: 'up' | 'down' | 'stable';\n  }[];\n  services: {\n    name: string;\n    bookingRate: number;\n    seasonality: number;\n    suggestion: string;\n  }[];\n  insights: string[];\n}\n\nconst seasonalData: SeasonalRecommendation[] = [\n  {\n    season: \"Winter\",\n    icon: Snowflake,\n    color: \"blue\",\n    packages: [\n      { name: \"Holiday Corporate Events\", demand: 95, revenue: 8500, trend: 'up' },\n      { name: \"New Year Celebrations\", demand: 88, revenue: 7200, trend: 'up' },\n      { name: \"Indoor Wedding Package\", demand: 65, revenue: 5800, trend: 'stable' }\n    ],\n    services: [\n      { name: \"Indoor Heating & Comfort\", bookingRate: 98, seasonality: 95, suggestion: \"Essential for winter events\" },\n      { name: \"Hot Beverage Stations\", bookingRate: 85, seasonality: 90, suggestion: \"High demand in cold months\" },\n      { name: \"Coat Check Service\", bookingRate: 78, seasonality: 85, suggestion: \"Necessary convenience\" }\n    ],\n    insights: [\n      \"Corporate events increase 40% in December for holiday parties\",\n      \"Indoor venues see 60% higher booking rates during winter months\",\n      \"Warm lighting and heating are most requested winter amenities\"\n    ]\n  },\n  {\n    season: \"Spring\",\n    icon: Leaf,\n    color: \"green\", \n    packages: [\n      { name: \"Garden Wedding Package\", demand: 92, revenue: 9200, trend: 'up' },\n      { name: \"Corporate Retreat\", demand: 78, revenue: 6800, trend: 'up' },\n      { name: \"Graduation Celebrations\", demand: 85, revenue: 5500, trend: 'stable' }\n    ],\n    services: [\n      { name: \"Outdoor Setup & Tenting\", bookingRate: 89, seasonality: 88, suggestion: \"Perfect weather for outdoor events\" },\n      { name: \"Floral Arrangements\", bookingRate: 94, seasonality: 95, suggestion: \"Peak season for fresh flowers\" },\n      { name: \"Garden Lighting\", bookingRate: 76, seasonality: 80, suggestion: \"Evening events benefit from ambient lighting\" }\n    ],\n    insights: [\n      \"Wedding bookings increase 65% in spring months\",\n      \"Outdoor venues see highest utilization rates\",\n      \"Fresh floral services are in peak demand\"\n    ]\n  },\n  {\n    season: \"Summer\",\n    icon: Sun,\n    color: \"yellow\",\n    packages: [\n      { name: \"Outdoor Wedding Extravaganza\", demand: 98, revenue: 12000, trend: 'up' },\n      { name: \"Corporate Summer Party\", demand: 89, revenue: 7800, trend: 'up' },\n      { name: \"Festival & Concert Package\", demand: 82, revenue: 6200, trend: 'stable' }\n    ],\n    services: [\n      { name: \"Cooling & Air Conditioning\", bookingRate: 96, seasonality: 98, suggestion: \"Essential for summer comfort\" },\n      { name: \"Outdoor Bar Service\", bookingRate: 91, seasonality: 95, suggestion: \"Perfect for summer gatherings\" },\n      { name: \"Shade Structures\", bookingRate: 87, seasonality: 92, suggestion: \"Protect guests from sun exposure\" }\n    ],\n    insights: [\n      \"Summer is peak wedding season with 45% of annual weddings\",\n      \"Outdoor events generate 30% more revenue than indoor equivalents\",\n      \"Cooling services are booked in 98% of summer events\"\n    ]\n  },\n  {\n    season: \"Fall\",\n    icon: CloudRain,\n    color: \"orange\",\n    packages: [\n      { name: \"Harvest Corporate Events\", demand: 83, revenue: 7100, trend: 'up' },\n      { name: \"Autumn Wedding Package\", demand: 79, revenue: 8900, trend: 'stable' },\n      { name: \"Conference & Meeting Package\", demand: 91, revenue: 5600, trend: 'up' }\n    ],\n    services: [\n      { name: \"Weather Contingency Setup\", bookingRate: 84, seasonality: 88, suggestion: \"Important for unpredictable fall weather\" },\n      { name: \"Seasonal Decorations\", bookingRate: 88, seasonality: 92, suggestion: \"Autumn themes are highly popular\" },\n      { name: \"Indoor/Outdoor Flexibility\", bookingRate: 76, seasonality: 85, suggestion: \"Weather backup plans essential\" }\n    ],\n    insights: [\n      \"Conference bookings peak in fall as businesses plan for year-end\",\n      \"Weather contingency services see 85% booking rate\",\n      \"Seasonal decoration services are most profitable in fall\"\n    ]\n  }\n];\n\ninterface Props {\n  onCreatePackage?: (packageData: any) => void;\n  onCreateService?: (serviceData: any) => void;\n}\n\nexport function AnalyticsDashboard({ onCreatePackage, onCreateService }: Props = {}) {\n  const [selectedSeason, setSelectedSeason] = useState(\"current\");\n  const [timeRange, setTimeRange] = useState(\"3months\");\n  const { formatAmount } = useFormattedCurrency();\n\n  // Get current season\n  const getCurrentSeason = () => {\n    const month = new Date().getMonth();\n    if (month >= 2 && month <= 4) return \"Spring\";\n    if (month >= 5 && month <= 7) return \"Summer\"; \n    if (month >= 8 && month <= 10) return \"Fall\";\n    return \"Winter\";\n  };\n\n  const currentSeason = getCurrentSeason();\n  const displaySeason = selectedSeason === \"current\" ? currentSeason : selectedSeason;\n  const seasonData = seasonalData.find(s => s.season === displaySeason) || seasonalData[0];\n\n  // Fetch analytics data with default fallback\n  const defaultAnalyticsData: AnalyticsData = {\n    totalRevenue: 125000,\n    bookingsGrowth: 23,\n    avgBookingValue: 3200,\n    utilizationRate: 78,\n    topPerformingPackages: [\n      { name: \"Premium Wedding Package\", revenue: 45000, bookings: 12 },\n      { name: \"Corporate Events\", revenue: 38000, bookings: 18 },\n      { name: \"Social Celebrations\", revenue: 25000, bookings: 15 }\n    ],\n    predictions: {\n      nextMonth: { revenue: 42000, bookings: 28 },\n      nextQuarter: { revenue: 135000, bookings: 95 }\n    }\n  };\n\n  const { data: analyticsData = defaultAnalyticsData } = useQuery<AnalyticsData>({\n    queryKey: [\"/api/ai/analytics\", timeRange],\n    select: (data) => data || defaultAnalyticsData\n  });\n\n  const SeasonIcon = seasonData.icon;\n\n  const handleCreatePackage = (pkg: any, season: string) => {\n    const packageData = {\n      name: pkg.name,\n      description: `${season} special package featuring premium services tailored for the season`,\n      basePrice: pkg.revenue.toString(),\n      category: season.toLowerCase(),\n      isActive: true,\n      maxGuests: getSeasonalGuestCount(pkg.name),\n      duration: \"4\", // Default 4 hours\n      includedServices: getSeasonalServices(pkg.name, season),\n      features: getSeasonalFeatures(pkg.name, season)\n    };\n    \n    onCreatePackage?.(packageData);\n  };\n\n  const handleCreateService = (service: any, season: string) => {\n    const serviceData = {\n      name: service.name,\n      description: service.suggestion,\n      category: getServiceCategory(service.name),\n      basePrice: calculateSeasonalPrice(service.name, season),\n      unit: getServiceUnit(service.name),\n      isActive: true,\n      seasonalDemand: service.seasonality,\n      bookingRate: service.bookingRate\n    };\n    \n    onCreateService?.(serviceData);\n  };\n\n  const getSeasonalGuestCount = (packageName: string): number => {\n    if (packageName.includes('Corporate')) return 150;\n    if (packageName.includes('Wedding')) return 120;\n    if (packageName.includes('Conference')) return 80;\n    return 100;\n  };\n\n  const getSeasonalServices = (packageName: string, season: string): string[] => {\n    const baseServices = ['Venue Setup', 'Basic Lighting'];\n    \n    if (season === 'Winter') {\n      baseServices.push('Indoor Heating', 'Hot Beverage Station', 'Coat Check');\n    } else if (season === 'Spring') {\n      baseServices.push('Outdoor Setup', 'Floral Arrangements', 'Garden Lighting');\n    } else if (season === 'Summer') {\n      baseServices.push('Air Conditioning', 'Outdoor Bar', 'Shade Structures');\n    } else if (season === 'Fall') {\n      baseServices.push('Weather Contingency', 'Seasonal Decorations', 'Indoor/Outdoor Flexibility');\n    }\n    \n    if (packageName.includes('Corporate')) {\n      baseServices.push('AV Equipment', 'Presentation Setup', 'Catering');\n    } else if (packageName.includes('Wedding')) {\n      baseServices.push('Bridal Suite', 'Photography Area', 'Dance Floor');\n    }\n    \n    return baseServices;\n  };\n\n  const getSeasonalFeatures = (packageName: string, season: string): string[] => {\n    const features = [`${season} themed decorations`, 'Professional event coordination'];\n    \n    if (packageName.includes('Premium')) {\n      features.push('VIP guest area', 'Premium bar service', 'Upgraded linens');\n    }\n    \n    return features;\n  };\n\n  const getServiceCategory = (serviceName: string): string => {\n    if (serviceName.includes('Catering') || serviceName.includes('Food') || serviceName.includes('Beverage')) return 'catering';\n    if (serviceName.includes('AV') || serviceName.includes('Audio') || serviceName.includes('Equipment')) return 'av-equipment';\n    if (serviceName.includes('Decoration') || serviceName.includes('Floral') || serviceName.includes('Lighting')) return 'decorations';\n    if (serviceName.includes('Heating') || serviceName.includes('Cooling') || serviceName.includes('Air')) return 'utilities';\n    return 'other';\n  };\n\n  const calculateSeasonalPrice = (serviceName: string, season: string): string => {\n    let basePrice = 200;\n    \n    if (serviceName.includes('Premium') || serviceName.includes('VIP')) basePrice *= 2;\n    if (serviceName.includes('Equipment') || serviceName.includes('AV')) basePrice *= 1.5;\n    \n    // Seasonal pricing adjustments\n    if (season === 'Summer' && serviceName.includes('Cooling')) basePrice *= 1.3;\n    if (season === 'Winter' && serviceName.includes('Heating')) basePrice *= 1.3;\n    \n    return Math.round(basePrice).toString();\n  };\n\n  const getServiceUnit = (serviceName: string): string => {\n    if (serviceName.includes('Station') || serviceName.includes('Bar')) return 'per station';\n    if (serviceName.includes('Equipment') || serviceName.includes('Setup')) return 'per event';\n    return 'per hour';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center\">\n            <Sparkles className=\"w-5 h-5 text-purple-600\" />\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-bold\">AI Analytics & Insights</h1>\n            <p className=\"text-gray-600\">Intelligent recommendations for your venue business</p>\n          </div>\n        </div>\n\n        <div className=\"flex gap-3\">\n          <Select value={selectedSeason} onValueChange={setSelectedSeason}>\n            <SelectTrigger className=\"w-40\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"current\">Current Season</SelectItem>\n              <SelectItem value=\"Winter\">Winter</SelectItem>\n              <SelectItem value=\"Spring\">Spring</SelectItem>\n              <SelectItem value=\"Summer\">Summer</SelectItem>\n              <SelectItem value=\"Fall\">Fall</SelectItem>\n            </SelectContent>\n          </Select>\n\n          <Select value={timeRange} onValueChange={setTimeRange}>\n            <SelectTrigger className=\"w-32\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"1month\">1 Month</SelectItem>\n              <SelectItem value=\"3months\">3 Months</SelectItem>\n              <SelectItem value=\"6months\">6 Months</SelectItem>\n              <SelectItem value=\"1year\">1 Year</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{formatAmount(analyticsData?.totalRevenue || 0)}</div>\n            <div className=\"flex items-center text-xs text-muted-foreground\">\n              <TrendingUp className=\"w-4 h-4 text-green-600 mr-1\" />\n              +{analyticsData?.bookingsGrowth}% from last period\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Avg Booking Value</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{formatAmount(analyticsData?.avgBookingValue || 0)}</div>\n            <div className=\"text-xs text-muted-foreground\">\n              12% above industry average\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Utilization Rate</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analyticsData?.utilizationRate}%</div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n              <div \n                className=\"bg-blue-600 h-2 rounded-full transition-all\" \n                style={{ width: `${analyticsData?.utilizationRate}%` }}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">AI Confidence</CardTitle>\n            <Sparkles className=\"h-4 w-4 text-purple-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">94%</div>\n            <div className=\"text-xs text-muted-foreground\">\n              Prediction accuracy\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Seasonal Recommendations */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <SeasonIcon className={`w-5 h-5 text-${seasonData.color}-600`} />\n            {displaySeason} Season Recommendations\n            <Badge className=\"bg-purple-100 text-purple-800\">AI Powered</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Package Recommendations */}\n          <div>\n            <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n              <Package className=\"w-4 h-4\" />\n              Recommended Packages\n            </h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {seasonData.packages.map((pkg, index) => (\n                <Card key={index} className=\"border-l-4 border-l-blue-500 cursor-pointer hover:shadow-lg transition-shadow\" onClick={() => handleCreatePackage(pkg, displaySeason)}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h5 className=\"font-medium\">{pkg.name}</h5>\n                      <div className=\"flex items-center gap-2\">\n                        {pkg.trend === 'up' ? (\n                          <TrendingUp className=\"w-4 h-4 text-green-600\" />\n                        ) : pkg.trend === 'down' ? (\n                          <TrendingDown className=\"w-4 h-4 text-red-600\" />\n                        ) : (\n                          <div className=\"w-4 h-4 bg-gray-400 rounded-full\" />\n                        )}\n                        <Button size=\"sm\" variant=\"outline\" className=\"h-6 px-2 text-xs\">\n                          Create\n                        </Button>\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Demand</span>\n                        <span>{pkg.demand}%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div \n                          className=\"bg-blue-600 h-2 rounded-full transition-all\" \n                          style={{ width: `${pkg.demand}%` }}\n                        />\n                      </div>\n                      <div className=\"text-sm text-gray-600\">\n                        Avg Revenue: ${pkg.revenue.toLocaleString()}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n\n          {/* Service Recommendations */}\n          <div>\n            <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n              <Users className=\"w-4 h-4\" />\n              High-Demand Services\n            </h4>\n            <div className=\"space-y-3\">\n              {seasonData.services.map((service, index) => (\n                <div key={index} className=\"border rounded-lg p-4 cursor-pointer hover:shadow-lg transition-shadow\" onClick={() => handleCreateService(service, displaySeason)}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h5 className=\"font-medium\">{service.name}</h5>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"outline\">\n                        {service.bookingRate}% booking rate\n                      </Badge>\n                      <Button size=\"sm\" variant=\"outline\" className=\"h-6 px-2 text-xs\">\n                        Create\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-4 mb-2\">\n                    <div className=\"flex-1\">\n                      <div className=\"text-xs text-gray-600 mb-1\">Seasonal Demand</div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div \n                          className=\"bg-green-600 h-2 rounded-full transition-all\" \n                          style={{ width: `${service.seasonality}%` }}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"text-sm text-gray-600\">\n                      {service.seasonality}%\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-gray-700\">{service.suggestion}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* AI Insights */}\n          <div className=\"bg-purple-50 rounded-lg p-4\">\n            <h4 className=\"font-semibold mb-3 flex items-center gap-2 text-purple-800\">\n              <Lightbulb className=\"w-4 h-4\" />\n              AI Insights for {displaySeason}\n            </h4>\n            <ul className=\"space-y-2\">\n              {seasonData.insights.map((insight, index) => (\n                <li key={index} className=\"text-sm text-purple-700 flex items-start gap-2\">\n                  <Sparkles className=\"w-3 h-3 mt-1 text-purple-500\" />\n                  {insight}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Predictions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"w-5 h-5 text-green-600\" />\n              Revenue Predictions\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center p-3 bg-green-50 rounded\">\n                <div>\n                  <p className=\"font-medium\">Next Month</p>\n                  <p className=\"text-sm text-gray-600\">Based on current trends</p>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-lg font-bold text-green-700\">\n                    ${analyticsData?.predictions?.nextMonth?.revenue?.toLocaleString()}\n                  </p>\n                  <p className=\"text-sm text-green-600\">\n                    {analyticsData?.predictions?.nextMonth?.bookings} bookings\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex justify-between items-center p-3 bg-blue-50 rounded\">\n                <div>\n                  <p className=\"font-medium\">Next Quarter</p>\n                  <p className=\"text-sm text-gray-600\">AI seasonal adjustment</p>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-lg font-bold text-blue-700\">\n                    ${analyticsData?.predictions?.nextQuarter?.revenue?.toLocaleString()}\n                  </p>\n                  <p className=\"text-sm text-blue-600\">\n                    {analyticsData?.predictions?.nextQuarter?.bookings} bookings\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"w-5 h-5 text-orange-600\" />\n              AI Recommendations\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"border-l-4 border-l-orange-500 pl-4\">\n                <h5 className=\"font-medium\">Pricing Optimization</h5>\n                <p className=\"text-sm text-gray-600\">\n                  Consider 15% price increase for {displaySeason.toLowerCase()} premium packages\n                </p>\n              </div>\n              \n              <div className=\"border-l-4 border-l-purple-500 pl-4\">\n                <h5 className=\"font-medium\">Marketing Focus</h5>\n                <p className=\"text-sm text-gray-600\">\n                  Target corporate clients for {displaySeason.toLowerCase()} events with 3-week lead time\n                </p>\n              </div>\n              \n              <div className=\"border-l-4 border-l-green-500 pl-4\">\n                <h5 className=\"font-medium\">Inventory Planning</h5>\n                <p className=\"text-sm text-gray-600\">\n                  Stock up on seasonal decorations and weather-specific equipment\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":23758},"client/src/components/forms/booking-wizard.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { X, Calendar, Clock, Users, Package, Plus, Copy, Check, Trash2, PlusCircle, Building, CheckCircle, RefreshCw } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface EventSlot {\n  venue: any;\n  space: any;\n  startTime: Date;\n  endTime: Date;\n}\n\ninterface SlotConfiguration {\n  packageId: string;\n  addOns: string[];\n  guests: number;\n  pricingModel: 'fixed' | 'per_person';\n  itemQuantities: Record<string, number>;\n}\n\ninterface EventDetails {\n  eventName: string;\n  customerId: string;\n  eventStatus: string;\n}\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  initialSlots?: EventSlot[];\n  initialBookings?: any[];\n}\n\nconst generateSlotId = (slot: EventSlot) => \n  slot?.space?.id && slot.startTime \n    ? `${slot.space.id}@${slot.startTime.toISOString()}` \n    : null;\n\nconst formatDate = (date: Date, options?: Intl.DateTimeFormatOptions) => {\n  return date.toLocaleDateString('en-US', options);\n};\n\nconst formatTime = (date: Date, options?: Intl.DateTimeFormatOptions) => {\n  return date.toLocaleTimeString('en-US', { \n    hour: 'numeric', \n    minute: '2-digit',\n    ...options \n  });\n};\n\nconst EventSlotGenerator = ({ onSlotsGenerated }: { onSlotsGenerated: (slots: EventSlot[]) => void }) => {\n  const { data: venues = [] } = useQuery<any[]>({ queryKey: [\"/api/venues-with-spaces\"] });\n  const [selectedDates, setSelectedDates] = useState<string[]>([]);\n  const [slotConfigs, setSlotConfigs] = useState<any[]>([]);\n  const [selectedVenueId, setSelectedVenueId] = useState('');\n  const [currentMonthDate, setCurrentMonthDate] = useState(new Date());\n  \n  const selectedVenue = useMemo(() => venues.find((v: any) => v.id === selectedVenueId), [venues, selectedVenueId]);\n\n  useEffect(() => {\n    setSlotConfigs(selectedDates.map(date => ({\n      date,\n      spaceId: selectedVenue?.spaces?.[0]?.id || '',\n      startTime: '09:00',\n      endTime: '17:00'\n    })));\n  }, [selectedDates, selectedVenue]);\n\n  const handleDateClick = (day: Date) => {\n    const dayString = day.toISOString().split('T')[0];\n    setSelectedDates(prev => \n      prev.includes(dayString) \n        ? prev.filter(d => d !== dayString) \n        : [...prev, dayString].sort()\n    );\n  };\n\n  const handleConfigChange = (index: number, field: string, value: string) => {\n    setSlotConfigs(prev => prev.map((config, i) => \n      i === index ? { ...config, [field]: value } : config\n    ));\n  };\n\n  const handleGenerate = () => {\n    const slots: EventSlot[] = slotConfigs.map(config => {\n      const venue = selectedVenue;\n      const space = venue?.spaces?.find((s: any) => s.id === config.spaceId);\n      const date = new Date(config.date + 'T00:00:00Z');\n      \n      const [startHour, startMinute] = config.startTime.split(':').map(Number);\n      const [endHour, endMinute] = config.endTime.split(':').map(Number);\n      \n      const startTime = new Date(date);\n      startTime.setUTCHours(startHour, startMinute, 0, 0);\n      \n      const endTime = new Date(date);\n      endTime.setUTCHours(endHour, endMinute, 0, 0);\n\n      return { venue, space, startTime, endTime };\n    }).filter(slot => slot.venue && slot.space);\n\n    onSlotsGenerated(slots);\n  };\n\n  // Generate calendar days for current month\n  const monthStart = new Date(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), 1);\n  const monthEnd = new Date(currentMonthDate.getFullYear(), currentMonthDate.getMonth() + 1, 0);\n  const startDate = new Date(monthStart);\n  startDate.setDate(startDate.getDate() - monthStart.getDay());\n  \n  const days = [];\n  const current = new Date(startDate);\n  while (current <= monthEnd || current.getDay() !== 0) {\n    days.push(new Date(current));\n    current.setDate(current.getDate() + 1);\n  }\n\n  return (\n    <div className=\"flex-grow flex overflow-hidden\">\n      <div className=\"w-1/2 p-4 border-r\">\n        <h3 className=\"font-semibold mb-4\">Select Dates</h3>\n        \n        <div className=\"mb-4\">\n          <Label>Venue</Label>\n          <Select value={selectedVenueId} onValueChange={setSelectedVenueId}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select a venue\" />\n            </SelectTrigger>\n            <SelectContent>\n              {venues.map((venue: any) => (\n                <SelectItem key={venue.id} value={venue.id}>\n                  {venue.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Calendar */}\n        <div className=\"bg-white border rounded-lg p-4\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentMonthDate(new Date(currentMonthDate.setMonth(currentMonthDate.getMonth() - 1)))}\n            >\n              ‹\n            </Button>\n            <h4 className=\"font-medium\">\n              {currentMonthDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n            </h4>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentMonthDate(new Date(currentMonthDate.setMonth(currentMonthDate.getMonth() + 1)))}\n            >\n              ›\n            </Button>\n          </div>\n          \n          <div className=\"grid grid-cols-7 gap-1 text-center text-xs font-medium text-gray-500 mb-2\">\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n              <div key={day} className=\"py-2\">{day}</div>\n            ))}\n          </div>\n          \n          <div className=\"grid grid-cols-7 gap-1\">\n            {days.map((day, i) => {\n              const dayString = day.toISOString().split('T')[0];\n              const isCurrentMonth = day.getMonth() === currentMonthDate.getMonth();\n              const isSelected = selectedDates.includes(dayString);\n              const isPast = day < new Date();\n              \n              return (\n                <button\n                  key={i}\n                  onClick={() => !isPast && isCurrentMonth && handleDateClick(day)}\n                  disabled={isPast || !isCurrentMonth}\n                  className={`\n                    h-8 text-sm rounded transition-colors\n                    ${isCurrentMonth ? 'text-gray-900' : 'text-gray-300'}\n                    ${isPast ? 'bg-gray-100 cursor-not-allowed' : 'hover:bg-gray-100'}\n                    ${isSelected ? 'bg-indigo-600 text-white hover:bg-indigo-700' : ''}\n                  `}\n                >\n                  {day.getDate()}\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"w-1/2 p-4\">\n        <h3 className=\"font-semibold mb-4\">Configure Selected Dates</h3>\n        \n        {slotConfigs.length === 0 ? (\n          <p className=\"text-gray-500 text-center py-8\">Select dates from the calendar</p>\n        ) : (\n          <>\n            <div className=\"space-y-4 max-h-64 overflow-y-auto\">\n              {slotConfigs.map((config, index) => (\n                <div key={config.date} className=\"p-3 border rounded-lg\">\n                  <div className=\"font-medium text-sm mb-2\">\n                    {new Date(config.date).toLocaleDateString('en-US', { \n                      weekday: 'long', \n                      month: 'short', \n                      day: 'numeric' \n                    })}\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 gap-2\">\n                    <div>\n                      <Label className=\"text-xs\">Space</Label>\n                      <Select\n                        value={config.spaceId}\n                        onValueChange={(value) => handleConfigChange(index, 'spaceId', value)}\n                      >\n                        <SelectTrigger className=\"h-8\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {selectedVenue?.spaces?.map((space: any) => (\n                            <SelectItem key={space.id} value={space.id}>\n                              {space.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <div>\n                        <Label className=\"text-xs\">Start</Label>\n                        <Input\n                          type=\"time\"\n                          value={config.startTime}\n                          onChange={(e) => handleConfigChange(index, 'startTime', e.target.value)}\n                          className=\"h-8\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-xs\">End</Label>\n                        <Input\n                          type=\"time\"\n                          value={config.endTime}\n                          onChange={(e) => handleConfigChange(index, 'endTime', e.target.value)}\n                          className=\"h-8\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            <Button \n              onClick={handleGenerate}\n              className=\"w-full mt-4\"\n              disabled={!selectedVenueId || slotConfigs.some(c => !c.spaceId)}\n            >\n              Generate {slotConfigs.length} Slot{slotConfigs.length !== 1 ? 's' : ''}\n            </Button>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default function BookingWizard({ \n  open, \n  onOpenChange, \n  initialSlots = [], \n  initialBookings \n}: Props) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Data queries first - using venues-with-spaces for proper space-based architecture\n  const { data: venues = [] } = useQuery<any[]>({ queryKey: [\"/api/venues-with-spaces\"] });\n  const { data: customers = [] } = useQuery<any[]>({ queryKey: [\"/api/customers\"] });\n  const { data: packages = [] } = useQuery<any[]>({ queryKey: [\"/api/packages\"] });\n  const { data: services = [] } = useQuery<any[]>({ queryKey: [\"/api/services\"] });\n\n  // State management following the exact structure from your previous app\n  const [generatedSlots, setGeneratedSlots] = useState<EventSlot[]>([]);\n  const isEditMode = !!initialBookings;\n  const [isAddingSlots, setIsAddingSlots] = useState(!isEditMode && (!initialSlots || initialSlots.length === 0));\n\n  const wizardSlots = useMemo(() => {\n    const slotsFromInitial = initialSlots || [];\n    const slotsFromBookings = (initialBookings || []).map((b: any) => ({ \n      ...b, \n      venue: venues.find((v: any) => v.id === b.venueId), \n      space: venues.find((v: any) => v.id === b.venueId)?.spaces?.find((s: any) => s.id === b.spaceId) \n    }));\n    const allSlots = isEditMode ? [...slotsFromBookings, ...generatedSlots] : [...slotsFromInitial, ...generatedSlots];\n    return allSlots.sort((a, b) => new Date(a.startTime).getTime() - new Date(b.startTime).getTime());\n  }, [initialSlots, initialBookings, generatedSlots, venues, isEditMode]);\n\n  const [step, setStep] = useState(1);\n  const [activeTabId, setActiveTabId] = useState<string | null>(null);\n  const [configurations, setConfigurations] = useState<Record<string, SlotConfiguration>>({});\n  const [pricingOverrides, setPricingOverrides] = useState<Record<string, any>>({});\n  const [eventDetails, setEventDetails] = useState<EventDetails>(() => \n    isEditMode && wizardSlots.length > 0 \n      ? { \n          eventName: wizardSlots[0].eventName || '', \n          customerId: wizardSlots[0].customerId || '', \n          eventStatus: wizardSlots[0].eventStatus || 'Inquiry' \n        } \n      : { \n          eventName: '', \n          customerId: '', \n          eventStatus: 'Inquiry' \n        }\n  );\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isCloning, setIsCloning] = useState(false);\n\n  // Initialize configurations when slots change - exactly like your previous app\n  useEffect(() => {\n    if (wizardSlots.length > 0) {\n      setActiveTabId(prev => {\n        const prevSlotExists = wizardSlots.some(s => generateSlotId(s) === prev);\n        return prevSlotExists ? prev : generateSlotId(wizardSlots[0]);\n      });\n      \n      setConfigurations(prevConfigs => {\n        const newConfigs = { ...prevConfigs };\n        wizardSlots.forEach(slot => {\n          const slotId = generateSlotId(slot);\n          if (slotId && !newConfigs[slotId]) {\n            const booking = isEditMode ? initialBookings?.find((b: any) => generateSlotId(b) === slotId) : null;\n            const pkg = packages.find((p: any) => p.id === booking?.packageId);\n            newConfigs[slotId] = { \n              packageId: booking?.packageId || '', \n              addOns: booking?.addOns || [], \n              itemQuantities: booking?.itemQuantities || {}, \n              guests: booking?.guests || 1,\n              pricingModel: booking?.pricingModel || pkg?.pricingModel || 'fixed'\n            };\n          }\n        });\n        return newConfigs;\n      });\n    }\n  }, [wizardSlots, isEditMode, initialBookings, packages]);\n\n  // Helper functions\n  const updateConfig = (slotId: string, newConfig: Partial<SlotConfiguration>) => {\n    setConfigurations(prev => ({\n      ...prev, \n      [slotId]: { ...prev[slotId], ...newConfig }\n    }));\n  };\n\n  const handleSelectPackage = (slotId: string, pkgId: string) => {\n    const pkg = packages.find((p: any) => p.id === pkgId);\n    updateConfig(slotId, { \n      packageId: pkgId, \n      addOns: pkg ? [...(pkg.includedServiceIds || [])] : [], \n      pricingModel: pkg?.pricingModel || 'fixed' \n    });\n  };\n\n  const handleToggleAddOn = (slotId: string, serviceId: string) => {\n    const currentConfig = configurations[slotId];\n    if (!currentConfig) return;\n    \n    const isAdded = currentConfig.addOns.includes(serviceId);\n    updateConfig(slotId, { \n      addOns: isAdded \n        ? currentConfig.addOns.filter(id => id !== serviceId) \n        : [...currentConfig.addOns, serviceId] \n    });\n  };\n\n  // Price override handlers matching your previous app\n  const handlePriceOverride = (slotId: string, type: 'package' | 'service', id: string, value: string) => {\n    const numericValue = value === '' ? null : parseFloat(value);\n    if (value !== '' && (numericValue === null || isNaN(numericValue))) return;\n\n    setPricingOverrides(prev => {\n      const newOverrides = JSON.parse(JSON.stringify(prev)); // Deep copy\n      if (!newOverrides[slotId]) {\n        newOverrides[slotId] = { packagePrice: null, servicePrices: {} };\n      }\n      if (type === 'package') {\n        newOverrides[slotId].packagePrice = numericValue;\n      } else if (type === 'service') {\n        if (!newOverrides[slotId].servicePrices) {\n          newOverrides[slotId].servicePrices = {};\n        }\n        newOverrides[slotId].servicePrices[id] = numericValue;\n      }\n      return newOverrides;\n    });\n  };\n\n  const handleItemQuantityChange = (slotId: string, serviceId: string, quantity: string) => {\n    const q = Math.max(1, parseInt(quantity, 10) || 1);\n    updateConfig(slotId, { \n      itemQuantities: { \n        ...configurations[slotId]?.itemQuantities, \n        [serviceId]: q \n      } \n    });\n  };\n\n  const handleApplyGuestCount = (slotId: string) => {\n    const currentConfig = configurations[slotId];\n    if (!currentConfig) return;\n    \n    const newItemQuantities = { ...currentConfig.itemQuantities };\n    services.forEach((service: any) => {\n      if (service.pricingModel === 'per_person') {\n        newItemQuantities[service.id] = currentConfig.guests;\n      }\n    });\n    updateConfig(slotId, { itemQuantities: newItemQuantities });\n  };\n\n  const handleApplyClone = (targetSlotIds: string[]) => {\n    if (!activeTabId) return;\n    \n    const sourceConfig = configurations[activeTabId];\n    const sourceOverrides = pricingOverrides[activeTabId];\n    \n    setConfigurations(prev => {\n      const newConfigs = { ...prev };\n      targetSlotIds.forEach(id => {\n        if (newConfigs[id]) {\n          newConfigs[id] = { ...sourceConfig };\n        }\n      });\n      return newConfigs;\n    });\n    \n    setPricingOverrides(prev => {\n      const newOverrides = { ...prev };\n      targetSlotIds.forEach(id => {\n        if (newOverrides[id]) {\n          newOverrides[id] = { ...sourceOverrides };\n        }\n      });\n      return newOverrides;\n    });\n    \n    setIsCloning(false);\n  };\n\n  // Price calculation matching your previous app\n  const calculateSlotPrice = (slotId: string) => {\n    const config = configurations[slotId];\n    const overrides = pricingOverrides[slotId];\n    if (!config) return 0;\n\n    let total = 0;\n\n    // Package price\n    if (config.packageId) {\n      const pkg = packages.find((p: any) => p.id === config.packageId);\n      if (pkg) {\n        const packagePrice = overrides?.packagePrice ?? pkg.price;\n        if (config.pricingModel === 'per_person') {\n          total += packagePrice * config.guests;\n        } else {\n          total += packagePrice;\n        }\n      }\n    }\n\n    // Service prices\n    config.addOns.forEach((serviceId: string) => {\n      const service = services.find((s: any) => s.id === serviceId);\n      if (service) {\n        const servicePrice = overrides?.servicePrices?.[serviceId] ?? service.price;\n        const quantity = config.itemQuantities[serviceId] || 1;\n        \n        if (service.pricingModel === 'per_person') {\n          total += servicePrice * config.guests;\n        } else {\n          total += servicePrice * quantity;\n        }\n      }\n    });\n\n    return total;\n  };\n\n  const totalEventPrice = useMemo(() => {\n    return wizardSlots.reduce((total, slot) => {\n      const slotId = generateSlotId(slot);\n      return slotId ? total + calculateSlotPrice(slotId) : total;\n    }, 0);\n  }, [wizardSlots, configurations, pricingOverrides, packages, services]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    \n    try {\n      // Create bookings for all slots\n      const bookingsToCreate = wizardSlots.map(slot => {\n        const slotId = generateSlotId(slot);\n        const config = configurations[slotId!] || { packageId: '', addOns: [], guests: 1, pricingModel: 'fixed', itemQuantities: {} };\n        const slotTotal = calculateSlotPrice(slotId!);\n        \n        return {\n          eventName: eventDetails.eventName,\n          customerId: eventDetails.customerId || null,\n          venueId: slot.venue.id,\n          spaceId: slot.space.id,\n          eventDate: slot.startTime.toISOString().split('T')[0],\n          startTime: slot.startTime.toTimeString().split(' ')[0].slice(0, 5),\n          endTime: slot.endTime.toTimeString().split(' ')[0].slice(0, 5),\n          guestCount: config.guests,\n          packageId: config.packageId || null,\n          selectedServices: config.addOns,\n          pricingModel: config.pricingModel,\n          itemQuantities: config.itemQuantities,\n          pricingOverrides: pricingOverrides[slotId!] || null,\n          totalAmount: slotTotal.toFixed(2),\n          status: eventDetails.eventStatus,\n        };\n      });\n\n      for (const booking of bookingsToCreate) {\n        await apiRequest('POST', '/api/bookings', booking);\n      }\n\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      toast({\n        title: \"Success\",\n        description: `Created ${bookingsToCreate.length} booking${bookingsToCreate.length !== 1 ? 's' : ''} - Total: $${totalEventPrice.toFixed(2)}`,\n      });\n      onOpenChange(false);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create bookings\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const activeSlot = wizardSlots.find(s => generateSlotId(s) === activeTabId);\n\n  if (!open) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl w-full max-w-6xl h-[90vh] flex flex-col\">\n        <div className=\"p-6 border-b flex justify-between items-center\">\n          <h2 className=\"text-2xl font-bold\">\n            {isEditMode ? 'Edit Event' : 'Create New Event'}\n          </h2>\n          <button onClick={() => onOpenChange(false)} className=\"p-1 rounded-full hover:bg-gray-200\">\n            <X className=\"w-6 h-6\"/>\n          </button>\n        </div>\n\n        <div className=\"flex-grow flex overflow-hidden\">\n          {/* Step 1: Event Details */}\n          {step === 1 && (\n            <div className=\"w-full p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Event Details</h3>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"eventName\">Event Name</Label>\n                  <Input\n                    id=\"eventName\"\n                    value={eventDetails.eventName}\n                    onChange={(e) => setEventDetails(prev => ({ ...prev, eventName: e.target.value }))}\n                    placeholder=\"Enter event name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"customerId\">Customer</Label>\n                  <Select \n                    value={eventDetails.customerId} \n                    onValueChange={(value) => setEventDetails(prev => ({ ...prev, customerId: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select a customer\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {customers.map((customer: any) => (\n                        <SelectItem key={customer.id} value={customer.id}>\n                          {customer.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div className=\"mt-6 flex justify-end\">\n                <Button \n                  onClick={() => setStep(2)}\n                  disabled={!eventDetails.eventName}\n                >\n                  Next: Create Slots\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {/* Step 2: Slot Generation */}\n          {step === 2 && isAddingSlots && (\n            <EventSlotGenerator \n              onSlotsGenerated={(slots) => {\n                setGeneratedSlots(slots);\n                setIsAddingSlots(false);\n                setStep(3);\n              }} \n            />\n          )}\n\n          {/* Step 3: Configure Slots */}\n          {step === 3 && wizardSlots.length > 0 && (\n            <div className=\"flex-grow flex overflow-hidden\">\n              {/* Slot List */}\n              <div className=\"w-1/3 border-r overflow-y-auto\">\n                <div className=\"p-4 border-b\">\n                  <h3 className=\"font-semibold\">Event Slots</h3>\n                </div>\n                {wizardSlots.map(slot => {\n                  const slotId = generateSlotId(slot);\n                  return (\n                    <div \n                      key={slotId} \n                      onClick={() => setActiveTabId(slotId)} \n                      className={`p-4 cursor-pointer border-b ${activeTabId === slotId ? 'bg-indigo-100 border-l-4 border-indigo-500' : 'hover:bg-gray-100'}`}\n                    >\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <p className=\"font-semibold\">{formatDate(slot.startTime, {weekday: 'long'})}</p>\n                          <p className=\"text-sm text-gray-600\">{formatDate(slot.startTime)}</p>\n                          <p className=\"text-sm text-gray-600\">{slot.space?.name} @ {formatTime(slot.startTime)}</p>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n\n              {/* Configuration Panel */}\n              <div className=\"flex-grow p-6 overflow-y-auto\">\n                {activeSlot && configurations[activeTabId!] && (\n                  <div>\n                    <div className=\"flex justify-between items-center mb-4\">\n                      <h3 className=\"font-semibold\">\n                        Configure {formatDate(activeSlot.startTime, {weekday: 'long', month: 'short', day: 'numeric'})}\n                      </h3>\n                      {wizardSlots.length > 1 && (\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => setIsCloning(true)}\n                        >\n                          <Copy className=\"w-4 h-4 mr-2\" />\n                          Copy Config\n                        </Button>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-gray-500 mb-4\">\n                      For {formatDate(activeSlot.startTime, { weekday: 'long' })} in {activeSlot.space?.name}\n                    </p>\n                    \n                    <div className=\"space-y-6\">\n                      {/* Guest Count */}\n                      <div>\n                        <Label htmlFor=\"guests\">Number of Guests</Label>\n                        <Input\n                          id=\"guests\"\n                          type=\"number\"\n                          min=\"1\"\n                          max={activeSlot.space?.capacity || 1000}\n                          value={configurations[activeTabId!]?.guests || 1}\n                          onChange={(e) => updateConfig(activeTabId!, { guests: parseInt(e.target.value) || 1 })}\n                        />\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          Max capacity: {activeSlot.space?.capacity || 'Unlimited'}\n                        </p>\n                      </div>\n\n                      {/* Package Selection */}\n                      <div>\n                        <Label>Package</Label>\n                        <Select \n                          value={configurations[activeTabId!]?.packageId || ''} \n                          onValueChange={(value) => handleSelectPackage(activeTabId!, value)}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"A La Carte (No Package)\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"none\">A La Carte</SelectItem>\n                            {packages.filter((pkg: any) => \n                              !pkg.applicableSpaceIds || pkg.applicableSpaceIds.includes(activeSlot.space?.id)\n                            ).map((pkg: any) => (\n                              <SelectItem key={pkg.id} value={pkg.id}>\n                                {pkg.name} - ${pkg.price}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n\n                        {/* Package Price Override */}\n                        {configurations[activeTabId!]?.packageId && (\n                          <div className=\"mt-2 space-y-2\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Label className=\"text-xs\">Price Override:</Label>\n                              <Input\n                                type=\"number\"\n                                step=\"0.01\"\n                                placeholder=\"Leave blank for default\"\n                                value={pricingOverrides[activeTabId!]?.packagePrice || ''}\n                                onChange={(e) => handlePriceOverride(activeTabId!, 'package', configurations[activeTabId!]?.packageId, e.target.value)}\n                                className=\"w-24 h-7 text-xs\"\n                              />\n                            </div>\n                            <div className=\"flex items-center space-x-4 text-xs\">\n                              <label className=\"flex items-center\">\n                                <input\n                                  type=\"radio\"\n                                  name={`pricingModel-${activeTabId}`}\n                                  value=\"fixed\"\n                                  checked={configurations[activeTabId!]?.pricingModel === 'fixed'}\n                                  onChange={() => updateConfig(activeTabId!, { pricingModel: 'fixed' })}\n                                  className=\"mr-1\"\n                                />\n                                Flat Fee\n                              </label>\n                              <label className=\"flex items-center\">\n                                <input\n                                  type=\"radio\"\n                                  name={`pricingModel-${activeTabId}`}\n                                  value=\"per_person\"\n                                  checked={configurations[activeTabId!]?.pricingModel === 'per_person'}\n                                  onChange={() => updateConfig(activeTabId!, { pricingModel: 'per_person' })}\n                                  className=\"mr-1\"\n                                />\n                                Per Person\n                              </label>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n\n                      {/* Add-on Services */}\n                      <div>\n                        <div className=\"flex justify-between items-center mb-2\">\n                          <Label>Add-on Services</Label>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleApplyGuestCount(activeTabId!)}\n                          >\n                            Apply Guest Count\n                          </Button>\n                        </div>\n                        <div className=\"space-y-3 max-h-60 overflow-y-auto\">\n                          {services.map((service: any) => {\n                            const isChecked = configurations[activeTabId!]?.addOns?.includes(service.id) || false;\n                            const quantity = configurations[activeTabId!]?.itemQuantities?.[service.id] || 1;\n                            const overridePrice = pricingOverrides[activeTabId!]?.servicePrices?.[service.id];\n                            \n                            return (\n                              <div key={service.id} className=\"border rounded p-3\">\n                                <div className=\"flex items-start space-x-3\">\n                                  <Checkbox\n                                    id={service.id}\n                                    checked={isChecked}\n                                    onCheckedChange={() => handleToggleAddOn(activeTabId!, service.id)}\n                                  />\n                                  <div className=\"flex-grow\">\n                                    <Label htmlFor={service.id} className=\"font-medium\">\n                                      {service.name}\n                                    </Label>\n                                    <p className=\"text-xs text-gray-600 mb-2\">\n                                      ${service.price} {service.pricingModel === 'per_person' ? '(per person)' : ''}\n                                    </p>\n                                    \n                                    {isChecked && (\n                                      <div className=\"flex items-center space-x-2 text-xs\">\n                                        {service.pricingModel !== 'per_person' && (\n                                          <>\n                                            <Label>Qty:</Label>\n                                            <Input\n                                              type=\"number\"\n                                              min=\"1\"\n                                              value={quantity}\n                                              onChange={(e) => handleItemQuantityChange(activeTabId!, service.id, e.target.value)}\n                                              className=\"w-16 h-6\"\n                                            />\n                                          </>\n                                        )}\n                                        <Label>Override:</Label>\n                                        <Input\n                                          type=\"number\"\n                                          step=\"0.01\"\n                                          placeholder={service.price}\n                                          value={overridePrice || ''}\n                                          onChange={(e) => handlePriceOverride(activeTabId!, 'service', service.id, e.target.value)}\n                                          className=\"w-20 h-6\"\n                                        />\n                                      </div>\n                                    )}\n                                  </div>\n                                </div>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n\n                      {/* Price Summary */}\n                      <div className=\"bg-gray-50 p-4 rounded-lg\">\n                        <Label className=\"font-semibold\">Slot Total</Label>\n                        <p className=\"text-2xl font-bold text-green-600\">\n                          ${calculateSlotPrice(activeTabId!).toFixed(2)}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          {configurations[activeTabId!]?.pricingModel === 'per_person' && \n                            `(Based on ${configurations[activeTabId!]?.guests} guests)`\n                          }\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"p-4 bg-gray-50 border-t flex justify-between items-center\">\n          <div className=\"flex items-center space-x-4\">\n            {step > 1 && (\n              <Button variant=\"outline\" onClick={() => setStep(step - 1)}>\n                Back\n              </Button>\n            )}\n            {step === 2 && !isAddingSlots && wizardSlots.length > 0 && (\n              <Button \n                variant=\"outline\"\n                onClick={() => setIsAddingSlots(true)}\n              >\n                <PlusCircle className=\"w-4 h-4 mr-2\" />\n                Add More Slots\n              </Button>\n            )}\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            {step === 3 && wizardSlots.length > 0 && (\n              <div className=\"text-right\">\n                <p className=\"text-sm text-gray-600\">Total Event Cost</p>\n                <p className=\"text-2xl font-bold text-green-600\">\n                  ${totalEventPrice.toFixed(2)}\n                </p>\n              </div>\n            )}\n            {step === 2 && !isAddingSlots && wizardSlots.length > 0 && (\n              <Button onClick={() => setStep(3)}>\n                Configure Slots\n              </Button>\n            )}\n            {step === 3 && (\n              <Button \n                onClick={handleSubmit}\n                disabled={isSubmitting || !eventDetails.eventName || wizardSlots.length === 0}\n              >\n                {isSubmitting ? 'Creating...' : `Create ${wizardSlots.length} Booking${wizardSlots.length !== 1 ? 's' : ''}`}\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Clone Configuration Modal */}\n        {isCloning && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n            <div className=\"bg-white rounded-lg p-6 max-w-md w-full mx-4\">\n              <h3 className=\"font-semibold mb-4\">Copy Configuration</h3>\n              <p className=\"text-sm text-gray-600 mb-4\">\n                Copy settings from {formatDate(activeSlot?.startTime || new Date(), {weekday: 'long', month: 'short', day: 'numeric'})} to:\n              </p>\n              <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n                {wizardSlots.filter(s => generateSlotId(s) !== activeTabId).map(slot => {\n                  const slotId = generateSlotId(slot);\n                  return (\n                    <label key={slotId} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={slotId!}\n                        onChange={(checked) => {\n                          // Handle multiple selection\n                        }}\n                      />\n                      <span className=\"text-sm\">\n                        {formatDate(slot.startTime, {weekday: 'long', month: 'short', day: 'numeric'})} - {slot.space?.name}\n                      </span>\n                    </label>\n                  );\n                })}\n              </div>\n              <div className=\"flex justify-end space-x-2 mt-6\">\n                <Button variant=\"outline\" onClick={() => setIsCloning(false)}>\n                  Cancel\n                </Button>\n                <Button onClick={() => {\n                  // Get selected slots and apply clone\n                  const selectedSlots = wizardSlots.filter(s => generateSlotId(s) !== activeTabId).map(s => generateSlotId(s)).filter(Boolean) as string[];\n                  handleApplyClone(selectedSlots);\n                }}>\n                  Copy to All\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":38706},"client/src/components/forms/create-package-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Package, Sparkles } from \"lucide-react\";\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  initialData?: any;\n}\n\nexport function CreatePackageModal({ open, onOpenChange, initialData }: Props) {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    basePrice: \"\",\n    category: \"wedding\",\n    maxGuests: \"\",\n    duration: \"4\",\n    includedServices: [] as string[],\n    features: [] as string[],\n    isActive: true\n  });\n\n  const { data: services } = useQuery({\n    queryKey: [\"/api/services\"],\n  });\n\n  useEffect(() => {\n    if (initialData) {\n      setFormData({\n        name: initialData.name || \"\",\n        description: initialData.description || \"\",\n        basePrice: initialData.basePrice || \"\",\n        category: initialData.category || \"wedding\",\n        maxGuests: initialData.maxGuests?.toString() || \"\",\n        duration: initialData.duration || \"4\",\n        includedServices: initialData.includedServices || [],\n        features: initialData.features || [],\n        isActive: initialData.isActive !== false\n      });\n    }\n  }, [initialData]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name || !formData.basePrice) {\n      toast({\n        title: \"Required fields missing\",\n        description: \"Please provide package name and base price\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      await apiRequest(\"POST\", \"/api/packages\", {\n        name: formData.name,\n        description: formData.description,\n        category: formData.category,\n        price: parseFloat(formData.basePrice),\n        pricingModel: \"fixed\",\n        maxGuests: formData.maxGuests ? parseInt(formData.maxGuests) : null,\n        duration: parseInt(formData.duration),\n        includedServiceIds: formData.includedServices,\n        features: formData.features,\n        isActive: formData.isActive\n      });\n\n      await queryClient.invalidateQueries({ queryKey: [\"/api/packages\"] });\n      \n      toast({\n        title: \"Package created successfully\",\n        description: `${formData.name} has been added to your packages`\n      });\n      \n      onOpenChange(false);\n      resetForm();\n    } catch (error: any) {\n      toast({\n        title: \"Failed to create package\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      description: \"\",\n      basePrice: \"\",\n      category: \"wedding\",\n      maxGuests: \"\",\n      duration: \"4\",\n      includedServices: [],\n      features: [],\n      isActive: true\n    });\n  };\n\n  const handleServiceToggle = (serviceId: string) => {\n    setFormData(prev => ({\n      ...prev,\n      includedServices: prev.includedServices.includes(serviceId)\n        ? prev.includedServices.filter(id => id !== serviceId)\n        : [...prev.includedServices, serviceId]\n    }));\n  };\n\n  const addFeature = () => {\n    const feature = prompt(\"Enter a package feature:\");\n    if (feature?.trim()) {\n      setFormData(prev => ({\n        ...prev,\n        features: [...prev.features, feature.trim()]\n      }));\n    }\n  };\n\n  const removeFeature = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      features: prev.features.filter((_, i) => i !== index)\n    }));\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Package className=\"w-5 h-5\" />\n            Create New Package\n            {initialData && (\n              <Badge className=\"bg-purple-100 text-purple-800\">\n                <Sparkles className=\"w-3 h-3 mr-1\" />\n                AI Suggested\n              </Badge>\n            )}\n          </DialogTitle>\n          <DialogDescription>\n            Create a new event package with included services and pricing.\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"name\">Package Name</Label>\n              <Input\n                id=\"name\"\n                value={formData.name}\n                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                placeholder=\"Premium Wedding Package\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"category\">Category</Label>\n              <Select value={formData.category} onValueChange={(value) => setFormData(prev => ({ ...prev, category: value }))}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"wedding\">Wedding</SelectItem>\n                  <SelectItem value=\"corporate\">Corporate</SelectItem>\n                  <SelectItem value=\"social\">Social</SelectItem>\n                  <SelectItem value=\"conference\">Conference</SelectItem>\n                  <SelectItem value=\"winter\">Winter</SelectItem>\n                  <SelectItem value=\"spring\">Spring</SelectItem>\n                  <SelectItem value=\"summer\">Summer</SelectItem>\n                  <SelectItem value=\"fall\">Fall</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"basePrice\">Base Price ($)</Label>\n              <Input\n                id=\"basePrice\"\n                type=\"number\"\n                value={formData.basePrice}\n                onChange={(e) => setFormData(prev => ({ ...prev, basePrice: e.target.value }))}\n                placeholder=\"2500\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"maxGuests\">Max Guests</Label>\n              <Input\n                id=\"maxGuests\"\n                type=\"number\"\n                value={formData.maxGuests}\n                onChange={(e) => setFormData(prev => ({ ...prev, maxGuests: e.target.value }))}\n                placeholder=\"150\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"duration\">Duration (hours)</Label>\n              <Input\n                id=\"duration\"\n                type=\"number\"\n                value={formData.duration}\n                onChange={(e) => setFormData(prev => ({ ...prev, duration: e.target.value }))}\n                placeholder=\"4\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              placeholder=\"Complete package description...\"\n              rows={3}\n            />\n          </div>\n\n          {/* Included Services */}\n          {services && services.length > 0 && (\n            <div>\n              <Label>Included Services</Label>\n              <div className=\"border rounded-lg p-4 max-h-40 overflow-y-auto\">\n                <div className=\"space-y-2\">\n                  {services.map((service: any) => (\n                    <div key={service.id} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={service.id}\n                        checked={formData.includedServices.includes(service.id)}\n                        onCheckedChange={() => handleServiceToggle(service.id)}\n                      />\n                      <Label htmlFor={service.id} className=\"text-sm\">\n                        {service.name} - ${service.price || service.basePrice}\n                      </Label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Package Features */}\n          <div>\n            <div className=\"flex items-center justify-between mb-2\">\n              <Label>Package Features</Label>\n              <Button type=\"button\" onClick={addFeature} size=\"sm\" variant=\"outline\">\n                Add Feature\n              </Button>\n            </div>\n            <div className=\"flex flex-wrap gap-2\">\n              {formData.features.map((feature, index) => (\n                <Badge\n                  key={index}\n                  variant=\"secondary\"\n                  className=\"cursor-pointer\"\n                  onClick={() => removeFeature(index)}\n                >\n                  {feature} ×\n                </Badge>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"isActive\"\n              checked={formData.isActive}\n              onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: !!checked }))}\n            />\n            <Label htmlFor=\"isActive\">Package is active and available for booking</Label>\n          </div>\n\n          <div className=\"flex justify-end gap-3\">\n            <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Cancel\n            </Button>\n            <Button type=\"submit\">Create Package</Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10180},"client/src/components/forms/create-service-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Wrench, Sparkles } from \"lucide-react\";\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  initialData?: any;\n}\n\nexport function CreateServiceModal({ open, onOpenChange, initialData }: Props) {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    basePrice: \"\",\n    category: \"catering\",\n    unit: \"per hour\",\n    isActive: true,\n    seasonalDemand: \"\",\n    bookingRate: \"\"\n  });\n\n  useEffect(() => {\n    if (initialData) {\n      setFormData({\n        name: initialData.name || \"\",\n        description: initialData.description || \"\",\n        basePrice: initialData.basePrice || \"\",\n        category: initialData.category || \"catering\",\n        unit: initialData.unit || \"per hour\",\n        isActive: initialData.isActive !== false,\n        seasonalDemand: initialData.seasonalDemand?.toString() || \"\",\n        bookingRate: initialData.bookingRate?.toString() || \"\"\n      });\n    }\n  }, [initialData]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name || !formData.basePrice) {\n      toast({\n        title: \"Required fields missing\",\n        description: \"Please provide service name and base price\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      await apiRequest(\"POST\", \"/api/services\", {\n        name: formData.name,\n        description: formData.description,\n        category: formData.category,\n        price: parseFloat(formData.basePrice),\n        unit: formData.unit,\n        isActive: formData.isActive\n      });\n\n      await queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      \n      toast({\n        title: \"Service created successfully\",\n        description: `${formData.name} has been added to your services`\n      });\n      \n      onOpenChange(false);\n      resetForm();\n    } catch (error: any) {\n      toast({\n        title: \"Failed to create service\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      description: \"\",\n      basePrice: \"\",\n      category: \"catering\",\n      unit: \"per hour\",\n      isActive: true,\n      seasonalDemand: \"\",\n      bookingRate: \"\"\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Wrench className=\"w-5 h-5\" />\n            Create New Service\n            {initialData && (\n              <Badge className=\"bg-purple-100 text-purple-800\">\n                <Sparkles className=\"w-3 h-3 mr-1\" />\n                AI Suggested\n              </Badge>\n            )}\n          </DialogTitle>\n          <DialogDescription>\n            Create a new service that can be added to packages or booked individually.\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"name\">Service Name</Label>\n              <Input\n                id=\"name\"\n                value={formData.name}\n                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                placeholder=\"Premium Catering Service\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"category\">Category</Label>\n              <Select value={formData.category} onValueChange={(value) => setFormData(prev => ({ ...prev, category: value }))}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"catering\">Catering</SelectItem>\n                  <SelectItem value=\"av-equipment\">AV Equipment</SelectItem>\n                  <SelectItem value=\"decorations\">Decorations</SelectItem>\n                  <SelectItem value=\"utilities\">Utilities</SelectItem>\n                  <SelectItem value=\"entertainment\">Entertainment</SelectItem>\n                  <SelectItem value=\"photography\">Photography</SelectItem>\n                  <SelectItem value=\"transportation\">Transportation</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"basePrice\">Base Price ($)</Label>\n              <Input\n                id=\"basePrice\"\n                type=\"number\"\n                value={formData.basePrice}\n                onChange={(e) => setFormData(prev => ({ ...prev, basePrice: e.target.value }))}\n                placeholder=\"250\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"unit\">Pricing Unit</Label>\n              <Select value={formData.unit} onValueChange={(value) => setFormData(prev => ({ ...prev, unit: value }))}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"per hour\">Per Hour</SelectItem>\n                  <SelectItem value=\"per person\">Per Person</SelectItem>\n                  <SelectItem value=\"per event\">Per Event</SelectItem>\n                  <SelectItem value=\"per day\">Per Day</SelectItem>\n                  <SelectItem value=\"per station\">Per Station</SelectItem>\n                  <SelectItem value=\"per item\">Per Item</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              placeholder=\"Detailed service description...\"\n              rows={3}\n            />\n          </div>\n\n          {/* AI Analytics Data (if provided) */}\n          {initialData?.seasonalDemand && (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-purple-50 rounded-lg\">\n              <div>\n                <Label>AI Seasonal Demand</Label>\n                <div className=\"text-sm text-purple-700 font-medium\">\n                  {initialData.seasonalDemand}% seasonal demand\n                </div>\n              </div>\n              {initialData?.bookingRate && (\n                <div>\n                  <Label>AI Booking Rate</Label>\n                  <div className=\"text-sm text-purple-700 font-medium\">\n                    {initialData.bookingRate}% booking rate\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"isActive\"\n              checked={formData.isActive}\n              onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: !!checked }))}\n            />\n            <Label htmlFor=\"isActive\">Service is active and available for booking</Label>\n          </div>\n\n          <div className=\"flex justify-end gap-3\">\n            <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Cancel\n            </Button>\n            <Button type=\"submit\">Create Service</Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8244},"client/src/components/forms/create-space-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { X, Plus } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  venueId: string;\n  venueName: string;\n}\n\nexport function CreateSpaceModal({ open, onOpenChange, venueId, venueName }: Props) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [capacity, setCapacity] = useState(\"\");\n  const [spaceType, setSpaceType] = useState(\"hall\");\n  const [features, setFeatures] = useState(\"\");\n\n  const createSpace = useMutation({\n    mutationFn: async (spaceData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/spaces\", spaceData);\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/venues\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/venues-with-spaces\"] });\n      queryClient.invalidateQueries({ queryKey: [`/api/venues/${venueId}/spaces`] });\n      toast({ title: \"Space created successfully!\" });\n      resetForm();\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to create space\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const resetForm = () => {\n    setName(\"\");\n    setDescription(\"\");\n    setCapacity(\"\");\n    setSpaceType(\"hall\");\n    setFeatures(\"\");\n  };\n\n  const handleSubmit = () => {\n    if (!name.trim() || !capacity) {\n      toast({\n        title: \"Required fields missing\",\n        description: \"Please provide space name and capacity\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    createSpace.mutate({\n      venueId,\n      name: name.trim(),\n      description: description.trim(),\n      capacity: parseInt(capacity),\n      spaceType,\n      features: features.trim()\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md p-0 max-h-[75vh] overflow-hidden\" aria-describedby=\"create-space-description\">\n        <DialogTitle className=\"sr-only\">Add Space to Venue</DialogTitle>\n        <div id=\"create-space-description\" className=\"sr-only\">\n          Create a new bookable space within the selected venue property.\n        </div>\n        \n        <div className=\"border-b border-slate-200 p-6 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Plus className=\"h-5 w-5 text-blue-600\" />\n            <div>\n              <h2 className=\"text-xl font-semibold\">Add Space</h2>\n              <p className=\"text-sm text-slate-600\">to {venueName}</p>\n            </div>\n          </div>\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => onOpenChange(false)}>\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        <div className=\"overflow-y-auto flex-1 p-4 space-y-3\">\n          <div>\n            <Label>Space Name *</Label>\n            <Input \n              value={name} \n              onChange={(e) => setName(e.target.value)} \n              className=\"mt-1\"\n              placeholder=\"e.g., Main Hall, Garden Pavilion\"\n            />\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label>Capacity *</Label>\n              <Input \n                type=\"number\" \n                value={capacity} \n                onChange={(e) => setCapacity(e.target.value)} \n                className=\"mt-1\"\n                placeholder=\"50\"\n                min=\"1\"\n              />\n            </div>\n            \n            <div>\n              <Label>Space Type</Label>\n              <Select value={spaceType} onValueChange={setSpaceType}>\n                <SelectTrigger className=\"mt-1\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"hall\">Hall</SelectItem>\n                  <SelectItem value=\"ballroom\">Ballroom</SelectItem>\n                  <SelectItem value=\"conference\">Conference Room</SelectItem>\n                  <SelectItem value=\"garden\">Garden/Outdoor</SelectItem>\n                  <SelectItem value=\"pavilion\">Pavilion</SelectItem>\n                  <SelectItem value=\"terrace\">Terrace</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div>\n            <Label className=\"text-sm\">Description</Label>\n            <Input \n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              className=\"mt-1 text-sm\"\n              placeholder=\"Describe this space...\"\n            />\n          </div>\n          \n          <div>\n            <Label className=\"text-sm\">Features & Amenities</Label>\n            <Input \n              value={features} \n              onChange={(e) => setFeatures(e.target.value)} \n              className=\"mt-1 text-sm\"\n              placeholder=\"Stage, Dance floor, Projector, etc.\"\n            />\n          </div>\n        </div>\n\n        <div className=\"border-t border-slate-200 p-4 flex justify-end gap-3\">\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n            Cancel\n          </Button>\n          <Button \n            onClick={handleSubmit}\n            disabled={createSpace.isPending || !name.trim() || !capacity}\n          >\n            {createSpace.isPending ? 'Creating...' : 'Create Space'}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6143},"client/src/components/forms/edit-customer-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { X, Edit, Save, Trash2 } from \"lucide-react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Company } from \"@shared/schema\";\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  customer: any;\n}\n\nexport function EditCustomerModal({ open, onOpenChange, customer }: Props) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Fetch companies for the dropdown\n  const { data: companies = [] } = useQuery<Company[]>({\n    queryKey: [\"/api/companies\"],\n  });\n  \n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [companyId, setCompanyId] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n\n  useEffect(() => {\n    if (customer && open) {\n      setName(customer.name || \"\");\n      setEmail(customer.email || \"\");\n      setPhone(customer.phone || \"\");\n      setCompanyId(customer.companyId || \"\");\n      setStatus(customer.status || \"lead\");\n      setNotes(customer.notes || \"\");\n    }\n  }, [customer, open]);\n\n  const updateCustomer = useMutation({\n    mutationFn: async (data: any) => {\n      // Handle \"none\" company selection by setting companyId to null\n      const submitData = {\n        ...data,\n        companyId: data.companyId === \"none\" ? null : data.companyId\n      };\n      return await apiRequest(\"PATCH\", `/api/customers/${customer.id}`, submitData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      toast({ title: \"Customer updated successfully!\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to update customer\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const deleteCustomer = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"DELETE\", `/api/customers/${customer.id}`, {});\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      toast({ title: \"Customer deleted successfully!\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to delete customer\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const handleSave = () => {\n    updateCustomer.mutate({ name, email, phone, companyId: companyId || null, status, notes });\n  };\n\n  const handleDelete = () => {\n    if (confirm(\"Are you sure you want to delete this customer? This action cannot be undone.\")) {\n      deleteCustomer.mutate();\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-lg p-0\" aria-describedby=\"edit-customer-description\">\n        <DialogTitle className=\"sr-only\">Edit Customer</DialogTitle>\n        <div id=\"edit-customer-description\" className=\"sr-only\">\n          Edit customer information including name, contact details, and company information.\n        </div>\n        \n        <div className=\"border-b border-slate-200 p-6 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Edit className=\"h-5 w-5 text-blue-600\" />\n            <h2 className=\"text-xl font-semibold\">Edit Customer</h2>\n          </div>\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => onOpenChange(false)}>\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        <div className=\"p-6 space-y-4\">\n          <div>\n            <Label>Name *</Label>\n            <Input value={name} onChange={(e) => setName(e.target.value)} className=\"mt-1\" />\n          </div>\n          \n          <div>\n            <Label>Email *</Label>\n            <Input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} className=\"mt-1\" />\n          </div>\n          \n          <div>\n            <Label>Phone</Label>\n            <Input value={phone} onChange={(e) => setPhone(e.target.value)} className=\"mt-1\" />\n          </div>\n          \n          <div>\n            <Label>Company (Optional)</Label>\n            <Select value={companyId} onValueChange={setCompanyId}>\n              <SelectTrigger className=\"mt-1\">\n                <SelectValue placeholder=\"Select a company\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"none\">No Company</SelectItem>\n                {companies.map((company) => (\n                  <SelectItem key={company.id} value={company.id}>\n                    {company.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label>Status</Label>\n            <Select value={status} onValueChange={setStatus}>\n              <SelectTrigger className=\"mt-1\">\n                <SelectValue placeholder=\"Select status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"lead\">Lead</SelectItem>\n                <SelectItem value=\"customer\">Customer</SelectItem>\n                <SelectItem value=\"inactive\">Inactive</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label>Notes (Optional)</Label>\n            <Textarea\n              value={notes}\n              onChange={(e) => setNotes(e.target.value)}\n              className=\"mt-1\"\n              placeholder=\"Enter any notes about this customer\"\n              rows={3}\n            />\n          </div>\n        </div>\n\n        <div className=\"border-t border-slate-200 p-6 flex justify-between\">\n          <Button variant=\"destructive\" onClick={handleDelete} disabled={deleteCustomer.isPending}>\n            <Trash2 className=\"h-4 w-4 mr-2\" />\n            {deleteCustomer.isPending ? 'Deleting...' : 'Delete'}\n          </Button>\n          \n          <div className=\"flex gap-3\">\n            <Button variant=\"outline\" onClick={() => onOpenChange(false)}>Cancel</Button>\n            <Button onClick={handleSave} disabled={updateCustomer.isPending || !name.trim() || !email.trim()}>\n              <Save className=\"h-4 w-4 mr-2\" />\n              {updateCustomer.isPending ? 'Saving...' : 'Save Changes'}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6918},"client/src/components/forms/edit-event-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { X, Edit, Save, Trash2 } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  booking: any;\n}\n\nexport function EditEventModal({ open, onOpenChange, booking }: Props) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Form state\n  const [eventName, setEventName] = useState(\"\");\n  const [guestCount, setGuestCount] = useState(1);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [status, setStatus] = useState(\"inquiry\");\n  const [notes, setNotes] = useState(\"\");\n\n  // Data queries\n  const { data: customers = [] } = useQuery({ queryKey: [\"/api/customers\"] });\n  const { data: venues = [] } = useQuery({ queryKey: [\"/api/venues-with-spaces\"] });\n\n  // Initialize form with booking data\n  useEffect(() => {\n    if (booking && open) {\n      setEventName(booking.eventName || \"\");\n      setGuestCount(booking.guestCount || 1);\n      setStartTime(booking.startTime || \"\");\n      setEndTime(booking.endTime || \"\");\n      setStatus(booking.status || \"inquiry\");\n      setNotes(booking.notes || \"\");\n    }\n  }, [booking, open]);\n\n  const selectedCustomer = customers.find((c: any) => c.id === booking?.customerId);\n  const selectedVenue = venues.find((v: any) => v.id === booking?.venueId);\n\n  // Update booking mutation\n  const updateBooking = useMutation({\n    mutationFn: async (bookingData: any) => {\n      const response = await apiRequest(\"PATCH\", `/api/bookings/${booking.id}`, bookingData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/metrics\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      toast({ title: \"Event updated successfully!\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to update event\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Delete booking mutation\n  const deleteBooking = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"DELETE\", `/api/bookings/${booking.id}`, {});\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/metrics\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      toast({ title: \"Event deleted successfully!\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to delete event\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleSave = () => {\n    const updates = {\n      eventName,\n      guestCount,\n      startTime,\n      endTime,\n      status,\n      notes\n    };\n\n    updateBooking.mutate(updates);\n  };\n\n  const handleDelete = () => {\n    if (confirm(\"Are you sure you want to delete this event? This action cannot be undone.\")) {\n      deleteBooking.mutate();\n    }\n  };\n\n  if (!booking) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl p-0 overflow-hidden\" aria-describedby=\"edit-event-description\">\n        <DialogTitle className=\"sr-only\">Edit Event</DialogTitle>\n        <div id=\"edit-event-description\" className=\"sr-only\">\n          Edit event booking details, including name, schedule, guest count, and status.\n        </div>\n        \n        {/* Header */}\n        <div className=\"border-b border-slate-200 p-6 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Edit className=\"h-5 w-5 text-blue-600\" />\n            <h2 className=\"text-xl font-semibold\">Edit Event</h2>\n          </div>\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => onOpenChange(false)}>\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6 space-y-6\">\n          {/* Event Details Section */}\n          <div>\n            <h3 className=\"text-lg font-medium mb-4\">Event Details</h3>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"col-span-2\">\n                <Label className=\"text-base font-medium\">Event Name</Label>\n                <Input\n                  value={eventName}\n                  onChange={(e) => setEventName(e.target.value)}\n                  className=\"mt-2\"\n                />\n              </div>\n              \n              <div>\n                <Label className=\"text-base font-medium\">Guest Count</Label>\n                <Input\n                  type=\"number\"\n                  value={guestCount}\n                  onChange={(e) => setGuestCount(parseInt(e.target.value) || 1)}\n                  min=\"1\"\n                  className=\"mt-2\"\n                />\n              </div>\n\n              <div>\n                <Label className=\"text-base font-medium\">Status</Label>\n                <Select value={status} onValueChange={setStatus}>\n                  <SelectTrigger className=\"mt-2\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"inquiry\">Lead</SelectItem>\n                    <SelectItem value=\"confirmed\">Booked</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                    <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          {/* Schedule Section */}\n          <div>\n            <h3 className=\"text-lg font-medium mb-4\">Schedule</h3>\n            <div className=\"bg-slate-50 p-4 rounded-lg\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <span className=\"font-medium\">\n                  {booking.eventDate ? format(new Date(booking.eventDate), 'EEEE, MMMM d, yyyy') : 'Date not set'}\n                </span>\n                <Badge variant=\"secondary\">Fixed Date</Badge>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm\">Start Time</Label>\n                  <Select value={startTime} onValueChange={setStartTime}>\n                    <SelectTrigger className=\"mt-1\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Array.from({length: 24}, (_, i) => {\n                        const hour = i.toString().padStart(2, '0');\n                        return (\n                          <SelectItem key={`${hour}:00`} value={`${hour}:00`}>\n                            {i === 0 ? '12:00 AM' : i <= 12 ? `${i}:00 ${i === 12 ? 'PM' : 'AM'}` : `${i-12}:00 PM`}\n                          </SelectItem>\n                        );\n                      })}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label className=\"text-sm\">End Time</Label>\n                  <Select value={endTime} onValueChange={setEndTime}>\n                    <SelectTrigger className=\"mt-1\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Array.from({length: 24}, (_, i) => {\n                        const hour = i.toString().padStart(2, '0');\n                        return (\n                          <SelectItem key={`${hour}:00`} value={`${hour}:00`}>\n                            {i === 0 ? '12:00 AM' : i <= 12 ? `${i}:00 ${i === 12 ? 'PM' : 'AM'}` : `${i-12}:00 PM`}\n                          </SelectItem>\n                        );\n                      })}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Venue & Customer Info */}\n          <div className=\"grid grid-cols-2 gap-6\">\n            <div>\n              <h3 className=\"text-lg font-medium mb-3\">Venue Information</h3>\n              <div className=\"bg-slate-50 p-4 rounded-lg\">\n                <div className=\"font-medium\">{selectedVenue?.name || 'No venue selected'}</div>\n                <div className=\"text-sm text-slate-600 mt-1\">\n                  Space: {selectedVenue?.spaces?.[0]?.name || 'Main Hall'}\n                </div>\n                <div className=\"text-xs text-slate-500 mt-1\">\n                  Capacity: {selectedVenue?.capacity || 'N/A'}\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-medium mb-3\">Customer Information</h3>\n              <div className=\"bg-slate-50 p-4 rounded-lg\">\n                <div className=\"font-medium\">{selectedCustomer?.name || 'No customer selected'}</div>\n                <div className=\"text-sm text-slate-600 mt-1\">{selectedCustomer?.email || ''}</div>\n                <div className=\"text-xs text-slate-500 mt-1\">\n                  Phone: {selectedCustomer?.phone || 'N/A'}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Notes Section */}\n          <div>\n            <Label className=\"text-base font-medium\">Notes</Label>\n            <textarea\n              value={notes}\n              onChange={(e) => setNotes(e.target.value)}\n              className=\"mt-2 w-full p-3 border border-slate-200 rounded-lg resize-none h-20 text-sm\"\n              placeholder=\"Add any additional notes or requirements...\"\n            />\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"border-t border-slate-200 p-6 flex justify-between\">\n          <Button \n            variant=\"destructive\" \n            onClick={handleDelete}\n            disabled={deleteBooking.isPending}\n            className=\"flex items-center gap-2\"\n          >\n            <Trash2 className=\"h-4 w-4\" />\n            {deleteBooking.isPending ? 'Deleting...' : 'Delete Event'}\n          </Button>\n          \n          <div className=\"flex gap-3\">\n            <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSave}\n              disabled={updateBooking.isPending || !eventName.trim()}\n              className=\"flex items-center gap-2\"\n            >\n              <Save className=\"h-4 w-4\" />\n              {updateBooking.isPending ? 'Saving...' : 'Save Changes'}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11441},"client/src/components/forms/edit-service-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { X, Edit, Save, Trash2 } from \"lucide-react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  service: any;\n}\n\nexport function EditServiceModal({ open, onOpenChange, service }: Props) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [pricingModel, setPricingModel] = useState(\"\");\n  const [taxFeeSelection, setTaxFeeSelection] = useState({\n    enabledTaxIds: [] as string[],\n    enabledFeeIds: [] as string[]\n  });\n\n  // Fetch tax settings\n  const { data: taxSettings = [] } = useQuery({ queryKey: [\"/api/tax-settings\"] });\n\n  useEffect(() => {\n    if (service && open) {\n      setName(service.name || \"\");\n      setDescription(service.description || \"\");\n      setPrice(service.price?.toString() || \"\");\n      setCategory(service.category || \"\");\n      setPricingModel(service.pricingModel || \"fixed\");\n      setTaxFeeSelection({\n        enabledTaxIds: service.enabledTaxIds || [],\n        enabledFeeIds: service.enabledFeeIds || []\n      });\n    }\n  }, [service, open]);\n\n  const updateService = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"PATCH\", `/api/services/${service.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      toast({ title: \"Service updated successfully!\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to update service\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const deleteService = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"DELETE\", `/api/services/${service.id}`, {});\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      toast({ title: \"Service deleted successfully!\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to delete service\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  // Calculate live pricing with taxes and fees\n  const calculateServiceTotal = () => {\n    const basePrice = parseFloat(price) || 0;\n    if (basePrice === 0) return 0;\n    \n    let total = basePrice;\n    \n    // Apply fees first\n    taxFeeSelection.enabledFeeIds.forEach(feeId => {\n      const fee = (taxSettings as any[]).find((t: any) => t.id === feeId);\n      if (fee) {\n        if (fee.calculation === 'percentage') {\n          total += (basePrice * parseFloat(fee.value)) / 100;\n        } else {\n          total += parseFloat(fee.value);\n        }\n      }\n    });\n    \n    // Apply taxes on the total including fees\n    taxFeeSelection.enabledTaxIds.forEach(taxId => {\n      const tax = (taxSettings as any[]).find((t: any) => t.id === taxId);\n      if (tax) {\n        total += (total * parseFloat(tax.value)) / 100;\n      }\n    });\n    \n    return total;\n  };\n\n  const handleSave = () => {\n    updateService.mutate({\n      name,\n      description,\n      price: parseFloat(price) || 0,\n      category,\n      pricingModel,\n      enabledTaxIds: taxFeeSelection.enabledTaxIds,\n      enabledFeeIds: taxFeeSelection.enabledFeeIds\n    });\n  };\n\n  const handleDelete = () => {\n    if (confirm(\"Are you sure you want to delete this service? This may affect existing packages and bookings.\")) {\n      deleteService.mutate();\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-lg p-0\" aria-describedby=\"edit-service-description\">\n        <DialogTitle className=\"sr-only\">Edit Service</DialogTitle>\n        <div id=\"edit-service-description\" className=\"sr-only\">\n          Edit service information including name, pricing, category, and pricing model.\n        </div>\n        \n        <div className=\"border-b border-slate-200 p-6\">\n          <div className=\"flex items-center gap-3\">\n            <Edit className=\"h-5 w-5 text-blue-600\" />\n            <h2 className=\"text-xl font-semibold\">Edit Service</h2>\n          </div>\n        </div>\n\n        <div className=\"p-6 space-y-4\">\n          <div>\n            <Label>Service Name *</Label>\n            <Input value={name} onChange={(e) => setName(e.target.value)} className=\"mt-1\" />\n          </div>\n          \n          <div>\n            <Label>Description</Label>\n            <textarea\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              className=\"w-full p-3 border rounded-md mt-1 h-20 resize-none text-sm\"\n              placeholder=\"Describe this service...\"\n            />\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label>Price *</Label>\n              <Input \n                type=\"number\" \n                step=\"0.01\"\n                value={price} \n                onChange={(e) => setPrice(e.target.value)} \n                className=\"mt-1\"\n                placeholder=\"0.00\"\n              />\n            </div>\n            \n            <div>\n              <Label>Pricing Model</Label>\n              <Select value={pricingModel} onValueChange={setPricingModel}>\n                <SelectTrigger className=\"mt-1\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"fixed\">Fixed Price</SelectItem>\n                  <SelectItem value=\"per_person\">Per Person</SelectItem>\n                  <SelectItem value=\"per_hour\">Per Hour</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div>\n            <Label>Category</Label>\n            <Select value={category} onValueChange={setCategory}>\n              <SelectTrigger className=\"mt-1\">\n                <SelectValue placeholder=\"Select category\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"catering\">Catering</SelectItem>\n                <SelectItem value=\"entertainment\">Entertainment</SelectItem>\n                <SelectItem value=\"decor\">Decor</SelectItem>\n                <SelectItem value=\"photography\">Photography</SelectItem>\n                <SelectItem value=\"equipment\">Equipment</SelectItem>\n                <SelectItem value=\"additional\">Additional Services</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Tax and Fee Selection */}\n          {(taxSettings as any[])?.length > 0 && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium\">Apply Taxes & Fees</Label>\n                <p className=\"text-xs text-slate-600 mt-1\">Select which taxes and fees apply to this service by default</p>\n              </div>\n              \n              <div className=\"grid grid-cols-1 gap-3\">\n                {(taxSettings as any[]).map((setting: any) => (\n                  <label key={setting.id} className=\"flex items-center gap-3 p-3 border rounded-lg hover:bg-slate-50 cursor-pointer\">\n                    <Checkbox \n                      checked={\n                        setting.type === 'tax' \n                          ? taxFeeSelection.enabledTaxIds.includes(setting.id)\n                          : taxFeeSelection.enabledFeeIds.includes(setting.id)\n                      }\n                      onCheckedChange={(checked) => {\n                        if (setting.type === 'tax') {\n                          setTaxFeeSelection(prev => ({\n                            ...prev,\n                            enabledTaxIds: checked \n                              ? [...prev.enabledTaxIds, setting.id]\n                              : prev.enabledTaxIds.filter(id => id !== setting.id)\n                          }));\n                        } else {\n                          setTaxFeeSelection(prev => ({\n                            ...prev,\n                            enabledFeeIds: checked \n                              ? [...prev.enabledFeeIds, setting.id]\n                              : prev.enabledFeeIds.filter(id => id !== setting.id)\n                          }));\n                        }\n                      }}\n                    />\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-sm\">{setting.name}</div>\n                      <div className=\"text-xs text-slate-600\">\n                        {setting.type === 'tax' ? 'Tax' : 'Fee'} • {setting.value}%\n                        {setting.calculation === 'fixed' && ' (Fixed)'}\n                      </div>\n                    </div>\n                  </label>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Live Pricing Preview */}\n          {price && parseFloat(price) > 0 && (\n            <div className=\"bg-slate-50 border rounded-lg p-4\">\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-slate-600\">Base Price:</span>\n                  <span className=\"text-green-600 font-medium\">${parseFloat(price).toFixed(2)}</span>\n                </div>\n                \n                {/* Show individual fees */}\n                {taxFeeSelection.enabledFeeIds.map(feeId => {\n                  const fee = (taxSettings as any[]).find((t: any) => t.id === feeId);\n                  if (!fee) return null;\n                  const basePrice = parseFloat(price) || 0;\n                  const feeAmount = fee.calculation === 'percentage' \n                    ? (basePrice * parseFloat(fee.value)) / 100\n                    : parseFloat(fee.value);\n                  return (\n                    <div key={feeId} className=\"flex justify-between text-blue-600\">\n                      <span className=\"pl-2\">+ {fee.name}:</span>\n                      <span>+${feeAmount.toFixed(2)}</span>\n                    </div>\n                  );\n                })}\n                \n                {/* Show individual taxes */}\n                {taxFeeSelection.enabledTaxIds.map(taxId => {\n                  const tax = (taxSettings as any[]).find((t: any) => t.id === taxId);\n                  if (!tax) return null;\n                  const basePrice = parseFloat(price) || 0;\n                  let subtotalWithFees = basePrice;\n                  \n                  // Add fees to subtotal for tax calculation\n                  taxFeeSelection.enabledFeeIds.forEach(feeId => {\n                    const fee = (taxSettings as any[]).find((t: any) => t.id === feeId);\n                    if (fee) {\n                      if (fee.calculation === 'percentage') {\n                        subtotalWithFees += (basePrice * parseFloat(fee.value)) / 100;\n                      } else {\n                        subtotalWithFees += parseFloat(fee.value);\n                      }\n                    }\n                  });\n                  \n                  const taxAmount = (subtotalWithFees * parseFloat(tax.value)) / 100;\n                  return (\n                    <div key={taxId} className=\"flex justify-between text-purple-600\">\n                      <span className=\"pl-2\">+ {tax.name}:</span>\n                      <span>+${taxAmount.toFixed(2)}</span>\n                    </div>\n                  );\n                })}\n                \n                <div className=\"border-t pt-2 mt-2\">\n                  <div className=\"flex justify-between font-semibold\">\n                    <span>Total with Taxes & Fees:</span>\n                    <span className=\"text-blue-700\">${calculateServiceTotal().toFixed(2)}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"border-t border-slate-200 p-6 flex justify-between\">\n          <Button variant=\"destructive\" onClick={handleDelete} disabled={deleteService.isPending}>\n            <Trash2 className=\"h-4 w-4 mr-2\" />\n            {deleteService.isPending ? 'Deleting...' : 'Delete Service'}\n          </Button>\n          \n          <div className=\"flex gap-3\">\n            <Button variant=\"outline\" onClick={() => onOpenChange(false)}>Cancel</Button>\n            <Button onClick={handleSave} disabled={updateService.isPending || !name.trim() || !price}>\n              <Save className=\"h-4 w-4 mr-2\" />\n              {updateService.isPending ? 'Saving...' : 'Save Changes'}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":13339},"client/src/components/forms/event-edit-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { \n  X, \n  User, \n  Users, \n  Calendar, \n  Clock, \n  MapPin, \n  DollarSign, \n  Trash2, \n  MessageSquare, \n  Edit3, \n  Phone,\n  Mail,\n  CalendarIcon,\n  Plus,\n  Minus,\n  Save\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  booking: any;\n}\n\nexport function EventEditModal({ open, onOpenChange, booking }: Props) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [activeTab, setActiveTab] = useState(\"edit\");\n  \n  // Editable fields\n  const [eventName, setEventName] = useState(\"\");\n  const [eventType, setEventType] = useState(\"\");\n  const [eventDate, setEventDate] = useState<Date | undefined>(undefined);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [guestCount, setGuestCount] = useState(1);\n  const [selectedVenue, setSelectedVenue] = useState(\"\");\n  const [selectedSpace, setSelectedSpace] = useState(\"\");\n  const [selectedPackage, setSelectedPackage] = useState(\"\");\n  const [selectedServices, setSelectedServices] = useState<string[]>([]);\n  const [selectedCustomer, setSelectedCustomer] = useState(\"\");\n  const [eventStatus, setEventStatus] = useState(\"\");\n  const [paymentStatus, setPaymentStatus] = useState(\"unpaid\");\n  const [totalAmount, setTotalAmount] = useState(\"\");\n  const [depositAmount, setDepositAmount] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n  \n  // Communication\n  const [showContactModal, setShowContactModal] = useState(false);\n  const [contactMethod, setContactMethod] = useState(\"email\");\n  const [contactMessage, setContactMessage] = useState(\"\");\n\n  // Data queries\n  const { data: venues = [] } = useQuery({ queryKey: [\"/api/venues-with-spaces\"] });\n  const { data: packages = [] } = useQuery({ queryKey: [\"/api/packages\"] });\n  const { data: services = [] } = useQuery({ queryKey: [\"/api/services\"] });\n  const { data: customers = [] } = useQuery({ queryKey: [\"/api/customers\"] });\n\n  // Initialize form data when booking changes\n  useEffect(() => {\n    if (booking) {\n      setEventName(booking.eventName || \"\");\n      setEventType(booking.eventType || \"\");\n      setEventDate(booking.eventDate ? new Date(booking.eventDate) : undefined);\n      setStartTime(booking.startTime || \"\");\n      setEndTime(booking.endTime || \"\");\n      setGuestCount(booking.guestCount || 1);\n      setSelectedVenue(booking.venueId || \"\");\n      setSelectedSpace(booking.spaceId || \"\");\n      setSelectedPackage(booking.packageId || \"\");\n      setSelectedServices(booking.serviceIds || []);\n      setSelectedCustomer(booking.customerId || \"\");\n      setEventStatus(booking.status || \"confirmed\");\n      setPaymentStatus(booking.depositPaid ? \"paid\" : \"unpaid\");\n      setTotalAmount(booking.totalAmount || \"\");\n      setDepositAmount(booking.depositAmount || \"\");\n      setNotes(booking.notes || \"\");\n    }\n  }, [booking]);\n\n  const selectedVenueData = venues.find((v: any) => v.id === selectedVenue);\n  const selectedPackageData = packages.find((p: any) => p.id === selectedPackage);\n  const selectedCustomerData = customers.find((c: any) => c.id === selectedCustomer);\n\n  // Calculate pricing\n  const packagePrice = selectedPackageData ? parseFloat(selectedPackageData.price) * guestCount : 0;\n  const servicesPrice = selectedServices.reduce((total, serviceId) => {\n    const service = services.find((s: any) => s.id === serviceId);\n    return total + (service ? parseFloat(service.price) * guestCount : 0);\n  }, 0);\n  const calculatedTotal = packagePrice + servicesPrice;\n\n  const updateBooking = useMutation({\n    mutationFn: async (updates: any) => {\n      const response = await apiRequest(\"PATCH\", `/api/bookings/${booking?.id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      toast({ title: \"Event updated successfully!\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to update event\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const deleteBooking = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"DELETE\", `/api/bookings/${booking?.id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      toast({ title: \"Event cancelled successfully!\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to cancel event\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const handleSave = () => {\n    const updates = {\n      eventName,\n      eventType,\n      eventDate,\n      startTime,\n      endTime,\n      guestCount,\n      venueId: selectedVenue,\n      spaceId: selectedSpace,\n      packageId: selectedPackage,\n      serviceIds: selectedServices,\n      customerId: selectedCustomer,\n      status: eventStatus,\n      depositPaid: paymentStatus === \"paid\",\n      totalAmount: totalAmount || calculatedTotal.toString(),\n      depositAmount,\n      notes,\n    };\n    updateBooking.mutate(updates);\n  };\n\n  const handleServiceToggle = (serviceId: string) => {\n    setSelectedServices(prev => \n      prev.includes(serviceId) \n        ? prev.filter(id => id !== serviceId)\n        : [...prev, serviceId]\n    );\n  };\n\n  const handleContactSubmit = () => {\n    setTimeout(() => {\n      toast({ title: `${contactMethod === 'email' ? 'Email' : 'SMS'} sent successfully!` });\n      setShowContactModal(false);\n      setContactMessage(\"\");\n    }, 1000);\n  };\n\n  const handleDeleteClick = () => {\n    if (confirm(\"Are you sure you want to cancel this event? This action cannot be undone.\")) {\n      deleteBooking.mutate();\n    }\n  };\n\n  if (!booking) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <DialogTitle className=\"text-2xl font-bold\">Edit Event: {booking.eventName}</DialogTitle>\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => onOpenChange(false)}>\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"edit\">Edit Details</TabsTrigger>\n            <TabsTrigger value=\"timeline\">Timeline & Communication</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"edit\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Left Column - Event Details */}\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Event Information</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label>Event Name</Label>\n                        <Input \n                          value={eventName} \n                          onChange={(e) => setEventName(e.target.value)}\n                          placeholder=\"Event name\"\n                        />\n                      </div>\n                      <div>\n                        <Label>Event Type</Label>\n                        <Select value={eventType} onValueChange={setEventType}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select type\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"wedding\">Wedding</SelectItem>\n                            <SelectItem value=\"corporate\">Corporate</SelectItem>\n                            <SelectItem value=\"birthday\">Birthday</SelectItem>\n                            <SelectItem value=\"conference\">Conference</SelectItem>\n                            <SelectItem value=\"other\">Other</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <div>\n                        <Label>Event Date</Label>\n                        <Popover>\n                          <PopoverTrigger asChild>\n                            <Button variant=\"outline\" className={cn(\"w-full justify-start text-left font-normal\", !eventDate && \"text-muted-foreground\")}>\n                              <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                              {eventDate ? format(eventDate, \"PPP\") : \"Pick date\"}\n                            </Button>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-auto p-0\">\n                            <CalendarComponent mode=\"single\" selected={eventDate} onSelect={setEventDate} initialFocus />\n                          </PopoverContent>\n                        </Popover>\n                      </div>\n                      <div>\n                        <Label>Start Time</Label>\n                        <Input \n                          type=\"time\" \n                          value={startTime} \n                          onChange={(e) => setStartTime(e.target.value)}\n                        />\n                      </div>\n                      <div>\n                        <Label>End Time</Label>\n                        <Input \n                          type=\"time\" \n                          value={endTime} \n                          onChange={(e) => setEndTime(e.target.value)}\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label>Guest Count</Label>\n                        <div className=\"flex items-center gap-2\">\n                          <Button \n                            type=\"button\" \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => setGuestCount(Math.max(1, guestCount - 1))}\n                          >\n                            <Minus className=\"h-4 w-4\" />\n                          </Button>\n                          <Input \n                            type=\"number\" \n                            value={guestCount} \n                            onChange={(e) => setGuestCount(parseInt(e.target.value) || 1)}\n                            className=\"text-center\"\n                            min=\"1\"\n                          />\n                          <Button \n                            type=\"button\" \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => setGuestCount(guestCount + 1)}\n                          >\n                            <Plus className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <div>\n                        <Label>Customer</Label>\n                        <Select value={selectedCustomer} onValueChange={setSelectedCustomer}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select customer\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {customers.map((customer: any) => (\n                              <SelectItem key={customer.id} value={customer.id}>\n                                {customer.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label>Venue & Space</Label>\n                      <Select value={selectedVenue} onValueChange={setSelectedVenue}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select venue\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {venues.map((venue: any) => (\n                            <SelectItem key={venue.id} value={venue.id}>\n                              {venue.name} - {venue.spaces?.[0]?.name || 'Main Hall'}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label>Event Status</Label>\n                        <Select value={eventStatus} onValueChange={setEventStatus}>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"inquiry\">Inquiry</SelectItem>\n                            <SelectItem value=\"pending\">Pending</SelectItem>\n                            <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                            <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label>Payment Status</Label>\n                        <Select value={paymentStatus} onValueChange={setPaymentStatus}>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"unpaid\">Unpaid</SelectItem>\n                            <SelectItem value=\"paid\">Paid</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Right Column - Packages & Services */}\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Package Selection</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {packages.map((pkg: any) => (\n                        <div \n                          key={pkg.id}\n                          className={cn(\n                            \"border rounded-lg p-4 cursor-pointer transition-colors\",\n                            selectedPackage === pkg.id \n                              ? \"border-blue-500 bg-blue-50\" \n                              : \"border-gray-200 hover:border-gray-300\"\n                          )}\n                          onClick={() => setSelectedPackage(pkg.id)}\n                        >\n                          <div className=\"flex justify-between items-start\">\n                            <div>\n                              <h4 className=\"font-semibold\">{pkg.name}</h4>\n                              <p className=\"text-sm text-gray-600\">{pkg.description}</p>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"font-semibold\">${pkg.price}/person</div>\n                              <div className=\"text-sm text-gray-500\">\n                                ${(parseFloat(pkg.price) * guestCount).toLocaleString()} total\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Add-On Services</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {services.map((service: any) => (\n                        <div key={service.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <Checkbox\n                              checked={selectedServices.includes(service.id)}\n                              onCheckedChange={() => handleServiceToggle(service.id)}\n                            />\n                            <div>\n                              <div className=\"font-medium\">{service.name}</div>\n                              <div className=\"text-sm text-gray-600\">{service.description}</div>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"font-semibold\">${service.price}/person</div>\n                            <div className=\"text-sm text-gray-500\">\n                              ${(parseFloat(service.price) * guestCount).toLocaleString()} total\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Pricing</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label>Total Amount</Label>\n                          <Input \n                            value={totalAmount} \n                            onChange={(e) => setTotalAmount(e.target.value)}\n                            placeholder={`$${calculatedTotal.toLocaleString()}`}\n                          />\n                        </div>\n                        <div>\n                          <Label>Deposit Amount</Label>\n                          <Input \n                            value={depositAmount} \n                            onChange={(e) => setDepositAmount(e.target.value)}\n                            placeholder=\"Enter deposit\"\n                          />\n                        </div>\n                      </div>\n                      <div className=\"bg-gray-50 p-4 rounded-lg\">\n                        <div className=\"flex justify-between\">\n                          <span>Calculated Total:</span>\n                          <span className=\"font-semibold\">${calculatedTotal.toLocaleString()}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n\n            {/* Internal Notes */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Internal Notes</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Textarea\n                  value={notes}\n                  onChange={(e) => setNotes(e.target.value)}\n                  placeholder=\"Add internal notes about this event...\"\n                  className=\"min-h-24\"\n                />\n              </CardContent>\n            </Card>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-between\">\n              <Button variant=\"destructive\" onClick={handleDeleteClick} disabled={deleteBooking.isPending}>\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                Cancel Event\n              </Button>\n              <div className=\"flex gap-2\">\n                <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n                  Cancel\n                </Button>\n                <Button onClick={handleSave} disabled={updateBooking.isPending}>\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  Save Changes\n                </Button>\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"timeline\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Timeline */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Event Timeline</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2\"></div>\n                      <div>\n                        <div className=\"font-medium\">Event inquiry received</div>\n                        <div className=\"text-sm text-gray-600\">Customer submitted initial request</div>\n                        <div className=\"text-xs text-gray-500 mt-1\">3 days ago</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\n                      <div>\n                        <div className=\"font-medium\">Proposal sent</div>\n                        <div className=\"text-sm text-gray-600\">Event proposal with pricing sent to customer</div>\n                        <div className=\"text-xs text-gray-500 mt-1\">2 days ago</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\n                      <div>\n                        <div className=\"font-medium\">Booking confirmed</div>\n                        <div className=\"text-sm text-gray-600\">Customer accepted proposal and confirmed booking</div>\n                        <div className=\"text-xs text-gray-500 mt-1\">1 day ago</div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Communication */}\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Communication</CardTitle>\n                    <Button size=\"sm\" onClick={() => setShowContactModal(true)}>\n                      <MessageSquare className=\"w-4 h-4 mr-2\" />\n                      Contact Customer\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"border-l-4 border-blue-500 bg-blue-50 p-3 rounded-r\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"font-medium\">Event booking confirmed</span>\n                        <span className=\"text-gray-500\">2 hours ago</span>\n                      </div>\n                      <p className=\"text-gray-600 mt-1\">Booking details sent to customer via email</p>\n                    </div>\n                    <div className=\"border-l-4 border-green-500 bg-green-50 p-3 rounded-r\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"font-medium\">Deposit received</span>\n                        <span className=\"text-gray-500\">1 day ago</span>\n                      </div>\n                      <p className=\"text-gray-600 mt-1\">Payment processed successfully</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        {/* Contact Modal */}\n        {showContactModal && (\n          <Dialog open={showContactModal} onOpenChange={setShowContactModal}>\n            <DialogContent className=\"max-w-md\">\n              <DialogTitle>Contact Customer</DialogTitle>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Contact Method</Label>\n                  <Select value={contactMethod} onValueChange={setContactMethod}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"email\">\n                        <div className=\"flex items-center\">\n                          <Mail className=\"w-4 h-4 mr-2\" />\n                          Email\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"sms\">\n                        <div className=\"flex items-center\">\n                          <Phone className=\"w-4 h-4 mr-2\" />\n                          SMS\n                        </div>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label>Message</Label>\n                  <Textarea\n                    value={contactMessage}\n                    onChange={(e) => setContactMessage(e.target.value)}\n                    placeholder={`Write your ${contactMethod} message...`}\n                    className=\"min-h-24\"\n                  />\n                </div>\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setShowContactModal(false)}>\n                    Cancel\n                  </Button>\n                  <Button onClick={handleContactSubmit}>\n                    Send {contactMethod === 'email' ? 'Email' : 'SMS'}\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":27141},"client/src/components/forms/multi-date-event-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\n\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  ChevronLeft, \n  ChevronRight, \n  Plus, \n  Minus, \n  Check, \n  User, \n  X, \n  Calendar as CalendarIcon, \n  MapPin, \n  Users as UsersIcon, \n  Clock,\n  Package,\n  DollarSign,\n  ArrowRight\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface MultiDateEventModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst eventFormSchema = z.object({\n  eventName: z.string().min(1, \"Event name is required\"),\n  customerId: z.string().optional(),\n  eventType: z.string().min(1, \"Event type is required\"),\n  guestCount: z.number().min(1, \"Guest count must be at least 1\"),\n  venueId: z.string().min(1, \"Venue is required\"),\n  startTime: z.string().min(1, \"Start time is required\"),\n  endTime: z.string().min(1, \"End time is required\"),\n  specialRequests: z.string().optional(),\n  selectedDates: z.array(z.date()).min(1, \"At least one date must be selected\"),\n  packageId: z.string().optional(),\n  additionalServices: z.array(z.string()).optional()\n});\n\ntype EventFormData = z.infer<typeof eventFormSchema>;\n\nexport function MultiDateEventModal({ open, onOpenChange }: MultiDateEventModalProps) {\n  const { toast } = useToast();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [selectedDates, setSelectedDates] = useState<Date[]>([]);\n  const [selectedPackage, setSelectedPackage] = useState(\"\");\n  const [selectedServices, setSelectedServices] = useState<string[]>([]);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [totalCost, setTotalCost] = useState(0);\n\n  const { data: venues } = useQuery({\n    queryKey: [\"/api/venues\"],\n  });\n\n  const { data: customers } = useQuery({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const { data: packages = [] } = useQuery({\n    queryKey: [\"/api/packages\"],\n  });\n\n  const { data: services = [] } = useQuery({\n    queryKey: [\"/api/services\"],\n  });\n\n  const form = useForm<EventFormData>({\n    resolver: zodResolver(eventFormSchema),\n    defaultValues: {\n      eventName: \"\",\n      eventType: \"\",\n      guestCount: 50,\n      venueId: \"\",\n      startTime: \"14:00\",\n      endTime: \"18:00\",\n      specialRequests: \"\",\n      selectedDates: [],\n      packageId: \"\",\n      additionalServices: []\n    },\n  });\n\n  const eventTypes = [\n    \"Wedding\", \"Corporate Event\", \"Birthday Party\", \"Conference\", \n    \"Workshop\", \"Gala\", \"Fundraiser\", \"Product Launch\", \"Other\"\n  ];\n\n  const timeSlots = [\n    \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\", \n    \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\"\n  ];\n\n  // Multi-date selection handler\n  const handleDateSelect = (date: Date | undefined) => {\n    if (!date) return;\n    \n    const dateExists = selectedDates.find(d => \n      d.toDateString() === date.toDateString()\n    );\n    \n    if (dateExists) {\n      const newDates = selectedDates.filter(d => \n        d.toDateString() !== date.toDateString()\n      );\n      setSelectedDates(newDates);\n      form.setValue('selectedDates', newDates);\n    } else {\n      const newDates = [...selectedDates, date].sort((a, b) => a.getTime() - b.getTime());\n      setSelectedDates(newDates);\n      form.setValue('selectedDates', newDates);\n    }\n  };\n\n  const handlePackageSelect = (packageId: string) => {\n    setSelectedPackage(packageId);\n    form.setValue('packageId', packageId);\n  };\n\n  const handleServiceToggle = (serviceId: string) => {\n    const newServices = selectedServices.includes(serviceId)\n      ? selectedServices.filter(id => id !== serviceId)\n      : [...selectedServices, serviceId];\n    \n    setSelectedServices(newServices);\n    form.setValue('additionalServices', newServices);\n  };\n\n  const calculateTotalCost = () => {\n    let total = 0;\n    const guestCount = form.getValues('guestCount');\n    \n    // Add package cost\n    if (selectedPackage && packages.length > 0) {\n      const pkg = packages.find((p: any) => p.id === selectedPackage);\n      if (pkg) {\n        total += parseFloat(pkg.basePrice || 0);\n      }\n    }\n    \n    // Add additional services cost\n    if (selectedServices.length > 0 && services.length > 0) {\n      selectedServices.forEach(serviceId => {\n        const service = services.find((s: any) => s.id === serviceId);\n        if (service) {\n          const price = parseFloat(service.price || 0);\n          total += service.unit === \"per person\" ? price * guestCount : price;\n        }\n      });\n    }\n    \n    return total;\n  };\n\n  useEffect(() => {\n    setTotalCost(calculateTotalCost());\n  }, [selectedPackage, selectedServices, form.watch('guestCount'), packages, services]);\n\n  const onSubmit = async (data: EventFormData) => {\n    try {\n      setIsSubmitting(true);\n\n      // Create bookings for each selected date\n      for (const date of selectedDates) {\n        const bookingData = {\n          eventName: data.eventName,\n          eventType: data.eventType,\n          customerId: data.customerId,\n          venueId: data.venueId,\n          eventDate: date.toISOString(),\n          endDate: null,\n          startTime: data.startTime,\n          endTime: data.endTime,\n          guestCount: data.guestCount,\n          status: \"pending\",\n          totalAmount: totalCost.toString(),\n          isMultiDay: selectedDates.length > 1,\n          notes: data.specialRequests || \"\"\n        };\n\n        await apiRequest(\"POST\", \"/api/bookings\", bookingData);\n      }\n\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/metrics\"] });\n\n      toast({\n        title: \"🎉 Events Created Successfully!\",\n        description: `Created ${selectedDates.length} booking${selectedDates.length > 1 ? 's' : ''} for ${data.eventName}`,\n      });\n\n      onOpenChange(false);\n      resetForm();\n    } catch (error) {\n      toast({\n        title: \"Error Creating Events\",\n        description: \"Please try again or contact support\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const resetForm = () => {\n    form.reset();\n    setCurrentStep(1);\n    setSelectedDates([]);\n    setSelectedPackage(\"\");\n    setSelectedServices([]);\n    setTotalCost(0);\n  };\n\n  const nextStep = () => {\n    if (currentStep === 1 && selectedDates.length === 0) {\n      toast({\n        title: \"Select Dates\",\n        description: \"Please select at least one date for your event\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    setCurrentStep(Math.min(currentStep + 1, 3));\n  };\n\n  const previousStep = () => {\n    setCurrentStep(Math.max(currentStep - 1, 1));\n  };\n\n  const renderStepIndicator = () => (\n    <div className=\"flex justify-center mb-6\">\n      <div className=\"flex items-center space-x-4\">\n        {[1, 2, 3].map((step) => (\n          <div key={step} className=\"flex items-center\">\n            <div\n              className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                currentStep >= step\n                  ? \"bg-gradient-to-r from-purple-600 to-pink-600 text-white\"\n                  : \"bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-400\"\n              }`}\n            >\n              {currentStep > step ? <Check className=\"w-4 h-4\" /> : step}\n            </div>\n            {step < 3 && (\n              <div\n                className={`w-12 h-0.5 mx-2 ${\n                  currentStep > step ? \"bg-purple-600\" : \"bg-gray-200 dark:bg-gray-700\"\n                }`}\n              />\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderDateSelection = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-lg font-semibold mb-2\">Select Your Event Dates</h3>\n        <p className=\"text-sm text-muted-foreground\">\n          Choose one or multiple dates for your event\n        </p>\n      </div>\n\n      <div className=\"flex flex-col lg:flex-row gap-6\">\n        <div className=\"flex-1\">\n          <Calendar\n            mode=\"single\"\n            selected={undefined}\n            onSelect={handleDateSelect}\n            disabled={(date) => date < new Date()}\n            className=\"rounded-md border\"\n          />\n        </div>\n        \n        <div className=\"lg:w-80\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base\">Selected Dates</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {selectedDates.length === 0 ? (\n                <p className=\"text-sm text-muted-foreground text-center py-4\">\n                  No dates selected\n                </p>\n              ) : (\n                <div className=\"space-y-2\">\n                  {selectedDates.map((date, index) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center justify-between p-2 bg-purple-50 dark:bg-purple-900/20 rounded-md\"\n                    >\n                      <span className=\"text-sm font-medium\">\n                        {format(date, \"MMM dd, yyyy\")}\n                      </span>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleDateSelect(date)}\n                        className=\"h-6 w-6 p-0 hover:bg-red-100 dark:hover:bg-red-900/20\"\n                      >\n                        <X className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderEventDetails = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-lg font-semibold mb-2\">Event Details</h3>\n        <p className=\"text-sm text-muted-foreground\">\n          Fill in your event information\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"space-y-4\">\n          <FormField\n            control={form.control}\n            name=\"eventName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Event Name *</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Enter event name\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"eventType\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Event Type *</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select event type\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {eventTypes.map((type) => (\n                      <SelectItem key={type} value={type}>\n                        {type}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"guestCount\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Guest Count *</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"number\"\n                    min=\"1\"\n                    placeholder=\"Number of guests\"\n                    {...field}\n                    onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"space-y-4\">\n          <FormField\n            control={form.control}\n            name=\"venueId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Venue *</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select venue\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {venues && venues.map((venue: any) => (\n                      <SelectItem key={venue.id} value={venue.id}>\n                        {venue.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"startTime\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Start Time *</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Start time\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {timeSlots.map((time) => (\n                        <SelectItem key={time} value={time}>\n                          {time}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"endTime\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>End Time *</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"End time\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {timeSlots.map((time) => (\n                        <SelectItem key={time} value={time}>\n                          {time}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <FormField\n            control={form.control}\n            name=\"specialRequests\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Special Requests</FormLabel>\n                <FormControl>\n                  <Textarea\n                    placeholder=\"Any special requirements or notes...\"\n                    rows={3}\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderPackagesServices = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-lg font-semibold mb-2\">Packages & Services</h3>\n        <p className=\"text-sm text-muted-foreground\">\n          Choose a package and add additional services\n        </p>\n      </div>\n\n      {/* Packages Section */}\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium flex items-center gap-2\">\n          <Package className=\"w-4 h-4\" />\n          Event Packages\n        </h4>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {packages.map((pkg: any) => (\n            <Card\n              key={pkg.id}\n              className={`cursor-pointer transition-all hover:shadow-md ${\n                selectedPackage === pkg.id\n                  ? \"ring-2 ring-purple-500 bg-purple-50 dark:bg-purple-900/20\"\n                  : \"hover:bg-gray-50 dark:hover:bg-gray-800\"\n              }`}\n              onClick={() => handlePackageSelect(pkg.id)}\n            >\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex justify-between items-start\">\n                  <CardTitle className=\"text-base\">{pkg.name}</CardTitle>\n                  <Badge variant=\"outline\">${pkg.basePrice}</Badge>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">{pkg.description}</p>\n              </CardHeader>\n              {pkg.features && (\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-1\">\n                    {pkg.features.slice(0, 3).map((feature: string, index: number) => (\n                      <div key={index} className=\"flex items-center gap-2 text-xs\">\n                        <Check className=\"w-3 h-3 text-green-500\" />\n                        <span>{feature}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              )}\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      <Separator />\n\n      {/* Additional Services Section */}\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium flex items-center gap-2\">\n          <Plus className=\"w-4 h-4\" />\n          Additional Services\n        </h4>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n          {services.map((service: any) => (\n            <div\n              key={service.id}\n              className=\"flex items-center space-x-3 p-3 rounded-lg border hover:bg-gray-50 dark:hover:bg-gray-800\"\n            >\n              <Checkbox\n                id={service.id}\n                checked={selectedServices.includes(service.id)}\n                onCheckedChange={() => handleServiceToggle(service.id)}\n              />\n              <div className=\"flex-1\">\n                <label\n                  htmlFor={service.id}\n                  className=\"text-sm font-medium cursor-pointer\"\n                >\n                  {service.name}\n                </label>\n                <p className=\"text-xs text-muted-foreground\">\n                  ${service.price} {service.unit}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Cost Summary */}\n      <Card className=\"bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20\">\n        <CardHeader>\n          <CardTitle className=\"text-base flex items-center gap-2\">\n            <DollarSign className=\"w-4 h-4\" />\n            Cost Summary\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            {selectedPackage && packages.length > 0 && (\n              <div className=\"flex justify-between text-sm\">\n                <span>\n                  {packages.find((p: any) => p.id === selectedPackage)?.name} Package\n                </span>\n                <span>${packages.find((p: any) => p.id === selectedPackage)?.basePrice}</span>\n              </div>\n            )}\n            {selectedServices.length > 0 && services.length > 0 && (\n              <>\n                {selectedServices.map(serviceId => {\n                  const service = services.find((s: any) => s.id === serviceId);\n                  if (!service) return null;\n                  const cost = service.unit === \"per person\" \n                    ? parseFloat(service.price) * form.getValues('guestCount')\n                    : parseFloat(service.price);\n                  return (\n                    <div key={serviceId} className=\"flex justify-between text-sm\">\n                      <span>{service.name}</span>\n                      <span>${cost.toFixed(2)}</span>\n                    </div>\n                  );\n                })}\n              </>\n            )}\n            <Separator />\n            <div className=\"flex justify-between font-semibold\">\n              <span>Total Estimated Cost</span>\n              <span>${totalCost.toFixed(2)}</span>\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              * Final cost will be calculated based on your specific requirements\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const getStepTitle = () => {\n    switch (currentStep) {\n      case 1: return \"Select Dates\";\n      case 2: return \"Event Details\";\n      case 3: return \"Packages & Services\";\n      default: return \"Create Event\";\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"w-[95vw] max-w-4xl h-[90vh] max-h-[900px] p-0\">\n        <div className=\"flex flex-col h-full\">\n          <DialogHeader className=\"px-6 py-4 border-b\">\n            <DialogTitle className=\"text-xl font-semibold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent\">\n              {getStepTitle()}\n            </DialogTitle>\n            {renderStepIndicator()}\n          </DialogHeader>\n\n          <div className=\"flex-1 overflow-y-auto px-6 py-4\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)}>\n                {currentStep === 1 && renderDateSelection()}\n                {currentStep === 2 && renderEventDetails()}\n                {currentStep === 3 && renderPackagesServices()}\n              </form>\n            </Form>\n          </div>\n\n          <div className=\"border-t px-6 py-4\">\n            <div className=\"flex flex-col sm:flex-row justify-between gap-3\">\n              <div className=\"flex gap-3\">\n                {currentStep > 1 && (\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={previousStep}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <ChevronLeft className=\"w-4 h-4\" />\n                    Previous\n                  </Button>\n                )}\n              </div>\n\n              <div className=\"flex gap-3\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => onOpenChange(false)}\n                  className=\"min-w-[100px]\"\n                >\n                  Cancel\n                </Button>\n\n                {currentStep < 3 ? (\n                  <Button\n                    type=\"button\"\n                    onClick={nextStep}\n                    className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 min-w-[100px] flex items-center gap-2\"\n                  >\n                    Next\n                    <ArrowRight className=\"w-4 h-4\" />\n                  </Button>\n                ) : (\n                  <Button\n                    type=\"submit\"\n                    onClick={form.handleSubmit(onSubmit)}\n                    disabled={isSubmitting}\n                    className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 min-w-[120px]\"\n                  >\n                    {isSubmitting ? \"Creating...\" : \"Create Events\"}\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":24596},"client/src/components/forms/slot-based-event-modal.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { X, Calendar, Clock, Users, Package, Plus, Copy, Check, Trash2, PlusCircle, Building, CheckCircle, RefreshCw } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface EventSlot {\n  venue: any;\n  space: any;\n  startTime: Date;\n  endTime: Date;\n}\n\ninterface SlotConfiguration {\n  packageId: string;\n  addOns: string[]; // Service IDs\n  guests: number;\n  pricingModel: 'fixed' | 'per_person';\n  itemQuantities: Record<string, number>; // For services that need quantities\n}\n\ninterface EventDetails {\n  eventName: string;\n  customerId: string;\n  eventStatus: string;\n}\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  initialSlots?: EventSlot[];\n  initialBookings?: any[];\n}\n\nconst generateSlotId = (slot: EventSlot) => \n  slot?.space?.id && slot.startTime \n    ? `${slot.space.id}@${slot.startTime.toISOString()}` \n    : null;\n\nconst calculatePriceForSlot = (\n  config: SlotConfiguration, \n  packages: any[], \n  services: any[]\n) => {\n  let total = 0;\n  \n  // Package price\n  const pkg = packages.find(p => p.id === config.packageId);\n  if (pkg) {\n    const packagePrice = parseFloat(pkg.price || 0);\n    total += config.pricingModel === 'per_person' \n      ? packagePrice * config.guests \n      : packagePrice;\n  }\n  \n  // Add-on services price\n  config.addOns.forEach(serviceId => {\n    const service = services.find(s => s.id === serviceId);\n    if (service && !pkg?.includedServiceIds?.includes(serviceId)) {\n      const servicePrice = parseFloat(service.price || 0);\n      const quantity = config.itemQuantities[serviceId] || 1;\n      \n      if (service.pricingModel === 'per_person') {\n        total += servicePrice * config.guests;\n      } else {\n        total += servicePrice * quantity;\n      }\n    }\n  });\n  \n  return total;\n};\n\nconst EventSlotGenerator = ({ onSlotsGenerated }: { onSlotsGenerated: (slots: EventSlot[]) => void }) => {\n  const { data: venues = [] } = useQuery({ queryKey: [\"/api/venues\"] });\n  const [selectedDates, setSelectedDates] = useState<string[]>([]);\n  const [slotConfigs, setSlotConfigs] = useState<any[]>([]);\n  const [selectedVenueId, setSelectedVenueId] = useState('');\n  const [currentMonthDate, setCurrentMonthDate] = useState(new Date());\n  \n  const selectedVenue = useMemo(() => venues.find((v: any) => v.id === selectedVenueId), [venues, selectedVenueId]);\n\n  useEffect(() => {\n    setSlotConfigs(selectedDates.map(date => ({\n      date,\n      spaceId: selectedVenue?.spaces?.[0]?.id || '',\n      startTime: '09:00',\n      endTime: '17:00'\n    })));\n  }, [selectedDates, selectedVenue]);\n\n  const handleDateClick = (day: Date) => {\n    const dayString = day.toISOString().split('T')[0];\n    setSelectedDates(prev => \n      prev.includes(dayString) \n        ? prev.filter(d => d !== dayString) \n        : [...prev, dayString].sort()\n    );\n  };\n\n  const handleConfigChange = (index: number, field: string, value: string) => {\n    setSlotConfigs(prev => prev.map((config, i) => \n      i === index ? { ...config, [field]: value } : config\n    ));\n  };\n\n  const handleGenerate = () => {\n    const slots: EventSlot[] = slotConfigs.map(config => {\n      const venue = selectedVenue;\n      const space = venue?.spaces?.find((s: any) => s.id === config.spaceId);\n      const date = new Date(config.date + 'T00:00:00Z');\n      \n      const [startHour, startMinute] = config.startTime.split(':').map(Number);\n      const [endHour, endMinute] = config.endTime.split(':').map(Number);\n      \n      const startTime = new Date(date);\n      startTime.setUTCHours(startHour, startMinute, 0, 0);\n      \n      const endTime = new Date(date);\n      endTime.setUTCHours(endHour, endMinute, 0, 0);\n\n      return { venue, space, startTime, endTime };\n    }).filter(slot => slot.venue && slot.space);\n\n    onSlotsGenerated(slots);\n  };\n\n  // Generate calendar days for current month\n  const monthStart = new Date(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), 1);\n  const monthEnd = new Date(currentMonthDate.getFullYear(), currentMonthDate.getMonth() + 1, 0);\n  const startDate = new Date(monthStart);\n  startDate.setDate(startDate.getDate() - monthStart.getDay());\n  \n  const days = [];\n  const current = new Date(startDate);\n  while (current <= monthEnd || current.getDay() !== 0) {\n    days.push(new Date(current));\n    current.setDate(current.getDate() + 1);\n  }\n\n  return (\n    <div className=\"flex-grow flex overflow-hidden\">\n      <div className=\"w-1/2 p-4 border-r\">\n        <h3 className=\"font-semibold mb-4\">Select Dates</h3>\n        \n        <div className=\"mb-4\">\n          <Label>Venue</Label>\n          <Select value={selectedVenueId} onValueChange={setSelectedVenueId}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select a venue\" />\n            </SelectTrigger>\n            <SelectContent>\n              {venues.map((venue: any) => (\n                <SelectItem key={venue.id} value={venue.id}>\n                  {venue.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Calendar */}\n        <div className=\"bg-white border rounded-lg p-4\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentMonthDate(new Date(currentMonthDate.setMonth(currentMonthDate.getMonth() - 1)))}\n            >\n              ‹\n            </Button>\n            <h4 className=\"font-medium\">\n              {currentMonthDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n            </h4>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentMonthDate(new Date(currentMonthDate.setMonth(currentMonthDate.getMonth() + 1)))}\n            >\n              ›\n            </Button>\n          </div>\n          \n          <div className=\"grid grid-cols-7 gap-1 text-center text-xs font-medium text-gray-500 mb-2\">\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n              <div key={day} className=\"py-2\">{day}</div>\n            ))}\n          </div>\n          \n          <div className=\"grid grid-cols-7 gap-1\">\n            {days.map((day, i) => {\n              const dayString = day.toISOString().split('T')[0];\n              const isCurrentMonth = day.getMonth() === currentMonthDate.getMonth();\n              const isSelected = selectedDates.includes(dayString);\n              const isPast = day < new Date();\n              \n              return (\n                <button\n                  key={i}\n                  onClick={() => !isPast && isCurrentMonth && handleDateClick(day)}\n                  disabled={isPast || !isCurrentMonth}\n                  className={`\n                    h-8 text-sm rounded transition-colors\n                    ${isCurrentMonth ? 'text-gray-900' : 'text-gray-300'}\n                    ${isPast ? 'bg-gray-100 cursor-not-allowed' : 'hover:bg-gray-100'}\n                    ${isSelected ? 'bg-indigo-600 text-white hover:bg-indigo-700' : ''}\n                  `}\n                >\n                  {day.getDate()}\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"w-1/2 p-4\">\n        <h3 className=\"font-semibold mb-4\">Configure Selected Dates</h3>\n        \n        {slotConfigs.length === 0 ? (\n          <p className=\"text-gray-500 text-center py-8\">Select dates from the calendar</p>\n        ) : (\n          <>\n            <div className=\"space-y-4 max-h-64 overflow-y-auto\">\n              {slotConfigs.map((config, index) => (\n                <div key={config.date} className=\"p-3 border rounded-lg\">\n                  <div className=\"font-medium text-sm mb-2\">\n                    {new Date(config.date).toLocaleDateString('en-US', { \n                      weekday: 'long', \n                      month: 'short', \n                      day: 'numeric' \n                    })}\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 gap-2\">\n                    <div>\n                      <Label className=\"text-xs\">Space</Label>\n                      <Select\n                        value={config.spaceId}\n                        onValueChange={(value) => handleConfigChange(index, 'spaceId', value)}\n                      >\n                        <SelectTrigger className=\"h-8\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {selectedVenue?.spaces?.map((space: any) => (\n                            <SelectItem key={space.id} value={space.id}>\n                              {space.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <div>\n                        <Label className=\"text-xs\">Start</Label>\n                        <Input\n                          type=\"time\"\n                          value={config.startTime}\n                          onChange={(e) => handleConfigChange(index, 'startTime', e.target.value)}\n                          className=\"h-8\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-xs\">End</Label>\n                        <Input\n                          type=\"time\"\n                          value={config.endTime}\n                          onChange={(e) => handleConfigChange(index, 'endTime', e.target.value)}\n                          className=\"h-8\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            <Button \n              onClick={handleGenerate}\n              className=\"w-full mt-4\"\n              disabled={!selectedVenueId || slotConfigs.some(c => !c.spaceId)}\n            >\n              Generate {slotConfigs.length} Slot{slotConfigs.length !== 1 ? 's' : ''}\n            </Button>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default function SlotBasedEventModal({ \n  open, \n  onOpenChange, \n  initialSlots = [], \n  initialBookings \n}: Props) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Data queries first\n  const { data: venues = [] } = useQuery({ queryKey: [\"/api/venues\"] });\n  const { data: customers = [] } = useQuery({ queryKey: [\"/api/customers\"] });\n  const { data: packages = [] } = useQuery({ queryKey: [\"/api/packages\"] });\n  const { data: services = [] } = useQuery({ queryKey: [\"/api/services\"] });\n\n  // State management following the exact structure from your previous app\n  const [generatedSlots, setGeneratedSlots] = useState<EventSlot[]>([]);\n  const isEditMode = !!initialBookings;\n  const [isAddingSlots, setIsAddingSlots] = useState(!isEditMode && (!initialSlots || initialSlots.length === 0));\n  const [isAddingService, setIsAddingService] = useState(false);\n\n  const wizardSlots = useMemo(() => {\n    const slotsFromInitial = initialSlots || [];\n    const slotsFromBookings = (initialBookings || []).map((b: any) => ({ \n      ...b, \n      venue: venues.find((v: any) => v.id === b.venueId), \n      space: venues.find((v: any) => v.id === b.venueId)?.spaces?.find((s: any) => s.id === b.spaceId) \n    }));\n    const allSlots = isEditMode ? [...slotsFromBookings, ...generatedSlots] : [...slotsFromInitial, ...generatedSlots];\n    return allSlots.sort((a, b) => new Date(a.startTime).getTime() - new Date(b.startTime).getTime());\n  }, [initialSlots, initialBookings, generatedSlots, venues, isEditMode]);\n\n  const [step, setStep] = useState(1);\n  const [activeTabId, setActiveTabId] = useState<string | null>(null);\n  const [configurations, setConfigurations] = useState<Record<string, SlotConfiguration>>({});\n  const [pricingOverrides, setPricingOverrides] = useState<Record<string, any>>({});\n  const [eventDetails, setEventDetails] = useState<EventDetails>(() => \n    isEditMode && wizardSlots.length > 0 \n      ? { \n          eventName: wizardSlots[0].eventName, \n          customerId: wizardSlots[0].customerId, \n          eventStatus: wizardSlots[0].eventStatus \n        } \n      : { \n          eventName: '', \n          customerId: '', \n          eventStatus: 'Inquiry' \n        }\n  );\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isCloning, setIsCloning] = useState(false);\n\n  // Initialize pricing overrides for edit mode\n  useEffect(() => {\n    if (isEditMode && initialBookings) {\n      const initialOverrides: Record<string, any> = {};\n      initialBookings.forEach((b: any) => {\n        if (b.pricingOverrides) {\n          const slotId = generateSlotId(b);\n          if (slotId) {\n            initialOverrides[slotId] = b.pricingOverrides;\n          }\n        }\n      });\n      setPricingOverrides(initialOverrides);\n    }\n  }, [isEditMode, initialBookings]);\n\n  // Create booking mutation\n  const createBookingMutation = useMutation({\n    mutationFn: async (bookingData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/bookings\", bookingData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      toast({ title: \"Event created successfully!\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to create event\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Initialize configurations when slots change - exactly like your previous app\n  useEffect(() => {\n    if (wizardSlots.length > 0) {\n      setActiveTabId(prev => {\n        const prevSlotExists = wizardSlots.some(s => generateSlotId(s) === prev);\n        return prevSlotExists ? prev : generateSlotId(wizardSlots[0]);\n      });\n      \n      setConfigurations(prevConfigs => {\n        const newConfigs = { ...prevConfigs };\n        wizardSlots.forEach(slot => {\n          const slotId = generateSlotId(slot);\n          if (slotId && !newConfigs[slotId]) {\n            const booking = isEditMode ? initialBookings?.find((b: any) => generateSlotId(b) === slotId) : null;\n            const pkg = packages.find((p: any) => p.id === booking?.packageId);\n            newConfigs[slotId] = { \n              packageId: booking?.packageId || '', \n              addOns: booking?.addOns || [], \n              itemQuantities: booking?.itemQuantities || {}, \n              guests: booking?.guests || 1,\n              pricingModel: booking?.pricingModel || pkg?.pricingModel || 'fixed'\n            };\n          }\n        });\n        return newConfigs;\n      });\n    }\n  }, [wizardSlots, isEditMode, initialBookings, packages]);\n\n  const handleAddSlot = () => {\n    if (!newSlot.venueId || !newSlot.date || !newSlot.startTime || !newSlot.endTime) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please fill in all slot details\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const venue = venues.find(v => v.id === newSlot.venueId);\n    const slot: EventSlot = {\n      id: `${newSlot.venueId}-${newSlot.date}-${newSlot.startTime}`,\n      venueId: newSlot.venueId,\n      venueName: venue?.name || \"\",\n      date: new Date(newSlot.date),\n      startTime: newSlot.startTime,\n      endTime: newSlot.endTime,\n    };\n\n    setSlots(prev => [...prev, slot]);\n    setNewSlot({ venueId: \"\", date: \"\", startTime: \"\", endTime: \"\" });\n    setIsAddingSlot(false);\n  };\n\n  const handleRemoveSlot = (slotId: string) => {\n    setSlots(prev => prev.filter(s => s.id !== slotId));\n    setConfigurations(prev => {\n      const newConfigs = { ...prev };\n      delete newConfigs[slotId];\n      return newConfigs;\n    });\n    if (activeSlotId === slotId) {\n      setActiveSlotId(slots.filter(s => s.id !== slotId)[0]?.id || \"\");\n    }\n  };\n\n  const updateSlotConfig = (slotId: string, updates: Partial<SlotConfiguration>) => {\n    setConfigurations(prev => ({\n      ...prev,\n      [slotId]: { ...prev[slotId], ...updates }\n    }));\n  };\n\n  const handleSelectPackage = (slotId: string, packageId: string) => {\n    const pkg = packages.find(p => p.id === packageId);\n    updateSlotConfig(slotId, {\n      packageId,\n      addOns: pkg ? [...(pkg.includedServiceIds || [])] : [],\n      pricingModel: pkg?.pricingModel || 'fixed'\n    });\n  };\n\n  const handleToggleAddOn = (slotId: string, serviceId: string) => {\n    const currentConfig = configurations[slotId];\n    const isAdded = currentConfig.addOns.includes(serviceId);\n    updateSlotConfig(slotId, {\n      addOns: isAdded \n        ? currentConfig.addOns.filter(id => id !== serviceId)\n        : [...currentConfig.addOns, serviceId]\n    });\n  };\n\n  const handleCopyConfiguration = (sourceSlotId: string, targetSlotIds: string[]) => {\n    const sourceConfig = configurations[sourceSlotId];\n    const newConfigs = { ...configurations };\n    targetSlotIds.forEach(targetId => {\n      newConfigs[targetId] = { ...sourceConfig };\n    });\n    setConfigurations(newConfigs);\n  };\n\n  const handleSubmit = async () => {\n    const eventDetails = form.getValues();\n    \n    try {\n      // Create a booking for each slot\n      const bookingPromises = slots.map(slot => {\n        const config = configurations[slot.id];\n        const totalCost = calculatePriceForSlot(config, packages, services);\n        \n        return createBookingMutation.mutateAsync({\n          eventName: eventDetails.eventName,\n          eventType: eventDetails.eventType,\n          description: eventDetails.description,\n          customerId: eventDetails.customerId || null,\n          venueId: slot.venueId,\n          eventDate: slot.date.toISOString(),\n          startTime: slot.startTime,\n          endTime: slot.endTime,\n          guestCount: config.guests,\n          status: \"confirmed\",\n          totalAmount: totalCost.toFixed(2),\n          packageId: config.packageId || null,\n          selectedServices: config.addOns,\n          pricingModel: config.pricingModel,\n        });\n      });\n\n      await Promise.all(bookingPromises);\n    } catch (error) {\n      console.error('Failed to create bookings:', error);\n    }\n  };\n\n  const totalCost = useMemo(() => {\n    return slots.reduce((total, slot) => {\n      const config = configurations[slot.id];\n      if (config) {\n        return total + calculatePriceForSlot(config, packages, services);\n      }\n      return total;\n    }, 0);\n  }, [slots, configurations, packages, services]);\n\n  const activeSlot = slots.find(s => s.id === activeSlotId);\n  const activeConfig = activeSlotId ? configurations[activeSlotId] : null;\n\n  if (!open) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl w-full max-w-6xl h-[90vh] flex flex-col\">\n        {/* Header */}\n        <div className=\"p-6 border-b flex justify-between items-center\">\n          <h2 className=\"text-2xl font-bold\">Create Event</h2>\n          <button onClick={() => onOpenChange(false)} className=\"p-1 rounded-full hover:bg-gray-200\">\n            <X className=\"w-6 h-6\" />\n          </button>\n        </div>\n\n        {/* Step indicator */}\n        <div className=\"flex border-b\">\n          {[\n            { step: 1, title: \"Event Details\" },\n            { step: 2, title: \"Date & Time Slots\" },\n            { step: 3, title: \"Configure Packages\" }\n          ].map(({ step, title }) => (\n            <button\n              key={step}\n              onClick={() => setCurrentStep(step)}\n              className={`px-6 py-3 font-semibold ${\n                currentStep === step \n                  ? 'border-b-2 border-indigo-500 text-indigo-600' \n                  : 'text-gray-500 hover:text-gray-700'\n              }`}\n            >\n              {title}\n            </button>\n          ))}\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-grow flex overflow-hidden\">\n          {currentStep === 1 && (\n            <div className=\"w-full p-6 overflow-y-auto\">\n              <div className=\"max-w-2xl space-y-4\">\n                <div>\n                  <Label htmlFor=\"eventName\">Event Name *</Label>\n                  <Input\n                    id=\"eventName\"\n                    {...form.register(\"eventName\")}\n                    placeholder=\"Wedding Reception, Corporate Meeting, etc.\"\n                  />\n                  {form.formState.errors.eventName && (\n                    <p className=\"text-red-500 text-sm mt-1\">\n                      {form.formState.errors.eventName.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"eventType\">Event Type *</Label>\n                  <Select onValueChange={(value) => form.setValue(\"eventType\", value)}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select event type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"wedding\">Wedding</SelectItem>\n                      <SelectItem value=\"corporate\">Corporate Event</SelectItem>\n                      <SelectItem value=\"birthday\">Birthday Party</SelectItem>\n                      <SelectItem value=\"anniversary\">Anniversary</SelectItem>\n                      <SelectItem value=\"meeting\">Meeting</SelectItem>\n                      <SelectItem value=\"conference\">Conference</SelectItem>\n                      <SelectItem value=\"other\">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.eventType && (\n                    <p className=\"text-red-500 text-sm mt-1\">\n                      {form.formState.errors.eventType.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"customerId\">Customer (Optional)</Label>\n                  <Select onValueChange={(value) => form.setValue(\"customerId\", value)}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select a customer\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {customers.map((customer: any) => (\n                        <SelectItem key={customer.id} value={customer.id}>\n                          {customer.name} - {customer.email}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    {...form.register(\"description\")}\n                    placeholder=\"Additional details about the event...\"\n                    rows={3}\n                  />\n                </div>\n\n                <Button \n                  onClick={() => setCurrentStep(2)}\n                  className=\"w-full\"\n                  disabled={!form.watch(\"eventName\") || !form.watch(\"eventType\")}\n                >\n                  Continue to Date & Time Slots\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {currentStep === 2 && (\n            <div className=\"w-full flex\">\n              {/* Slots list */}\n              <div className=\"w-1/3 border-r p-4 overflow-y-auto\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h3 className=\"font-semibold\">Event Slots</h3>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => setIsAddingSlot(true)}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                    Add Slot\n                  </Button>\n                </div>\n\n                <div className=\"space-y-2\">\n                  {slots.map((slot) => (\n                    <div\n                      key={slot.id}\n                      className=\"p-3 border rounded-lg cursor-pointer hover:bg-gray-50\"\n                      onClick={() => setActiveSlotId(slot.id)}\n                    >\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <p className=\"font-medium\">{slot.venueName}</p>\n                          <p className=\"text-sm text-gray-600\">\n                            {slot.date.toLocaleDateString()}\n                          </p>\n                          <p className=\"text-sm text-gray-600\">\n                            {slot.startTime} - {slot.endTime}\n                          </p>\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleRemoveSlot(slot.id);\n                          }}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {slots.length > 0 && (\n                  <Button \n                    onClick={() => setCurrentStep(3)}\n                    className=\"w-full mt-4\"\n                  >\n                    Configure Packages & Services\n                  </Button>\n                )}\n              </div>\n\n              {/* Add slot form */}\n              <div className=\"w-2/3 p-6\">\n                {isAddingSlot ? (\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-semibold\">Add New Slot</h3>\n                    \n                    <div>\n                      <Label>Venue</Label>\n                      <Select\n                        value={newSlot.venueId}\n                        onValueChange={(value) => setNewSlot(prev => ({ ...prev, venueId: value }))}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select venue\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {venues.map((venue: any) => (\n                            <SelectItem key={venue.id} value={venue.id}>\n                              {venue.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label>Date</Label>\n                      <Input\n                        type=\"date\"\n                        value={newSlot.date}\n                        onChange={(e) => setNewSlot(prev => ({ ...prev, date: e.target.value }))}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label>Start Time</Label>\n                        <Input\n                          type=\"time\"\n                          value={newSlot.startTime}\n                          onChange={(e) => setNewSlot(prev => ({ ...prev, startTime: e.target.value }))}\n                        />\n                      </div>\n                      <div>\n                        <Label>End Time</Label>\n                        <Input\n                          type=\"time\"\n                          value={newSlot.endTime}\n                          onChange={(e) => setNewSlot(prev => ({ ...prev, endTime: e.target.value }))}\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"flex gap-2\">\n                      <Button onClick={handleAddSlot}>Add Slot</Button>\n                      <Button variant=\"outline\" onClick={() => setIsAddingSlot(false)}>\n                        Cancel\n                      </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center justify-center h-full text-gray-500\">\n                    <div className=\"text-center\">\n                      <Calendar className=\"w-12 h-12 mx-auto mb-4\" />\n                      <p>Click \"Add Slot\" to create your first event slot</p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {currentStep === 3 && activeSlot && activeConfig && (\n            <div className=\"w-full flex\">\n              {/* Slots sidebar */}\n              <div className=\"w-1/4 border-r p-4 overflow-y-auto\">\n                <h3 className=\"font-semibold mb-4\">Event Slots</h3>\n                <div className=\"space-y-2\">\n                  {slots.map((slot) => (\n                    <div\n                      key={slot.id}\n                      onClick={() => setActiveSlotId(slot.id)}\n                      className={`p-3 border rounded-lg cursor-pointer ${\n                        activeSlotId === slot.id ? 'bg-indigo-50 border-indigo-300' : 'hover:bg-gray-50'\n                      }`}\n                    >\n                      <p className=\"font-medium text-sm\">{slot.venueName}</p>\n                      <p className=\"text-xs text-gray-600\">\n                        {slot.date.toLocaleDateString()}\n                      </p>\n                      <p className=\"text-xs text-gray-600\">\n                        {slot.startTime} - {slot.endTime}\n                      </p>\n                    </div>\n                  ))}\n                </div>\n\n                {slots.length > 1 && (\n                  <Card className=\"mt-4\">\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm\">Copy Configuration</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          const otherSlotIds = slots.filter(s => s.id !== activeSlotId).map(s => s.id);\n                          handleCopyConfiguration(activeSlotId, otherSlotIds);\n                          toast({ title: \"Configuration copied to all other slots\" });\n                        }}\n                        className=\"w-full flex items-center gap-2\"\n                      >\n                        <Copy className=\"w-4 h-4\" />\n                        Copy to All\n                      </Button>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n\n              {/* Configuration panel */}\n              <div className=\"w-3/4 p-6 overflow-y-auto\">\n                <div className=\"space-y-6\">\n                  {/* Guest count */}\n                  <div>\n                    <Label>Number of Guests</Label>\n                    <Input\n                      type=\"number\"\n                      min=\"1\"\n                      value={activeConfig.guests}\n                      onChange={(e) => updateSlotConfig(activeSlotId, { \n                        guests: parseInt(e.target.value, 10) || 1 \n                      })}\n                      className=\"w-32\"\n                    />\n                  </div>\n\n                  {/* Package selection */}\n                  <div>\n                    <Label>Package</Label>\n                    <Select\n                      value={activeConfig.packageId}\n                      onValueChange={(value) => handleSelectPackage(activeSlotId, value)}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select package (or choose A La Carte)\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"none\">A La Carte</SelectItem>\n                        {packages.map((pkg: any) => (\n                          <SelectItem key={pkg.id} value={pkg.id}>\n                            {pkg.name} - ${pkg.price}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n\n                    {activeConfig.packageId && (\n                      <div className=\"mt-2 p-3 bg-gray-50 rounded-lg\">\n                        <div className=\"flex items-center gap-4 text-sm\">\n                          <label className=\"flex items-center\">\n                            <input\n                              type=\"radio\"\n                              name={`pricing-${activeSlotId}`}\n                              checked={activeConfig.pricingModel === 'fixed'}\n                              onChange={() => updateSlotConfig(activeSlotId, { pricingModel: 'fixed' })}\n                              className=\"mr-2\"\n                            />\n                            Flat Fee\n                          </label>\n                          <label className=\"flex items-center\">\n                            <input\n                              type=\"radio\"\n                              name={`pricing-${activeSlotId}`}\n                              checked={activeConfig.pricingModel === 'per_person'}\n                              onChange={() => updateSlotConfig(activeSlotId, { pricingModel: 'per_person' })}\n                              className=\"mr-2\"\n                            />\n                            Per Person\n                          </label>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Services */}\n                  <div>\n                    <Label>Additional Services</Label>\n                    <div className=\"grid grid-cols-1 gap-3 mt-2\">\n                      {services.map((service: any) => {\n                        const selectedPackage = packages.find(p => p.id === activeConfig.packageId);\n                        const isIncluded = selectedPackage?.includedServiceIds?.includes(service.id);\n                        const isSelected = activeConfig.addOns.includes(service.id);\n\n                        return (\n                          <div\n                            key={service.id}\n                            className={`p-3 border rounded-lg ${\n                              isIncluded ? 'bg-gray-100 text-gray-500' : \n                              isSelected ? 'bg-indigo-50 border-indigo-300' : ''\n                            }`}\n                          >\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center gap-3\">\n                                <Checkbox\n                                  checked={isSelected}\n                                  disabled={isIncluded}\n                                  onCheckedChange={() => handleToggleAddOn(activeSlotId, service.id)}\n                                />\n                                <div>\n                                  <p className=\"font-medium\">\n                                    {service.name} {isIncluded && \"(Included)\"}\n                                  </p>\n                                  <p className=\"text-sm text-gray-600\">{service.description}</p>\n                                </div>\n                              </div>\n                              <div className=\"text-right\">\n                                <p className=\"font-medium\">\n                                  ${service.price} {service.pricingModel === 'per_person' ? '/person' : ''}\n                                </p>\n                                {isSelected && !isIncluded && service.pricingModel === 'fixed' && (\n                                  <Input\n                                    type=\"number\"\n                                    min=\"1\"\n                                    value={activeConfig.itemQuantities[service.id] || 1}\n                                    onChange={(e) => updateSlotConfig(activeSlotId, {\n                                      itemQuantities: {\n                                        ...activeConfig.itemQuantities,\n                                        [service.id]: parseInt(e.target.value, 10) || 1\n                                      }\n                                    })}\n                                    className=\"w-20 mt-1\"\n                                    placeholder=\"Qty\"\n                                  />\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"p-4 border-t bg-gray-50 flex justify-between items-center\">\n          <div className=\"text-lg font-semibold\">\n            Total: ${totalCost.toFixed(2)}\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Cancel\n            </Button>\n            {currentStep === 3 && slots.length > 0 && (\n              <Button \n                onClick={handleSubmit}\n                disabled={createBookingMutation.isPending}\n              >\n                {createBookingMutation.isPending ? \"Creating...\" : \"Create Event\"}\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":38441},"client/src/components/layout/collapsible-sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  LayoutDashboard,\n  Calendar,\n  Users,\n  FileText,\n  CreditCard,\n  CheckSquare,\n  Building2,\n  Package,\n  Settings,\n  ChevronLeft,\n  ChevronRight,\n  Menu,\n  X\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: LayoutDashboard },\n  { name: \"Events\", href: \"/events\", icon: Calendar },\n  { name: \"Customers\", href: \"/customers\", icon: Users },\n  { name: \"Companies\", href: \"/companies\", icon: Building2 },\n  { name: \"Proposals\", href: \"/proposals\", icon: FileText },\n  { name: \"Payments\", href: \"/payments\", icon: CreditCard },\n  { name: \"Tasks\", href: \"/tasks\", icon: CheckSquare },\n  { name: \"Venues\", href: \"/venues\", icon: Building2 },\n  { name: \"Packages\", href: \"/packages\", icon: Package },\n  { name: \"Settings\", href: \"/settings\", icon: Settings },\n];\n\ninterface CollapsibleSidebarProps {\n  isCollapsed?: boolean;\n  onToggle?: () => void;\n  className?: string;\n}\n\nexport function CollapsibleSidebar({ isCollapsed = false, onToggle, className }: CollapsibleSidebarProps) {\n  const [location] = useLocation();\n\n  return (\n    <div className={cn(\n      \"bg-white border-r border-slate-200 flex flex-col transition-all duration-300 ease-in-out\",\n      isCollapsed ? \"w-16\" : \"w-64\",\n      className\n    )}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-slate-200\">\n        {!isCollapsed && (\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-sm\">V</span>\n            </div>\n            <span className=\"font-bold text-xl text-slate-900\">Venuine</span>\n          </div>\n        )}\n        {isCollapsed && (\n          <div className=\"w-8 h-8 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center mx-auto\">\n            <span className=\"text-white font-bold text-sm\">V</span>\n          </div>\n        )}\n        {onToggle && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onToggle}\n            className=\"p-1.5 h-auto hidden lg:flex\"\n          >\n            {isCollapsed ? (\n              <ChevronRight className=\"w-4 h-4\" />\n            ) : (\n              <ChevronLeft className=\"w-4 h-4\" />\n            )}\n          </Button>\n        )}\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 overflow-y-auto p-4 space-y-1\">\n        {navigation.map((item) => {\n          const isActive = location === item.href || (item.href !== \"/\" && location.startsWith(item.href));\n          return (\n            <Link key={item.name} href={item.href}>\n              <div\n                className={cn(\n                  \"flex items-center space-x-3 px-3 py-2.5 rounded-lg text-sm font-medium transition-colors cursor-pointer\",\n                  isActive\n                    ? \"bg-blue-50 text-blue-700 border border-blue-200\"\n                    : \"text-slate-600 hover:text-slate-900 hover:bg-slate-50\",\n                  isCollapsed && \"justify-center px-2\"\n                )}\n              >\n                <item.icon className={cn(\"flex-shrink-0\", isCollapsed ? \"w-5 h-5\" : \"w-4 h-4\")} />\n                {!isCollapsed && <span className=\"truncate\">{item.name}</span>}\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* Footer */}\n      {!isCollapsed && (\n        <div className=\"p-4 border-t border-slate-200\">\n          <div className=\"flex items-center space-x-3 px-3 py-2\">\n            <div className=\"w-8 h-8 bg-slate-200 rounded-full flex items-center justify-center\">\n              <span className=\"text-slate-600 font-medium text-sm\">JD</span>\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-slate-900 truncate\">John Doe</p>\n              <p className=\"text-xs text-slate-500 truncate\">Venue Manager</p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\ninterface MobileSidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function MobileSidebar({ isOpen, onClose }: MobileSidebarProps) {\n  const [location] = useLocation();\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div \n        className=\"fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden\"\n        onClick={onClose}\n      />\n      \n      {/* Sidebar */}\n      <div className=\"fixed inset-y-0 left-0 w-64 bg-white z-50 lg:hidden transform transition-transform duration-300 ease-in-out\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 border-b border-slate-200\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-sm\">V</span>\n            </div>\n            <span className=\"font-bold text-xl text-slate-900\">Venuine</span>\n          </div>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose} className=\"p-1.5 h-auto\">\n            <X className=\"w-5 h-5\" />\n          </Button>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 overflow-y-auto p-4 space-y-1\">\n          {navigation.map((item) => {\n            const isActive = location === item.href || (item.href !== \"/\" && location.startsWith(item.href));\n            return (\n              <Link key={item.name} href={item.href} onClick={onClose}>\n                <div\n                  className={cn(\n                    \"flex items-center space-x-3 px-3 py-2.5 rounded-lg text-sm font-medium transition-colors cursor-pointer\",\n                    isActive\n                      ? \"bg-blue-50 text-blue-700 border border-blue-200\"\n                      : \"text-slate-600 hover:text-slate-900 hover:bg-slate-50\"\n                  )}\n                >\n                  <item.icon className=\"w-4 h-4 flex-shrink-0\" />\n                  <span className=\"truncate\">{item.name}</span>\n                </div>\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* Footer */}\n        <div className=\"p-4 border-t border-slate-200\">\n          <div className=\"flex items-center space-x-3 px-3 py-2\">\n            <div className=\"w-8 h-8 bg-slate-200 rounded-full flex items-center justify-center\">\n              <span className=\"text-slate-600 font-medium text-sm\">JD</span>\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-slate-900 truncate\">John Doe</p>\n              <p className=\"text-xs text-slate-500 truncate\">Venue Manager</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":6991},"client/src/components/search/global-search.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Search, Calendar, Package, Wrench, X, Clock, MapPin, DollarSign } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\n\ninterface SearchResult {\n  id: string;\n  type: 'event' | 'service' | 'package' | 'venue' | 'customer';\n  title: string;\n  subtitle?: string;\n  description?: string;\n  metadata?: {\n    date?: string;\n    price?: number;\n    status?: string;\n    location?: string;\n  };\n}\n\ninterface GlobalSearchProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function GlobalSearch({ isOpen, onClose }: GlobalSearchProps) {\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState<SearchResult[]>([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const [, setLocation] = useLocation();\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Focus input when modal opens\n  useEffect(() => {\n    if (isOpen && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isOpen]);\n\n  // Search function with debouncing\n  useEffect(() => {\n    if (!query.trim()) {\n      setResults([]);\n      return;\n    }\n\n    const searchTimeout = setTimeout(async () => {\n      setIsSearching(true);\n      try {\n        const response = await apiRequest(\"GET\", `/api/search?q=${encodeURIComponent(query)}`);\n        const data = await response.json();\n        setResults(data.results || []);\n      } catch (error) {\n        console.error(\"Search error:\", error);\n        setResults([]);\n      } finally {\n        setIsSearching(false);\n      }\n    }, 300);\n\n    return () => clearTimeout(searchTimeout);\n  }, [query]);\n\n  const handleResultClick = (result: SearchResult) => {\n    // Navigate to the appropriate page based on result type\n    switch (result.type) {\n      case 'event':\n        setLocation('/events');\n        break;\n      case 'service':\n      case 'package':\n        setLocation('/packages');\n        break;\n      case 'venue':\n        setLocation('/venues');\n        break;\n      case 'customer':\n        setLocation('/customers');\n        break;\n    }\n    onClose();\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'event':\n        return <Calendar className=\"w-4 h-4\" />;\n      case 'service':\n        return <Wrench className=\"w-4 h-4\" />;\n      case 'package':\n        return <Package className=\"w-4 h-4\" />;\n      case 'venue':\n        return <MapPin className=\"w-4 h-4\" />;\n      case 'customer':\n        return <Calendar className=\"w-4 h-4\" />;\n      default:\n        return <Search className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'event':\n        return 'bg-blue-100 text-blue-800';\n      case 'service':\n        return 'bg-green-100 text-green-800';\n      case 'package':\n        return 'bg-purple-100 text-purple-800';\n      case 'venue':\n        return 'bg-orange-100 text-orange-800';\n      case 'customer':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[600px] max-h-[80vh] overflow-hidden p-0\">\n        <DialogHeader className=\"px-6 py-4 border-b\">\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Search className=\"w-5 h-5\" />\n            Search Everything\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"px-6 py-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              ref={inputRef}\n              placeholder=\"Search events, services, packages, venues, customers...\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              className=\"pl-10 pr-10\"\n              onKeyDown={(e) => {\n                if (e.key === 'Escape') {\n                  onClose();\n                }\n              }}\n            />\n            {query && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-1 top-1/2 transform -translate-y-1/2 h-6 w-6 p-0\"\n                onClick={() => setQuery(\"\")}\n              >\n                <X className=\"w-3 h-3\" />\n              </Button>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto px-6 pb-6\">\n          {isSearching && (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"animate-spin w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full\" />\n            </div>\n          )}\n\n          {!isSearching && query && results.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Search className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n              <p>No results found for \"{query}\"</p>\n              <p className=\"text-sm mt-1\">Try searching for events, services, packages, or venues</p>\n            </div>\n          )}\n\n          {!isSearching && results.length > 0 && (\n            <div className=\"space-y-2\">\n              <div className=\"text-sm text-gray-500 mb-3\">\n                Found {results.length} result{results.length !== 1 ? 's' : ''}\n              </div>\n              {results.map((result) => (\n                <Card \n                  key={result.id} \n                  className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                  onClick={() => handleResultClick(result)}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <Badge variant=\"secondary\" className={getTypeColor(result.type)}>\n                            <span className=\"flex items-center gap-1\">\n                              {getTypeIcon(result.type)}\n                              {result.type}\n                            </span>\n                          </Badge>\n                        </div>\n                        <h3 className=\"font-medium text-gray-900 mb-1\">\n                          {result.title}\n                        </h3>\n                        {result.subtitle && (\n                          <p className=\"text-sm text-gray-600 mb-1\">\n                            {result.subtitle}\n                          </p>\n                        )}\n                        {result.description && (\n                          <p className=\"text-sm text-gray-500\">\n                            {result.description}\n                          </p>\n                        )}\n                        {result.metadata && (\n                          <div className=\"flex items-center gap-4 mt-2 text-xs text-gray-500\">\n                            {result.metadata.date && (\n                              <div className=\"flex items-center gap-1\">\n                                <Clock className=\"w-3 h-3\" />\n                                {result.metadata.date}\n                              </div>\n                            )}\n                            {result.metadata.price && (\n                              <div className=\"flex items-center gap-1\">\n                                <DollarSign className=\"w-3 h-3\" />\n                                ${result.metadata.price.toLocaleString()}\n                              </div>\n                            )}\n                            {result.metadata.location && (\n                              <div className=\"flex items-center gap-1\">\n                                <MapPin className=\"w-3 h-3\" />\n                                {result.metadata.location}\n                              </div>\n                            )}\n                            {result.metadata.status && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {result.metadata.status}\n                              </Badge>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {!query && (\n            <div className=\"space-y-4\">\n              <div className=\"text-sm text-gray-500 mb-3\">\n                Quick Search Tips\n              </div>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <div className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\">\n                  <Calendar className=\"w-8 h-8 text-blue-600\" />\n                  <div>\n                    <div className=\"font-medium text-sm\">Events</div>\n                    <div className=\"text-xs text-gray-500\">Search by name, date, or type</div>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\">\n                  <Package className=\"w-8 h-8 text-purple-600\" />\n                  <div>\n                    <div className=\"font-medium text-sm\">Packages</div>\n                    <div className=\"text-xs text-gray-500\">Find event packages and pricing</div>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\">\n                  <Wrench className=\"w-8 h-8 text-green-600\" />\n                  <div>\n                    <div className=\"font-medium text-sm\">Services</div>\n                    <div className=\"text-xs text-gray-500\">Search available services</div>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\">\n                  <MapPin className=\"w-8 h-8 text-orange-600\" />\n                  <div>\n                    <div className=\"font-medium text-sm\">Venues</div>\n                    <div className=\"text-xs text-gray-500\">Find venue spaces and capacity</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10666},"client/src/components/ai/email-reply-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Mail, Copy, Send, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  customerEmail?: string;\n  customerName?: string;\n  initialMessage?: string;\n}\n\nexport function EmailReplyModal({ open, onOpenChange, customerEmail, customerName, initialMessage }: Props) {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    customerMessage: initialMessage || \"\",\n    context: \"\",\n    customerData: {\n      name: customerName || \"\",\n      email: customerEmail || \"\",\n      company: \"\",\n      eventType: \"\",\n      guestCount: \"\",\n      budget: \"\",\n      eventDate: \"\"\n    }\n  });\n\n  const generateEmailReply = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/email-reply\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Email Reply Generated\",\n        description: `AI generated reply with ${data.confidence}% confidence`\n      });\n    }\n  });\n\n  const handleGenerate = () => {\n    if (!formData.customerMessage.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter the customer's message\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    generateEmailReply.mutate(formData);\n  };\n\n  const handleCopyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied to Clipboard\",\n      description: \"Email content copied successfully\"\n    });\n  };\n\n  const replyData = generateEmailReply.data;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-5xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Mail className=\"h-5 w-5 text-blue-600\" />\n            Auto Email Replies\n            <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-700\">AI</Badge>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Input Form */}\n          <div className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Customer Message</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label>Customer's Email/Message</Label>\n                  <Textarea\n                    value={formData.customerMessage}\n                    onChange={(e) => setFormData(prev => ({...prev, customerMessage: e.target.value}))}\n                    placeholder=\"Paste the customer's inquiry here...\"\n                    rows={4}\n                  />\n                </div>\n\n                <div>\n                  <Label>Additional Context</Label>\n                  <Textarea\n                    value={formData.context}\n                    onChange={(e) => setFormData(prev => ({...prev, context: e.target.value}))}\n                    placeholder=\"Any additional context about the inquiry, venue availability, special offers, etc.\"\n                    rows={3}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Customer Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <Label className=\"text-sm\">Name</Label>\n                    <Input\n                      value={formData.customerData.name}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        customerData: {...prev.customerData, name: e.target.value}\n                      }))}\n                      placeholder=\"Customer name\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-sm\">Email</Label>\n                    <Input\n                      value={formData.customerData.email}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        customerData: {...prev.customerData, email: e.target.value}\n                      }))}\n                      placeholder=\"customer@email.com\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <Label className=\"text-sm\">Event Type</Label>\n                    <Input\n                      value={formData.customerData.eventType}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        customerData: {...prev.customerData, eventType: e.target.value}\n                      }))}\n                      placeholder=\"Wedding, Corporate, etc.\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-sm\">Guest Count</Label>\n                    <Input\n                      value={formData.customerData.guestCount}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        customerData: {...prev.customerData, guestCount: e.target.value}\n                      }))}\n                      placeholder=\"50\"\n                    />\n                  </div>\n                </div>\n\n                <Button \n                  onClick={handleGenerate}\n                  disabled={generateEmailReply.isPending || !formData.customerMessage.trim()}\n                  className=\"w-full\"\n                >\n                  {generateEmailReply.isPending ? \"Generating Reply...\" : \"Generate AI Reply\"}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* AI Disclaimer */}\n            <Card className=\"border-amber-200 bg-amber-50\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start gap-3\">\n                  <AlertTriangle className=\"h-5 w-5 text-amber-600 mt-0.5\" />\n                  <div>\n                    <p className=\"font-medium text-amber-800\">AI-Generated Content</p>\n                    <p className=\"text-sm text-amber-700\">\n                      Please review and customize the AI-generated reply before sending. Verify all details and pricing information.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Generated Reply */}\n          <div className=\"space-y-4\">\n            {replyData && (\n              <>\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg flex items-center justify-between\">\n                      Generated Reply\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {replyData.confidence}% confidence\n                        </Badge>\n                        <Badge variant=\"outline\" className=\"text-xs capitalize\">\n                          {replyData.tone}\n                        </Badge>\n                      </div>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <Label className=\"text-sm font-medium\">Subject Line</Label>\n                      <div className=\"mt-1 p-3 bg-gray-50 rounded border relative group\">\n                        <p className=\"font-medium\">{replyData.subject}</p>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute top-1 right-1 opacity-0 group-hover:opacity-100\"\n                          onClick={() => handleCopyToClipboard(replyData.subject)}\n                        >\n                          <Copy className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-sm font-medium\">Email Body</Label>\n                      <div className=\"mt-1 p-4 bg-gray-50 rounded border relative group\">\n                        <div className=\"whitespace-pre-wrap\">{replyData.body}</div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100\"\n                          onClick={() => handleCopyToClipboard(replyData.body)}\n                        >\n                          <Copy className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"flex gap-2\">\n                      <Button \n                        onClick={() => handleCopyToClipboard(`Subject: ${replyData.subject}\\n\\n${replyData.body}`)}\n                        variant=\"outline\"\n                        className=\"flex-1\"\n                      >\n                        <Copy className=\"h-4 w-4 mr-2\" />\n                        Copy Full Email\n                      </Button>\n                      <Button className=\"flex-1\">\n                        <Send className=\"h-4 w-4 mr-2\" />\n                        Open in Email Client\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Next Steps */}\n                {replyData.nextSteps?.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">Recommended Next Steps</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ul className=\"space-y-2\">\n                        {replyData.nextSteps.map((step: string, index: number) => (\n                          <li key={index} className=\"flex items-start gap-2 text-sm\">\n                            <CheckCircle className=\"h-4 w-4 text-green-500 mt-0.5\" />\n                            {step}\n                          </li>\n                        ))}\n                      </ul>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Follow-up Suggestion */}\n                {replyData.suggestedFollowUp && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">Follow-up Reminder</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-gray-700\">{replyData.suggestedFollowUp}</p>\n                    </CardContent>\n                  </Card>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11679},"client/src/components/ai/lead-scoring-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Star, TrendingUp, DollarSign, Clock, AlertTriangle, Target } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  customerData?: any;\n}\n\nexport function LeadScoringModal({ open, onOpenChange, customerData }: Props) {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    customerData: {\n      name: customerData?.name || \"\",\n      email: customerData?.email || \"\",\n      company: customerData?.company || \"\",\n      phone: customerData?.phone || \"\",\n      eventType: \"\",\n      guestCount: \"\",\n      budget: \"\",\n      eventDate: \"\",\n      venue: \"\",\n      timeline: \"\",\n      previousEvents: \"\",\n      referralSource: \"\",\n      urgency: \"medium\"\n    },\n    interactionHistory: []\n  });\n\n  const [interactionText, setInteractionText] = useState(\"\");\n\n  const scoreLeadMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/lead-score\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Lead Score Calculated\",\n        description: `Lead scored ${data.score}/100 (${data.category} priority)`\n      });\n    }\n  });\n\n  const handleScoreLead = () => {\n    const interactions = interactionText.trim() \n      ? interactionText.split('\\n').map(interaction => ({ \n          type: \"note\", \n          content: interaction.trim(),\n          date: new Date().toISOString()\n        }))\n      : [];\n\n    scoreLeadMutation.mutate({\n      ...formData,\n      interactionHistory: interactions\n    });\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return \"text-green-600\";\n    if (score >= 60) return \"text-yellow-600\";\n    return \"text-red-600\";\n  };\n\n  const getScoreBackground = (score: number) => {\n    if (score >= 80) return \"bg-green-100 border-green-200\";\n    if (score >= 60) return \"bg-yellow-100 border-yellow-200\";\n    return \"bg-red-100 border-red-200\";\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case \"high\": return <TrendingUp className=\"h-5 w-5 text-green-600\" />;\n      case \"medium\": return <Target className=\"h-5 w-5 text-yellow-600\" />;\n      case \"low\": return <Clock className=\"h-5 w-5 text-red-600\" />;\n      default: return <Star className=\"h-5 w-5\" />;\n    }\n  };\n\n  const scoringData = scoreLeadMutation.data;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-5xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Star className=\"h-5 w-5 text-blue-600\" />\n            Lead Scoring\n            <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-700\">AI</Badge>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Input Form */}\n          <div className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Customer Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <Label className=\"text-sm\">Name</Label>\n                    <Input\n                      value={formData.customerData.name}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        customerData: {...prev.customerData, name: e.target.value}\n                      }))}\n                      placeholder=\"Customer name\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-sm\">Company</Label>\n                    <Input\n                      value={formData.customerData.company}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        customerData: {...prev.customerData, company: e.target.value}\n                      }))}\n                      placeholder=\"Company name\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <Label className=\"text-sm\">Email</Label>\n                    <Input\n                      value={formData.customerData.email}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        customerData: {...prev.customerData, email: e.target.value}\n                      }))}\n                      placeholder=\"customer@email.com\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-sm\">Phone</Label>\n                    <Input\n                      value={formData.customerData.phone}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        customerData: {...prev.customerData, phone: e.target.value}\n                      }))}\n                      placeholder=\"(555) 123-4567\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Event Details</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <Label className=\"text-sm\">Event Type</Label>\n                    <Select value={formData.customerData.eventType} onValueChange={(value) => \n                      setFormData(prev => ({...prev, customerData: {...prev.customerData, eventType: value}}))\n                    }>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"wedding\">Wedding</SelectItem>\n                        <SelectItem value=\"corporate\">Corporate Event</SelectItem>\n                        <SelectItem value=\"birthday\">Birthday Party</SelectItem>\n                        <SelectItem value=\"conference\">Conference</SelectItem>\n                        <SelectItem value=\"gala\">Gala</SelectItem>\n                        <SelectItem value=\"networking\">Networking</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm\">Guest Count</Label>\n                    <Input\n                      value={formData.customerData.guestCount}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        customerData: {...prev.customerData, guestCount: e.target.value}\n                      }))}\n                      placeholder=\"50\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <Label className=\"text-sm\">Budget Range</Label>\n                    <Select value={formData.customerData.budget} onValueChange={(value) => \n                      setFormData(prev => ({...prev, customerData: {...prev.customerData, budget: value}}))\n                    }>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select budget\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"under-5k\">Under $5,000</SelectItem>\n                        <SelectItem value=\"5k-10k\">$5,000 - $10,000</SelectItem>\n                        <SelectItem value=\"10k-25k\">$10,000 - $25,000</SelectItem>\n                        <SelectItem value=\"25k-50k\">$25,000 - $50,000</SelectItem>\n                        <SelectItem value=\"over-50k\">Over $50,000</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm\">Urgency</Label>\n                    <Select value={formData.customerData.urgency} onValueChange={(value) => \n                      setFormData(prev => ({...prev, customerData: {...prev.customerData, urgency: value}}))\n                    }>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Low - Exploring Options</SelectItem>\n                        <SelectItem value=\"medium\">Medium - Actively Planning</SelectItem>\n                        <SelectItem value=\"high\">High - Need to Book Soon</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm\">Event Date</Label>\n                  <Input\n                    type=\"date\"\n                    value={formData.customerData.eventDate}\n                    onChange={(e) => setFormData(prev => ({\n                      ...prev,\n                      customerData: {...prev.customerData, eventDate: e.target.value}\n                    }))}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Interaction History</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div>\n                  <Label className=\"text-sm\">Notes & Interactions (one per line)</Label>\n                  <Textarea\n                    value={interactionText}\n                    onChange={(e) => setInteractionText(e.target.value)}\n                    placeholder=\"Responded quickly to initial inquiry&#10;Asked detailed questions about catering&#10;Mentioned budget flexibility&#10;Referred by previous client\"\n                    rows={4}\n                  />\n                </div>\n\n                <Button \n                  onClick={handleScoreLead}\n                  disabled={scoreLeadMutation.isPending || !formData.customerData.name}\n                  className=\"w-full mt-4\"\n                >\n                  {scoreLeadMutation.isPending ? \"Analyzing Lead...\" : \"Calculate Lead Score\"}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* AI Disclaimer */}\n            <Card className=\"border-amber-200 bg-amber-50\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start gap-3\">\n                  <AlertTriangle className=\"h-5 w-5 text-amber-600 mt-0.5\" />\n                  <div>\n                    <p className=\"font-medium text-amber-800\">AI-Powered Analysis</p>\n                    <p className=\"text-sm text-amber-700\">\n                      Lead scores are AI-generated estimates. Consider multiple factors and use your professional judgment for final decisions.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Scoring Results */}\n          <div className=\"space-y-4\">\n            {scoringData && (\n              <>\n                {/* Lead Score Overview */}\n                <Card className={`${getScoreBackground(scoringData.score)}`}>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        {getCategoryIcon(scoringData.category)}\n                        Lead Score\n                      </div>\n                      <Badge variant=\"outline\" className=\"capitalize\">\n                        {scoringData.category} Priority\n                      </Badge>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center\">\n                      <div className={`text-4xl font-bold ${getScoreColor(scoringData.score)}`}>\n                        {scoringData.score}/100\n                      </div>\n                      <Progress value={scoringData.score} className=\"mt-4\" />\n                      <p className=\"text-sm text-gray-600 mt-2\">\n                        Close Probability: {scoringData.closeProbability}%\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Priority Factors Breakdown */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Score Breakdown</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {Object.entries(scoringData.priorityFactors || {}).map(([factor, score]: [string, any]) => (\n                        <div key={factor} className=\"space-y-1\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"capitalize\">{factor.replace(/([A-Z])/g, ' $1').toLowerCase()}</span>\n                            <span className=\"font-medium\">{score}/100</span>\n                          </div>\n                          <Progress value={score} className=\"h-2\" />\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Estimated Value */}\n                {scoringData.estimatedValue > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg flex items-center gap-2\">\n                        <DollarSign className=\"h-5 w-5\" />\n                        Revenue Potential\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        ${scoringData.estimatedValue?.toLocaleString()}\n                      </div>\n                      <p className=\"text-sm text-gray-600\">Estimated event value</p>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Key Indicators */}\n                {scoringData.keyIndicators?.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">Key Indicators</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ul className=\"space-y-2\">\n                        {scoringData.keyIndicators.map((indicator: string, index: number) => (\n                          <li key={index} className=\"text-sm flex items-start gap-2\">\n                            <span className=\"text-blue-500\">•</span>\n                            {indicator}\n                          </li>\n                        ))}\n                      </ul>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Recommended Actions */}\n                {scoringData.recommendedActions?.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">Recommended Actions</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ul className=\"space-y-2\">\n                        {scoringData.recommendedActions.map((action: string, index: number) => (\n                          <li key={index} className=\"text-sm flex items-start gap-2\">\n                            <span className=\"text-green-500\">✓</span>\n                            {action}\n                          </li>\n                        ))}\n                      </ul>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Reasoning */}\n                {scoringData.reasoning && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">AI Analysis</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-gray-700\">{scoringData.reasoning}</p>\n                    </CardContent>\n                  </Card>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":17366},"client/src/components/ai/smart-scheduling-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, Calendar, Users, Zap, AlertTriangle } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format, addDays } from \"date-fns\";\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  eventData?: {\n    eventType: string;\n    guestCount: number;\n    duration: number;\n  };\n}\n\nexport function SmartSchedulingModal({ open, onOpenChange, eventData }: Props) {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    eventType: eventData?.eventType || \"\",\n    guestCount: eventData?.guestCount || 50,\n    duration: eventData?.duration || 4,\n    venuePreferences: []\n  });\n\n  const generateScheduling = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/smart-scheduling\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Smart Scheduling Generated\",\n        description: `Found ${data.recommendedSlots?.length || 0} optimal time slots`\n      });\n    }\n  });\n\n  const handleGenerate = () => {\n    generateScheduling.mutate(formData);\n  };\n\n  const schedulingData = generateScheduling.data;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Zap className=\"h-5 w-5 text-blue-600\" />\n            Smart Scheduling\n            <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-700\">AI</Badge>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Input Form */}\n          <div className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Event Details</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label>Event Type</Label>\n                  <Select value={formData.eventType} onValueChange={(value) => setFormData(prev => ({...prev, eventType: value}))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select event type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"corporate\">Corporate Event</SelectItem>\n                      <SelectItem value=\"wedding\">Wedding</SelectItem>\n                      <SelectItem value=\"birthday\">Birthday Party</SelectItem>\n                      <SelectItem value=\"conference\">Conference</SelectItem>\n                      <SelectItem value=\"gala\">Gala</SelectItem>\n                      <SelectItem value=\"networking\">Networking Event</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label>Guest Count</Label>\n                  <Input\n                    type=\"number\"\n                    value={formData.guestCount}\n                    onChange={(e) => setFormData(prev => ({...prev, guestCount: parseInt(e.target.value) || 0}))}\n                    min=\"1\"\n                  />\n                </div>\n\n                <div>\n                  <Label>Duration (hours)</Label>\n                  <Input\n                    type=\"number\"\n                    value={formData.duration}\n                    onChange={(e) => setFormData(prev => ({...prev, duration: parseInt(e.target.value) || 0}))}\n                    min=\"1\"\n                    max=\"12\"\n                  />\n                </div>\n\n                <Button \n                  onClick={handleGenerate}\n                  disabled={generateScheduling.isPending || !formData.eventType}\n                  className=\"w-full\"\n                >\n                  {generateScheduling.isPending ? \"Generating...\" : \"Generate Smart Schedule\"}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* AI Disclaimer */}\n            <Card className=\"border-amber-200 bg-amber-50\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start gap-3\">\n                  <AlertTriangle className=\"h-5 w-5 text-amber-600 mt-0.5\" />\n                  <div>\n                    <p className=\"font-medium text-amber-800\">AI-Generated Suggestions</p>\n                    <p className=\"text-sm text-amber-700\">\n                      These scheduling recommendations are AI-generated and should be verified against your actual venue availability and policies.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Results */}\n          <div className=\"space-y-4\">\n            {schedulingData && (\n              <>\n                {/* Recommended Time Slots */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg flex items-center gap-2\">\n                      <Calendar className=\"h-5 w-5\" />\n                      Recommended Time Slots\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {schedulingData.recommendedSlots?.map((slot: any, index: number) => (\n                        <div key={index} className=\"p-3 border rounded-lg hover:bg-gray-50\">\n                          <div className=\"flex justify-between items-start mb-2\">\n                            <div>\n                              <p className=\"font-medium\">{format(new Date(`${slot.date}T${slot.startTime}`), 'EEEE, MMM d')}</p>\n                              <p className=\"text-sm text-gray-600 flex items-center gap-1\">\n                                <Clock className=\"h-4 w-4\" />\n                                {slot.startTime} - {slot.endTime}\n                              </p>\n                            </div>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {slot.confidence}% confidence\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-gray-700\">{slot.reason}</p>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* AI Insights */}\n                {schedulingData.insights?.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">AI Insights</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ul className=\"space-y-2\">\n                        {schedulingData.insights.map((insight: string, index: number) => (\n                          <li key={index} className=\"text-sm text-gray-700 flex items-start gap-2\">\n                            <span className=\"text-blue-500\">•</span>\n                            {insight}\n                          </li>\n                        ))}\n                      </ul>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Alternative Options */}\n                {schedulingData.alternativeOptions?.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">Alternative Considerations</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ul className=\"space-y-1\">\n                        {schedulingData.alternativeOptions.map((option: string, index: number) => (\n                          <li key={index} className=\"text-sm text-gray-600\">\n                            • {option}\n                          </li>\n                        ))}\n                      </ul>\n                    </CardContent>\n                  </Card>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8720},"client/src/components/proposals/proposal-creation-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { FileText, Save, Send, Calendar, Users, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\nimport { EmailPreviewModal } from \"./email-preview-modal\";\n\ninterface ProposalCreationModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  eventData?: any;\n  customer?: any;\n}\n\nexport function ProposalCreationModal({ \n  open, \n  onOpenChange, \n  eventData, \n  customer \n}: ProposalCreationModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Basic proposal info\n  const [proposalTitle, setProposalTitle] = useState(\"\");\n  const [proposalContent, setProposalContent] = useState(\"\");\n  const [selectedCustomer, setSelectedCustomer] = useState(customer?.id || \"\");\n  const [validUntil, setValidUntil] = useState(\"\");\n  \n  // Event configuration - supporting multiple events\n  const [events, setEvents] = useState<Array<{\n    id: string;\n    eventName: string;\n    eventType: string;\n    eventDate: string;\n    startTime: string;\n    endTime: string;\n    guestCount: number;\n    selectedVenue: string;\n    selectedSpace: string;\n    selectedPackage: string;\n    selectedServices: string[];\n    customPackagePrice?: number;\n    customServicePrices?: { [serviceId: string]: number };\n  }>>([]);\n  \n  // New customer creation\n  const [showCreateCustomer, setShowCreateCustomer] = useState(false);\n  const [newCustomerName, setNewCustomerName] = useState(\"\");\n  const [newCustomerEmail, setNewCustomerEmail] = useState(\"\");\n  const [newCustomerPhone, setNewCustomerPhone] = useState(\"\");\n  \n  // Pricing and deposit\n  const [totalAmount, setTotalAmount] = useState(0);\n  const [depositType, setDepositType] = useState(\"percentage\");\n  const [depositValue, setDepositValue] = useState(25);\n  const [depositAmount, setDepositAmount] = useState(0);\n  const [customPricing, setCustomPricing] = useState(false);\n  \n  // Email preview modal\n  const [showEmailPreview, setShowEmailPreview] = useState(false);\n  const [proposalId, setProposalId] = useState<string | null>(null);\n\n  // Data queries\n  const { data: customers = [] } = useQuery({ queryKey: [\"/api/customers\"] });\n  const { data: venues = [] } = useQuery({ queryKey: [\"/api/venues-with-spaces\"] });\n  const { data: packages = [] } = useQuery({ queryKey: [\"/api/packages\"] });\n  const { data: services = [] } = useQuery({ queryKey: [\"/api/services\"] });\n  \n  // New customer creation mutation\n  const createCustomerMutation = useMutation({\n    mutationFn: async (customerData: any) => {\n      return await apiRequest(\"POST\", \"/api/customers\", customerData);\n    },\n    onSuccess: (newCustomer) => {\n      toast({\n        title: \"Customer Created\",\n        description: \"New customer has been added successfully\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      setSelectedCustomer(newCustomer.id);\n      setShowCreateCustomer(false);\n      setNewCustomerName(\"\");\n      setNewCustomerEmail(\"\");\n      setNewCustomerPhone(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create customer\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Save proposal mutation\n  const saveProposalMutation = useMutation({\n    mutationFn: async (proposalData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/proposals\", proposalData);\n      return response.json();\n    },\n    onSuccess: (proposal) => {\n      setProposalId(proposal.id);\n      toast({\n        title: \"Proposal Saved\",\n        description: \"Proposal has been saved successfully\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/proposals\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save proposal\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Send email mutation\n  const sendEmailMutation = useMutation({\n    mutationFn: async (emailData: {\n      to: string;\n      subject: string;\n      message: string;\n      proposalViewLink: string;\n    }) => {\n      const response = await apiRequest(\"POST\", \"/api/proposals/send-email\", {\n        proposalId,\n        customerId: selectedCustomer,\n        emailData\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Proposal Sent\",\n        description: \"Email sent successfully and communication logged\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/communications\", selectedCustomer] });\n      onOpenChange(false);\n      // Reset form\n      setProposalTitle(\"\");\n      setProposalContent(\"\");\n      setEvents([]);\n      setProposalId(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send email\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Initialize with event data if provided\n  useEffect(() => {\n    if (eventData && open) {\n      setSelectedCustomer(eventData.customerId || \"\");\n      setTotalAmount(eventData.totalAmount || 0);\n      \n      // Convert eventData to events array\n      if (eventData.eventDates && eventData.eventDates.length > 0) {\n        const newEvents = eventData.eventDates.map((eventDate: any, index: number) => ({\n          id: `event-${index}`,\n          eventName: eventData.eventName || \"\",\n          eventType: \"corporate\", // Default type\n          eventDate: format(eventDate.date, 'yyyy-MM-dd'),\n          startTime: eventDate.startTime || \"10:00\",\n          endTime: eventDate.endTime || \"18:00\",\n          guestCount: eventDate.guestCount || 50,\n          selectedVenue: eventDate.venue || \"\",\n          selectedSpace: eventDate.space || \"\",\n          selectedPackage: eventDate.selectedPackage?.id || \"none\",\n          selectedServices: eventDate.selectedServices || [],\n          customServicePrices: {}\n        }));\n        \n        setEvents(newEvents);\n      } else {\n        // Single event fallback\n        setEvents([{\n          id: \"event-0\",\n          eventName: eventData.eventName || \"\",\n          eventType: \"corporate\",\n          eventDate: eventData.eventDate || \"\",\n          startTime: eventData.startTime || \"10:00\",\n          endTime: eventData.endTime || \"18:00\",\n          guestCount: eventData.guestCount || 50,\n          selectedVenue: eventData.venueId || \"\",\n          selectedSpace: eventData.spaceId || \"\",\n          selectedPackage: eventData.packageId || \"none\",\n          selectedServices: eventData.selectedServices || [],\n          customServicePrices: {}\n        }]);\n      }\n      \n      setProposalTitle(`${eventData.eventName || \"Event\"} Proposal`);\n    } else if (open && events.length === 0) {\n      // Initialize with empty event if no data provided\n      addNewEvent();\n    }\n  }, [eventData, open]);\n\n  // Add/remove events\n  const addNewEvent = () => {\n    const newEvent = {\n      id: `event-${Date.now()}`,\n      eventName: \"\",\n      eventType: \"corporate\",\n      eventDate: \"\",\n      startTime: \"10:00\",\n      endTime: \"18:00\",\n      guestCount: 50,\n      selectedVenue: \"\",\n      selectedSpace: \"\",\n      selectedPackage: \"none\",\n      selectedServices: [],\n      customServicePrices: {}\n    };\n    setEvents([...events, newEvent]);\n  };\n\n  const removeEvent = (eventId: string) => {\n    setEvents(events.filter(e => e.id !== eventId));\n  };\n\n  const updateEvent = (eventId: string, field: string, value: any) => {\n    setEvents(events.map(event => \n      event.id === eventId ? { ...event, [field]: value } : event\n    ));\n  };\n\n  // Calculate pricing for all events with custom pricing support\n  useEffect(() => {\n    let total = 0;\n    \n    events.forEach(event => {\n      // Add package price (custom or default)\n      if (event.selectedPackage && event.selectedPackage !== \"none\") {\n        const pkg = packages.find((p: any) => p.id === event.selectedPackage);\n        if (pkg) {\n          const basePrice = event.customPackagePrice !== undefined ? event.customPackagePrice : parseFloat(pkg.price);\n          const packagePrice = pkg.pricingModel === \"per_person\" \n            ? basePrice * event.guestCount \n            : basePrice;\n          total += packagePrice;\n        }\n      }\n      \n      // Add service prices (custom or default)\n      event.selectedServices.forEach(serviceId => {\n        const service = services.find((s: any) => s.id === serviceId);\n        if (service) {\n          const basePrice = event.customServicePrices?.[serviceId] !== undefined \n            ? event.customServicePrices[serviceId] \n            : parseFloat(service.price);\n          const servicePrice = service.pricingModel === \"per_person\"\n            ? basePrice * event.guestCount\n            : basePrice;\n          total += servicePrice;\n        }\n      });\n    });\n    \n    if (!eventData || eventData.totalAmount === undefined) {\n      setTotalAmount(total);\n    }\n    \n    // Calculate deposit\n    if (depositType === \"percentage\") {\n      setDepositAmount(totalAmount * (depositValue / 100));\n    } else {\n      setDepositAmount(depositValue);\n    }\n  }, [events, packages, services, depositType, depositValue, totalAmount, eventData]);\n\n  const createProposalMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/proposals\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Proposal Created\",\n        description: \"The proposal has been created successfully\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/proposals\"] });\n      onOpenChange(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create proposal\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const sendProposalMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/proposals/send\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Proposal Sent\",\n        description: \"The proposal has been sent to the customer via email\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/proposals\"] });\n      onOpenChange(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send proposal\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const resetForm = () => {\n    setProposalTitle(\"\");\n    setProposalContent(\"\");\n    setSelectedCustomer(\"\");\n    setValidUntil(\"\");\n    setEvents([]);\n    setTotalAmount(0);\n    setDepositAmount(0);\n    setNewCustomerName(\"\");\n    setNewCustomerEmail(\"\");\n    setNewCustomerPhone(\"\");\n  };\n\n  const handleSaveDraft = () => {\n    if (!proposalTitle || !selectedCustomer || events.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in proposal title, select customer, and add at least one event\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const proposalData = {\n      title: proposalTitle,\n      content: proposalContent,\n      customerId: selectedCustomer,\n      events: events,\n      totalAmount: totalAmount.toString(),\n      depositAmount: depositAmount.toString(),\n      depositType,\n      depositValue: depositValue.toString(),\n      validUntil: validUntil ? new Date(validUntil) : null,\n      status: \"draft\"\n    };\n    \n    createProposalMutation.mutate(proposalData);\n  };\n\n  const handleSendProposal = async () => {\n    if (!proposalTitle || !selectedCustomer || events.length === 0) {\n      toast({\n        title: \"Error\", \n        description: \"Please fill in proposal title, select customer, and add at least one event\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // First save as draft if not already saved\n    if (!proposalId) {\n      const proposalData = {\n        title: proposalTitle,\n        content: proposalContent,\n        customerId: selectedCustomer,\n        events: events,\n        totalAmount: totalAmount.toString(),\n        depositAmount: depositAmount.toString(),\n        depositType,\n        depositValue: depositValue.toString(),\n        validUntil: validUntil ? new Date(validUntil) : null,\n        status: \"draft\"\n      };\n\n      try {\n        const response = await apiRequest(\"POST\", \"/api/proposals\", proposalData);\n        const proposal = await response.json();\n        setProposalId(proposal.id);\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to save proposal before sending\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n    }\n\n    // Open email preview modal\n    setShowEmailPreview(true);\n  };\n\n  const handleSendEmail = async (emailData: {\n    to: string;\n    subject: string;\n    message: string;\n    proposalViewLink: string;\n  }) => {\n    await sendEmailMutation.mutateAsync(emailData);\n  };\n\n  const customerData = customers.find((c: any) => c.id === selectedCustomer);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"w-full max-w-[95vw] sm:max-w-4xl lg:max-w-6xl max-h-[95vh] overflow-hidden flex flex-col p-3 sm:p-6\">\n        <DialogHeader className=\"flex-shrink-0\">\n          <DialogTitle className=\"flex items-center gap-2 text-base sm:text-lg\">\n            <FileText className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n            Create Event Proposal\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"flex-1 overflow-y-auto\">\n          <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-4 sm:gap-6\">\n            {/* Left Column - Proposal Configuration */}\n            <div className=\"space-y-4 sm:space-y-6\">\n              {/* Basic Information */}\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-base sm:text-lg\">Proposal Details</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3 sm:space-y-4\">\n                <div>\n                  <Label htmlFor=\"proposalTitle\">Proposal Title</Label>\n                  <Input\n                    id=\"proposalTitle\"\n                    value={proposalTitle}\n                    onChange={(e) => setProposalTitle(e.target.value)}\n                    placeholder=\"e.g., Corporate Annual Gala Proposal\"\n                  />\n                </div>\n                \n                <div>\n                  <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2\">\n                    <Label htmlFor=\"customer\">Customer</Label>\n                    <Button \n                      type=\"button\"\n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => setShowCreateCustomer(true)}\n                      className=\"w-full sm:w-auto\"\n                    >\n                      <Users className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1\" />\n                      <span className=\"text-xs sm:text-sm\">New Customer</span>\n                    </Button>\n                  </div>\n                  <Select value={selectedCustomer} onValueChange={setSelectedCustomer}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select customer\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {customers.map((customer: any) => (\n                        <SelectItem key={customer.id} value={customer.id}>\n                          {customer.name} - {customer.email}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"validUntil\">Valid Until</Label>\n                  <Input\n                    id=\"validUntil\"\n                    type=\"date\"\n                    value={validUntil}\n                    onChange={(e) => setValidUntil(e.target.value)}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"proposalContent\">Proposal Message</Label>\n                  <Textarea\n                    id=\"proposalContent\"\n                    value={proposalContent}\n                    onChange={(e) => setProposalContent(e.target.value)}\n                    placeholder=\"Personalized message for the customer...\"\n                    rows={4}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Multiple Events Configuration */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2\">\n                  <CardTitle className=\"text-base sm:text-lg\">Events ({events.length})</CardTitle>\n                  <Button \n                    type=\"button\"\n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={addNewEvent}\n                    className=\"w-full sm:w-auto\"\n                  >\n                    <Calendar className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1\" />\n                    <span className=\"text-xs sm:text-sm\">Add Event</span>\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4 sm:space-y-6\">\n                {events.map((event, index) => (\n                  <Card key={event.id} className=\"p-3 sm:p-4 bg-slate-50\">\n                    <div className=\"flex items-center justify-between mb-3 sm:mb-4\">\n                      <h4 className=\"font-medium text-sm sm:text-base\">Event {index + 1}</h4>\n                      {events.length > 1 && (\n                        <Button \n                          type=\"button\"\n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => removeEvent(event.id)}\n                          className=\"text-red-600 hover:text-red-700 h-8 w-8\"\n                        >\n                          <X className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                        </Button>\n                      )}\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4\">\n                      <div>\n                        <Label className=\"text-sm\">Event Name</Label>\n                        <Input\n                          value={event.eventName}\n                          onChange={(e) => updateEvent(event.id, 'eventName', e.target.value)}\n                          placeholder=\"Event name\"\n                          className=\"text-sm\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-sm\">Event Type</Label>\n                        <Select value={event.eventType} onValueChange={(value) => updateEvent(event.id, 'eventType', value)}>\n                          <SelectTrigger className=\"text-sm\">\n                            <SelectValue placeholder=\"Select type\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"wedding\">Wedding</SelectItem>\n                            <SelectItem value=\"corporate\">Corporate</SelectItem>\n                            <SelectItem value=\"social\">Social</SelectItem>\n                            <SelectItem value=\"conference\">Conference</SelectItem>\n                            <SelectItem value=\"other\">Other</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3 sm:gap-4\">\n                      <div>\n                        <Label className=\"text-sm\">Event Date</Label>\n                        <Input\n                          type=\"date\"\n                          value={event.eventDate}\n                          onChange={(e) => updateEvent(event.id, 'eventDate', e.target.value)}\n                          className=\"text-sm\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-sm\">Start Time</Label>\n                        <Input\n                          type=\"time\"\n                          value={event.startTime}\n                          onChange={(e) => updateEvent(event.id, 'startTime', e.target.value)}\n                          className=\"text-sm\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-sm\">End Time</Label>\n                        <Input\n                          type=\"time\"\n                          value={event.endTime}\n                          onChange={(e) => updateEvent(event.id, 'endTime', e.target.value)}\n                          className=\"text-sm\"\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-sm\">Guest Count</Label>\n                      <Input\n                        type=\"number\"\n                        min=\"1\"\n                        value={event.guestCount}\n                        onChange={(e) => updateEvent(event.id, 'guestCount', parseInt(e.target.value) || 0)}\n                        className=\"text-sm\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label className=\"text-sm\">Venue</Label>\n                      <Select value={event.selectedVenue} onValueChange={(value) => {\n                        updateEvent(event.id, 'selectedVenue', value);\n                        updateEvent(event.id, 'selectedSpace', ''); // Reset space when venue changes\n                      }}>\n                        <SelectTrigger className=\"text-sm\">\n                          <SelectValue placeholder=\"Select venue\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {venues.map((venue: any) => (\n                            <SelectItem key={venue.id} value={venue.id}>\n                              {venue.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {venues.find((v: any) => v.id === event.selectedVenue)?.spaces && (\n                      <div>\n                        <Label className=\"text-sm\">Space</Label>\n                        <Select value={event.selectedSpace} onValueChange={(value) => updateEvent(event.id, 'selectedSpace', value)}>\n                          <SelectTrigger className=\"text-sm\">\n                            <SelectValue placeholder=\"Select space\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {venues.find((v: any) => v.id === event.selectedVenue)?.spaces?.map((space: any) => (\n                              <SelectItem key={space.id} value={space.id}>\n                                {space.name} - Capacity: {space.capacity}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    )}\n\n                    <div>\n                      <Label className=\"text-sm\">Package</Label>\n                      <Select value={event.selectedPackage} onValueChange={(value) => updateEvent(event.id, 'selectedPackage', value)}>\n                        <SelectTrigger className=\"text-sm\">\n                          <SelectValue placeholder=\"Select package\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"none\">No Package</SelectItem>\n                          {packages.map((pkg: any) => (\n                            <SelectItem key={pkg.id} value={pkg.id}>\n                              {pkg.name} - ${pkg.price}{pkg.pricingModel === \"per_person\" ? \"/person\" : \"\"}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      \n                      {event.selectedPackage && event.selectedPackage !== \"none\" && (\n                        <div className=\"mt-2\">\n                          <Label className=\"text-xs sm:text-sm text-slate-600\">Custom Package Price (Optional)</Label>\n                          <div className=\"space-y-2\">\n                            <div className=\"flex flex-col sm:flex-row gap-2\">\n                              <Input\n                                type=\"number\"\n                                min=\"0\"\n                                step=\"0.01\"\n                                placeholder={(() => {\n                                  const pkg = packages.find((p: any) => p.id === event.selectedPackage);\n                                  return pkg ? `Default: $${pkg.price}` : \"Enter custom price\";\n                                })()}\n                                value={event.customPackagePrice || \"\"}\n                                onChange={(e) => updateEvent(event.id, 'customPackagePrice', e.target.value ? parseFloat(e.target.value) : undefined)}\n                                className=\"text-sm flex-1\"\n                              />\n                              <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => updateEvent(event.id, 'customPackagePrice', undefined)}\n                                className=\"text-xs\"\n                              >\n                                Reset\n                              </Button>\n                            </div>\n                            \n                            {/* Quick discount/markup buttons */}\n                            <div className=\"grid grid-cols-4 gap-1\">\n                              {[10, 15, 20, 25].map(discount => (\n                                <Button\n                                  key={discount}\n                                  type=\"button\"\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  className=\"text-xs py-1 px-2\"\n                                  onClick={() => {\n                                    const pkg = packages.find((p: any) => p.id === event.selectedPackage);\n                                    if (pkg) {\n                                      const discountedPrice = parseFloat(pkg.price) * (1 - discount / 100);\n                                      updateEvent(event.id, 'customPackagePrice', discountedPrice);\n                                    }\n                                  }}\n                                >\n                                  -{discount}%\n                                </Button>\n                              ))}\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n\n                    <div>\n                      <Label className=\"text-sm\">Add-on Services</Label>\n                      <div className=\"space-y-3 max-h-48 overflow-y-auto\">\n                        {services.map((service: any) => (\n                          <div key={service.id} className=\"space-y-2\">\n                            <div className=\"flex items-start space-x-2\">\n                              <Checkbox\n                                id={`${event.id}-service-${service.id}`}\n                                checked={event.selectedServices.includes(service.id)}\n                                onCheckedChange={(checked) => {\n                                  const newServices = checked \n                                    ? [...event.selectedServices, service.id]\n                                    : event.selectedServices.filter(id => id !== service.id);\n                                  updateEvent(event.id, 'selectedServices', newServices);\n                                }}\n                                className=\"mt-1\"\n                              />\n                              <Label htmlFor={`${event.id}-service-${service.id}`} className=\"text-xs sm:text-sm flex-1 leading-tight\">\n                                {service.name} - ${service.price}{service.pricingModel === \"per_person\" ? \"/person\" : \"\"}\n                              </Label>\n                            </div>\n                            \n                            {event.selectedServices.includes(service.id) && (\n                              <div className=\"ml-4 sm:ml-6\">\n                                <Label className=\"text-xs text-slate-600\">Custom Price (Optional)</Label>\n                                <div className=\"space-y-2\">\n                                  <div className=\"flex flex-col sm:flex-row gap-2\">\n                                    <Input\n                                      type=\"number\"\n                                      min=\"0\"\n                                      step=\"0.01\"\n                                      placeholder={`Default: $${service.price}`}\n                                      value={event.customServicePrices?.[service.id] || \"\"}\n                                      onChange={(e) => {\n                                        const customPrices = { ...event.customServicePrices };\n                                        if (e.target.value) {\n                                          customPrices[service.id] = parseFloat(e.target.value);\n                                        } else {\n                                          delete customPrices[service.id];\n                                        }\n                                        updateEvent(event.id, 'customServicePrices', customPrices);\n                                      }}\n                                      className=\"text-xs flex-1\"\n                                    />\n                                    <Button\n                                      type=\"button\"\n                                      variant=\"outline\"\n                                      size=\"sm\"\n                                      onClick={() => {\n                                        const customPrices = { ...event.customServicePrices };\n                                        delete customPrices[service.id];\n                                        updateEvent(event.id, 'customServicePrices', customPrices);\n                                      }}\n                                      className=\"text-xs\"\n                                    >\n                                      Reset\n                                    </Button>\n                                  </div>\n                                  \n                                  {/* Quick discount buttons for services */}\n                                  <div className=\"grid grid-cols-3 gap-1\">\n                                    {[10, 15, 20].map(discount => (\n                                      <Button\n                                        key={discount}\n                                        type=\"button\"\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        className=\"text-xs px-2 py-1\"\n                                        onClick={() => {\n                                          const discountedPrice = parseFloat(service.price) * (1 - discount / 100);\n                                          const customPrices = { ...event.customServicePrices };\n                                          customPrices[service.id] = discountedPrice;\n                                          updateEvent(event.id, 'customServicePrices', customPrices);\n                                        }}\n                                      >\n                                        -{discount}%\n                                      </Button>\n                                    ))}\n                                  </div>\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* New Customer Creation Modal */}\n            <Dialog open={showCreateCustomer} onOpenChange={setShowCreateCustomer}>\n              <DialogContent className=\"w-[95vw] max-w-md\">\n                <DialogHeader>\n                  <DialogTitle className=\"text-base sm:text-lg\">Create New Customer</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-3 sm:space-y-4\">\n                  <div>\n                    <Label htmlFor=\"newCustomerName\">Customer Name</Label>\n                    <Input\n                      id=\"newCustomerName\"\n                      value={newCustomerName}\n                      onChange={(e) => setNewCustomerName(e.target.value)}\n                      placeholder=\"Enter customer name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"newCustomerEmail\">Email</Label>\n                    <Input\n                      id=\"newCustomerEmail\"\n                      type=\"email\"\n                      value={newCustomerEmail}\n                      onChange={(e) => setNewCustomerEmail(e.target.value)}\n                      placeholder=\"Enter email address\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"newCustomerPhone\">Phone</Label>\n                    <Input\n                      id=\"newCustomerPhone\"\n                      value={newCustomerPhone}\n                      onChange={(e) => setNewCustomerPhone(e.target.value)}\n                      placeholder=\"Enter phone number\"\n                    />\n                  </div>\n                </div>\n                <div className=\"flex justify-end gap-3\">\n                  <Button variant=\"outline\" onClick={() => setShowCreateCustomer(false)}>\n                    Cancel\n                  </Button>\n                  <Button \n                    onClick={() => {\n                      if (!newCustomerName || !newCustomerEmail) {\n                        toast({\n                          title: \"Error\",\n                          description: \"Name and email are required\",\n                          variant: \"destructive\"\n                        });\n                        return;\n                      }\n                      createCustomerMutation.mutate({\n                        name: newCustomerName,\n                        email: newCustomerEmail,\n                        phone: newCustomerPhone,\n                        customerType: \"individual\" // CRITICAL: Add missing customerType\n                      });\n                    }}\n                    disabled={createCustomerMutation.isPending}\n                  >\n                    {createCustomerMutation.isPending ? \"Creating...\" : \"Create Customer\"}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n            </div>\n\n            {/* Right Column - Proposal Preview */}\n            <div className=\"space-y-4 sm:space-y-6\">\n              {/* Pricing Summary */}\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-base sm:text-lg\">Pricing Summary</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3 sm:space-y-4\">\n                <div className=\"space-y-2\">\n                  {events.map((event, index) => (\n                    <div key={event.id} className=\"space-y-1\">\n                      <div className=\"flex justify-between text-sm font-medium\">\n                        <span>Event {index + 1} Total</span>\n                        <span>${(() => {\n                          let eventTotal = 0;\n                          if (event.selectedPackage && event.selectedPackage !== \"none\") {\n                            const pkg = packages.find((p: any) => p.id === event.selectedPackage);\n                            if (pkg) {\n                              const basePrice = event.customPackagePrice !== undefined ? event.customPackagePrice : parseFloat(pkg.price);\n                              eventTotal += pkg.pricingModel === \"per_person\" \n                                ? basePrice * event.guestCount \n                                : basePrice;\n                            }\n                          }\n                          event.selectedServices.forEach(serviceId => {\n                            const service = services.find((s: any) => s.id === serviceId);\n                            if (service) {\n                              const basePrice = event.customServicePrices?.[serviceId] !== undefined \n                                ? event.customServicePrices[serviceId] \n                                : parseFloat(service.price);\n                              eventTotal += service.pricingModel === \"per_person\"\n                                ? basePrice * event.guestCount\n                                : basePrice;\n                            }\n                          });\n                          return eventTotal.toFixed(2);\n                        })()}</span>\n                      </div>\n                      \n                      {/* Show detailed breakdown if custom pricing is used */}\n                      {(event.customPackagePrice !== undefined || Object.keys(event.customServicePrices || {}).length > 0) && (\n                        <div className=\"ml-4 text-xs space-y-1\">\n                          {event.customPackagePrice !== undefined && event.selectedPackage !== \"none\" && (\n                            <div className=\"flex justify-between text-green-600\">\n                              <span>• Package (custom):</span>\n                              <span>${(() => {\n                                const pkg = packages.find((p: any) => p.id === event.selectedPackage);\n                                if (!pkg) return \"0.00\";\n                                const price = pkg.pricingModel === \"per_person\" \n                                  ? event.customPackagePrice * event.guestCount \n                                  : event.customPackagePrice;\n                                return price.toFixed(2);\n                              })()}</span>\n                            </div>\n                          )}\n                          {Object.keys(event.customServicePrices || {}).map(serviceId => {\n                            const service = services.find((s: any) => s.id === serviceId);\n                            if (!service || !event.customServicePrices) return null;\n                            const price = service.pricingModel === \"per_person\"\n                              ? event.customServicePrices[serviceId] * event.guestCount\n                              : event.customServicePrices[serviceId];\n                            return (\n                              <div key={serviceId} className=\"flex justify-between text-green-600\">\n                                <span>• {service.name} (custom):</span>\n                                <span>${price.toFixed(2)}</span>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n                \n                <Separator />\n                \n                <div className=\"flex justify-between font-semibold\">\n                  <span>Total Amount</span>\n                  <span>${totalAmount.toFixed(2)}</span>\n                </div>\n\n                <div className=\"space-y-3 pt-3 sm:pt-4 border-t\">\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4\">\n                    <div>\n                      <Label className=\"text-sm\">Deposit Type</Label>\n                      <Select value={depositType} onValueChange={setDepositType}>\n                        <SelectTrigger className=\"text-sm\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"percentage\">Percentage</SelectItem>\n                          <SelectItem value=\"fixed\">Fixed Amount</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label className=\"text-sm\">Deposit {depositType === \"percentage\" ? \"%\" : \"$\"}</Label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        value={depositValue}\n                        onChange={(e) => setDepositValue(parseFloat(e.target.value) || 0)}\n                        className=\"text-sm\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex justify-between font-medium\">\n                    <span>Deposit Amount</span>\n                    <span>${depositAmount.toFixed(2)}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Preview */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base sm:text-lg\">Proposal Preview</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3 sm:space-y-4\">\n                <div className=\"p-3 sm:p-4 bg-slate-50 rounded border\">\n                  <h4 className=\"font-semibold mb-2 text-sm sm:text-base\">{proposalTitle || \"Event Proposal\"}</h4>\n                  <p className=\"text-xs sm:text-sm text-slate-600 mb-3\">\n                    {customerData ? `To: ${customerData.name}` : \"Select a customer\"}\n                  </p>\n                  \n                  {events.length > 0 && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium text-xs sm:text-sm\">Events:</h5>\n                      {events.map((event, index) => (\n                        <div key={event.id} className=\"text-xs sm:text-sm\">\n                          <div className=\"font-medium\">{event.eventName || `Event ${index + 1}`}</div>\n                          <div className=\"text-slate-600\">\n                            {event.eventDate && format(new Date(event.eventDate), 'MMM d, yyyy')} • {event.startTime} - {event.endTime}\n                          </div>\n                          <div className=\"text-slate-600\">\n                            {venues.find((v: any) => v.id === event.selectedVenue)?.name}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                  \n                  <div className=\"mt-3 pt-3 border-t text-xs sm:text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Total:</span>\n                      <span className=\"font-medium\">${totalAmount.toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Deposit:</span>\n                      <span className=\"font-medium\">${depositAmount.toFixed(2)}</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex-shrink-0 flex flex-col sm:flex-row justify-end gap-2 sm:gap-3 pt-4 sm:pt-6 border-t\">\n          <Button \n            variant=\"outline\" \n            onClick={() => onOpenChange(false)}\n            className=\"w-full sm:w-auto order-3 sm:order-1\"\n          >\n            Cancel\n          </Button>\n          <Button \n            variant=\"outline\"\n            onClick={handleSaveDraft}\n            disabled={createProposalMutation.isPending || !proposalTitle || !selectedCustomer}\n            className=\"w-full sm:w-auto order-2\"\n          >\n            <Save className=\"h-3 w-3 sm:h-4 sm:w-4 mr-2\" />\n            <span className=\"text-sm\">{createProposalMutation.isPending ? \"Saving...\" : \"Save Draft\"}</span>\n          </Button>\n          <Button \n            onClick={handleSendProposal}\n            disabled={sendProposalMutation.isPending || !proposalTitle || !selectedCustomer}\n            className=\"w-full sm:w-auto order-1 sm:order-3\"\n          >\n            <Send className=\"h-3 w-3 sm:h-4 sm:w-4 mr-2\" />\n            <span className=\"text-sm\">{sendProposalMutation.isPending ? \"Sending...\" : \"Send Proposal\"}</span>\n          </Button>\n        </div>\n      </DialogContent>\n      \n      {/* Email Preview Modal */}\n      <EmailPreviewModal\n        open={showEmailPreview}\n        onOpenChange={setShowEmailPreview}\n        eventData={{\n          eventName: proposalTitle,\n          customerId: selectedCustomer,\n          eventDates: events.map(event => ({\n            date: new Date(event.eventDate),\n            startTime: event.startTime,\n            endTime: event.endTime,\n            venue: venues.find((v: any) => v.id === event.selectedVenue)?.name || event.selectedVenue,\n            space: venues.find((v: any) => v.id === event.selectedVenue)?.spaces?.find((s: any) => s.id === event.selectedSpace)?.name || event.selectedSpace,\n            guestCount: event.guestCount,\n            totalAmount: (() => {\n              let eventTotal = 0;\n              if (event.selectedPackage && event.selectedPackage !== \"none\") {\n                const pkg = packages.find((p: any) => p.id === event.selectedPackage);\n                if (pkg) {\n                  const basePrice = event.customPackagePrice !== undefined ? event.customPackagePrice : parseFloat(pkg.price);\n                  eventTotal += pkg.pricingModel === \"per_person\" \n                    ? basePrice * event.guestCount \n                    : basePrice;\n                }\n              }\n              event.selectedServices.forEach(serviceId => {\n                const service = services.find((s: any) => s.id === serviceId);\n                if (service) {\n                  const basePrice = event.customServicePrices?.[serviceId] !== undefined \n                    ? event.customServicePrices[serviceId] \n                    : parseFloat(service.price);\n                  eventTotal += service.pricingModel === \"per_person\"\n                    ? basePrice * event.guestCount\n                    : basePrice;\n                }\n              });\n              return eventTotal;\n            })()\n          })),\n          totalAmount,\n          customerData\n        }}\n        onSend={handleSendEmail}\n      />\n    </Dialog>\n  );\n}","size_bytes":47908},"server/services/email.ts":{"content":"import nodemailer from 'nodemailer';\n\nexport class EmailService {\n  private transporter: nodemailer.Transporter;\n\n  constructor() {\n    // Configure Gmail SMTP\n    this.transporter = nodemailer.createTransport({\n      service: 'gmail',\n      auth: {\n        user: process.env.GMAIL_USER,\n        pass: process.env.GMAIL_APP_PASSWORD // App password, not regular password\n      }\n    });\n  }\n\n  async sendProposalEmail({\n    to,\n    subject,\n    htmlContent,\n    proposalViewLink\n  }: {\n    to: string;\n    subject: string;\n    htmlContent: string;\n    proposalViewLink: string;\n  }) {\n    try {\n      const mailOptions = {\n        from: `\"Venuine Events\" <${process.env.GMAIL_USER}>`,\n        to,\n        subject,\n        html: htmlContent,\n        text: `\n          Thank you for considering Venuine Events for your upcoming event.\n          \n          Please view your complete proposal at: ${proposalViewLink}\n          \n          If you have any questions, please reply to this email or contact us.\n          \n          Best regards,\n          Venuine Events Team\n        `\n      };\n\n      const result = await this.transporter.sendMail(mailOptions);\n      \n      return {\n        success: true,\n        messageId: result.messageId,\n        response: result.response\n      };\n    } catch (error) {\n      console.error('Email sending failed:', error);\n      throw new Error(`Failed to send email: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async verifyConnection() {\n    try {\n      await this.transporter.verify();\n      return true;\n    } catch (error) {\n      console.error('Email service verification failed:', error);\n      return false;\n    }\n  }\n}\n\nexport const emailService = new EmailService();","size_bytes":1739},"EMAIL_SETUP_GUIDE.md":{"content":"# Email Setup Guide for Venuine Proposals\n\n## Gmail Setup (Completely Free) \n\n### Step 1: Enable Gmail App Passwords\n1. Go to your Google Account settings: https://myaccount.google.com/\n2. Go to \"Security\" → \"2-Step Verification\" (you must enable this first)\n3. Scroll down to \"App passwords\"\n4. Generate a new app password for \"Mail\"\n5. Copy the 16-character password (format: xxxx xxxx xxxx xxxx)\n\n### Step 2: Set Environment Variables in Replit\n1. Click on \"Secrets\" in the left sidebar of Replit\n2. Add these two secrets:\n   - **Key**: `EMAIL_USER` **Value**: your full Gmail address (e.g., yourname@gmail.com)\n   - **Key**: `EMAIL_PASS` **Value**: the 16-character app password from step 1\n\n### Step 3: Test the Email Functionality\n1. Create a proposal in Venuine\n2. Make sure the customer has a valid email address\n3. Click \"Send Proposal\"\n4. Check the Replit console for email status messages\n\n## Alternative Free Email Services\n\n### SendGrid (100 emails/day)\n1. Sign up at https://sendgrid.com\n2. Create API key in Settings → API Keys\n3. Add secret: `SENDGRID_API_KEY` with your API key\n4. Modify the email service to use SendGrid instead\n\n### Mailgun (5,000 emails/month for 3 months)\n1. Sign up at https://mailgun.com\n2. Get API key from your dashboard\n3. Set up custom domain or use sandbox domain\n\n## Email Demo Mode\nIf no email credentials are provided, the system runs in demo mode:\n- Emails are logged to console instead of being sent\n- Perfect for development and testing\n- No setup required\n\n## Troubleshooting\n- **\"Authentication failed\"**: Check Gmail app password\n- **\"Cannot send email\"**: Verify Gmail 2FA is enabled\n- **\"Demo mode\"**: Email credentials not set in Secrets\n\n## Test Email Template\nThe system sends beautifully formatted HTML emails with:\n- Company branding\n- Professional styling  \n- Full proposal content\n- Responsive design\n- Customer personalization","size_bytes":1894},"client/src/pages/settings-old.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { MobileNav } from \"@/components/layout/mobile-nav\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Building, \n  Mail, \n  CreditCard, \n  Shield, \n  Save,\n  Key,\n  AlertCircle,\n  CheckCircle,\n  Globe\n} from \"lucide-react\";\n\nexport default function Settings() {\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n  const [showSmartScheduling, setShowSmartScheduling] = useState(false);\n  const [showEmailReply, setShowEmailReply] = useState(false);\n  const [showLeadScoring, setShowLeadScoring] = useState(false);\n  const { toast } = useToast();\n\n  // Business Settings State\n  const [businessSettings, setBusinessSettings] = useState({\n    companyName: \"Venuine Events\",\n    companyEmail: \"contact@venuine.com\",\n    companyPhone: \"+1 (555) 123-4567\",\n    companyAddress: \"123 Business Street, City, State 12345\",\n    website: \"https://venuine.com\",\n    taxId: \"12-3456789\",\n    description: \"Premier venue management and event planning services\",\n    logo: \"\",\n    timezone: \"America/New_York\",\n    currency: \"USD\",\n    dateFormat: \"MM/DD/YYYY\",\n    timeFormat: \"12h\"\n  });\n\n  // Notification Settings State\n  const [notificationSettings, setNotificationSettings] = useState({\n    emailNotifications: true,\n    smsNotifications: false,\n    pushNotifications: true,\n    bookingConfirmations: true,\n    paymentAlerts: true,\n    reminderEmails: true,\n    marketingEmails: false,\n    weeklyReports: true,\n    lowInventoryAlerts: true,\n    taskDeadlines: true,\n    customerMessages: true,\n    leadAssignments: true\n  });\n\n  // AI Settings State\n  const [aiSettings, setAiSettings] = useState({\n    enableAiSuggestions: true,\n    autoEmailReplies: false,\n    leadScoring: true,\n    smartScheduling: true,\n    predictiveAnalytics: true,\n    voiceBooking: true,\n    aiInsightFrequency: \"daily\",\n    confidenceThreshold: 80,\n    autoProcessBookings: false,\n    aiLanguage: \"en\"\n  });\n\n  // Payment Settings State\n  const [paymentSettings, setPaymentSettings] = useState({\n    defaultPaymentTerms: \"net30\",\n    lateFeePercentage: \"5\",\n    depositPercentage: \"25\",\n    acceptedPaymentMethods: [\"credit_card\", \"bank_transfer\", \"check\"],\n    autoInvoicing: true,\n    paymentReminders: true,\n    reminderDaysBefore: \"7\",\n    currencies: [\"USD\", \"EUR\", \"GBP\"],\n    taxRate: \"8.5\"\n  });\n\n  // Deposit Settings State\n  const [depositSettings, setDepositSettings] = useState({\n    defaultDepositType: \"percentage\",\n    defaultDepositValue: \"25\",\n    minimumDepositPercentage: \"10\",\n    maximumDepositPercentage: \"50\",\n    minimumDepositAmount: \"100\",\n    depositDueDays: \"7\",\n    allowCustomDeposit: true,\n    autoCalculateDeposit: true,\n    requireDepositForBooking: false\n  });\n\n  // Security Settings State\n  const [securitySettings, setSecuritySettings] = useState({\n    twoFactorAuth: false,\n    sessionTimeout: \"60\",\n    passwordPolicy: \"strong\",\n    loginAttempts: \"5\",\n    dataBackupFrequency: \"daily\",\n    auditLogging: true,\n    encryptionEnabled: true,\n    accessControlEnabled: true\n  });\n\n  // Email Settings State\n  const [emailSettings, setEmailSettings] = useState({\n    provider: \"gmail\", // gmail, sendgrid, custom\n    smtpHost: \"smtp.gmail.com\",\n    smtpPort: \"587\",\n    emailUser: \"\",\n    emailPass: \"\",\n    fromName: \"Venuine Events\",\n    fromEmail: \"noreply@venuine.com\",\n    replyToEmail: \"contact@venuine.com\",\n    emailTemplate: \"professional\",\n    includeSignature: true,\n    signatureText: \"Best regards,\\nThe Venuine Events Team\",\n    enableEmailLogging: true,\n    testMode: false\n  });\n\n\n\n  const saveSettings = (section: string) => {\n    toast({\n      title: \"Settings saved\",\n      description: `${section} settings have been updated successfully`\n    });\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <div className=\"hidden lg:block\">\n        <Sidebar />\n      </div>\n      \n      <MobileNav \n        isOpen={mobileNavOpen} \n        onClose={() => setMobileNavOpen(false)} \n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Settings\" \n          subtitle=\"Configure your venue management system\"\n          onMobileMenuToggle={() => setMobileNavOpen(true)}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <Tabs defaultValue=\"business\" className=\"space-y-6\">\n            <TabsList className=\"flex flex-wrap w-full justify-start gap-1 h-auto p-1\">\n              <TabsTrigger value=\"business\" className=\"flex items-center gap-1 px-3 py-2 text-sm\">\n                <Building className=\"w-4 h-4\" />\n                <span className=\"hidden sm:inline\">Business</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"notifications\" className=\"flex items-center gap-1 px-3 py-2 text-sm\">\n                <Bell className=\"w-4 h-4\" />\n                <span className=\"hidden sm:inline\">Notifications</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"email\" className=\"flex items-center gap-1 px-3 py-2 text-sm\">\n                <Mail className=\"w-4 h-4\" />\n                <span className=\"hidden sm:inline\">Email</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"ai\" className=\"flex items-center gap-1 px-3 py-2 text-sm\">\n                <SettingsIcon className=\"w-4 h-4\" />\n                <span className=\"hidden sm:inline\">AI Features</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"payments\" className=\"flex items-center gap-1 px-3 py-2 text-sm\">\n                <CreditCard className=\"w-4 h-4\" />\n                <span className=\"hidden sm:inline\">Payments</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"taxes\" className=\"flex items-center gap-1 px-3 py-2 text-sm\">\n                <DollarSign className=\"w-4 h-4\" />\n                <span className=\"hidden sm:inline\">Tax & Fees</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"security\" className=\"flex items-center gap-1 px-3 py-2 text-sm\">\n                <Shield className=\"w-4 h-4\" />\n                <span className=\"hidden sm:inline\">Security</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"integrations\" className=\"flex items-center gap-1 px-3 py-2 text-sm\">\n                <Key className=\"w-4 h-4\" />\n                <span className=\"hidden sm:inline\">Integrations</span>\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Business Settings */}\n            <TabsContent value=\"business\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Building className=\"w-5 h-5\" />\n                    Business Information\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"companyName\">Company Name</Label>\n                      <Input\n                        id=\"companyName\"\n                        value={businessSettings.companyName}\n                        onChange={(e) => setBusinessSettings(prev => ({ ...prev, companyName: e.target.value }))}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"companyEmail\">Company Email</Label>\n                      <Input\n                        id=\"companyEmail\"\n                        type=\"email\"\n                        value={businessSettings.companyEmail}\n                        onChange={(e) => setBusinessSettings(prev => ({ ...prev, companyEmail: e.target.value }))}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"companyPhone\">Phone Number</Label>\n                      <Input\n                        id=\"companyPhone\"\n                        value={businessSettings.companyPhone}\n                        onChange={(e) => setBusinessSettings(prev => ({ ...prev, companyPhone: e.target.value }))}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"website\">Website</Label>\n                      <Input\n                        id=\"website\"\n                        value={businessSettings.website}\n                        onChange={(e) => setBusinessSettings(prev => ({ ...prev, website: e.target.value }))}\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"companyAddress\">Business Address</Label>\n                    <Textarea\n                      id=\"companyAddress\"\n                      value={businessSettings.companyAddress}\n                      onChange={(e) => setBusinessSettings(prev => ({ ...prev, companyAddress: e.target.value }))}\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"description\">Business Description</Label>\n                    <Textarea\n                      id=\"description\"\n                      value={businessSettings.description}\n                      onChange={(e) => setBusinessSettings(prev => ({ ...prev, description: e.target.value }))}\n                    />\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <Label htmlFor=\"timezone\">Timezone</Label>\n                      <Select value={businessSettings.timezone} onValueChange={(value) => setBusinessSettings(prev => ({ ...prev, timezone: value }))}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"America/New_York\">Eastern Time</SelectItem>\n                          <SelectItem value=\"America/Chicago\">Central Time</SelectItem>\n                          <SelectItem value=\"America/Denver\">Mountain Time</SelectItem>\n                          <SelectItem value=\"America/Los_Angeles\">Pacific Time</SelectItem>\n                          <SelectItem value=\"Europe/London\">GMT</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"currency\">Currency</Label>\n                      <Select value={businessSettings.currency} onValueChange={(value) => setBusinessSettings(prev => ({ ...prev, currency: value }))}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"USD\">USD ($)</SelectItem>\n                          <SelectItem value=\"EUR\">EUR (€)</SelectItem>\n                          <SelectItem value=\"GBP\">GBP (£)</SelectItem>\n                          <SelectItem value=\"CAD\">CAD (C$)</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"dateFormat\">Date Format</Label>\n                      <Select value={businessSettings.dateFormat} onValueChange={(value) => setBusinessSettings(prev => ({ ...prev, dateFormat: value }))}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"MM/DD/YYYY\">MM/DD/YYYY</SelectItem>\n                          <SelectItem value=\"DD/MM/YYYY\">DD/MM/YYYY</SelectItem>\n                          <SelectItem value=\"YYYY-MM-DD\">YYYY-MM-DD</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <Button onClick={() => saveSettings(\"Business\")} className=\"bg-blue-600 hover:bg-blue-700\">\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Save Business Settings\n                  </Button>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Email Configuration */}\n            <TabsContent value=\"email\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Mail className=\"w-5 h-5\" />\n                    Email Configuration\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {/* Email Provider Selection */}\n                  <div>\n                    <h4 className=\"font-medium mb-4\">Email Provider</h4>\n                    <Select value={emailSettings.provider} onValueChange={(value) => setEmailSettings(prev => ({ ...prev, provider: value }))}>\n                      <SelectTrigger className=\"w-full\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"gmail\">Gmail (Free - Recommended)</SelectItem>\n                        <SelectItem value=\"sendgrid\">SendGrid</SelectItem>\n                        <SelectItem value=\"custom\">Custom SMTP</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <Separator />\n\n                  {/* Gmail Configuration */}\n                  {emailSettings.provider === \"gmail\" && (\n                    <div className=\"space-y-4\">\n                      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                        <div className=\"flex items-start gap-3\">\n                          <Mail className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n                          <div>\n                            <h5 className=\"font-medium text-blue-900\">Gmail Setup Instructions</h5>\n                            <p className=\"text-sm text-blue-700 mt-1\">\n                              To use Gmail for sending emails, you'll need to enable 2-Step Verification and create an App Password.\n                            </p>\n                            <div className=\"mt-2 text-sm text-blue-700\">\n                              <p><strong>Step 1:</strong> Go to Google Account → Security → 2-Step Verification</p>\n                              <p><strong>Step 2:</strong> Create an \"App Password\" for Mail</p>\n                              <p><strong>Step 3:</strong> Add credentials to Replit Secrets (not here)</p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"fromName\">From Name</Label>\n                          <Input\n                            id=\"fromName\"\n                            value={emailSettings.fromName}\n                            onChange={(e) => setEmailSettings(prev => ({ ...prev, fromName: e.target.value }))}\n                            placeholder=\"Venuine Events\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"fromEmail\">From Email</Label>\n                          <Input\n                            id=\"fromEmail\"\n                            type=\"email\"\n                            value={emailSettings.fromEmail}\n                            onChange={(e) => setEmailSettings(prev => ({ ...prev, fromEmail: e.target.value }))}\n                            placeholder=\"noreply@venuine.com\"\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-4\">\n                        <div className=\"flex items-start gap-3\">\n                          <Key className=\"w-5 h-5 text-amber-600 mt-0.5\" />\n                          <div>\n                            <h5 className=\"font-medium text-amber-900\">Security Note</h5>\n                            <p className=\"text-sm text-amber-700\">\n                              <strong>EMAIL_USER</strong> and <strong>EMAIL_PASS</strong> should be set in Replit Secrets, not in this interface. \n                              This keeps your credentials secure and encrypted.\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Custom SMTP Configuration */}\n                  {emailSettings.provider === \"custom\" && (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"smtpHost\">SMTP Host</Label>\n                        <Input\n                          id=\"smtpHost\"\n                          value={emailSettings.smtpHost}\n                          onChange={(e) => setEmailSettings(prev => ({ ...prev, smtpHost: e.target.value }))}\n                          placeholder=\"smtp.example.com\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"smtpPort\">SMTP Port</Label>\n                        <Input\n                          id=\"smtpPort\"\n                          value={emailSettings.smtpPort}\n                          onChange={(e) => setEmailSettings(prev => ({ ...prev, smtpPort: e.target.value }))}\n                          placeholder=\"587\"\n                        />\n                      </div>\n                    </div>\n                  )}\n\n                  <Separator />\n\n                  {/* Email Template Settings */}\n                  <div>\n                    <h4 className=\"font-medium mb-4\">Email Templates</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"emailTemplate\">Template Style</Label>\n                        <Select value={emailSettings.emailTemplate} onValueChange={(value) => setEmailSettings(prev => ({ ...prev, emailTemplate: value }))}>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"professional\">Professional</SelectItem>\n                            <SelectItem value=\"modern\">Modern</SelectItem>\n                            <SelectItem value=\"minimal\">Minimal</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label htmlFor=\"replyToEmail\">Reply-To Email</Label>\n                        <Input\n                          id=\"replyToEmail\"\n                          type=\"email\"\n                          value={emailSettings.replyToEmail}\n                          onChange={(e) => setEmailSettings(prev => ({ ...prev, replyToEmail: e.target.value }))}\n                          placeholder=\"contact@venuine.com\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Include Email Signature</Label>\n                      <p className=\"text-xs text-gray-500\">Add company signature to emails</p>\n                    </div>\n                    <Switch\n                      checked={emailSettings.includeSignature}\n                      onCheckedChange={(checked) => setEmailSettings(prev => ({ ...prev, includeSignature: checked }))}\n                    />\n                  </div>\n\n                  {emailSettings.includeSignature && (\n                    <div>\n                      <Label htmlFor=\"signatureText\">Email Signature</Label>\n                      <Textarea\n                        id=\"signatureText\"\n                        value={emailSettings.signatureText}\n                        onChange={(e) => setEmailSettings(prev => ({ ...prev, signatureText: e.target.value }))}\n                        placeholder=\"Best regards,&#10;The Venuine Events Team\"\n                        className=\"min-h-[80px]\"\n                      />\n                    </div>\n                  )}\n\n                  <Button onClick={() => saveSettings(\"Email\")} className=\"bg-blue-600 hover:bg-blue-700\">\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Save Email Settings\n                  </Button>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Notification Settings */}\n            <TabsContent value=\"notifications\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Bell className=\"w-5 h-5\" />\n                    Notification Preferences\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <h4 className=\"font-medium mb-4\">General Notifications</h4>\n                    <div className=\"space-y-3\">\n                      {[\n                        { key: 'emailNotifications', label: 'Email Notifications', icon: Mail },\n                        { key: 'smsNotifications', label: 'SMS Notifications', icon: Bell },\n                        { key: 'pushNotifications', label: 'Push Notifications', icon: Bell }\n                      ].map(({ key, label, icon: Icon }) => (\n                        <div key={key} className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            <Icon className=\"w-4 h-4 text-gray-500\" />\n                            <Label>{label}</Label>\n                          </div>\n                          <Switch\n                            checked={notificationSettings[key as keyof typeof notificationSettings] as boolean}\n                            onCheckedChange={(checked) => setNotificationSettings(prev => ({ ...prev, [key]: checked }))}\n                          />\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div>\n                    <h4 className=\"font-medium mb-4\">Event & Booking Notifications</h4>\n                    <div className=\"space-y-3\">\n                      {[\n                        { key: 'bookingConfirmations', label: 'Booking Confirmations' },\n                        { key: 'reminderEmails', label: 'Event Reminder Emails' },\n                        { key: 'taskDeadlines', label: 'Task Deadlines' },\n                        { key: 'customerMessages', label: 'Customer Messages' }\n                      ].map(({ key, label }) => (\n                        <div key={key} className=\"flex items-center justify-between\">\n                          <Label>{label}</Label>\n                          <Switch\n                            checked={notificationSettings[key as keyof typeof notificationSettings] as boolean}\n                            onCheckedChange={(checked) => setNotificationSettings(prev => ({ ...prev, [key]: checked }))}\n                          />\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div>\n                    <h4 className=\"font-medium mb-4\">Business & Analytics</h4>\n                    <div className=\"space-y-3\">\n                      {[\n                        { key: 'paymentAlerts', label: 'Payment Alerts' },\n                        { key: 'weeklyReports', label: 'Weekly Reports' },\n                        { key: 'leadAssignments', label: 'Lead Assignments' },\n                        { key: 'lowInventoryAlerts', label: 'Low Inventory Alerts' }\n                      ].map(({ key, label }) => (\n                        <div key={key} className=\"flex items-center justify-between\">\n                          <Label>{label}</Label>\n                          <Switch\n                            checked={notificationSettings[key as keyof typeof notificationSettings] as boolean}\n                            onCheckedChange={(checked) => setNotificationSettings(prev => ({ ...prev, [key]: checked }))}\n                          />\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <Button onClick={() => saveSettings(\"Notification\")} className=\"bg-blue-600 hover:bg-blue-700\">\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Save Notification Settings\n                  </Button>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* AI Features Settings */}\n            <TabsContent value=\"ai\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Brain className=\"w-5 h-5 text-purple-600\" />\n                    AI Features Configuration\n                    <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-700\">NEW</Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {/* Core AI Features */}\n                  <div>\n                    <h4 className=\"font-medium mb-4 flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4 text-blue-600\" />\n                      Core AI Features\n                    </h4>\n                    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                      {/* AI Analytics & Reports */}\n                      <Card className=\"border-blue-200 bg-blue-50\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex items-center gap-2\">\n                              <Brain className=\"w-5 h-5 text-blue-600\" />\n                              <div>\n                                <h5 className=\"font-medium\">AI Analytics & Reports</h5>\n                                <p className=\"text-xs text-gray-600\">Real-time insights and trend analysis</p>\n                              </div>\n                            </div>\n                            <Switch\n                              checked={aiSettings.predictiveAnalytics}\n                              onCheckedChange={(checked) => setAiSettings(prev => ({ ...prev, predictiveAnalytics: checked }))}\n                            />\n                          </div>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"w-full\"\n                            onClick={() => window.open('/ai-analytics', '_blank')}\n                          >\n                            View Analytics Dashboard\n                          </Button>\n                        </CardContent>\n                      </Card>\n\n                      {/* Smart Scheduling */}\n                      <Card className=\"border-green-200 bg-green-50\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex items-center gap-2\">\n                              <Zap className=\"w-5 h-5 text-green-600\" />\n                              <div>\n                                <h5 className=\"font-medium\">Smart Scheduling</h5>\n                                <p className=\"text-xs text-gray-600\">AI-optimized time slot suggestions</p>\n                              </div>\n                            </div>\n                            <Switch\n                              checked={aiSettings.smartScheduling}\n                              onCheckedChange={(checked) => setAiSettings(prev => ({ ...prev, smartScheduling: checked }))}\n                            />\n                          </div>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"w-full\"\n                            onClick={() => setShowSmartScheduling(true)}\n                          >\n                            Test Smart Scheduling\n                          </Button>\n                        </CardContent>\n                      </Card>\n\n                      {/* Auto Email Replies */}\n                      <Card className=\"border-orange-200 bg-orange-50\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex items-center gap-2\">\n                              <Mail className=\"w-5 h-5 text-orange-600\" />\n                              <div>\n                                <h5 className=\"font-medium\">Auto Email Replies</h5>\n                                <p className=\"text-xs text-gray-600\">AI-generated customer responses</p>\n                              </div>\n                            </div>\n                            <Switch\n                              checked={aiSettings.autoEmailReplies}\n                              onCheckedChange={(checked) => setAiSettings(prev => ({ ...prev, autoEmailReplies: checked }))}\n                            />\n                          </div>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"w-full\"\n                            onClick={() => setShowEmailReply(true)}\n                          >\n                            Test Email Generator\n                          </Button>\n                        </CardContent>\n                      </Card>\n\n                      {/* Lead Scoring */}\n                      <Card className=\"border-purple-200 bg-purple-50\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex items-center gap-2\">\n                              <Star className=\"w-5 h-5 text-purple-600\" />\n                              <div>\n                                <h5 className=\"font-medium\">Lead Scoring</h5>\n                                <p className=\"text-xs text-gray-600\">AI-powered lead prioritization</p>\n                              </div>\n                            </div>\n                            <Switch\n                              checked={aiSettings.leadScoring}\n                              onCheckedChange={(checked) => setAiSettings(prev => ({ ...prev, leadScoring: checked }))}\n                            />\n                          </div>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"w-full\"\n                            onClick={() => setShowLeadScoring(true)}\n                          >\n                            Test Lead Scoring\n                          </Button>\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  {/* AI Configuration */}\n                  <div>\n                    <h4 className=\"font-medium mb-4 flex items-center gap-2\">\n                      <SettingsIcon className=\"w-4 h-4\" />\n                      AI Configuration\n                    </h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"aiInsightFrequency\">AI Insights Frequency</Label>\n                        <Select value={aiSettings.aiInsightFrequency} onValueChange={(value) => setAiSettings(prev => ({ ...prev, aiInsightFrequency: value }))}>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"hourly\">Every Hour</SelectItem>\n                            <SelectItem value=\"daily\">Daily</SelectItem>\n                            <SelectItem value=\"weekly\">Weekly</SelectItem>\n                            <SelectItem value=\"manual\">Manual Only</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label htmlFor=\"confidenceThreshold\">AI Confidence Threshold (%)</Label>\n                        <Input\n                          id=\"confidenceThreshold\"\n                          type=\"number\"\n                          min=\"50\"\n                          max=\"100\"\n                          value={aiSettings.confidenceThreshold}\n                          onChange={(e) => setAiSettings(prev => ({ ...prev, confidenceThreshold: parseInt(e.target.value) }))}\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  {/* Additional AI Features */}\n                  <div>\n                    <h4 className=\"font-medium mb-4\">Additional Features</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label>Voice-to-Text Booking</Label>\n                          <p className=\"text-xs text-gray-500\">Convert speech to booking forms</p>\n                        </div>\n                        <Switch\n                          checked={aiSettings.voiceBooking}\n                          onCheckedChange={(checked) => setAiSettings(prev => ({ ...prev, voiceBooking: checked }))}\n                        />\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label>AI Suggestions</Label>\n                          <p className=\"text-xs text-gray-500\">Smart recommendations in booking flow</p>\n                        </div>\n                        <Switch\n                          checked={aiSettings.enableAiSuggestions}\n                          onCheckedChange={(checked) => setAiSettings(prev => ({ ...prev, enableAiSuggestions: checked }))}\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Warning Banner */}\n                  <Card className=\"border-amber-200 bg-amber-50\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start gap-3\">\n                        <Bot className=\"h-5 w-5 text-amber-600 mt-0.5\" />\n                        <div>\n                          <p className=\"font-medium text-amber-800\">AI Feature Notice</p>\n                          <p className=\"text-sm text-amber-700\">\n                            These AI features are powered by Google Gemini. Always review AI-generated content before using. \n                            Results may vary and should be verified for accuracy.\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Button onClick={() => saveSettings(\"AI Features\")} className=\"bg-purple-600 hover:bg-purple-700\">\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Save AI Settings\n                  </Button>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Payment Settings */}\n            <TabsContent value=\"payments\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <CreditCard className=\"w-5 h-5\" />\n                    Payment Configuration\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"defaultPaymentTerms\">Default Payment Terms</Label>\n                      <Select value={paymentSettings.defaultPaymentTerms} onValueChange={(value) => setPaymentSettings(prev => ({ ...prev, defaultPaymentTerms: value }))}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"due_on_receipt\">Due on Receipt</SelectItem>\n                          <SelectItem value=\"net15\">Net 15 Days</SelectItem>\n                          <SelectItem value=\"net30\">Net 30 Days</SelectItem>\n                          <SelectItem value=\"net60\">Net 60 Days</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"depositPercentage\">Required Deposit (%)</Label>\n                      <Input\n                        id=\"depositPercentage\"\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"100\"\n                        value={paymentSettings.depositPercentage}\n                        onChange={(e) => setPaymentSettings(prev => ({ ...prev, depositPercentage: e.target.value }))}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"lateFeePercentage\">Late Fee (%)</Label>\n                      <Input\n                        id=\"lateFeePercentage\"\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"50\"\n                        value={paymentSettings.lateFeePercentage}\n                        onChange={(e) => setPaymentSettings(prev => ({ ...prev, lateFeePercentage: e.target.value }))}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"taxRate\">Tax Rate (%)</Label>\n                      <Input\n                        id=\"taxRate\"\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"50\"\n                        step=\"0.1\"\n                        value={paymentSettings.taxRate}\n                        onChange={(e) => setPaymentSettings(prev => ({ ...prev, taxRate: e.target.value }))}\n                      />\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div>\n                    <h4 className=\"font-medium mb-4\">Deposit Configuration</h4>\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4\">\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"bg-blue-100 rounded-full p-1\">\n                          <DollarSign className=\"w-4 h-4 text-blue-600\" />\n                        </div>\n                        <div>\n                          <h5 className=\"font-medium text-blue-900\">Deposit Management</h5>\n                          <p className=\"text-sm text-blue-700 mt-1\">\n                            Configure how deposits are calculated and required for bookings and proposals.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"defaultDepositType\">Default Deposit Type</Label>\n                        <Select value={depositSettings.defaultDepositType} onValueChange={(value) => setDepositSettings(prev => ({ ...prev, defaultDepositType: value }))}>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"percentage\">Percentage of Total</SelectItem>\n                            <SelectItem value=\"fixed\">Fixed Amount</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label htmlFor=\"defaultDepositValue\">\n                          Default Value ({depositSettings.defaultDepositType === 'percentage' ? '%' : '$'})\n                        </Label>\n                        <Input\n                          id=\"defaultDepositValue\"\n                          type=\"number\"\n                          min=\"0\"\n                          value={depositSettings.defaultDepositValue}\n                          onChange={(e) => setDepositSettings(prev => ({ ...prev, defaultDepositValue: e.target.value }))}\n                        />\n                      </div>\n                      {depositSettings.defaultDepositType === 'percentage' && (\n                        <>\n                          <div>\n                            <Label htmlFor=\"minimumDepositPercentage\">Minimum Deposit (%)</Label>\n                            <Input\n                              id=\"minimumDepositPercentage\"\n                              type=\"number\"\n                              min=\"0\"\n                              max=\"100\"\n                              value={depositSettings.minimumDepositPercentage}\n                              onChange={(e) => setDepositSettings(prev => ({ ...prev, minimumDepositPercentage: e.target.value }))}\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"maximumDepositPercentage\">Maximum Deposit (%)</Label>\n                            <Input\n                              id=\"maximumDepositPercentage\"\n                              type=\"number\"\n                              min=\"0\"\n                              max=\"100\"\n                              value={depositSettings.maximumDepositPercentage}\n                              onChange={(e) => setDepositSettings(prev => ({ ...prev, maximumDepositPercentage: e.target.value }))}\n                            />\n                          </div>\n                        </>\n                      )}\n                      <div>\n                        <Label htmlFor=\"minimumDepositAmount\">Minimum Deposit Amount ($)</Label>\n                        <Input\n                          id=\"minimumDepositAmount\"\n                          type=\"number\"\n                          min=\"0\"\n                          value={depositSettings.minimumDepositAmount}\n                          onChange={(e) => setDepositSettings(prev => ({ ...prev, minimumDepositAmount: e.target.value }))}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"depositDueDays\">Deposit Due (Days Before Event)</Label>\n                        <Input\n                          id=\"depositDueDays\"\n                          type=\"number\"\n                          min=\"0\"\n                          value={depositSettings.depositDueDays}\n                          onChange={(e) => setDepositSettings(prev => ({ ...prev, depositDueDays: e.target.value }))}\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-3 mt-4\">\n                      {[\n                        { key: 'allowCustomDeposit', label: 'Allow Custom Deposit Amounts', desc: 'Let staff override default deposit settings per booking' },\n                        { key: 'autoCalculateDeposit', label: 'Auto-Calculate Deposits', desc: 'Automatically calculate deposits in proposals and bookings' },\n                        { key: 'requireDepositForBooking', label: 'Require Deposit for Booking', desc: 'Make deposit payment mandatory before confirming bookings' }\n                      ].map(({ key, label, desc }) => (\n                        <div key={key} className=\"flex items-start justify-between p-3 border rounded-lg\">\n                          <div>\n                            <Label className=\"font-medium\">{label}</Label>\n                            <p className=\"text-sm text-gray-600 mt-1\">{desc}</p>\n                          </div>\n                          <Switch\n                            checked={depositSettings[key as keyof typeof depositSettings] as boolean}\n                            onCheckedChange={(checked) => setDepositSettings(prev => ({ ...prev, [key]: checked }))}\n                          />\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div>\n                    <h4 className=\"font-medium mb-4\">Payment Automation</h4>\n                    <div className=\"space-y-3\">\n                      {[\n                        { key: 'autoInvoicing', label: 'Automatic Invoice Generation' },\n                        { key: 'paymentReminders', label: 'Automatic Payment Reminders' }\n                      ].map(({ key, label }) => (\n                        <div key={key} className=\"flex items-center justify-between\">\n                          <Label>{label}</Label>\n                          <Switch\n                            checked={paymentSettings[key as keyof typeof paymentSettings] as boolean}\n                            onCheckedChange={(checked) => setPaymentSettings(prev => ({ ...prev, [key]: checked }))}\n                          />\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <Button onClick={() => saveSettings(\"Payment\")} className=\"bg-blue-600 hover:bg-blue-700\">\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Save Payment Settings\n                  </Button>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Security Settings */}\n            <TabsContent value=\"security\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Shield className=\"w-5 h-5\" />\n                    Security & Privacy\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <h4 className=\"font-medium mb-4\">Authentication Security</h4>\n                    <div className=\"space-y-3\">\n                      {[\n                        { key: 'twoFactorAuth', label: 'Two-Factor Authentication (2FA)' },\n                        { key: 'auditLogging', label: 'Audit Logging' },\n                        { key: 'encryptionEnabled', label: 'Data Encryption' },\n                        { key: 'accessControlEnabled', label: 'Role-based Access Control' }\n                      ].map(({ key, label }) => (\n                        <div key={key} className=\"flex items-center justify-between\">\n                          <Label>{label}</Label>\n                          <Switch\n                            checked={securitySettings[key as keyof typeof securitySettings] as boolean}\n                            onCheckedChange={(checked) => setSecuritySettings(prev => ({ ...prev, [key]: checked }))}\n                          />\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"sessionTimeout\">Session Timeout (minutes)</Label>\n                      <Input\n                        id=\"sessionTimeout\"\n                        type=\"number\"\n                        min=\"15\"\n                        max=\"480\"\n                        value={securitySettings.sessionTimeout}\n                        onChange={(e) => setSecuritySettings(prev => ({ ...prev, sessionTimeout: e.target.value }))}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"loginAttempts\">Max Login Attempts</Label>\n                      <Input\n                        id=\"loginAttempts\"\n                        type=\"number\"\n                        min=\"3\"\n                        max=\"10\"\n                        value={securitySettings.loginAttempts}\n                        onChange={(e) => setSecuritySettings(prev => ({ ...prev, loginAttempts: e.target.value }))}\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"dataBackupFrequency\">Data Backup Frequency</Label>\n                    <Select value={securitySettings.dataBackupFrequency} onValueChange={(value) => setSecuritySettings(prev => ({ ...prev, dataBackupFrequency: value }))}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"hourly\">Hourly</SelectItem>\n                        <SelectItem value=\"daily\">Daily</SelectItem>\n                        <SelectItem value=\"weekly\">Weekly</SelectItem>\n                        <SelectItem value=\"monthly\">Monthly</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <Button onClick={() => saveSettings(\"Security\")} className=\"bg-blue-600 hover:bg-blue-700\">\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Save Security Settings\n                  </Button>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Tax & Fees Settings */}\n            <TabsContent value=\"taxes\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <DollarSign className=\"w-5 h-5\" />\n                    Tax and Fees Configuration\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"bg-blue-100 rounded-full p-1\">\n                        <DollarSign className=\"w-4 h-4 text-blue-600\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-blue-900\">Tax & Fee Management</h4>\n                        <p className=\"text-sm text-blue-700 mt-1\">\n                          Configure tax rates and fees that will be automatically applied to packages and services.\n                          These settings will be used during event booking calculations.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-between items-center\">\n                    <h4 className=\"font-medium\">Active Tax Rules & Fees</h4>\n                    <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                      <DollarSign className=\"w-4 h-4 mr-2\" />\n                      Add Tax/Fee\n                    </Button>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    {/* Sample tax settings - these would come from API */}\n                    <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border\">\n                      <div>\n                        <h5 className=\"font-medium\">Sales Tax</h5>\n                        <p className=\"text-sm text-gray-600\">8.25% applied to all services</p>\n                        <Badge variant=\"outline\" className=\"mt-1 text-xs\">\n                          Services Only\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\n                          Active\n                        </Badge>\n                        <Button variant=\"outline\" size=\"sm\">Edit</Button>\n                        <Button variant=\"outline\" size=\"sm\">Delete</Button>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border\">\n                      <div>\n                        <h5 className=\"font-medium\">Service Fee</h5>\n                        <p className=\"text-sm text-gray-600\">$25.00 flat fee per booking</p>\n                        <Badge variant=\"outline\" className=\"mt-1 text-xs\">\n                          Total Amount\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\n                          Active\n                        </Badge>\n                        <Button variant=\"outline\" size=\"sm\">Edit</Button>\n                        <Button variant=\"outline\" size=\"sm\">Delete</Button>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border\">\n                      <div>\n                        <h5 className=\"font-medium\">Gratuity</h5>\n                        <p className=\"text-sm text-gray-600\">18% applied to packages</p>\n                        <Badge variant=\"outline\" className=\"mt-1 text-xs\">\n                          Packages Only\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"outline\" className=\"bg-yellow-50 text-yellow-700 border-yellow-200\">\n                          Inactive\n                        </Badge>\n                        <Button variant=\"outline\" size=\"sm\">Edit</Button>\n                        <Button variant=\"outline\" size=\"sm\">Delete</Button>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div>\n                    <h4 className=\"font-medium mb-3\">Quick Setup</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <Button variant=\"outline\" className=\"p-4 h-auto flex flex-col items-center gap-2\">\n                        <DollarSign className=\"w-5 h-5\" />\n                        <span className=\"text-sm font-medium\">Sales Tax</span>\n                        <span className=\"text-xs text-gray-500\">Percentage-based tax</span>\n                      </Button>\n                      <Button variant=\"outline\" className=\"p-4 h-auto flex flex-col items-center gap-2\">\n                        <DollarSign className=\"w-5 h-5\" />\n                        <span className=\"text-sm font-medium\">Service Fee</span>\n                        <span className=\"text-xs text-gray-500\">Fixed amount fee</span>\n                      </Button>\n                      <Button variant=\"outline\" className=\"p-4 h-auto flex flex-col items-center gap-2\">\n                        <DollarSign className=\"w-5 h-5\" />\n                        <span className=\"text-sm font-medium\">Gratuity</span>\n                        <span className=\"text-xs text-gray-500\">Optional tip percentage</span>\n                      </Button>\n                    </div>\n                  </div>\n\n                  <Button onClick={() => saveSettings('taxes')} className=\"bg-blue-600 hover:bg-blue-700\">\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Save Tax Settings\n                  </Button>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Integrations Settings */}\n            <TabsContent value=\"integrations\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Key className=\"w-5 h-5\" />\n                    API Keys & Integrations\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"grid gap-4\">\n                    <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        <Database className=\"w-8 h-8 text-blue-600\" />\n                        <div>\n                          <h4 className=\"font-medium\">Google Gemini AI</h4>\n                          <p className=\"text-sm text-gray-500\">AI-powered features and automation</p>\n                        </div>\n                      </div>\n                      <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\n                        Connected\n                      </Badge>\n                    </div>\n\n                    <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        <CreditCard className=\"w-8 h-8 text-purple-600\" />\n                        <div>\n                          <h4 className=\"font-medium\">Payment Gateway</h4>\n                          <p className=\"text-sm text-gray-500\">Process payments and subscriptions</p>\n                        </div>\n                      </div>\n                      <Badge variant=\"outline\" className=\"bg-yellow-50 text-yellow-700 border-yellow-200\">\n                        Not Connected\n                      </Badge>\n                    </div>\n\n                    <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        <Mail className=\"w-8 h-8 text-red-600\" />\n                        <div>\n                          <h4 className=\"font-medium\">Email Service</h4>\n                          <p className=\"text-sm text-gray-500\">Automated email notifications</p>\n                        </div>\n                      </div>\n                      <Badge variant=\"outline\" className=\"bg-yellow-50 text-yellow-700 border-yellow-200\">\n                        Not Connected\n                      </Badge>\n                    </div>\n\n                    <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        <Calendar className=\"w-8 h-8 text-green-600\" />\n                        <div>\n                          <h4 className=\"font-medium\">Calendar Integration</h4>\n                          <p className=\"text-sm text-gray-500\">Sync with Google Calendar, Outlook</p>\n                        </div>\n                      </div>\n                      <Badge variant=\"outline\" className=\"bg-yellow-50 text-yellow-700 border-yellow-200\">\n                        Not Connected\n                      </Badge>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div>\n                    <h4 className=\"font-medium mb-4\">Webhook Endpoints</h4>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n                        <span className=\"text-sm font-mono\">Booking Created</span>\n                        <Badge variant=\"outline\">Active</Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n                        <span className=\"text-sm font-mono\">Payment Received</span>\n                        <Badge variant=\"outline\">Inactive</Badge>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                    <Key className=\"w-4 h-4 mr-2\" />\n                    Manage API Keys\n                  </Button>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </main>\n      </div>\n\n      {/* AI Feature Modals */}\n      <SmartSchedulingModal\n        open={showSmartScheduling}\n        onOpenChange={setShowSmartScheduling}\n        eventData={{\n          eventType: \"corporate\",\n          guestCount: 50,\n          duration: 4\n        }}\n      />\n\n      <EmailReplyModal\n        open={showEmailReply}\n        onOpenChange={setShowEmailReply}\n        customerName=\"Sample Customer\"\n        customerEmail=\"customer@example.com\"\n        initialMessage=\"I'm interested in booking your venue for a corporate event in March. We're expecting about 100 guests and would like catering included. Could you please send me more information about availability and pricing?\"\n      />\n\n      <LeadScoringModal\n        open={showLeadScoring}\n        onOpenChange={setShowLeadScoring}\n        customerData={{\n          name: \"Sample Customer\",\n          email: \"customer@example.com\",\n          company: \"Tech Corp Inc.\"\n        }}\n      />\n    </div>\n  );\n}","size_bytes":62548},"client/src/pages/voice-booking.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { MobileNav } from \"@/components/layout/mobile-nav\";\nimport { \n  Mic, \n  Phone, \n  Sparkles, \n  CheckCircle, \n  Brain,\n  Volume2,\n  MessageSquare,\n  Calendar,\n  User,\n  Clock\n} from \"lucide-react\";\nimport { VoiceBookingPanel } from \"../components/voice/voice-booking-panel\";\nimport { CreateEventModal } from \"../components/forms/create-event-modal\";\n\nexport default function VoiceBookingPage() {\n  const [showEventModal, setShowEventModal] = useState(false);\n  const [voiceData, setVoiceData] = useState<any>(null);\n  const [activeDemo, setActiveDemo] = useState<'booking' | 'call' | null>(null);\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n\n  const handleVoiceDataExtracted = (data: any) => {\n    setVoiceData(data);\n    setShowEventModal(true);\n  };\n\n  const features = [\n    {\n      icon: Brain,\n      title: \"AI-Powered Processing\",\n      description: \"Google Gemini AI processes speech and extracts booking details with high accuracy\"\n    },\n    {\n      icon: Volume2,\n      title: \"Real-Time Transcription\",\n      description: \"Live speech-to-text conversion with intelligent error correction\"\n    },\n    {\n      icon: MessageSquare,\n      title: \"Context Understanding\",\n      description: \"Understands natural language and booking context to extract relevant details\"\n    },\n    {\n      icon: CheckCircle,\n      title: \"Smart Form Population\",\n      description: \"Automatically populates booking forms with extracted information\"\n    }\n  ];\n\n  const demoScenarios = [\n    {\n      type: 'booking',\n      title: \"Voice Booking Demo\",\n      description: \"Staff member using voice to create a booking\",\n      example: \"Corporate event for John Smith, john@company.com, March 15th at 6 PM, 50 guests, Grand Ballroom, need catering and sound system, budget around $5000\"\n    },\n    {\n      type: 'call',\n      title: \"Customer Call Demo\", \n      description: \"Capturing live customer conversation\",\n      example: \"Hi, I'm interested in booking your venue for my daughter's wedding in June. We're expecting about 150 guests and would need the ceremony and reception spaces...\"\n    }\n  ];\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <div className=\"hidden lg:block\">\n        <Sidebar collapsed={sidebarCollapsed} />\n      </div>\n      \n      <MobileNav \n        isOpen={mobileNavOpen} \n        onClose={() => setMobileNavOpen(false)} \n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"AI Voice Booking System\" \n          subtitle=\"Revolutionary voice-powered booking system using Google Gemini AI\"\n          onMobileMenuToggle={() => setMobileNavOpen(true)}\n          onSidebarToggle={() => setSidebarCollapsed(!sidebarCollapsed)}\n          sidebarCollapsed={sidebarCollapsed}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-4 sm:p-6\">\n          <div className=\"max-w-6xl mx-auto space-y-6\">\n      {/* Feature Badges */}\n      <div className=\"text-center\">\n        <div className=\"flex items-center justify-center gap-4\">\n          <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-700\">\n            <Sparkles className=\"w-4 h-4 mr-1\" />\n            AI-Powered\n          </Badge>\n          <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-700\">\n            <Brain className=\"w-4 h-4 mr-1\" />\n            Smart Processing\n          </Badge>\n          <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700\">\n            <CheckCircle className=\"w-4 h-4 mr-1\" />\n            Auto-Population\n          </Badge>\n        </div>\n      </div>\n\n      {/* Key Features */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Sparkles className=\"h-5 w-5 text-purple-600\" />\n            Key Features\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {features.map((feature, index) => (\n              <div key={index} className=\"text-center space-y-3\">\n                <div className=\"mx-auto w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center\">\n                  <feature.icon className=\"h-6 w-6 text-purple-600\" />\n                </div>\n                <h3 className=\"font-semibold\">{feature.title}</h3>\n                <p className=\"text-sm text-gray-600\">{feature.description}</p>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Demo Scenarios */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Phone className=\"h-5 w-5 text-blue-600\" />\n            Try Voice Booking\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"booking\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"booking\" className=\"flex items-center gap-2\">\n                <Mic className=\"h-4 w-4\" />\n                Voice Booking\n              </TabsTrigger>\n              <TabsTrigger value=\"call\" className=\"flex items-center gap-2\">\n                <Phone className=\"h-4 w-4\" />\n                Customer Call\n              </TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"booking\" className=\"space-y-4\">\n              <div className=\"space-y-4\">\n                <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n                  <h4 className=\"font-medium text-blue-900 mb-2\">Voice Booking Mode</h4>\n                  <p className=\"text-blue-800 text-sm mb-3\">\n                    Perfect for staff members who want to create bookings hands-free while on calls or during busy periods.\n                  </p>\n                  <div className=\"text-xs text-blue-700 bg-blue-100 p-2 rounded\">\n                    <strong>Example:</strong> \"{demoScenarios[0].example}\"\n                  </div>\n                </div>\n                <VoiceBookingPanel \n                  onBookingDataExtracted={handleVoiceDataExtracted}\n                  isCallMode={false}\n                />\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"call\" className=\"space-y-4\">\n              <div className=\"space-y-4\">\n                <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\n                  <h4 className=\"font-medium text-green-900 mb-2\">Customer Call Capture</h4>\n                  <p className=\"text-green-800 text-sm mb-3\">\n                    Automatically capture and process customer conversations to extract booking requirements and eliminate manual note-taking.\n                  </p>\n                  <div className=\"text-xs text-green-700 bg-green-100 p-2 rounded\">\n                    <strong>Example:</strong> \"{demoScenarios[1].example}\"\n                  </div>\n                </div>\n                <VoiceBookingPanel \n                  onBookingDataExtracted={handleVoiceDataExtracted}\n                  isCallMode={true}\n                />\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n\n      {/* How It Works */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Brain className=\"h-5 w-5 text-green-600\" />\n            How It Works\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <div className=\"text-center space-y-3\">\n              <div className=\"mx-auto w-12 h-12 bg-red-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-xl font-bold text-red-600\">1</span>\n              </div>\n              <h3 className=\"font-semibold\">Record Voice/Call</h3>\n              <p className=\"text-sm text-gray-600\">Start recording voice input or customer call conversation</p>\n            </div>\n            \n            <div className=\"text-center space-y-3\">\n              <div className=\"mx-auto w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-xl font-bold text-orange-600\">2</span>\n              </div>\n              <h3 className=\"font-semibold\">AI Processing</h3>\n              <p className=\"text-sm text-gray-600\">Google Gemini AI analyzes speech and extracts booking details</p>\n            </div>\n            \n            <div className=\"text-center space-y-3\">\n              <div className=\"mx-auto w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-xl font-bold text-yellow-600\">3</span>\n              </div>\n              <h3 className=\"font-semibold\">Data Extraction</h3>\n              <p className=\"text-sm text-gray-600\">System identifies customer info, dates, requirements, and preferences</p>\n            </div>\n            \n            <div className=\"text-center space-y-3\">\n              <div className=\"mx-auto w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-xl font-bold text-green-600\">4</span>\n              </div>\n              <h3 className=\"font-semibold\">Form Population</h3>\n              <p className=\"text-sm text-gray-600\">Booking form automatically populated with extracted data</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Use Cases */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5 text-blue-600\" />\n              For Venue Staff\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-3 text-sm\">\n              <li className=\"flex items-center gap-3\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <span>Create bookings hands-free while on phone calls</span>\n              </li>\n              <li className=\"flex items-center gap-3\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <span>Eliminate manual note-taking during busy periods</span>\n              </li>\n              <li className=\"flex items-center gap-3\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <span>Speed up booking creation process significantly</span>\n              </li>\n              <li className=\"flex items-center gap-3\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <span>Reduce errors from manual data entry</span>\n              </li>\n            </ul>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Phone className=\"h-5 w-5 text-green-600\" />\n              For Customer Calls\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-3 text-sm\">\n              <li className=\"flex items-center gap-3\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <span>Automatically capture call details in real-time</span>\n              </li>\n              <li className=\"flex items-center gap-3\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <span>Extract customer requirements without interruption</span>\n              </li>\n              <li className=\"flex items-center gap-3\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <span>Suggest follow-up actions based on conversation</span>\n              </li>\n              <li className=\"flex items-center gap-3\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <span>Never miss important details or customer preferences</span>\n              </li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Voice Data Display */}\n      {voiceData && (\n        <Card className=\"border-purple-200 bg-purple-50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-purple-700\">\n              <Sparkles className=\"h-5 w-5\" />\n              Latest Voice Data Extracted\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 text-sm\">\n              {voiceData.eventName && (\n                <div className=\"flex items-center gap-2\">\n                  <Calendar className=\"w-4 h-4 text-purple-600\" />\n                  <span><strong>Event:</strong> {voiceData.eventName}</span>\n                </div>\n              )}\n              {voiceData.customerName && (\n                <div className=\"flex items-center gap-2\">\n                  <User className=\"w-4 h-4 text-purple-600\" />\n                  <span><strong>Customer:</strong> {voiceData.customerName}</span>\n                </div>\n              )}\n              {voiceData.eventDate && (\n                <div className=\"flex items-center gap-2\">\n                  <Clock className=\"w-4 h-4 text-purple-600\" />\n                  <span><strong>Date:</strong> {voiceData.eventDate}</span>\n                </div>\n              )}\n            </div>\n            <div className=\"mt-4\">\n              <Button \n                onClick={() => setShowEventModal(true)}\n                className=\"bg-purple-600 hover:bg-purple-700\"\n              >\n                Open Populated Booking Form\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Event Creation Modal with Pre-populated Data */}\n      {showEventModal && (\n        <CreateEventModal \n          open={showEventModal}\n          onOpenChange={setShowEventModal}\n        />\n      )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":14551},"client/src/components/layout/app-layout.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { MobileNav } from \"@/components/layout/mobile-nav\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\n\ninterface AppLayoutProps {\n  children: React.ReactNode;\n}\n\nexport function AppLayout({ children }: AppLayoutProps) {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n\n  const toggleSidebar = () => {\n    setSidebarCollapsed(!sidebarCollapsed);\n  };\n\n  return (\n    <div className=\"flex h-screen bg-slate-50\">\n      {/* Desktop Sidebar */}\n      <div className=\"hidden md:block\">\n        <Sidebar collapsed={sidebarCollapsed} />\n      </div>\n\n      {/* Mobile Menu */}\n      <div className=\"md:hidden\">\n        <MobileNav />\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden relative\">\n        {/* Floating Sidebar Toggle Button */}\n        <Button\n          onClick={toggleSidebar}\n          className=\"hidden md:flex absolute top-4 left-4 z-50 h-8 w-8 p-0 bg-white border border-slate-200 hover:bg-slate-50 text-slate-600 hover:text-slate-900 shadow-sm\"\n          variant=\"ghost\"\n          title={sidebarCollapsed ? \"Expand sidebar\" : \"Collapse sidebar\"}\n        >\n          {sidebarCollapsed ? <ChevronRight className=\"w-4 h-4\" /> : <ChevronLeft className=\"w-4 h-4\" />}\n        </Button>\n\n        <main className=\"flex-1 overflow-y-auto\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":1532},"client/src/components/proposals/proposal-tracking-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\nimport { \n  FileText, \n  Eye, \n  Mail, \n  Phone, \n  MessageSquare, \n  Clock, \n  DollarSign,\n  CheckCircle2,\n  XCircle,\n  Send,\n  CreditCard,\n  Calendar,\n  MapPin,\n  Users,\n  Paperclip,\n  X,\n  ChevronDown,\n  ChevronRight,\n  MessageCircle,\n  Shield\n} from \"lucide-react\";\n\ninterface Proposal {\n  id: string;\n  title: string;\n  customerId: string;\n  totalAmount: string;\n  depositAmount?: string;\n  status: string;\n  sentAt?: string;\n  viewedAt?: string;\n  emailOpened: boolean;\n  emailOpenedAt?: string;\n  openCount: number;\n  depositPaid: boolean;\n  depositPaidAt?: string;\n  createdAt: string;\n  eventType?: string;\n  eventDate?: string;\n  startTime?: string;\n  endTime?: string;\n  guestCount?: number;\n  venueId?: string;\n  spaceId?: string;\n}\n\ninterface Booking {\n  id: string;\n  eventName: string;\n  eventType: string;\n  customerId: string;\n  venueId: string;\n  spaceId: string;\n  eventDate: string;\n  startTime: string;\n  endTime: string;\n  guestCount: number;\n  status: string;\n  totalAmount: string;\n  notes?: string;\n  proposalId?: string;\n  proposalStatus?: string;\n  proposalSentAt?: string;\n  contractEvents?: Booking[];\n}\n\ninterface Customer {\n  id: string;\n  name: string;\n  email: string;\n  phone?: string;\n  company?: string;\n  address?: string;\n}\n\ninterface Venue {\n  id: string;\n  name: string;\n  spaces?: Array<{\n    id: string;\n    name: string;\n  }>;\n}\n\ninterface Communication {\n  id: string;\n  type: string;\n  direction: string;\n  subject?: string;\n  content: string;\n  message?: string;\n  createdAt: string;\n  sentAt?: string;\n  sentBy?: string;\n  sender?: string;\n  recipient?: string;\n  status?: string;\n  deliveredAt?: string;\n  attachments?: Array<{\n    name: string;\n    size?: number;\n  }>;\n  openCount?: number;\n  lastOpenedAt?: string;\n}\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  proposalId: string;\n}\n\nexport function ProposalTrackingModal({ open, onOpenChange, proposalId }: Props) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [messageType, setMessageType] = useState(\"email\");\n  const [emailSubject, setEmailSubject] = useState(\"\");\n  const [attachments, setAttachments] = useState<File[]>([]);\n  const [showEmailComposer, setShowEmailComposer] = useState(false);\n  const [expandedComms, setExpandedComms] = useState<Set<string>>(new Set());\n\n\n  // Fetch proposal details\n  const { data: proposal, isLoading, refetch } = useQuery<Proposal>({\n    queryKey: [`/api/proposals/${proposalId}`],\n    enabled: !!proposalId && open && !proposalId?.startsWith('booking-')\n  });\n\n  // Refresh proposal data when modal opens\n  useEffect(() => {\n    if (open && proposalId && !proposalId?.startsWith('booking-')) {\n      refetch();\n    }\n  }, [open, proposalId, refetch]);\n\n  // Fetch communications\n  const { data: communications = [] } = useQuery<Communication[]>({\n    queryKey: [`/api/proposals/${proposalId}/communications`],\n    enabled: !!proposalId && open\n  });\n\n  // Fetch related events/bookings\n  const { data: bookings = [] } = useQuery<Booking[]>({\n    queryKey: [\"/api/bookings\"],\n    enabled: !!proposalId && open\n  });\n\n  // Fetch customers\n  const { data: customers = [] } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n    enabled: !!proposalId && open\n  });\n\n  // Fetch venues\n  const { data: venues = [] } = useQuery<Venue[]>({\n    queryKey: [\"/api/venues-with-spaces\"],\n    enabled: !!proposalId && open\n  });\n\n  // Find related events - with precise matching to avoid mixing up different proposals\n  const relatedEvents = proposal ? (() => {\n    console.log('=== PROPOSAL EVENT MATCHING DEBUG ===');\n    console.log('Proposal ID:', proposal.id);\n    console.log('Proposal Title:', proposal.title);\n    console.log('Proposal Customer ID:', proposal.customerId);\n\n    console.log('Proposal Sent At:', proposal.sentAt);\n    console.log('Total Bookings Available:', bookings.length);\n    \n    // For direct proposals with event data embedded in the proposal\n    if (proposal.eventDate && proposal.guestCount) {\n      console.log('Using embedded event data from proposal');\n      return [{\n        id: `proposal-event-${proposal.id}`,\n        eventName: proposal.title ? proposal.title.replace(/^Proposal for\\s+/i, '') : 'Untitled Event',\n        eventType: proposal.eventType || 'corporate',\n        customerId: proposal.customerId,\n        venueId: proposal.venueId || '',\n        spaceId: proposal.spaceId || '',\n        eventDate: proposal.eventDate,\n        startTime: proposal.startTime || '09:00',\n        endTime: proposal.endTime || '17:00',\n        guestCount: proposal.guestCount,\n        status: 'proposal_shared',\n        totalAmount: proposal.totalAmount,\n        notes: `Proposal: ${proposal.title || 'Untitled'}`\n      }];\n    }\n\n    // FIRST: Try direct proposal ID matching (most reliable)\n    const directMatch = bookings.filter(booking => booking.proposalId === proposal.id);\n    console.log('Direct proposalId matches:', directMatch.length);\n    if (directMatch.length > 0) {\n      console.log('Found direct proposal ID match:', directMatch.map(b => ({id: b.id, eventName: b.eventName})));\n      return directMatch.flatMap((booking) => {\n        if (booking.contractEvents && booking.contractEvents.length > 0) {\n          console.log('Returning contract events for direct match:', booking.contractEvents.length);\n          return booking.contractEvents;\n        }\n        return [booking];\n      });\n    }\n\n    // SECOND: Skip bookingId check as this field doesn't exist in current schema\n\n    // THIRD: For proposals created from booking flow - precise time-based matching\n    if (proposal.sentAt) {\n      const proposalTime = new Date(proposal.sentAt).getTime();\n      console.log('Trying time-based matching for proposal sent at:', proposalTime);\n      \n      // Find bookings that were created at the exact same time as this proposal was sent\n      const timeMatchedBookings = bookings.filter((booking) => {\n        // Must be same customer\n        if (booking.customerId !== proposal.customerId) return false;\n        \n        // Must have proposal status and timestamp\n        if (booking.proposalStatus !== 'sent' || !booking.proposalSentAt) return false;\n        \n        const bookingProposalTime = new Date(booking.proposalSentAt).getTime();\n        const timeDiff = Math.abs(proposalTime - bookingProposalTime);\n        \n        console.log(`Checking booking ${booking.eventName}: time diff = ${timeDiff}ms`);\n        \n        // Very tight window - only 5 seconds to ensure precision\n        return timeDiff < 5000;\n      });\n      \n      console.log('Time-based matches:', timeMatchedBookings.length);\n      if (timeMatchedBookings.length > 0) {\n        console.log('Found time-based matches:', timeMatchedBookings.map(b => ({id: b.id, eventName: b.eventName})));\n        return timeMatchedBookings.flatMap((booking) => {\n          if (booking.contractEvents && booking.contractEvents.length > 0) {\n            console.log('Returning contract events for time match:', booking.contractEvents.length);\n            return booking.contractEvents;\n          }\n          return [booking];\n        });\n      }\n    }\n\n    // FOURTH: No fallback matching to prevent mixing up different proposals\n    console.log('No precise matches found - returning empty array');\n    return [];\n  })() : [];\n\n  // Get customer\n  const customer = proposal ? customers.find((c) => c.id === proposal.customerId) : null;\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const formData = new FormData();\n      formData.append('type', data.type);\n      formData.append('direction', data.direction);\n      if (data.subject) formData.append('subject', data.subject);\n      formData.append('content', data.content);\n      formData.append('customerId', data.customerId);\n      \n      // Add attachments\n      attachments.forEach((file, index) => {\n        formData.append('attachments', file);\n      });\n      \n      const response = await fetch(`/api/proposals/${proposalId}/communications`, {\n        method: 'POST',\n        body: formData\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message Sent\",\n        description: \"Your message has been sent to the customer\"\n      });\n      setNewMessage(\"\");\n      setEmailSubject(\"\");\n      setAttachments([]);\n      queryClient.invalidateQueries({ queryKey: [`/api/proposals/${proposalId}/communications`] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Resend proposal mutation\n  const resendProposalMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", `/api/proposals/${proposalId}/resend`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Proposal Resent\",\n        description: \"The proposal has been resent to the customer with updated event details\"\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/proposals/${proposalId}`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/proposals/${proposalId}/communications`] });\n    },\n    onError: (error: any) => {\n      console.error('Resend proposal error:', error);\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Failed to resend proposal. Please check server logs.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSendMessage = () => {\n    if (!newMessage.trim()) return;\n    \n    sendMessageMutation.mutate({\n      type: messageType,\n      direction: 'outbound',\n      subject: messageType === 'email' ? emailSubject || 'Follow-up on your event proposal' : null,\n      content: newMessage,\n      customerId: proposal?.customerId\n    });\n  };\n\n  const handleFileAttachment = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (files) {\n      setAttachments(prev => [...prev, ...Array.from(files)]);\n    }\n  };\n\n  const removeAttachment = (index: number) => {\n    setAttachments(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleResendProposal = () => {\n    resendProposalMutation.mutate();\n  };\n\n\n\n  if (isLoading) {\n    return (\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n          <div className=\"flex items-center justify-center p-8\">\n            <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n            <span className=\"ml-2\">Loading proposal details...</span>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  if (!proposal) {\n    return (\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"max-w-md\">\n          <div className=\"text-center p-6\">\n            <XCircle className=\"h-16 w-16 text-red-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Proposal Not Found</h3>\n            <p className=\"text-gray-500\">The proposal you're looking for could not be found.</p>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-hidden\">\n        <DialogHeader className=\"border-b pb-4\">\n          <DialogTitle className=\"flex items-center gap-3\">\n            <FileText className=\"h-5 w-5 text-blue-500\" />\n            <span>{proposal.title || 'Untitled Event'}</span>\n            <Badge variant={proposal.status === 'sent' ? 'default' : 'secondary'}>\n              {proposal.status}\n            </Badge>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-5 gap-6 overflow-y-auto max-h-[calc(90vh-8rem)]\">\n          {/* Left Column - Main Content */}\n          <div className=\"lg:col-span-3 space-y-6\">\n            {/* Proposal Status & Tracking */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Proposal Status & Tracking</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={`w-3 h-3 rounded-full ${proposal.sentAt ? 'bg-green-500' : 'bg-gray-300'}`} />\n                    <div>\n                      <div className=\"text-sm font-medium\">Sent</div>\n                      <div className=\"text-xs text-gray-500\">\n                        {proposal.sentAt ? format(new Date(proposal.sentAt), \"MMM d, h:mm a\") : 'Not sent'}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={`w-3 h-3 rounded-full ${proposal.status === 'viewed' ? 'bg-blue-500' : 'bg-gray-300'}`} />\n                    <div>\n                      <div className=\"text-sm font-medium\">Viewed</div>\n                      <div className=\"text-xs text-gray-500\">\n                        {proposal.viewedAt ? format(new Date(proposal.viewedAt), \"MMM d, h:mm a\") : 'Not viewed'}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={`w-3 h-3 rounded-full ${proposal.status === 'accepted' ? 'bg-purple-500' : 'bg-gray-300'}`} />\n                    <div>\n                      <div className=\"text-sm font-medium\">Accepted</div>\n                      <div className=\"text-xs text-gray-500\">\n                        {proposal.status === 'accepted' ? 'Accepted' : 'Not accepted'}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={`w-3 h-3 rounded-full ${proposal.depositPaid ? 'bg-emerald-500' : 'bg-gray-300'}`} />\n                    <div>\n                      <div className=\"text-sm font-medium\">Paid</div>\n                      <div className=\"text-xs text-gray-500\">\n                        {proposal.depositPaidAt ? format(new Date(proposal.depositPaidAt), \"MMM d, h:mm a\") : 'Not paid'}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-blue-50 p-3 rounded-lg\">\n                  <div className=\"text-xs text-blue-600\">\n                    Status: {proposal.status === 'sent' ? 'Waiting for customer to view' : \n                            proposal.status === 'viewed' ? 'Customer has viewed the proposal' :\n                            proposal.status === 'accepted' ? 'Proposal accepted - ready for payment!' :\n                            proposal.status === 'declined' ? 'Proposal declined' : \n                            proposal.depositPaid ? 'Paid' : 'Draft'}\n                  </div>\n                  <div className=\"text-xs text-gray-600 mt-2\">\n                    Created: {format(new Date(proposal.createdAt), \"MMM d, yyyy 'at' h:mm a\")}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Event Details */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Event Details</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {relatedEvents.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <Calendar className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                    <p>No events found for this proposal</p>\n                    <p className=\"text-sm mt-2\">Events may take a moment to appear after sending a proposal</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {relatedEvents.map((event, index) => {\n                      const venue = venues.find((v) => v.id === event.venueId);\n                      const space = venue?.spaces?.find((s) => s.id === event.spaceId);\n                      \n                      return (\n                        <div key={event.id} className={`${index > 0 ? 'border-t pt-4' : ''}`}>\n                          <div className=\"space-y-3\">\n                            <div className=\"font-medium text-lg\">{event.eventName}</div>\n                            \n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 text-sm\">\n                              <div className=\"flex items-center gap-2\">\n                                <Calendar className=\"h-4 w-4 text-gray-400\" />\n                                <span>{event.eventDate && !isNaN(new Date(event.eventDate).getTime()) \n                                  ? format(new Date(event.eventDate), \"MMMM d, yyyy\") \n                                  : \"Date TBD\"}</span>\n                              </div>\n                              <div className=\"flex items-center gap-2\">\n                                <Clock className=\"h-4 w-4 text-gray-400\" />\n                                <span>{event.startTime} - {event.endTime}</span>\n                              </div>\n                              <div className=\"flex items-center gap-2\">\n                                <Users className=\"h-4 w-4 text-gray-400\" />\n                                <span>{event.guestCount} guests</span>\n                              </div>\n                              <div className=\"flex items-center gap-2\">\n                                <MapPin className=\"h-4 w-4 text-gray-400\" />\n                                <span>{venue?.name || 'Venue TBD'}{space ? ` - ${space.name}` : ''}</span>\n                              </div>\n                            </div>\n                            \n                            {event.notes && (\n                              <div className=\"text-sm text-gray-600 bg-gray-50 p-2 rounded\">\n                                <strong>Notes:</strong> {event.notes}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n\n                <Separator className=\"my-4\" />\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Total Amount</span>\n                    <span className=\"font-medium\">${parseFloat(\n                      relatedEvents.length > 0 && relatedEvents[0].totalAmount \n                        ? relatedEvents[0].totalAmount \n                        : proposal.totalAmount || '0'\n                    ).toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-green-600\">\n                    <span>Required Deposit</span>\n                    <span className=\"font-medium\">${(() => {\n                      const currentTotal = relatedEvents.length > 0 && relatedEvents[0].totalAmount \n                        ? relatedEvents[0].totalAmount \n                        : proposal.totalAmount || '0';\n                      const currentDeposit = (parseFloat(currentTotal) * 0.3).toString();\n                      return parseFloat(currentDeposit).toFixed(2);\n                    })()}</span>\n                  </div>\n                  {/* Show pricing update indicator if amounts have changed */}\n                  {(() => {\n                    const currentTotal = relatedEvents.length > 0 && relatedEvents[0].totalAmount \n                      ? relatedEvents[0].totalAmount \n                      : proposal.totalAmount || '0';\n                    const originalTotal = proposal.totalAmount || '0';\n                    const hasChanged = currentTotal !== originalTotal;\n                    \n                    return hasChanged ? (\n                      <div className=\"bg-blue-50 p-2 rounded-lg border border-blue-200\">\n                        <div className=\"text-xs text-blue-600 flex items-center gap-1\">\n                          <Clock className=\"h-3 w-3\" />\n                          Pricing updated from original proposal (was ${parseFloat(originalTotal).toFixed(2)})\n                        </div>\n                      </div>\n                    ) : null;\n                  })()}\n\n                  {/* Resend Indicator */}\n                  {communications.filter(c => c.type === 'email' && c.direction === 'outbound' && c.subject?.includes('Proposal')).length > 1 && (\n                    <div className=\"bg-amber-50 p-2 rounded-lg border border-amber-200\">\n                      <div className=\"text-xs text-amber-600 flex items-center gap-1\">\n                        <Send className=\"h-3 w-3\" />\n                        Proposal has been resent {communications.filter(c => c.type === 'email' && c.direction === 'outbound' && c.subject?.includes('Proposal')).length - 1} time(s)\n                      </div>\n                      <div className=\"text-xs text-amber-500 mt-1\">\n                        Last resent: {communications\n                          .filter(c => c.type === 'email' && c.direction === 'outbound' && c.subject?.includes('Proposal'))\n                          .sort((a, b) => new Date(b.sentAt || b.createdAt).getTime() - new Date(a.sentAt || a.createdAt).getTime())[1] // Get second most recent (first resend)\n                          ? format(new Date(communications\n                            .filter(c => c.type === 'email' && c.direction === 'outbound' && c.subject?.includes('Proposal'))\n                            .sort((a, b) => new Date(b.sentAt || b.createdAt).getTime() - new Date(a.sentAt || a.createdAt).getTime())[0].sentAt || \n                            communications\n                            .filter(c => c.type === 'email' && c.direction === 'outbound' && c.subject?.includes('Proposal'))\n                            .sort((a, b) => new Date(b.sentAt || b.createdAt).getTime() - new Date(a.sentAt || a.createdAt).getTime())[0].createdAt), \"MMM d 'at' h:mm a\")\n                          : 'Unknown'\n                        }\n                      </div>\n                    </div>\n                  )}\n\n                  {proposal.depositPaid && (\n                    <div className=\"bg-emerald-50 p-3 rounded-lg border border-emerald-200\">\n                      <div className=\"flex justify-between text-emerald-700 mb-2\">\n                        <span className=\"font-medium\">✓ Deposit Paid</span>\n                        <span className=\"font-medium\">${parseFloat(proposal.depositAmount || '0').toFixed(2)}</span>\n                      </div>\n                      <div className=\"flex justify-between text-emerald-600 text-sm\">\n                        <span>Remaining Balance:</span>\n                        <span className=\"font-medium\">\n                          ${(() => {\n                            const currentTotal = relatedEvents.length > 0 && relatedEvents[0].totalAmount \n                              ? relatedEvents[0].totalAmount \n                              : proposal.totalAmount || '0';\n                            const paidDeposit = parseFloat(proposal.depositAmount || '0');\n                            return (parseFloat(currentTotal) - paidDeposit).toFixed(2);\n                          })()}\n                        </span>\n                      </div>\n                      <div className=\"text-xs text-emerald-600 mt-1\">\n                        Paid on: {proposal.depositPaidAt && !isNaN(new Date(proposal.depositPaidAt).getTime()) \n                        ? format(new Date(proposal.depositPaidAt), \"MMM d, yyyy 'at' h:mm a\") \n                        : 'N/A'}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Communication Log */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Communication History</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 max-h-64 overflow-y-auto\">\n                  {communications.length === 0 ? (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      <MessageSquare className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                      <p>No communications yet</p>\n                    </div>\n                  ) : (\n                    communications.map((comm) => {\n                      const isExpanded = expandedComms.has(comm.id);\n                      const toggleExpanded = () => {\n                        const newExpanded = new Set(expandedComms);\n                        if (isExpanded) {\n                          newExpanded.delete(comm.id);\n                        } else {\n                          newExpanded.add(comm.id);\n                        }\n                        setExpandedComms(newExpanded);\n                      };\n\n                      // Extract preview (first line or 100 chars)\n                      // Create a clean preview that strips HTML if present\n                      const getCleanPreview = (content: string) => {\n                        if (content.includes('<!DOCTYPE html>') || content.includes('<html>')) {\n                          try {\n                            // Use DOMParser instead of innerHTML to safely parse HTML without script execution\n                            const parser = new DOMParser();\n                            const doc = parser.parseFromString(content, 'text/html');\n                            const cleanText = doc.body?.textContent || doc.body?.innerText || content;\n                            return cleanText.length > 100 ? cleanText.substring(0, 100) + '...' : cleanText;\n                          } catch (error) {\n                            console.warn('Error parsing HTML content:', error);\n                            return content.length > 100 ? content.substring(0, 100) + '...' : content;\n                          }\n                        }\n                        return content.length > 100 ? content.substring(0, 100) + '...' : content;\n                      };\n                      \n                      const preview = comm.content ? getCleanPreview(comm.content.split('\\n')[0]) : '';\n\n                      return (\n                        <div key={comm.id} className={`border-l-4 pl-4 py-3 bg-white hover:bg-gray-50 rounded-r transition-colors ${\n                          comm.direction === 'inbound' ? 'border-green-300 bg-green-50' : 'border-blue-300'\n                        }`}>\n                          {/* Clickable Header */}\n                          <div \n                            className=\"flex items-center justify-between mb-2 cursor-pointer\"\n                            onClick={toggleExpanded}\n                          >\n                            <div className=\"flex items-center gap-2\">\n                              {/* Expand/Collapse Icon */}\n                              {isExpanded ? (\n                                <ChevronDown className=\"h-4 w-4 text-gray-400\" />\n                              ) : (\n                                <ChevronRight className=\"h-4 w-4 text-gray-400\" />\n                              )}\n                              \n                              {/* Communication Type Icon */}\n                              {comm.type === 'email' && <Mail className=\"h-4 w-4 text-blue-500\" />}\n                              {comm.type === 'phone' && <Phone className=\"h-4 w-4 text-green-500\" />}\n                              {comm.type === 'note' && <MessageSquare className=\"h-4 w-4 text-gray-500\" />}\n                              \n                              <span className=\"font-medium text-sm\">\n                                {comm.direction === 'outbound' ? 'Sent' : 'Received'}\n                              </span>\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {comm.type}\n                              </Badge>\n                              \n                              {/* Status indicator for failed emails */}\n                              {comm.status === 'failed' && (\n                                <Badge variant=\"destructive\" className=\"text-xs\">\n                                  Failed\n                                </Badge>\n                              )}\n                            </div>\n                            <div className=\"flex flex-col items-end text-xs text-gray-500\">\n                              <span>\n                                {comm.direction === 'outbound' ? 'Sent' : 'Received'}:\n                              </span>\n                              <span className=\"font-medium\">\n                                {comm.sentAt && !isNaN(new Date(comm.sentAt).getTime()) \n                                  ? format(new Date(comm.sentAt), \"MMM d, h:mm a\")\n                                  : comm.createdAt && !isNaN(new Date(comm.createdAt).getTime())\n                                    ? format(new Date(comm.createdAt), \"MMM d, h:mm a\")\n                                    : \"Unknown\"}\n                              </span>\n                            </div>\n                          </div>\n\n                          {/* Subject Line - Always show if exists */}\n                          {comm.subject && (\n                            <div \n                              className=\"text-sm font-medium mb-2 cursor-pointer hover:text-blue-600 text-gray-800\"\n                              onClick={toggleExpanded}\n                            >\n                              <span className=\"text-xs text-gray-500 mr-2\">Subject:</span>\n                              {comm.subject}\n                            </div>\n                          )}\n\n                          {/* Content Preview/Full */}\n                          <div className=\"text-sm text-gray-600\">\n                            {isExpanded ? (\n                              <div className=\"space-y-3\">\n                                {/* Full Message Content */}\n                                <div className=\"bg-gray-50 p-3 rounded border\">\n                                  <div className=\"text-xs text-gray-500 mb-2 font-medium\">Message Content:</div>\n                                  <div className=\"whitespace-pre-wrap text-gray-800\">\n                                    {/* Strip HTML from content and show clean text */}\n                                    {(() => {\n                                      const content = comm.message || comm.content;\n                                      \n                                      // Check if content contains HTML tags or CSS\n                                      if (content.includes('<') && content.includes('>')) {\n                                        try {\n                                          // Use DOMParser instead of innerHTML to safely parse HTML without script execution\n                                          const parser = new DOMParser();\n                                          const doc = parser.parseFromString(content, 'text/html');\n                                          \n                                          // Remove script and style elements\n                                          const scripts = doc.querySelectorAll('script, style');\n                                          scripts.forEach(el => el.remove());\n                                          \n                                          // Get clean text content\n                                          let cleanText = doc.body?.textContent || doc.body?.innerText || '';\n                                          \n                                          // Clean up extra whitespace and format nicely\n                                          cleanText = cleanText\n                                            .replace(/\\s+/g, ' ')  // Replace multiple spaces with single space\n                                            .replace(/\\n\\s*\\n/g, '\\n')  // Remove extra line breaks\n                                            .trim();\n                                          \n                                          // If we successfully extracted readable text, return it\n                                          if (cleanText && cleanText.length > 10) {\n                                            return cleanText;\n                                          }\n                                        } catch (error) {\n                                          console.warn('Error parsing HTML content:', error);\n                                        }\n                                      }\n                                      \n                                      return content;\n                                    })()}\n                                  </div>\n                                </div>\n\n                                {/* Detailed Information */}\n                                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 text-xs\">\n                                  {/* Sender/Recipient Info */}\n                                  <div className=\"space-y-1\">\n                                    {comm.direction === 'outbound' ? (\n                                      <>\n                                        <div><span className=\"font-medium text-gray-700\">From:</span> {comm.sentBy || comm.sender || 'Venue Team'}</div>\n                                        <div><span className=\"font-medium text-gray-700\">To:</span> {comm.recipient || 'Customer'}</div>\n                                      </>\n                                    ) : (\n                                      <>\n                                        <div><span className=\"font-medium text-gray-700\">From:</span> {comm.sender || comm.sentBy || 'Customer'}</div>\n                                        <div><span className=\"font-medium text-gray-700\">To:</span> {comm.recipient || 'Venue Team'}</div>\n                                      </>\n                                    )}\n                                  </div>\n\n                                  {/* Timing & Status */}\n                                  <div className=\"space-y-1\">\n                                    <div><span className=\"font-medium text-gray-700\">Status:</span> \n                                      <Badge variant={comm.status === 'failed' ? 'destructive' : comm.direction === 'inbound' ? 'secondary' : 'outline'} className=\"ml-1 text-xs\">\n                                        {comm.status === 'failed' ? 'Failed' : \n                                         comm.status === 'received' ? 'Received' :\n                                         comm.status === 'delivered' ? 'Delivered' :\n                                         comm.status || (comm.direction === 'inbound' ? 'Received' : 'Sent')}\n                                      </Badge>\n                                    </div>\n                                    {(comm.sentAt || comm.createdAt) && (\n                                      <div><span className=\"font-medium text-gray-700\">\n                                        {comm.direction === 'outbound' ? 'Sent' : 'Received'}:</span> {\n                                        comm.sentAt \n                                          ? format(new Date(comm.sentAt), \"MMM d, yyyy 'at' h:mm a\")\n                                          : format(new Date(comm.createdAt), \"MMM d, yyyy 'at' h:mm a\")\n                                      }</div>\n                                    )}\n                                    {comm.direction === 'outbound' && comm.deliveredAt && (\n                                      <div><span className=\"font-medium text-gray-700\">Delivered:</span> {format(new Date(comm.deliveredAt), \"h:mm a\")}</div>\n                                    )}\n                                  </div>\n                                </div>\n\n                                {/* Attachments (only show for outbound communications for security) */}\n                                {comm.direction === 'outbound' && comm.attachments && comm.attachments.length > 0 && (\n                                  <div className=\"bg-blue-50 border-blue-200 p-3 rounded border\">\n                                    <div className=\"text-xs font-medium mb-2 text-blue-700\">\n                                      Attachments Sent ({comm.attachments.length}):\n                                    </div>\n                                    <div className=\"space-y-1\">\n                                      {comm.attachments.map((attachment: any, idx: number) => (\n                                        <div key={idx} className=\"flex items-center gap-2 text-xs\">\n                                          <Paperclip className=\"h-3 w-3 text-blue-500\" />\n                                          <span className=\"text-blue-700\">\n                                            {attachment.name || `Attachment ${idx + 1}`}\n                                          </span>\n                                          {attachment.size && (\n                                            <span className=\"text-gray-500\">({Math.round(attachment.size / 1024)} KB)</span>\n                                          )}\n                                        </div>\n                                      ))}\n                                    </div>\n                                  </div>\n                                )}\n                                \n                                {/* Security notice for inbound communications */}\n                                {comm.direction === 'inbound' && (\n                                  <div className=\"bg-amber-50 border-amber-200 p-2 rounded border\">\n                                    <div className=\"text-xs text-amber-700 flex items-center gap-1\">\n                                      <Shield className=\"h-3 w-3\" />\n                                      Customer attachments are not displayed for security reasons\n                                    </div>\n                                  </div>\n                                )}\n\n                                {/* Email tracking info for outbound emails */}\n                                {comm.direction === 'outbound' && comm.type === 'email' && (\n                                  <div className=\"bg-blue-50 p-2 rounded border border-blue-200\">\n                                    <div className=\"text-xs text-blue-600\">\n                                      <Clock className=\"h-3 w-3 inline mr-1\" />\n                                      Email tracking: {(comm.openCount || 0) > 0 \n                                        ? `Opened ${comm.openCount} time${(comm.openCount || 0) > 1 ? 's' : ''}`\n                                        : 'Not yet opened'\n                                      }\n                                      {comm.lastOpenedAt && (\n                                        <span className=\"block mt-1\">\n                                          Last opened: {format(new Date(comm.lastOpenedAt), \"MMM d 'at' h:mm a\")}\n                                        </span>\n                                      )}\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n                            ) : (\n                              <div \n                                className=\"cursor-pointer hover:text-gray-800\"\n                                onClick={toggleExpanded}\n                              >\n                                {(() => {\n                                  const content = comm.message || comm.content;\n                                  let displayContent = preview || content;\n                                  \n                                  // If content contains HTML, extract clean text for preview\n                                  if (displayContent && displayContent.includes('<') && displayContent.includes('>')) {\n                                    try {\n                                      const tempDiv = document.createElement('div');\n                                      tempDiv.innerHTML = displayContent;\n                                      const scripts = tempDiv.querySelectorAll('script, style');\n                                      scripts.forEach(el => el.remove());\n                                      const cleanText = tempDiv.textContent || tempDiv.innerText || '';\n                                      displayContent = cleanText.replace(/\\s+/g, ' ').trim();\n                                    } catch (error) {\n                                      // Fallback to original content if parsing fails\n                                    }\n                                  }\n                                  \n                                  const truncated = displayContent?.substring(0, 100) + (displayContent?.length > 100 ? '...' : '');\n                                  return truncated;\n                                })()}\n                                {(comm.message || comm.content) && (comm.message || comm.content).length > 100 && (\n                                  <span className=\"text-blue-500 ml-1 text-xs\">Click to expand</span>\n                                )}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      );\n                    })\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column - Customer & Communication */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Customer Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Customer</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"font-medium\">{customer?.name || 'Customer Name'}</div>\n                  <div className=\"text-gray-600\">{customer?.email || 'No email'}</div>\n                  <div className=\"text-gray-600\">{customer?.phone || 'No phone'}</div>\n                  {customer?.company && (\n                    <div className=\"text-gray-600\">{customer.company}</div>\n                  )}\n                  {customer?.address && (\n                    <div className=\"text-gray-600 text-xs\">{customer.address}</div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\"\n                  onClick={handleResendProposal}\n                  disabled={resendProposalMutation.isPending}\n                >\n                  <Send className=\"h-4 w-4 mr-2\" />\n                  {resendProposalMutation.isPending ? 'Sending...' : 'Resend Proposal'}\n                </Button>\n\n\n              </CardContent>\n            </Card>\n\n            {/* Enhanced Communication Section */}\n            <Card className=\"h-fit\">\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <MessageSquare className=\"h-5 w-5\" />\n                  Customer Communication\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Message Type Selection */}\n                <div>\n                  <Label htmlFor=\"messageType\">Message Type</Label>\n                  <select\n                    id=\"messageType\"\n                    value={messageType}\n                    onChange={(e) => {\n                      setMessageType(e.target.value);\n                      if (e.target.value === 'email') {\n                        setShowEmailComposer(true);\n                      } else {\n                        setShowEmailComposer(false);\n                      }\n                    }}\n                    className=\"w-full mt-1 p-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"email\">📧 Email Customer</option>\n                    <option value=\"note\">📝 Internal Note</option>\n                  </select>\n                </div>\n\n                {/* Email Subject (only for emails) */}\n                {messageType === 'email' && (\n                  <div>\n                    <Label htmlFor=\"emailSubject\">Subject Line</Label>\n                    <input\n                      id=\"emailSubject\"\n                      type=\"text\"\n                      value={emailSubject}\n                      onChange={(e) => setEmailSubject(e.target.value)}\n                      placeholder=\"Re: Your Event Proposal\"\n                      className=\"w-full mt-1 p-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n                )}\n                \n                {/* Message Content */}\n                <div>\n                  <Label htmlFor=\"message\">\n                    {messageType === 'email' ? 'Email Content' : 'Note Content'}\n                  </Label>\n                  <Textarea\n                    id=\"message\"\n                    value={newMessage}\n                    onChange={(e) => setNewMessage(e.target.value)}\n                    placeholder={messageType === 'email' \n                      ? \"Hi [Customer Name],\\n\\nI wanted to follow up on your event proposal...\\n\\nBest regards,\\nYour Name\" \n                      : \"Internal note about this proposal...\"}\n                    rows={messageType === 'email' ? 8 : 4}\n                    className=\"w-full resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  />\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    {newMessage.length}/2000 characters\n                  </div>\n                </div>\n\n                {/* File Attachments (only for emails) */}\n                {messageType === 'email' && (\n                  <div>\n                    <Label>File Attachments</Label>\n                    <div className=\"mt-2 space-y-2\">\n                      <input\n                        type=\"file\"\n                        multiple\n                        onChange={handleFileAttachment}\n                        className=\"hidden\"\n                        id=\"file-attachment\"\n                        accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png,.gif\"\n                      />\n                      <label\n                        htmlFor=\"file-attachment\"\n                        className=\"flex items-center gap-2 p-2 border-2 border-dashed border-gray-300 rounded-md cursor-pointer hover:border-blue-500 hover:bg-blue-50 transition-colors\"\n                      >\n                        <Paperclip className=\"h-4 w-4 text-gray-500\" />\n                        <span className=\"text-sm text-gray-600\">\n                          Click to attach files (PDF, DOC, JPG, PNG)\n                        </span>\n                      </label>\n                      \n                      {/* Attachment List */}\n                      {attachments.length > 0 && (\n                        <div className=\"space-y-1\">\n                          {attachments.map((file, index) => (\n                            <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                              <div className=\"flex items-center gap-2\">\n                                <FileText className=\"h-4 w-4 text-gray-500\" />\n                                <span className=\"text-sm text-gray-700\">{file.name}</span>\n                                <span className=\"text-xs text-gray-500\">\n                                  ({(file.size / 1024).toFixed(1)} KB)\n                                </span>\n                              </div>\n                              <button\n                                onClick={() => removeAttachment(index)}\n                                className=\"text-red-500 hover:text-red-700\"\n                              >\n                                <X className=\"h-4 w-4\" />\n                              </button>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                {/* Send Button */}\n                <Button\n                  onClick={handleSendMessage}\n                  disabled={!newMessage.trim() || sendMessageMutation.isPending}\n                  className=\"w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800\"\n                  size=\"lg\"\n                >\n                  <Send className=\"h-4 w-4 mr-2\" />\n                  {sendMessageMutation.isPending \n                    ? 'Sending...' \n                    : `Send ${messageType === 'email' ? 'Email' : 'Note'}`\n                  }\n                </Button>\n\n                {messageType === 'email' && (\n                  <div className=\"text-xs text-gray-500 bg-blue-50 p-2 rounded\">\n                    💡 <strong>Tip:</strong> Professional email communication is automatically tracked in the communication history below.\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </DialogContent>\n\n\n    </Dialog>\n  );\n}","size_bytes":50898},"client/src/components/voice/voice-booking-panel.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Mic, \n  MicOff, \n  Phone, \n  PhoneOff, \n  MessageSquare, \n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  User,\n  Calendar,\n  MapPin,\n  Users,\n  DollarSign\n} from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface VoiceBookingPanelProps {\n  onBookingDataExtracted: (data: any) => void;\n  isCallMode?: boolean;\n}\n\nexport function VoiceBookingPanel({ onBookingDataExtracted, isCallMode = false }: VoiceBookingPanelProps) {\n  const { toast } = useToast();\n  const [isRecording, setIsRecording] = useState(false);\n  const [transcript, setTranscript] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [extractedData, setExtractedData] = useState<any>(null);\n  const [callDuration, setCallDuration] = useState(0);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const recognitionRef = useRef<any>(null);\n  const callTimerRef = useRef<NodeJS.Timeout | null>(null);\n\n  const parseVoiceData = useMutation({\n    mutationFn: async (voiceText: string) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/parse-voice\", {\n        transcript: voiceText,\n        context: isCallMode ? \"customer_call\" : \"voice_booking\"\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setExtractedData(data);\n      onBookingDataExtracted(data);\n      toast({\n        title: \"Voice Data Processed\",\n        description: `Extracted booking details for ${data.eventName || 'new event'}`\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Processing Failed\",\n        description: \"Could not process voice input. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isCallMode && isRecording) {\n      callTimerRef.current = setInterval(() => {\n        setCallDuration(prev => prev + 1);\n      }, 1000);\n    } else {\n      if (callTimerRef.current) {\n        clearInterval(callTimerRef.current);\n      }\n    }\n\n    return () => {\n      if (callTimerRef.current) {\n        clearInterval(callTimerRef.current);\n      }\n    };\n  }, [isCallMode, isRecording]);\n\n  const startRecording = async () => {\n    try {\n      // Start audio recording for call transcription\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      \n      // Start voice recognition\n      if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\n        const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;\n        recognitionRef.current = new SpeechRecognition();\n        recognitionRef.current.continuous = true;\n        recognitionRef.current.interimResults = true;\n        recognitionRef.current.lang = 'en-US';\n\n        recognitionRef.current.onresult = (event: any) => {\n          let finalTranscript = '';\n          let interimTranscript = '';\n\n          for (let i = event.resultIndex; i < event.results.length; i++) {\n            const transcript = event.results[i][0].transcript;\n            if (event.results[i].isFinal) {\n              finalTranscript += transcript;\n            } else {\n              interimTranscript += transcript;\n            }\n          }\n\n          setTranscript(prev => prev + finalTranscript);\n        };\n\n        recognitionRef.current.start();\n      }\n\n      setIsRecording(true);\n      setCallDuration(0);\n      \n      toast({\n        title: isCallMode ? \"Call Recording Started\" : \"Voice Booking Started\",\n        description: isCallMode ? \"Recording customer call...\" : \"Listening for booking details...\"\n      });\n\n    } catch (error) {\n      toast({\n        title: \"Recording Failed\",\n        description: \"Could not access microphone. Please check permissions.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const stopRecording = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n    }\n    \n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\n    }\n\n    setIsRecording(false);\n    \n    if (transcript.trim()) {\n      setIsProcessing(true);\n      parseVoiceData.mutate(transcript);\n    }\n\n    toast({\n      title: isCallMode ? \"Call Ended\" : \"Recording Stopped\",\n      description: \"Processing voice data...\"\n    });\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const clearSession = () => {\n    setTranscript(\"\");\n    setExtractedData(null);\n    setCallDuration(0);\n    setIsProcessing(false);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Voice Instructions */}\n      <Card className=\"border-blue-200 bg-blue-50\">\n        <CardHeader>\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            <MessageSquare className=\"h-5 w-5 text-blue-600\" />\n            {isCallMode ? \"Call Capture Instructions\" : \"Voice Booking Instructions\"}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-sm text-blue-800 space-y-2\">\n            <p className=\"font-medium\">\n              {isCallMode \n                ? \"When a customer calls, start recording to capture their requirements:\"\n                : \"Speak clearly and include these details for AI to create your booking:\"\n              }\n            </p>\n            <ul className=\"list-disc list-inside space-y-1 text-blue-700\">\n              <li><strong>Event Type:</strong> \"Corporate event\", \"Wedding\", \"Birthday party\", etc.</li>\n              <li><strong>Customer Info:</strong> \"Customer name is John Smith, email john@company.com\"</li>\n              <li><strong>Date & Time:</strong> \"Event on March 15th at 6 PM\" or \"Saturday evening\"</li>\n              <li><strong>Guest Count:</strong> \"Expecting 50 guests\" or \"About 100 people\"</li>\n              <li><strong>Venue Preference:</strong> \"Grand Ballroom\" or \"Main hall\"</li>\n              <li><strong>Services:</strong> \"Need catering and sound system\"</li>\n              <li><strong>Budget:</strong> \"Budget around $5000\" (optional)</li>\n            </ul>\n            <p className=\"text-xs mt-3 font-medium\">\n              {isCallMode \n                ? \"The AI will capture everything the customer says and suggest creating an event.\"\n                : \"Example: 'Corporate event for John Smith, john@company.com, March 15th at 6 PM, 50 guests, Grand Ballroom, need catering'\"\n              }\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recording Controls */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              {isCallMode ? <Phone className=\"h-5 w-5\" /> : <Mic className=\"h-5 w-5\" />}\n              {isCallMode ? \"Customer Call\" : \"Voice Booking\"}\n            </div>\n            {isRecording && (\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\"></div>\n                <Badge variant=\"destructive\">\n                  {isCallMode ? \"RECORDING CALL\" : \"LISTENING\"}\n                  {isCallMode && ` - ${formatTime(callDuration)}`}\n                </Badge>\n              </div>\n            )}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Recording Button */}\n          <div className=\"flex justify-center\">\n            {!isRecording ? (\n              <Button\n                onClick={startRecording}\n                size=\"lg\"\n                className={`${isCallMode \n                  ? 'bg-green-600 hover:bg-green-700' \n                  : 'bg-blue-600 hover:bg-blue-700'\n                } px-8`}\n              >\n                {isCallMode ? (\n                  <>\n                    <Phone className=\"w-5 h-5 mr-2\" />\n                    Start Call Recording\n                  </>\n                ) : (\n                  <>\n                    <Mic className=\"w-5 h-5 mr-2\" />\n                    Start Voice Booking\n                  </>\n                )}\n              </Button>\n            ) : (\n              <Button\n                onClick={stopRecording}\n                size=\"lg\"\n                variant=\"destructive\"\n                className=\"px-8\"\n              >\n                {isCallMode ? (\n                  <>\n                    <PhoneOff className=\"w-5 h-5 mr-2\" />\n                    End Call\n                  </>\n                ) : (\n                  <>\n                    <MicOff className=\"w-5 h-5 mr-2\" />\n                    Stop Recording\n                  </>\n                )}\n              </Button>\n            )}\n          </div>\n\n          {/* Live Transcript */}\n          {(isRecording || transcript) && (\n            <div>\n              <h4 className=\"font-medium mb-2 flex items-center gap-2\">\n                <MessageSquare className=\"w-4 h-4\" />\n                {isCallMode ? \"Customer Conversation\" : \"Voice Transcript\"}\n              </h4>\n              <Textarea\n                value={transcript}\n                onChange={(e) => setTranscript(e.target.value)}\n                placeholder={isCallMode \n                  ? \"Customer conversation will appear here as they speak...\"\n                  : \"Your voice input will appear here...\"\n                }\n                rows={6}\n                className=\"font-mono text-sm\"\n              />\n            </div>\n          )}\n\n          {/* Processing Status */}\n          {isProcessing && (\n            <div className=\"flex items-center gap-2 text-blue-600\">\n              <Clock className=\"w-4 h-4 animate-spin\" />\n              <span className=\"text-sm\">Processing voice input with AI...</span>\n            </div>\n          )}\n\n          {/* Extracted Data Preview */}\n          {extractedData && (\n            <Card className=\"border-green-200 bg-green-50\">\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                  Extracted Booking Details\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                  {extractedData.eventName && (\n                    <div className=\"flex items-center gap-2\">\n                      <Calendar className=\"w-4 h-4 text-gray-500\" />\n                      <span><strong>Event:</strong> {extractedData.eventName}</span>\n                    </div>\n                  )}\n                  {extractedData.customerName && (\n                    <div className=\"flex items-center gap-2\">\n                      <User className=\"w-4 h-4 text-gray-500\" />\n                      <span><strong>Customer:</strong> {extractedData.customerName}</span>\n                    </div>\n                  )}\n                  {extractedData.eventDate && (\n                    <div className=\"flex items-center gap-2\">\n                      <Clock className=\"w-4 h-4 text-gray-500\" />\n                      <span><strong>Date:</strong> {extractedData.eventDate}</span>\n                    </div>\n                  )}\n                  {extractedData.guestCount && (\n                    <div className=\"flex items-center gap-2\">\n                      <Users className=\"w-4 h-4 text-gray-500\" />\n                      <span><strong>Guests:</strong> {extractedData.guestCount}</span>\n                    </div>\n                  )}\n                  {extractedData.venue && (\n                    <div className=\"flex items-center gap-2\">\n                      <MapPin className=\"w-4 h-4 text-gray-500\" />\n                      <span><strong>Venue:</strong> {extractedData.venue}</span>\n                    </div>\n                  )}\n                  {extractedData.budget && (\n                    <div className=\"flex items-center gap-2\">\n                      <DollarSign className=\"w-4 h-4 text-gray-500\" />\n                      <span><strong>Budget:</strong> {extractedData.budget}</span>\n                    </div>\n                  )}\n                </div>\n                \n                {extractedData.services && extractedData.services.length > 0 && (\n                  <div className=\"mt-3\">\n                    <strong className=\"text-sm\">Services Mentioned:</strong>\n                    <div className=\"flex flex-wrap gap-1 mt-1\">\n                      {extractedData.services.map((service: string, index: number) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                          {service}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"mt-4 pt-3 border-t border-green-200\">\n                  <Button\n                    onClick={() => onBookingDataExtracted(extractedData)}\n                    className=\"w-full bg-green-600 hover:bg-green-700\"\n                  >\n                    {isCallMode ? \"Create Event from Call\" : \"Open Booking Form\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Action Buttons */}\n          {(transcript || extractedData) && (\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={clearSession}\n                variant=\"outline\"\n                className=\"flex-1\"\n              >\n                Clear Session\n              </Button>\n              {transcript && !isProcessing && !extractedData && (\n                <Button\n                  onClick={() => {\n                    setIsProcessing(true);\n                    parseVoiceData.mutate(transcript);\n                  }}\n                  className=\"flex-1\"\n                >\n                  Process Voice Input\n                </Button>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* AI Disclaimer */}\n      <Card className=\"border-amber-200 bg-amber-50\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-start gap-3\">\n            <AlertTriangle className=\"h-5 w-5 text-amber-600 mt-0.5\" />\n            <div>\n              <p className=\"font-medium text-amber-800\">Voice Recognition Notice</p>\n              <p className=\"text-sm text-amber-700\">\n                Voice recognition accuracy may vary. Always review and verify extracted details before creating bookings.\n                {isCallMode && \" Call recordings are processed locally and not stored permanently.\"}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":15306},"client/src/components/forms/edit-space-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Save, X, Grid3X3, Settings } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\n\n\ninterface EditSpaceModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  space: any;\n  venueId: string;\n  venueName?: string;\n}\n\nconst SETUP_STYLES = [\n  { value: 'round-tables', label: 'Round Tables', description: 'Perfect for dining and networking events' },\n  { value: 'u-shape', label: 'U-Shape', description: 'Great for presentations and discussions' },\n  { value: 'classroom', label: 'Classroom', description: 'Ideal for training and educational events' },\n  { value: 'theater', label: 'Theater', description: 'Best for presentations and performances' },\n  { value: 'cocktail', label: 'Cocktail', description: 'Standing reception style setup' },\n  { value: 'banquet', label: 'Banquet', description: 'Formal dining with long tables' },\n  { value: 'conference', label: 'Conference', description: 'Professional meeting setup' },\n  { value: 'custom', label: 'Custom', description: 'Design your own unique layout' },\n];\n\nexport function EditSpaceModal({ open, onOpenChange, space, venueId, venueName }: EditSpaceModalProps) {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"details\");\n  const [isSaving, setIsSaving] = useState(false);\n  \n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    capacity: '',\n    spaceType: 'hall',\n    features: '',\n    amenities: [] as string[],\n    availableSetupStyles: [] as string[],\n  });\n\n  const isCreating = !space?.id;\n\n  useEffect(() => {\n    if (open) {\n      if (space && space.id) {\n        // Editing existing space\n        console.log('Loading space data:', space);\n        setFormData({\n          name: space.name || '',\n          description: space.description || '',\n          capacity: space.capacity?.toString() || '',\n          spaceType: space.spaceType || 'hall',\n          features: space.features || '',\n          amenities: space.amenities || [],\n          availableSetupStyles: space.availableSetupStyles || [],\n        });\n      } else {\n        // Creating new space\n        setFormData({\n          name: '',\n          description: '',\n          capacity: '',\n          spaceType: 'hall',\n          features: '',\n          amenities: [],\n          availableSetupStyles: [],\n        });\n      }\n      setActiveTab(\"details\"); // Reset to details tab when modal opens\n    }\n  }, [space, open]);\n\n  const handleSave = async () => {\n    if (!formData.name || !formData.capacity) {\n      toast({\n        title: \"Required fields missing\",\n        description: \"Please provide space name and capacity\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsSaving(true);\n    try {\n      const spaceData = {\n        name: formData.name,\n        description: formData.description,\n        capacity: parseInt(formData.capacity),\n        spaceType: formData.spaceType,\n        features: formData.features,\n        amenities: formData.amenities,\n        availableSetupStyles: formData.availableSetupStyles,\n        ...(isCreating && { venueId })\n      };\n      \n      const response = isCreating \n        ? await apiRequest(\"POST\", \"/api/spaces\", spaceData)\n        : await apiRequest(\"PATCH\", `/api/spaces/${space.id}`, spaceData);\n\n      // Invalidate multiple relevant queries to ensure UI updates\n      await queryClient.invalidateQueries({ queryKey: [\"/api/venues\"] });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/venues-with-spaces\"] });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/spaces\"] });\n      if (venueId) {\n        await queryClient.invalidateQueries({ queryKey: [`/api/venues/${venueId}/spaces`] });\n      }\n      \n      toast({\n        title: isCreating ? \"Space created\" : \"Space updated\",\n        description: `${formData.name} has been ${isCreating ? 'created' : 'updated'} successfully`\n      });\n      \n      onOpenChange(false);\n    } catch (error) {\n      toast({\n        title: isCreating ? \"Creation failed\" : \"Update failed\",\n        description: `Could not ${isCreating ? 'create' : 'update'} space`,\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleSetupStyleToggle = (styleValue: string) => {\n    setFormData(prev => ({\n      ...prev,\n      availableSetupStyles: prev.availableSetupStyles.includes(styleValue)\n        ? prev.availableSetupStyles.filter(s => s !== styleValue)\n        : [...prev.availableSetupStyles, styleValue]\n    }));\n  };\n\n  const handleAmenityToggle = (amenity: string) => {\n    setFormData(prev => ({\n      ...prev,\n      amenities: prev.amenities.includes(amenity)\n        ? prev.amenities.filter(a => a !== amenity)\n        : [...prev.amenities, amenity]\n    }));\n  };\n\n\n\n  const commonAmenities = [\n    'WiFi', 'Projector', 'Sound System', 'Microphone', 'Whiteboard', 'Piano',\n    'Bar', 'Kitchen Access', 'Parking', 'Wheelchair Accessible', 'Air Conditioning',\n    'Natural Light', 'Stage', 'Dance Floor', 'Outdoor Space'\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Settings className=\"w-5 h-5\" />\n            {isCreating ? `Add Space to ${venueName}` : `Edit Space: ${space?.name}`}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"flex-1\">\n          <div className=\"border-b border-gray-200\">\n            <nav className=\"-mb-px flex space-x-8\">\n              <button\n                onClick={() => setActiveTab(\"details\")}\n                className={`whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === \"details\"\n                    ? \"border-blue-500 text-blue-600\"\n                    : \"border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\"\n                }`}\n              >\n                Details & Amenities\n              </button>\n              <button\n                onClick={() => setActiveTab(\"setup\")}\n                className={`whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === \"setup\"\n                    ? \"border-blue-500 text-blue-600\"\n                    : \"border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\"\n                }`}\n              >\n                Setup Styles\n              </button>\n\n            </nav>\n          </div>\n\n          {activeTab === \"details\" && (\n            <div className=\"space-y-6 max-h-[60vh] overflow-y-auto pt-6\">\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Space Name *</Label>\n                    <Input\n                      id=\"name\"\n                      value={formData.name}\n                      onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                      placeholder=\"Enter space name\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"description\">Description</Label>\n                    <Textarea\n                      id=\"description\"\n                      value={formData.description}\n                      onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                      placeholder=\"Describe this space...\"\n                      rows={3}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"capacity\">Capacity *</Label>\n                      <Input\n                        id=\"capacity\"\n                        type=\"number\"\n                        value={formData.capacity}\n                        onChange={(e) => setFormData(prev => ({ ...prev, capacity: e.target.value }))}\n                        placeholder=\"Max guests\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"spaceType\">Space Type</Label>\n                      <select\n                        id=\"spaceType\"\n                        value={formData.spaceType}\n                        onChange={(e) => setFormData(prev => ({ ...prev, spaceType: e.target.value }))}\n                        className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n                      >\n                        <option value=\"hall\">Hall</option>\n                        <option value=\"ballroom\">Ballroom</option>\n                        <option value=\"conference\">Conference Room</option>\n                        <option value=\"garden\">Garden/Outdoor</option>\n                        <option value=\"pavilion\">Pavilion</option>\n                        <option value=\"terrace\">Terrace</option>\n                        <option value=\"other\">Other</option>\n                      </select>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"features\">Features & Amenities</Label>\n                    <Input\n                      id=\"features\"\n                      value={formData.features}\n                      onChange={(e) => setFormData(prev => ({ ...prev, features: e.target.value }))}\n                      placeholder=\"Stage, Dance floor, Projector, etc.\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label>Amenities</Label>\n                    <div className=\"mt-2 grid grid-cols-2 gap-2 max-h-64 overflow-y-auto\">\n                      {commonAmenities.map(amenity => (\n                        <label key={amenity} className=\"flex items-center space-x-2 cursor-pointer\">\n                          <Checkbox\n                            checked={formData.amenities.includes(amenity)}\n                            onCheckedChange={() => handleAmenityToggle(amenity)}\n                          />\n                          <span className=\"text-sm\">{amenity}</span>\n                        </label>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label>Selected Amenities</Label>\n                    <div className=\"mt-2 flex flex-wrap gap-2\">\n                      {formData.amenities.map(amenity => (\n                        <Badge key={amenity} variant=\"secondary\" className=\"cursor-pointer\" onClick={() => handleAmenityToggle(amenity)}>\n                          {amenity}\n                          <X className=\"w-3 h-3 ml-1\" />\n                        </Badge>\n                      ))}\n                      {formData.amenities.length === 0 && (\n                        <span className=\"text-sm text-slate-500\">No amenities selected</span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === \"setup\" && (\n            <div className=\"space-y-6 max-h-[60vh] overflow-y-auto pt-6\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-4\">Available Setup Styles</h3>\n                <p className=\"text-sm text-slate-600 mb-6\">\n                  Select which setup styles are available for this space. This will be shown when creating events.\n                </p>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {SETUP_STYLES.map(style => (\n                    <label key={style.value} className=\"flex items-start space-x-3 cursor-pointer p-4 border rounded-lg hover:bg-slate-50\">\n                      <Checkbox\n                        checked={formData.availableSetupStyles.includes(style.value)}\n                        onCheckedChange={() => handleSetupStyleToggle(style.value)}\n                        className=\"mt-1\"\n                      />\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium\">{style.label}</div>\n                        <div className=\"text-sm text-slate-600 mt-1\">{style.description}</div>\n                      </div>\n                    </label>\n                  ))}\n                </div>\n\n                <Separator className=\"my-6\" />\n\n                <div>\n                  <h4 className=\"font-medium mb-3\">Selected Setup Styles</h4>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {formData.availableSetupStyles.map(styleValue => {\n                      const style = SETUP_STYLES.find(s => s.value === styleValue);\n                      return style ? (\n                        <Badge key={styleValue} variant=\"outline\" className=\"cursor-pointer\" onClick={() => handleSetupStyleToggle(styleValue)}>\n                          <Grid3X3 className=\"w-3 h-3 mr-1\" />\n                          {style.label}\n                          <X className=\"w-3 h-3 ml-1\" />\n                        </Badge>\n                      ) : null;\n                    })}\n                    {formData.availableSetupStyles.length === 0 && (\n                      <span className=\"text-sm text-slate-500\">No setup styles selected</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n\n        </div>\n\n        <div className=\"flex justify-end gap-3 pt-4 border-t\">\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n            Cancel\n          </Button>\n          <Button onClick={handleSave} disabled={isSaving}>\n            <Save className=\"w-4 h-4 mr-2\" />\n            {isSaving \n              ? (isCreating ? \"Creating...\" : \"Saving...\") \n              : (isCreating ? \"Create Space\" : \"Save Changes\")\n            }\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":14845},"client/src/components/venues/floor-plan-designer.tsx":{"content":"import { useState, useRef, useCallback, useEffect } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { RotateCcw, Square, Circle, Save, Plus, Trash2, Move, RotateCw } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface FloorPlanElement {\n  id: string;\n  type: 'table' | 'stage' | 'bar' | 'door' | 'wall' | 'chair';\n  shape: 'rectangle' | 'circle' | 'square';\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  rotation: number;\n  seats?: number; // For tables\n  label?: string;\n  color: string;\n}\n\ninterface FloorPlanDesignerProps {\n  spaceId: string;\n  initialFloorPlan?: {\n    elements: FloorPlanElement[];\n    dimensions: { width: number; height: number };\n  };\n  onSave: (floorPlan: any) => void;\n}\n\nconst ELEMENT_TYPES = [\n  { type: 'table', label: 'Round Table', shape: 'circle', defaultSize: { width: 60, height: 60 }, color: '#8B4513', icon: Circle },\n  { type: 'table', label: 'Rectangle Table', shape: 'rectangle', defaultSize: { width: 80, height: 40 }, color: '#8B4513', icon: Square },\n  { type: 'stage', label: 'Stage', shape: 'rectangle', defaultSize: { width: 120, height: 80 }, color: '#4A5568', icon: Square },\n  { type: 'bar', label: 'Bar', shape: 'rectangle', defaultSize: { width: 100, height: 30 }, color: '#2D3748', icon: Square },\n  { type: 'door', label: 'Door', shape: 'rectangle', defaultSize: { width: 40, height: 10 }, color: '#F7FAFC', icon: Square },\n  { type: 'wall', label: 'Wall', shape: 'rectangle', defaultSize: { width: 10, height: 100 }, color: '#1A202C', icon: Square },\n];\n\nexport function FloorPlanDesigner({ spaceId, initialFloorPlan, onSave }: FloorPlanDesignerProps) {\n  const canvasRef = useRef<HTMLDivElement>(null);\n  const [elements, setElements] = useState<FloorPlanElement[]>(initialFloorPlan?.elements || []);\n  const [selectedElement, setSelectedElement] = useState<string | null>(null);\n  const [mode, setMode] = useState<'select' | 'add'>('select');\n  const [selectedType, setSelectedType] = useState(ELEMENT_TYPES[0]);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n  const [canvasSize] = useState({ width: 800, height: 600 });\n  const [zoom, setZoom] = useState(100);\n\n  const addElement = useCallback((x: number, y: number) => {\n    if (mode !== 'add') return;\n\n    const newElement: FloorPlanElement = {\n      id: `element-${Date.now()}`,\n      type: selectedType.type as any,\n      shape: selectedType.shape as any,\n      x: x - selectedType.defaultSize.width / 2,\n      y: y - selectedType.defaultSize.height / 2,\n      width: selectedType.defaultSize.width,\n      height: selectedType.defaultSize.height,\n      rotation: 0,\n      seats: selectedType.type === 'table' ? (selectedType.shape === 'circle' ? 6 : 8) : undefined,\n      label: `${selectedType.label} ${elements.length + 1}`,\n      color: selectedType.color,\n    };\n\n    setElements(prev => [...prev, newElement]);\n    setSelectedElement(newElement.id);\n    setMode('select');\n  }, [mode, selectedType, elements.length]);\n\n  const updateElement = useCallback((id: string, updates: Partial<FloorPlanElement>) => {\n    setElements(prev => prev.map(el => el.id === id ? { ...el, ...updates } : el));\n  }, []);\n\n  const deleteElement = useCallback((id: string) => {\n    setElements(prev => prev.filter(el => el.id !== id));\n    setSelectedElement(null);\n  }, []);\n\n  const handleCanvasClick = useCallback((e: React.MouseEvent) => {\n    if (!canvasRef.current) return;\n\n    const rect = canvasRef.current.getBoundingClientRect();\n    const x = (e.clientX - rect.left) * (canvasSize.width / rect.width);\n    const y = (e.clientY - rect.top) * (canvasSize.height / rect.height);\n\n    if (mode === 'add') {\n      addElement(x, y);\n    } else {\n      setSelectedElement(null);\n    }\n  }, [mode, addElement, canvasSize]);\n\n  const handleElementClick = useCallback((e: React.MouseEvent, elementId: string) => {\n    e.stopPropagation();\n    setSelectedElement(elementId);\n  }, []);\n\n  const handleElementMouseDown = useCallback((e: React.MouseEvent, elementId: string) => {\n    if (mode !== 'select') return;\n    \n    e.stopPropagation();\n    setIsDragging(true);\n    setSelectedElement(elementId);\n    setDragStart({ x: e.clientX, y: e.clientY });\n  }, [mode]);\n\n  const handleMouseMove = useCallback((e: React.MouseEvent) => {\n    if (!isDragging || !selectedElement || !canvasRef.current) return;\n\n    const rect = canvasRef.current.getBoundingClientRect();\n    const scale = canvasSize.width / rect.width;\n    const deltaX = (e.clientX - dragStart.x) * scale;\n    const deltaY = (e.clientY - dragStart.y) * scale;\n\n    updateElement(selectedElement, {\n      x: Math.max(0, Math.min(canvasSize.width - 100, elements.find(el => el.id === selectedElement)!.x + deltaX)),\n      y: Math.max(0, Math.min(canvasSize.height - 100, elements.find(el => el.id === selectedElement)!.y + deltaY))\n    });\n\n    setDragStart({ x: e.clientX, y: e.clientY });\n  }, [isDragging, selectedElement, dragStart, updateElement, elements, canvasSize]);\n\n  const handleMouseUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  const selectedElementData = elements.find(el => el.id === selectedElement);\n\n  const handleSave = () => {\n    const floorPlan = {\n      elements,\n      dimensions: canvasSize,\n      lastUpdated: new Date().toISOString()\n    };\n    onSave(floorPlan);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Toolbar */}\n      <Card className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant={mode === 'select' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setMode('select')}\n              >\n                <Move className=\"w-4 h-4 mr-1\" />\n                Select\n              </Button>\n              <Button\n                variant={mode === 'add' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setMode('add')}\n              >\n                <Plus className=\"w-4 h-4 mr-1\" />\n                Add\n              </Button>\n            </div>\n\n            {mode === 'add' && (\n              <div className=\"flex items-center gap-2\">\n                <Label className=\"text-sm\">Element:</Label>\n                <Select\n                  value={selectedType.label}\n                  onValueChange={(value) => {\n                    const type = ELEMENT_TYPES.find(t => t.label === value)!;\n                    setSelectedType(type);\n                  }}\n                >\n                  <SelectTrigger className=\"w-40\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {ELEMENT_TYPES.map(type => (\n                      <SelectItem key={type.label} value={type.label}>\n                        {type.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            <Separator orientation=\"vertical\" className=\"h-6\" />\n            \n            <div className=\"flex items-center gap-2\">\n              <Label className=\"text-sm\">Zoom:</Label>\n              <input\n                type=\"range\"\n                value={zoom}\n                onChange={(e) => setZoom(parseInt(e.target.value))}\n                min={50}\n                max={200}\n                step={10}\n                className=\"w-20\"\n              />\n              <span className=\"text-sm text-slate-600 w-12\">{zoom}%</span>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={() => setElements([])}>\n              <RotateCcw className=\"w-4 h-4 mr-1\" />\n              Clear\n            </Button>\n            <Button size=\"sm\" onClick={handleSave}>\n              <Save className=\"w-4 h-4 mr-1\" />\n              Save Layout\n            </Button>\n          </div>\n        </div>\n      </Card>\n\n      <div className=\"flex gap-6\">\n        {/* Canvas */}\n        <Card className=\"flex-1 p-4\">\n          <div className=\"relative overflow-hidden rounded-lg border bg-slate-50\" style={{ height: '500px' }}>\n            <div\n              ref={canvasRef}\n              className=\"relative bg-white border-2 border-dashed border-slate-300 cursor-crosshair mx-auto mt-8\"\n              style={{\n                width: `${canvasSize.width * (zoom / 100)}px`,\n                height: `${canvasSize.height * (zoom / 100)}px`,\n                transform: `scale(${zoom / 100})`,\n                transformOrigin: 'top left'\n              }}\n              onClick={handleCanvasClick}\n              onMouseMove={handleMouseMove}\n              onMouseUp={handleMouseUp}\n            >\n              {/* Grid */}\n              <svg className=\"absolute inset-0 pointer-events-none opacity-20\">\n                <defs>\n                  <pattern id=\"grid\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n                    <path d=\"M 20 0 L 0 0 0 20\" fill=\"none\" stroke=\"#E2E8F0\" strokeWidth=\"1\"/>\n                  </pattern>\n                </defs>\n                <rect width=\"100%\" height=\"100%\" fill=\"url(#grid)\" />\n              </svg>\n\n              {/* Elements */}\n              {elements.map(element => (\n                <div\n                  key={element.id}\n                  className={cn(\n                    \"absolute border-2 cursor-move flex items-center justify-center text-xs font-medium text-white select-none\",\n                    selectedElement === element.id ? \"border-blue-500 shadow-lg\" : \"border-slate-400\"\n                  )}\n                  style={{\n                    left: element.x,\n                    top: element.y,\n                    width: element.width,\n                    height: element.height,\n                    backgroundColor: element.color,\n                    borderRadius: element.shape === 'circle' ? '50%' : '4px',\n                    transform: `rotate(${element.rotation}deg)`,\n                  }}\n                  onClick={(e) => handleElementClick(e, element.id)}\n                  onMouseDown={(e) => handleElementMouseDown(e, element.id)}\n                >\n                  <span className=\"text-center leading-tight\">\n                    {element.type === 'table' && element.seats && (\n                      <div>{element.seats} seats</div>\n                    )}\n                    {element.label && element.type !== 'table' && (\n                      <div>{element.label}</div>\n                    )}\n                  </span>\n                </div>\n              ))}\n\n              {/* Selection Handles */}\n              {selectedElementData && (\n                <>\n                  <div\n                    className=\"absolute w-2 h-2 bg-blue-500 border border-white rounded-full cursor-nw-resize\"\n                    style={{\n                      left: selectedElementData.x - 4,\n                      top: selectedElementData.y - 4,\n                    }}\n                  />\n                  <div\n                    className=\"absolute w-2 h-2 bg-blue-500 border border-white rounded-full cursor-ne-resize\"\n                    style={{\n                      left: selectedElementData.x + selectedElementData.width - 4,\n                      top: selectedElementData.y - 4,\n                    }}\n                  />\n                  <div\n                    className=\"absolute w-2 h-2 bg-blue-500 border border-white rounded-full cursor-sw-resize\"\n                    style={{\n                      left: selectedElementData.x - 4,\n                      top: selectedElementData.y + selectedElementData.height - 4,\n                    }}\n                  />\n                  <div\n                    className=\"absolute w-2 h-2 bg-blue-500 border border-white rounded-full cursor-se-resize\"\n                    style={{\n                      left: selectedElementData.x + selectedElementData.width - 4,\n                      top: selectedElementData.y + selectedElementData.height - 4,\n                    }}\n                  />\n                </>\n              )}\n            </div>\n\n            {/* Instructions */}\n            {elements.length === 0 && (\n              <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n                <div className=\"text-center text-slate-500\">\n                  <p className=\"text-lg font-medium\">Design Your Floor Plan</p>\n                  <p className=\"text-sm mt-2\">Click \"Add\" and select elements to place them on the canvas</p>\n                  <p className=\"text-sm\">Drag elements to move them around</p>\n                </div>\n              </div>\n            )}\n          </div>\n        </Card>\n\n        {/* Properties Panel */}\n        {selectedElementData && (\n          <Card className=\"w-72 p-4\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"font-medium\">Element Properties</h3>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => deleteElement(selectedElementData.id)}\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </Button>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div>\n                  <Label className=\"text-sm\">Label</Label>\n                  <Input\n                    value={selectedElementData.label || ''}\n                    onChange={(e) => updateElement(selectedElementData.id, { label: e.target.value })}\n                    className=\"mt-1\"\n                    placeholder=\"Element label\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <div>\n                    <Label className=\"text-sm\">Width</Label>\n                    <Input\n                      type=\"number\"\n                      value={selectedElementData.width}\n                      onChange={(e) => updateElement(selectedElementData.id, { width: parseInt(e.target.value) || 50 })}\n                      className=\"mt-1\"\n                      min=\"10\"\n                      max=\"200\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-sm\">Height</Label>\n                    <Input\n                      type=\"number\"\n                      value={selectedElementData.height}\n                      onChange={(e) => updateElement(selectedElementData.id, { height: parseInt(e.target.value) || 50 })}\n                      className=\"mt-1\"\n                      min=\"10\"\n                      max=\"200\"\n                    />\n                  </div>\n                </div>\n\n                {selectedElementData.type === 'table' && (\n                  <div>\n                    <Label className=\"text-sm\">Number of Seats</Label>\n                    <Input\n                      type=\"number\"\n                      value={selectedElementData.seats || 6}\n                      onChange={(e) => updateElement(selectedElementData.id, { seats: parseInt(e.target.value) || 6 })}\n                      className=\"mt-1\"\n                      min=\"2\"\n                      max=\"12\"\n                    />\n                  </div>\n                )}\n\n                <div>\n                  <Label className=\"text-sm\">Rotation</Label>\n                  <div className=\"flex items-center gap-2 mt-1\">\n                    <input\n                      type=\"range\"\n                      value={selectedElementData.rotation}\n                      onChange={(e) => updateElement(selectedElementData.id, { rotation: parseInt(e.target.value) })}\n                      min={0}\n                      max={360}\n                      step={15}\n                      className=\"flex-1\"\n                    />\n                    <span className=\"text-sm text-slate-600 w-8\">{selectedElementData.rotation}°</span>\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm\">Color</Label>\n                  <div className=\"flex gap-2 mt-1\">\n                    {['#8B4513', '#4A5568', '#2D3748', '#1A202C', '#E53E3E', '#3182CE', '#38A169', '#D69E2E'].map(color => (\n                      <button\n                        key={color}\n                        className={cn(\n                          \"w-6 h-6 rounded border-2\",\n                          selectedElementData.color === color ? \"border-slate-900\" : \"border-slate-300\"\n                        )}\n                        style={{ backgroundColor: color }}\n                        onClick={() => updateElement(selectedElementData.id, { color })}\n                      />\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        )}\n      </div>\n\n      {/* Stats */}\n      <Card className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-6\">\n            <div className=\"text-sm\">\n              <span className=\"font-medium\">Elements:</span> {elements.length}\n            </div>\n            <div className=\"text-sm\">\n              <span className=\"font-medium\">Tables:</span> {elements.filter(el => el.type === 'table').length}\n            </div>\n            <div className=\"text-sm\">\n              <span className=\"font-medium\">Total Seats:</span> {elements.filter(el => el.type === 'table').reduce((sum, el) => sum + (el.seats || 0), 0)}\n            </div>\n          </div>\n          <Badge variant=\"outline\">\n            Canvas: {canvasSize.width} × {canvasSize.height}\n          </Badge>\n        </div>\n      </Card>\n    </div>\n  );\n}","size_bytes":18250},"client/src/components/forms/import-menu-modal.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Upload, Download, FileText, Package, Utensils, \n  AlertTriangle, CheckCircle, X, Eye, FileSpreadsheet, ArrowRight \n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ImportMenuModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  type: \"packages\" | \"services\";\n}\n\ninterface ImportItem {\n  name: string;\n  description: string;\n  category: string;\n  price: number;\n  pricingModel: string;\n  includedServices?: string[];\n  row: number;\n  status?: \"valid\" | \"error\" | \"warning\";\n  errors?: string[];\n  warnings?: string[];\n}\n\ninterface ColumnMapping {\n  [csvColumn: string]: string; // Maps CSV column to our required field\n}\n\ninterface ParsedCSV {\n  headers: string[];\n  rows: any[][];\n}\n\nconst SAMPLE_CSV_PACKAGES = `name,description,category,price,pricingModel,includedServices\nWedding Premium Package,\"Full wedding service with catering and decor\",wedding,5000,fixed,\"Catering Service,Floral Arrangements,Photography\"\nCorporate Meeting Package,\"Professional meeting setup with AV equipment\",corporate,1500,fixed,\"AV Equipment,Catering Service\"\nBirthday Party Package,\"Fun birthday party setup with entertainment\",social,800,per_person,\"Entertainment,Decorations\"`;\n\nconst SAMPLE_CSV_SERVICES = `name,description,category,price,pricingModel\nCatering Service,\"Full service catering with appetizers and main course\",catering,50,per_person,per_person\nFloral Arrangements,\"Professional flower arrangements and centerpieces\",decor,300,fixed,fixed\nPhotography,\"Professional event photography with edited photos\",photography,800,fixed,fixed\nAV Equipment,\"Sound system and projector rental\",equipment,200,fixed,fixed\nEntertainment,\"Live DJ and music entertainment\",entertainment,400,fixed,fixed\nDecorations,\"Custom decorations and table settings\",decor,150,fixed,fixed`;\n\n// Required fields for each import type\nconst REQUIRED_FIELDS = {\n  packages: [\n    { key: \"name\", label: \"Package Name\", required: true, description: \"The name of the package\" },\n    { key: \"description\", label: \"Description\", required: false, description: \"Package description\" },\n    { key: \"category\", label: \"Category\", required: true, description: \"Package category\" },\n    { key: \"price\", label: \"Price\", required: true, description: \"Package price (number)\" },\n    { key: \"pricingModel\", label: \"Pricing Model\", required: true, description: \"fixed or per_person\" },\n    { key: \"includedServices\", label: \"Included Services\", required: false, description: \"Comma-separated service names\" }\n  ],\n  services: [\n    { key: \"name\", label: \"Service Name\", required: true, description: \"The name of the service\" },\n    { key: \"description\", label: \"Description\", required: false, description: \"Service description\" },\n    { key: \"category\", label: \"Category\", required: true, description: \"Service category\" },\n    { key: \"price\", label: \"Price\", required: true, description: \"Service price (number)\" },\n    { key: \"pricingModel\", label: \"Pricing Model\", required: true, description: \"fixed, per_person, or per_hour\" }\n  ]\n};\n\nexport function ImportMenuModal({ open, onOpenChange, type }: ImportMenuModalProps) {\n  const [activeTab, setActiveTab] = useState(\"upload\");\n  const [file, setFile] = useState<File | null>(null);\n  const [parsedData, setParsedData] = useState<ImportItem[]>([]);\n  const [previewData, setPreviewData] = useState<ImportItem[]>([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [rawCSVData, setRawCSVData] = useState<ParsedCSV | null>(null);\n  const [columnMapping, setColumnMapping] = useState<ColumnMapping>({});\n  const [showColumnMapping, setShowColumnMapping] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const importMutation = useMutation({\n    mutationFn: async (data: ImportItem[]) => {\n      const endpoint = type === \"packages\" ? \"/api/packages/import\" : \"/api/services/import\";\n      const response = await apiRequest(\"POST\", endpoint, { items: data });\n      return response.json();\n    },\n    onSuccess: (result) => {\n      const hasWarnings = result.warnings && result.warnings > 0;\n      const hasErrors = result.errors && result.errors > 0;\n      \n      toast({\n        title: hasErrors ? \"Import Completed with Issues\" : \"Import Successful\",\n        description: `Successfully imported ${result.imported} ${type}. ${result.errors || 0} errors, ${result.warnings || 0} warnings.`,\n        variant: hasErrors ? \"destructive\" : hasWarnings ? \"default\" : \"default\"\n      });\n      \n      // Show detailed warnings if any\n      if (hasWarnings && result.warningDetails) {\n        setTimeout(() => {\n          toast({\n            title: \"Import Warnings\",\n            description: result.warningDetails.slice(0, 3).join('\\n') + (result.warningDetails.length > 3 ? '\\n...' : ''),\n            variant: \"default\"\n          });\n        }, 500);\n      }\n      \n      queryClient.invalidateQueries({ queryKey: [`/api/${type}`] });\n      onOpenChange(false);\n      resetForm();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Import Failed\",\n        description: error.message || \"Failed to import items. Please check your data and try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const resetForm = () => {\n    setFile(null);\n    setParsedData([]);\n    setPreviewData([]);\n    setUploadProgress(0);\n    setIsProcessing(false);\n    setActiveTab(\"upload\");\n    setRawCSVData(null);\n    setColumnMapping({});\n    setShowColumnMapping(false);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\";\n    }\n  };\n\n  // Intelligent column mapping based on similarity\n  const suggestColumnMapping = (csvHeaders: string[], requiredFields: any[]) => {\n    const mapping: ColumnMapping = {};\n    \n    csvHeaders.forEach(csvHeader => {\n      const normalizedCSVHeader = csvHeader.toLowerCase().trim();\n      \n      // Find the best match among required fields\n      let bestMatch = '';\n      let bestScore = 0;\n      \n      requiredFields.forEach(field => {\n        const normalizedFieldKey = field.key.toLowerCase();\n        const normalizedFieldLabel = field.label.toLowerCase();\n        \n        // Exact match\n        if (normalizedCSVHeader === normalizedFieldKey || normalizedCSVHeader === normalizedFieldLabel) {\n          bestMatch = field.key;\n          bestScore = 1;\n          return;\n        }\n        \n        // Partial match or common variations\n        const variations = {\n          name: ['title', 'item_name', 'product_name', 'service_name', 'package_name'],\n          description: ['desc', 'details', 'info', 'summary'],\n          category: ['cat', 'type', 'group', 'classification'],\n          price: ['cost', 'amount', 'rate', 'fee'],\n          pricingModel: ['pricing_model', 'price_type', 'billing_type', 'rate_type', 'model']\n        };\n        \n        if (variations[field.key as keyof typeof variations]) {\n          const fieldVariations = variations[field.key as keyof typeof variations];\n          if (fieldVariations.some(variation => normalizedCSVHeader.includes(variation))) {\n            if (bestScore < 0.8) {\n              bestMatch = field.key;\n              bestScore = 0.8;\n            }\n          }\n        }\n        \n        // Fuzzy matching - contains check\n        if (normalizedCSVHeader.includes(normalizedFieldKey) || normalizedFieldKey.includes(normalizedCSVHeader)) {\n          if (bestScore < 0.6) {\n            bestMatch = field.key;\n            bestScore = 0.6;\n          }\n        }\n      });\n      \n      if (bestMatch && bestScore > 0.5) {\n        mapping[csvHeader] = bestMatch;\n      }\n    });\n    \n    return mapping;\n  };\n\n  // Parse CSV with intelligent column detection\n  const parseCSVWithMapping = (csvData: ParsedCSV, mapping: ColumnMapping) => {\n    const requiredFields = REQUIRED_FIELDS[type];\n    const items: ImportItem[] = [];\n    \n    csvData.rows.forEach((row, index) => {\n      const item: any = { row: index + 2 }; // +2 because of header row and 1-based indexing\n      \n      // Map CSV columns to required fields\n      csvData.headers.forEach((header, headerIndex) => {\n        const mappedField = mapping[header];\n        if (mappedField && row[headerIndex]) {\n          let value = row[headerIndex].toString().trim();\n          \n          // Type conversion based on field\n          if (mappedField === 'price') {\n            const numValue = parseFloat(value.replace(/[$,]/g, ''));\n            item[mappedField] = isNaN(numValue) ? 0 : numValue;\n          } else if (mappedField === 'includedServices') {\n            item[mappedField] = value.split(',').map((s: string) => s.trim()).filter((s: string) => s);\n          } else {\n            item[mappedField] = value;\n          }\n        }\n      });\n      \n      // Set defaults for missing fields\n      const defaults = {\n        name: '',\n        description: '',\n        category: '',\n        price: 0,\n        pricingModel: 'fixed',\n        includedServices: []\n      };\n      \n      Object.keys(defaults).forEach(key => {\n        if (!(key in item)) {\n          item[key] = defaults[key as keyof typeof defaults];\n        }\n      });\n      \n      // Validate required fields\n      const errors: string[] = [];\n      const warnings: string[] = [];\n      \n      requiredFields.forEach(field => {\n        if (field.required && (!item[field.key] || item[field.key] === '')) {\n          errors.push(`${field.label} is required`);\n        }\n      });\n      \n      if (item.pricingModel && !['fixed', 'per_person', 'per_hour'].includes(item.pricingModel)) {\n        warnings.push('Pricing model should be: fixed, per_person, or per_hour');\n      }\n      \n      item.status = errors.length > 0 ? 'error' : warnings.length > 0 ? 'warning' : 'valid';\n      item.errors = errors;\n      item.warnings = warnings;\n      \n      items.push(item as ImportItem);\n    });\n    \n    return items;\n  };\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = event.target.files?.[0];\n    if (!selectedFile) return;\n\n    // Validate file type\n    const validTypes = ['text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];\n    const fileExtension = selectedFile.name.toLowerCase().split('.').pop();\n    \n    if (!validTypes.includes(selectedFile.type) && !['csv', 'xls', 'xlsx'].includes(fileExtension || '')) {\n      toast({\n        title: \"Invalid File Type\",\n        description: \"Please select a CSV or Excel file (.csv, .xls, .xlsx)\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setFile(selectedFile);\n    parseFile(selectedFile);\n  };\n\n  const parseFile = async (file: File) => {\n    setIsProcessing(true);\n    setUploadProgress(10);\n\n    try {\n      const text = await file.text();\n      setUploadProgress(30);\n      \n      const lines = text.split('\\n').filter(line => line.trim());\n      if (lines.length < 2) {\n        throw new Error(\"File must contain at least a header row and one data row\");\n      }\n\n      const headers = lines[0].split(',').map(h => h.trim().replace(/\"/g, ''));\n      const rows = lines.slice(1).map(line => \n        line.split(',').map(v => v.trim().replace(/\"/g, ''))\n      );\n\n      const csvData: ParsedCSV = { headers, rows };\n      setRawCSVData(csvData);\n      setUploadProgress(50);\n\n      // Try intelligent column mapping\n      const requiredFields = REQUIRED_FIELDS[type];\n      const suggestedMapping = suggestColumnMapping(headers, requiredFields);\n      \n      // Check if we need manual column mapping\n      const requiredFieldKeys = requiredFields.filter(f => f.required).map(f => f.key);\n      const mappedRequiredFields = Object.values(suggestedMapping).filter(field => \n        requiredFieldKeys.includes(field)\n      );\n      \n      if (mappedRequiredFields.length < requiredFieldKeys.length) {\n        // Need manual column mapping\n        setColumnMapping(suggestedMapping);\n        setShowColumnMapping(true);\n        setUploadProgress(100);\n        setIsProcessing(false);\n        setActiveTab(\"mapping\");\n        return;\n      }\n\n      // Auto-mapping successful, proceed with parsing\n      setColumnMapping(suggestedMapping);\n      processWithMapping(csvData, suggestedMapping);\n\n    } catch (error: any) {\n      toast({\n        title: \"File Processing Error\",\n        description: error.message || \"Failed to process the file. Please check the format and try again.\",\n        variant: \"destructive\"\n      });\n    }\n    setIsProcessing(false);\n  };\n\n  const processWithMapping = (csvData: ParsedCSV, mapping: ColumnMapping) => {\n    setUploadProgress(70);\n    const items = parseCSVWithMapping(csvData, mapping);\n    setParsedData(items);\n    setPreviewData(items.slice(0, 10));\n    setUploadProgress(100);\n    setIsProcessing(false);\n    setActiveTab(\"preview\");\n  };\n\n  const handleColumnMappingUpdate = (csvColumn: string, targetField: string) => {\n    setColumnMapping(prev => {\n      const updated = { ...prev };\n      if (targetField === \"__none__\") {\n        delete updated[csvColumn];\n      } else {\n        updated[csvColumn] = targetField;\n      }\n      return updated;\n    });\n  };\n\n  const handleMappingComplete = () => {\n    if (!rawCSVData) return;\n    \n    // Validate that all required fields are mapped\n    const requiredFields = REQUIRED_FIELDS[type].filter(f => f.required);\n    const mappedFields = Object.values(columnMapping);\n    const missingRequiredFields = requiredFields.filter(field => \n      !mappedFields.includes(field.key)\n    );\n\n    if (missingRequiredFields.length > 0) {\n      toast({\n        title: \"Incomplete Mapping\",\n        description: `Please map the following required fields: ${missingRequiredFields.map(f => f.label).join(', ')}`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    processWithMapping(rawCSVData, columnMapping);\n  };\n\n  const downloadTemplate = () => {\n    const csvContent = type === \"packages\" ? SAMPLE_CSV_PACKAGES : SAMPLE_CSV_SERVICES;\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `${type}_template.csv`;\n    link.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"valid\": return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      case \"warning\": return <AlertTriangle className=\"w-4 h-4 text-yellow-600\" />;\n      case \"error\": return <X className=\"w-4 h-4 text-red-600\" />;\n      default: return null;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"valid\": return \"bg-green-50 border-green-200\";\n      case \"warning\": return \"bg-yellow-50 border-yellow-200\";\n      case \"error\": return \"bg-red-50 border-red-200\";\n      default: return \"\";\n    }\n  };\n\n  const validItems = parsedData.filter(item => item.status === \"valid\" || item.status === \"warning\");\n  const errorItems = parsedData.filter(item => item.status === \"error\");\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            {type === \"packages\" ? <Package className=\"w-5 h-5\" /> : <Utensils className=\"w-5 h-5\" />}\n            Import {type === \"packages\" ? \"Packages\" : \"Services\"} Menu\n          </DialogTitle>\n        </DialogHeader>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"upload\">Upload File</TabsTrigger>\n            <TabsTrigger value=\"mapping\" disabled={!showColumnMapping}>Column Mapping</TabsTrigger>\n            <TabsTrigger value=\"preview\" disabled={parsedData.length === 0}>Preview Data</TabsTrigger>\n            <TabsTrigger value=\"template\">Download Template</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"upload\" className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <Alert>\n                <FileText className=\"w-4 h-4\" />\n                <AlertDescription>\n                  Upload a CSV or Excel file containing your {type} menu. Make sure your file includes columns for: \n                  name, description, category, price, and pricingModel.\n                  {type === \"packages\" && \" For packages, you can also include includedServices separated by semicolons.\"}\n                </AlertDescription>\n              </Alert>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Select File</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div \n                    className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-gray-400 transition-colors\"\n                    onClick={() => fileInputRef.current?.click()}\n                  >\n                    <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-600 mb-2\">\n                      Click to select a CSV or Excel file, or drag and drop\n                    </p>\n                    <p className=\"text-sm text-gray-500\">\n                      Supported formats: .csv, .xls, .xlsx\n                    </p>\n                    <input\n                      ref={fileInputRef}\n                      type=\"file\"\n                      accept=\".csv,.xls,.xlsx\"\n                      onChange={handleFileSelect}\n                      className=\"hidden\"\n                    />\n                  </div>\n\n                  {file && (\n                    <div className=\"flex items-center gap-3 p-3 bg-gray-50 rounded\">\n                      <FileSpreadsheet className=\"w-5 h-5 text-blue-600\" />\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium\">{file.name}</p>\n                        <p className=\"text-sm text-gray-500\">{(file.size / 1024).toFixed(1)} KB</p>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setFile(null);\n                          setParsedData([]);\n                          if (fileInputRef.current) fileInputRef.current.value = \"\";\n                        }}\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  )}\n\n                  {isProcessing && (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Processing file...</span>\n                        <span>{uploadProgress}%</span>\n                      </div>\n                      <Progress value={uploadProgress} />\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"mapping\" className=\"space-y-6\">\n            {rawCSVData && (\n              <div className=\"space-y-4\">\n                <Alert>\n                  <AlertTriangle className=\"w-4 h-4\" />\n                  <AlertDescription>\n                    Map your CSV columns to the required fields. Auto-suggestions are provided based on column names.\n                  </AlertDescription>\n                </Alert>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Column Mapping</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid gap-4\">\n                      {rawCSVData.headers.map((csvColumn, index) => (\n                        <div key={index} className=\"flex items-center gap-4 p-4 border rounded-lg\">\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium text-sm\">{csvColumn}</div>\n                            <div className=\"text-xs text-gray-500\">\n                              Sample: {rawCSVData.rows[0]?.[index] || 'N/A'}\n                            </div>\n                          </div>\n                          <ArrowRight className=\"w-4 h-4 text-gray-400\" />\n                          <div className=\"flex-1\">\n                            <Select\n                              value={columnMapping[csvColumn] || \"__none__\"}\n                              onValueChange={(value) => handleColumnMappingUpdate(csvColumn, value)}\n                            >\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select target field\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"__none__\">Don't import</SelectItem>\n                                {REQUIRED_FIELDS[type].map(field => (\n                                  <SelectItem key={field.key} value={field.key}>\n                                    {field.label} {field.required && <span className=\"text-red-500\">*</span>}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            {REQUIRED_FIELDS[type].find(f => f.key === columnMapping[csvColumn])?.description && (\n                              <div className=\"text-xs text-gray-500 mt-1\">\n                                {REQUIRED_FIELDS[type].find(f => f.key === columnMapping[csvColumn])?.description}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n\n                    <div className=\"flex items-center justify-between pt-4 border-t\">\n                      <div className=\"text-sm text-gray-600\">\n                        Required fields: {REQUIRED_FIELDS[type].filter(f => f.required).map(f => f.label).join(', ')}\n                      </div>\n                      <Button onClick={handleMappingComplete}>\n                        Continue to Preview\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"preview\" className=\"space-y-6\">\n            {parsedData.length > 0 && (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <Card>\n                    <CardContent className=\"p-4 text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">{validItems.length}</div>\n                      <div className=\"text-sm text-gray-600\">Valid Items</div>\n                    </CardContent>\n                  </Card>\n                  <Card>\n                    <CardContent className=\"p-4 text-center\">\n                      <div className=\"text-2xl font-bold text-red-600\">{errorItems.length}</div>\n                      <div className=\"text-sm text-gray-600\">Items with Errors</div>\n                    </CardContent>\n                  </Card>\n                  <Card>\n                    <CardContent className=\"p-4 text-center\">\n                      <div className=\"text-2xl font-bold text-blue-600\">{parsedData.length}</div>\n                      <div className=\"text-sm text-gray-600\">Total Items</div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Eye className=\"w-5 h-5\" />\n                      Data Preview\n                      {previewData.length < parsedData.length && (\n                        <Badge variant=\"secondary\">\n                          Showing {previewData.length} of {parsedData.length}\n                        </Badge>\n                      )}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                      {previewData.map((item, index) => (\n                        <div key={index} className={`p-4 border rounded-lg ${getStatusColor(item.status || \"valid\")}`}>\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-2\">\n                                {getStatusIcon(item.status || \"valid\")}\n                                <h4 className=\"font-medium\">{item.name}</h4>\n                                <Badge variant=\"outline\">{item.category}</Badge>\n                                <Badge variant={item.pricingModel === \"fixed\" ? \"default\" : \"secondary\"}>\n                                  {item.pricingModel === \"fixed\" ? `$${item.price}` : `$${item.price}/person`}\n                                </Badge>\n                              </div>\n                              <p className=\"text-sm text-gray-600 mb-2\">{item.description}</p>\n                              {item.includedServices && item.includedServices.length > 0 && (\n                                <div className=\"text-xs text-gray-500\">\n                                  Includes: {item.includedServices.join(\", \")}\n                                </div>\n                              )}\n                            </div>\n                            <div className=\"text-xs text-gray-400\">Row {item.row}</div>\n                          </div>\n                          \n                          {item.errors && item.errors.length > 0 && (\n                            <div className=\"mt-2 space-y-1\">\n                              {item.errors.map((error, i) => (\n                                <div key={i} className=\"text-xs text-red-600 flex items-center gap-1\">\n                                  <X className=\"w-3 h-3\" />\n                                  {error}\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                          \n                          {item.warnings && item.warnings.length > 0 && (\n                            <div className=\"mt-2 space-y-1\">\n                              {item.warnings.map((warning, i) => (\n                                <div key={i} className=\"text-xs text-yellow-600 flex items-center gap-1\">\n                                  <AlertTriangle className=\"w-3 h-3\" />\n                                  {warning}\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <div className=\"flex gap-3\">\n                  <Button\n                    onClick={() => setActiveTab(\"upload\")}\n                    variant=\"outline\"\n                    className=\"flex-1\"\n                  >\n                    Upload Different File\n                  </Button>\n                  <Button\n                    onClick={() => importMutation.mutate(validItems)}\n                    disabled={validItems.length === 0 || importMutation.isPending}\n                    className=\"flex-1\"\n                  >\n                    {importMutation.isPending ? \"Importing...\" : `Import ${validItems.length} Valid Items`}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"template\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Download className=\"w-5 h-5\" />\n                  Download Template\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-gray-600\">\n                  Download a CSV template with sample data to help you format your {type} correctly.\n                  You can edit this file with Excel, Google Sheets, or any CSV editor.\n                </p>\n                \n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium\">Required Columns:</h4>\n                  <ul className=\"text-sm space-y-1 text-gray-600\">\n                    <li>• <strong>name:</strong> The name of the {type === \"packages\" ? \"package\" : \"service\"}</li>\n                    <li>• <strong>description:</strong> A detailed description</li>\n                    <li>• <strong>category:</strong> Category (e.g., {type === \"packages\" ? \"wedding, corporate, social\" : \"catering, entertainment, decor, photography\"})</li>\n                    <li>• <strong>price:</strong> Price as a number (e.g., 100.50)</li>\n                    <li>• <strong>pricingModel:</strong> Either \"fixed\" or \"per_person\"</li>\n                    {type === \"packages\" && (\n                      <li>• <strong>includedServices:</strong> (Optional) Service names separated by semicolons</li>\n                    )}\n                  </ul>\n                </div>\n\n                <Button onClick={downloadTemplate} className=\"w-full\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Download {type.charAt(0).toUpperCase() + type.slice(1)} Template\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":30691},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/pages/floor-plans.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { FloorPlan3DDesigner } from \"@/components/floor-plans/floor-plan-3d-designer\";\nimport { \n  Grid3X3, \n  Plus, \n  Edit, \n  Trash2, \n  Copy, \n  Download, \n  Upload,\n  Eye,\n  Users,\n  Sofa,\n  Home,\n  Music,\n  Settings,\n  Search,\n  Filter,\n  Calendar,\n  Star,\n  ChevronRight\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { cn } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface FloorPlan {\n  id: string;\n  name: string;\n  description?: string;\n  setupStyle: string;\n  venueId: string;\n  planData: any;\n  totalSeats: number;\n  isTemplate: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function FloorPlansPage() {\n  const [selectedTab, setSelectedTab] = useState('plans');\n  const [showDesigner, setShowDesigner] = useState(false);\n  const [editingPlan, setEditingPlan] = useState<FloorPlan | null>(null);\n  const [selectedSetupStyle, setSelectedSetupStyle] = useState('');\n  const [selectedVenue, setSelectedVenue] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [newPlanData, setNewPlanData] = useState({\n    name: '',\n    description: '',\n    setupStyle: '',\n    venueId: ''\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch floor plans\n  const { data: floorPlans = [], isLoading } = useQuery({\n    queryKey: ['/api/floor-plans'],\n  });\n\n  // Fetch venues\n  const { data: venues = [] } = useQuery({\n    queryKey: ['/api/venues-with-spaces'],\n  });\n\n  // Create floor plan mutation\n  const createPlanMutation = useMutation({\n    mutationFn: async (planData: any) => {\n      return apiRequest('/api/floor-plans', 'POST', planData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/floor-plans'] });\n      setShowCreateForm(false);\n      setNewPlanData({ name: '', description: '', setupStyle: '', venueId: '' });\n      toast({ title: \"Success\", description: \"Floor plan created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create floor plan\", variant: \"destructive\" });\n    }\n  });\n\n  // Update floor plan mutation\n  const updatePlanMutation = useMutation({\n    mutationFn: async ({ id, ...planData }: any) => {\n      return apiRequest(`/api/floor-plans/${id}`, 'PUT', planData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/floor-plans'] });\n      setEditingPlan(null);\n      toast({ title: \"Success\", description: \"Floor plan updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update floor plan\", variant: \"destructive\" });\n    }\n  });\n\n  // Delete floor plan mutation\n  const deletePlanMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(`/api/floor-plans/${id}`, 'DELETE');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/floor-plans'] });\n      toast({ title: \"Success\", description: \"Floor plan deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete floor plan\", variant: \"destructive\" });\n    }\n  });\n\n  // Setup style configurations\n  const setupStyles = [\n    {\n      id: 'round-tables',\n      name: 'Round Tables',\n      description: 'Perfect for dining events with conversation flow',\n      icon: '⭕',\n      capacity: '8-10 per table',\n      color: 'bg-blue-50 border-blue-200 text-blue-800'\n    },\n    {\n      id: 'theater',\n      name: 'Theater Style',\n      description: 'Rows of chairs facing a stage or presentation area',\n      icon: '🎭',\n      capacity: 'Maximum capacity',\n      color: 'bg-purple-50 border-purple-200 text-purple-800'\n    },\n    {\n      id: 'classroom',\n      name: 'Classroom',\n      description: 'Tables and chairs in rows for learning environments',\n      icon: '📚',\n      capacity: '2-3 per table',\n      color: 'bg-green-50 border-green-200 text-green-800'\n    },\n    {\n      id: 'u-shape',\n      name: 'U-Shape',\n      description: 'Horseshoe arrangement for interactive discussions',\n      icon: '🔄',\n      capacity: 'Interactive seating',\n      color: 'bg-orange-50 border-orange-200 text-orange-800'\n    },\n    {\n      id: 'cocktail',\n      name: 'Cocktail Reception',\n      description: 'Standing reception with high tables and bars',\n      icon: '🍸',\n      capacity: 'Standing/mixing',\n      color: 'bg-pink-50 border-pink-200 text-pink-800'\n    },\n    {\n      id: 'banquet',\n      name: 'Banquet',\n      description: 'Long rectangular tables for formal dining',\n      icon: '🍽️',\n      capacity: '6-8 per table',\n      color: 'bg-amber-50 border-amber-200 text-amber-800'\n    },\n    {\n      id: 'conference',\n      name: 'Conference',\n      description: 'Board room style with central table',\n      icon: '💼',\n      capacity: 'Meeting style',\n      color: 'bg-slate-50 border-slate-200 text-slate-800'\n    },\n    {\n      id: 'custom',\n      name: 'Custom Layout',\n      description: 'Create your own unique arrangement',\n      icon: '🎨',\n      capacity: 'Flexible',\n      color: 'bg-indigo-50 border-indigo-200 text-indigo-800'\n    }\n  ];\n\n  // Filter floor plans\n  const filteredPlans = (floorPlans as FloorPlan[]).filter((plan: FloorPlan) => {\n    const matchesSearch = plan.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         plan.description?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStyle = !selectedSetupStyle || selectedSetupStyle === 'all' || plan.setupStyle === selectedSetupStyle;\n    const matchesVenue = !selectedVenue || selectedVenue === 'all' || plan.venueId === selectedVenue;\n    return matchesSearch && matchesStyle && matchesVenue;\n  });\n\n  // Handle save from designer\n  const handleSaveFromDesigner = (planData: any) => {\n    if (editingPlan) {\n      updatePlanMutation.mutate({\n        id: editingPlan.id,\n        planData,\n        totalSeats: planData.totalSeats\n      });\n    } else {\n      createPlanMutation.mutate({\n        ...newPlanData,\n        planData,\n        totalSeats: planData.totalSeats,\n        isTemplate: false\n      });\n    }\n    setShowDesigner(false);\n  };\n\n  // Handle create new plan\n  const handleCreatePlan = () => {\n    if (!newPlanData.name || !newPlanData.setupStyle || !newPlanData.venueId) {\n      toast({ title: \"Validation Error\", description: \"Please fill in all required fields\", variant: \"destructive\" });\n      return;\n    }\n    \n    setShowCreateForm(false);\n    setShowDesigner(true);\n  };\n\n  const getVenueName = (venueId: string) => {\n    const venue = (venues as any[]).find((v: any) => v.id === venueId);\n    return venue?.name || 'Unknown Venue';\n  };\n\n  const getStyleConfig = (styleId: string) => {\n    return setupStyles.find(s => s.id === styleId) || setupStyles[0];\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 sm:px-6 py-6 sm:py-8\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 sm:mb-8 gap-4\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 mb-2\">Floor Plans & Setup</h1>\n          <p className=\"text-sm sm:text-base text-gray-600\">Design and manage venue layouts for different event styles</p>\n        </div>\n        \n        <Dialog open={showCreateForm} onOpenChange={setShowCreateForm}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-blue-600 hover:bg-blue-700 w-full sm:w-auto\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Floor Plan\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Create New Floor Plan</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label>Plan Name *</Label>\n                <Input\n                  value={newPlanData.name}\n                  onChange={(e) => setNewPlanData(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder=\"Enter plan name\"\n                />\n              </div>\n              <div>\n                <Label>Description</Label>\n                <Textarea\n                  value={newPlanData.description}\n                  onChange={(e) => setNewPlanData(prev => ({ ...prev, description: e.target.value }))}\n                  placeholder=\"Optional description\"\n                />\n              </div>\n              <div>\n                <Label>Venue *</Label>\n                <Select\n                  value={newPlanData.venueId}\n                  onValueChange={(value) => setNewPlanData(prev => ({ ...prev, venueId: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select venue\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {(venues as any[]).map((venue: any) => (\n                      <SelectItem key={venue.id} value={venue.id}>\n                        {venue.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label>Setup Style *</Label>\n                <Select\n                  value={newPlanData.setupStyle}\n                  onValueChange={(value) => setNewPlanData(prev => ({ ...prev, setupStyle: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select setup style\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {setupStyles.map((style) => (\n                      <SelectItem key={style.id} value={style.id}>\n                        {style.icon} {style.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex gap-2 pt-4\">\n                <Button onClick={handleCreatePlan} className=\"flex-1\">\n                  Continue to Designer\n                </Button>\n                <Button variant=\"outline\" onClick={() => setShowCreateForm(false)}>\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"plans\">Floor Plans</TabsTrigger>\n          <TabsTrigger value=\"styles\">Setup Styles</TabsTrigger>\n        </TabsList>\n\n        {/* Floor Plans Tab */}\n        <TabsContent value=\"plans\" className=\"space-y-6\">\n          {/* Filters */}\n          <Card className=\"p-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div>\n                <Label className=\"text-sm font-medium\">Search</Label>\n                <div className=\"relative mt-1\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                  <Input\n                    placeholder=\"Search floor plans...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-9\"\n                  />\n                </div>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Setup Style</Label>\n                <Select value={selectedSetupStyle} onValueChange={setSelectedSetupStyle}>\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue placeholder=\"All styles\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Styles</SelectItem>\n                    {setupStyles.map((style) => (\n                      <SelectItem key={style.id} value={style.id}>\n                        {style.icon} {style.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Venue</Label>\n                <Select value={selectedVenue} onValueChange={setSelectedVenue}>\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue placeholder=\"All venues\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Venues</SelectItem>\n                    {(venues as any[]).map((venue: any) => (\n                      <SelectItem key={venue.id} value={venue.id}>\n                        {venue.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </Card>\n\n          {/* Floor Plans Grid */}\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"p-6 animate-pulse\">\n                  <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"h-32 bg-gray-100 rounded mb-4\"></div>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-3 bg-gray-200 rounded\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          ) : filteredPlans.length === 0 ? (\n            <Card className=\"p-12 text-center\">\n              <Grid3X3 className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Floor Plans Found</h3>\n              <p className=\"text-gray-600 mb-6\">\n                {searchQuery || selectedSetupStyle || selectedVenue \n                  ? \"No floor plans match your current filters.\"\n                  : \"Get started by creating your first floor plan.\"\n                }\n              </p>\n              <Button onClick={() => setShowCreateForm(true)}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Floor Plan\n              </Button>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredPlans.map((plan: FloorPlan) => {\n                const styleConfig = getStyleConfig(plan.setupStyle);\n                \n                return (\n                  <Card key={plan.id} className=\"group relative overflow-hidden border border-slate-200 bg-white shadow-sm hover:shadow-md transition-all duration-200\">\n                    {/* Plan Header */}\n                    <div className={cn(\"p-4 border-b\", styleConfig.color.replace('text-', 'text-').replace('border-', 'border-'))}>\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"text-2xl\">{styleConfig.icon}</div>\n                          <div>\n                            <h3 className=\"font-semibold text-sm\">{plan.name}</h3>\n                            <p className=\"text-xs opacity-80 mt-0.5\">{getVenueName(plan.venueId)}</p>\n                          </div>\n                        </div>\n                        {plan.isTemplate && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            Template\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Plan Preview - Placeholder for actual canvas rendering */}\n                    <div className=\"h-32 bg-gradient-to-br from-slate-50 to-slate-100 flex items-center justify-center\">\n                      <div className=\"text-center text-slate-500\">\n                        <Grid3X3 className=\"w-8 h-8 mx-auto mb-2\" />\n                        <div className=\"text-xs\">Floor Plan Preview</div>\n                      </div>\n                    </div>\n\n                    {/* Plan Details */}\n                    <div className=\"p-4 space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm font-medium\">{styleConfig.name}</span>\n                        <div className=\"flex items-center gap-1 text-sm text-slate-600\">\n                          <Users className=\"w-3 h-3\" />\n                          {plan.totalSeats} seats\n                        </div>\n                      </div>\n                      \n                      {plan.description && (\n                        <p className=\"text-xs text-slate-600 line-clamp-2\">{plan.description}</p>\n                      )}\n\n                      <div className=\"flex items-center justify-between pt-2 border-t\">\n                        <div className=\"text-xs text-slate-500\">\n                          Updated {new Date(plan.updatedAt).toLocaleDateString()}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setEditingPlan(plan);\n                              setShowDesigner(true);\n                            }}\n                            className=\"h-7 w-7 p-0\"\n                          >\n                            <Edit className=\"w-3 h-3\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              // Create a copy\n                              setNewPlanData({\n                                name: `${plan.name} (Copy)`,\n                                description: plan.description || '',\n                                setupStyle: plan.setupStyle,\n                                venueId: plan.venueId\n                              });\n                              setShowDesigner(true);\n                            }}\n                            className=\"h-7 w-7 p-0\"\n                          >\n                            <Copy className=\"w-3 h-3\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => deletePlanMutation.mutate(plan.id)}\n                            className=\"h-7 w-7 p-0 text-red-600 hover:text-red-700\"\n                          >\n                            <Trash2 className=\"w-3 h-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </TabsContent>\n\n        {/* Setup Styles Tab */}\n        <TabsContent value=\"styles\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {setupStyles.map((style) => (\n              <Card key={style.id} className={cn(\"p-6 cursor-pointer transition-all hover:shadow-md\", style.color)}>\n                <div className=\"text-center space-y-4\">\n                  <div className=\"text-4xl\">{style.icon}</div>\n                  <div>\n                    <h3 className=\"font-semibold\">{style.name}</h3>\n                    <p className=\"text-sm mt-1 opacity-80\">{style.description}</p>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {style.capacity}\n                    </Badge>\n                    <div className=\"pt-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setNewPlanData(prev => ({ ...prev, setupStyle: style.id }));\n                          setShowCreateForm(true);\n                        }}\n                        className=\"w-full\"\n                      >\n                        <Plus className=\"w-3 h-3 mr-1\" />\n                        Create Plan\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* 3D Designer Modal */}\n      <FloorPlan3DDesigner\n        isOpen={showDesigner}\n        onClose={() => {\n          setShowDesigner(false);\n          setEditingPlan(null);\n          setNewPlanData({ name: '', description: '', setupStyle: '', venueId: '' });\n        }}\n        venueId={editingPlan?.venueId || newPlanData.venueId}\n        setupStyle={editingPlan?.setupStyle || newPlanData.setupStyle}\n        onSave={handleSaveFromDesigner}\n      />\n    </div>\n  );\n}","size_bytes":21845},"client/src/components/floor-plans/floor-plan-3d-designer.tsx":{"content":"import { useState, useRef, useEffect, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { \n  ZoomIn, \n  ZoomOut, \n  RotateCw, \n  Move, \n  Square, \n  Circle, \n  Trash2, \n  Save, \n  Undo, \n  Redo,\n  Grid3X3,\n  Users,\n  Sofa,\n  Home,\n  Music,\n  Utensils,\n  Mic,\n  Monitor,\n  Camera,\n  Settings,\n  Download,\n  Upload\n} from \"lucide-react\";\n\ninterface FloorPlanObject {\n  id: string;\n  type: 'table' | 'chair' | 'stage' | 'bar' | 'dj-booth' | 'entrance' | 'restroom' | 'kitchen' | 'storage' | 'decoration';\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  rotation: number;\n  color: string;\n  seats?: number;\n  label?: string;\n}\n\ninterface FloorPlan3DDesignerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  venueId?: string;\n  setupStyle?: string;\n  onSave?: (planData: any) => void;\n}\n\nexport function FloorPlan3DDesigner({ isOpen, onClose, venueId, setupStyle, onSave }: FloorPlan3DDesignerProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [objects, setObjects] = useState<FloorPlanObject[]>([]);\n  const [selectedObject, setSelectedObject] = useState<string | null>(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [zoom, setZoom] = useState(1);\n  const [panOffset, setPanOffset] = useState({ x: 0, y: 0 });\n  const [tool, setTool] = useState<'select' | 'table' | 'chair' | 'stage' | 'bar'>('select');\n  const [dragHandlePosition, setDragHandlePosition] = useState<{ x: number, y: number } | null>(null);\n  const [isResizing, setIsResizing] = useState(false);\n  const [canvasSize, setCanvasSize] = useState({ width: 800, height: 600 });\n  const [history, setHistory] = useState<FloorPlanObject[][]>([]);\n  const [historyIndex, setHistoryIndex] = useState(-1);\n  const [showObjectPanel, setShowObjectPanel] = useState(false);\n\n  // Object templates with realistic properties\n  const objectTemplates = {\n    table: {\n      round: { width: 60, height: 60, seats: 8, color: '#8B4513' },\n      rectangular: { width: 80, height: 40, seats: 6, color: '#8B4513' },\n      square: { width: 50, height: 50, seats: 4, color: '#8B4513' }\n    },\n    chair: {\n      dining: { width: 20, height: 20, seats: 1, color: '#654321' },\n      lounge: { width: 30, height: 30, seats: 1, color: '#2F4F4F' }\n    },\n    stage: {\n      small: { width: 120, height: 80, color: '#4169E1' },\n      large: { width: 200, height: 120, color: '#4169E1' }\n    },\n    bar: {\n      straight: { width: 100, height: 30, color: '#800000' },\n      curved: { width: 120, height: 40, color: '#800000' }\n    }\n  };\n\n  // Load setup style template when venueId or setupStyle changes\n  useEffect(() => {\n    if (setupStyle && objects.length === 0) {\n      loadSetupStyleTemplate();\n    }\n  }, [setupStyle]);\n\n  const loadSetupStyleTemplate = async () => {\n    if (!setupStyle) return;\n    \n    try {\n      const response = await fetch(`/api/setup-styles/${setupStyle}`);\n      if (response.ok) {\n        const style = await response.json();\n        if (style.floorPlan && style.floorPlan.objects) {\n          setObjects(style.floorPlan.objects);\n          if (style.floorPlan.canvasSize) {\n            setCanvasSize(style.floorPlan.canvasSize);\n          }\n          saveToHistory(style.floorPlan.objects);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load setup style template:', error);\n    }\n  };\n\n  // Save to history for undo/redo\n  const saveToHistory = useCallback((newObjects: FloorPlanObject[]) => {\n    const newHistory = history.slice(0, historyIndex + 1);\n    newHistory.push([...newObjects]);\n    setHistory(newHistory);\n    setHistoryIndex(newHistory.length - 1);\n  }, [history, historyIndex]);\n\n  // Undo/Redo functions\n  const undo = () => {\n    if (historyIndex > 0) {\n      setHistoryIndex(historyIndex - 1);\n      setObjects([...history[historyIndex - 1]]);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex < history.length - 1) {\n      setHistoryIndex(historyIndex + 1);\n      setObjects([...history[historyIndex + 1]]);\n    }\n  };\n\n\n\n  // Canvas drawing function\n  const drawCanvas = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Apply zoom and pan\n    ctx.save();\n    ctx.scale(zoom, zoom);\n    ctx.translate(panOffset.x, panOffset.y);\n\n    // Draw grid\n    ctx.strokeStyle = '#f0f0f0';\n    ctx.lineWidth = 1;\n    for (let x = 0; x <= canvasSize.width; x += 50) {\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, canvasSize.height);\n      ctx.stroke();\n    }\n    for (let y = 0; y <= canvasSize.height; y += 50) {\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(canvasSize.width, y);\n      ctx.stroke();\n    }\n\n    // Draw objects\n    objects.forEach(obj => {\n      ctx.save();\n      ctx.translate(obj.x + obj.width / 2, obj.y + obj.height / 2);\n      ctx.rotate((obj.rotation * Math.PI) / 180);\n      ctx.translate(-obj.width / 2, -obj.height / 2);\n\n      // Object styling\n      ctx.fillStyle = obj.color;\n      ctx.strokeStyle = selectedObject === obj.id ? '#2563eb' : '#333';\n      ctx.lineWidth = selectedObject === obj.id ? 3 : 1;\n\n      // Draw realistic objects\n      switch (obj.type) {\n        case 'table':\n          if (obj.width === obj.height) {\n            // Round table\n            ctx.beginPath();\n            ctx.arc(obj.width / 2, obj.height / 2, obj.width / 2 - 2, 0, 2 * Math.PI);\n            ctx.fill();\n            ctx.stroke();\n            \n            // Table edge highlight\n            ctx.strokeStyle = '#D2691E';\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.arc(obj.width / 2, obj.height / 2, obj.width / 2 - 4, 0, 2 * Math.PI);\n            ctx.stroke();\n          } else {\n            // Rectangular table\n            ctx.fillRect(0, 0, obj.width, obj.height);\n            ctx.strokeRect(0, 0, obj.width, obj.height);\n            \n            // Table edge highlight\n            ctx.strokeStyle = '#D2691E';\n            ctx.lineWidth = 2;\n            ctx.strokeRect(2, 2, obj.width - 4, obj.height - 4);\n          }\n          break;\n\n        case 'chair':\n          // Chair back\n          ctx.fillStyle = '#654321';\n          ctx.fillRect(0, 0, obj.width, 6);\n          \n          // Chair seat\n          ctx.fillStyle = obj.color;\n          ctx.fillRect(0, 6, obj.width, obj.height - 6);\n          ctx.strokeRect(0, 0, obj.width, obj.height);\n          break;\n\n        case 'stage':\n          // Stage platform\n          ctx.fillRect(0, 0, obj.width, obj.height);\n          ctx.strokeRect(0, 0, obj.width, obj.height);\n          \n          // Stage curtain effect\n          ctx.fillStyle = '#800080';\n          ctx.fillRect(0, 0, obj.width, 8);\n          \n          // Center star\n          ctx.fillStyle = '#FFD700';\n          ctx.font = `${Math.min(obj.width / 6, 20)}px Arial`;\n          ctx.textAlign = 'center';\n          ctx.fillText('★', obj.width / 2, obj.height / 2 + 5);\n          break;\n\n        case 'bar':\n          // Bar counter\n          ctx.fillRect(0, 0, obj.width, obj.height);\n          ctx.strokeRect(0, 0, obj.width, obj.height);\n          \n          // Bar stools indicator\n          const stoolCount = Math.floor(obj.width / 25);\n          ctx.fillStyle = '#8B4513';\n          for (let i = 0; i < stoolCount; i++) {\n            const stoolX = 10 + i * 25;\n            ctx.beginPath();\n            ctx.arc(stoolX, obj.height + 15, 8, 0, 2 * Math.PI);\n            ctx.fill();\n          }\n          break;\n\n        default:\n          ctx.fillRect(0, 0, obj.width, obj.height);\n          ctx.strokeRect(0, 0, obj.width, obj.height);\n      }\n\n      // Draw label\n      if (obj.label) {\n        ctx.fillStyle = '#000';\n        ctx.font = '12px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(obj.label, obj.width / 2, obj.height / 2 + 4);\n      }\n\n      // Draw seat count for tables\n      if (obj.seats && obj.type === 'table') {\n        ctx.fillStyle = '#666';\n        ctx.font = '10px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(`${obj.seats} seats`, obj.width / 2, obj.height + 15);\n      }\n\n      ctx.restore();\n    });\n\n    // Draw selection handles and drag indicators for selected object\n    if (selectedObject) {\n      const obj = objects.find(o => o.id === selectedObject);\n      if (obj) {\n        // Selection outline with glow effect\n        ctx.save();\n        ctx.shadowColor = '#2563eb';\n        ctx.shadowBlur = 8;\n        ctx.strokeStyle = '#2563eb';\n        ctx.lineWidth = 2;\n        ctx.setLineDash([4, 4]);\n        ctx.strokeRect(obj.x - 4, obj.y - 4, obj.width + 8, obj.height + 8);\n        ctx.setLineDash([]);\n        \n        // Corner drag handles (for resizing)\n        const handleSize = 8;\n        const handleColor = '#2563eb';\n        const handles = [\n          { x: obj.x - handleSize/2, y: obj.y - handleSize/2, type: 'nw-resize' },\n          { x: obj.x + obj.width - handleSize/2, y: obj.y - handleSize/2, type: 'ne-resize' },\n          { x: obj.x - handleSize/2, y: obj.y + obj.height - handleSize/2, type: 'sw-resize' },\n          { x: obj.x + obj.width - handleSize/2, y: obj.y + obj.height - handleSize/2, type: 'se-resize' },\n        ];\n        \n        // Draw corner handles\n        ctx.fillStyle = handleColor;\n        ctx.shadowBlur = 2;\n        handles.forEach(handle => {\n          ctx.fillRect(handle.x, handle.y, handleSize, handleSize);\n          // Add white border for better visibility\n          ctx.strokeStyle = '#ffffff';\n          ctx.lineWidth = 1;\n          ctx.strokeRect(handle.x, handle.y, handleSize, handleSize);\n        });\n        \n        // Center move handle (larger and more prominent for dragging)\n        const moveHandleSize = 16;\n        ctx.fillStyle = 'rgba(37, 99, 235, 0.9)';\n        ctx.shadowBlur = 4;\n        ctx.fillRect(obj.x + obj.width/2 - moveHandleSize/2, obj.y + obj.height/2 - moveHandleSize/2, moveHandleSize, moveHandleSize);\n        ctx.strokeStyle = '#ffffff';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(obj.x + obj.width/2 - moveHandleSize/2, obj.y + obj.height/2 - moveHandleSize/2, moveHandleSize, moveHandleSize);\n        \n        // Add drag cursor icon\n        ctx.fillStyle = '#ffffff';\n        ctx.font = 'bold 12px Arial';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText('⌖', obj.x + obj.width/2, obj.y + obj.height/2);\n        \n        // Edge handles for easier dragging\n        const edgeHandleSize = 6;\n        const edgeHandles = [\n          { x: obj.x + obj.width/2 - edgeHandleSize/2, y: obj.y - edgeHandleSize/2 }, // top\n          { x: obj.x + obj.width/2 - edgeHandleSize/2, y: obj.y + obj.height - edgeHandleSize/2 }, // bottom\n          { x: obj.x - edgeHandleSize/2, y: obj.y + obj.height/2 - edgeHandleSize/2 }, // left\n          { x: obj.x + obj.width - edgeHandleSize/2, y: obj.y + obj.height/2 - edgeHandleSize/2 } // right\n        ];\n        \n        ctx.fillStyle = 'rgba(37, 99, 235, 0.7)';\n        edgeHandles.forEach(handle => {\n          ctx.fillRect(handle.x, handle.y, edgeHandleSize, edgeHandleSize);\n        });\n        \n        ctx.restore();\n      }\n    }\n\n    ctx.restore();\n  }, [objects, selectedObject, zoom, panOffset, canvasSize]);\n\n  // Redraw canvas when dependencies change\n  useEffect(() => {\n    drawCanvas();\n  }, [drawCanvas]);\n\n  // Check if click is on a drag handle\n  const isClickOnHandle = (x: number, y: number, obj: FloorPlanObject) => {\n    const handleSize = 8;\n    const moveHandleSize = 16;\n    const edgeHandleSize = 6;\n    \n    // Check center move handle (priority)\n    const centerX = obj.x + obj.width/2;\n    const centerY = obj.y + obj.height/2;\n    if (x >= centerX - moveHandleSize/2 && x <= centerX + moveHandleSize/2 &&\n        y >= centerY - moveHandleSize/2 && y <= centerY + moveHandleSize/2) {\n      return 'move';\n    }\n    \n    // Check corner handles\n    const corners = [\n      { x: obj.x - handleSize/2, y: obj.y - handleSize/2, type: 'nw-resize' },\n      { x: obj.x + obj.width - handleSize/2, y: obj.y - handleSize/2, type: 'ne-resize' },\n      { x: obj.x - handleSize/2, y: obj.y + obj.height - handleSize/2, type: 'sw-resize' },\n      { x: obj.x + obj.width - handleSize/2, y: obj.y + obj.height - handleSize/2, type: 'se-resize' },\n    ];\n    \n    for (const corner of corners) {\n      if (x >= corner.x && x <= corner.x + handleSize &&\n          y >= corner.y && y <= corner.y + handleSize) {\n        return corner.type;\n      }\n    }\n    \n    // Check edge handles\n    const edges = [\n      { x: obj.x + obj.width/2 - edgeHandleSize/2, y: obj.y - edgeHandleSize/2, type: 'move' },\n      { x: obj.x + obj.width/2 - edgeHandleSize/2, y: obj.y + obj.height - edgeHandleSize/2, type: 'move' },\n      { x: obj.x - edgeHandleSize/2, y: obj.y + obj.height/2 - edgeHandleSize/2, type: 'move' },\n      { x: obj.x + obj.width - edgeHandleSize/2, y: obj.y + obj.height/2 - edgeHandleSize/2, type: 'move' }\n    ];\n    \n    for (const edge of edges) {\n      if (x >= edge.x && x <= edge.x + edgeHandleSize &&\n          y >= edge.y && y <= edge.y + edgeHandleSize) {\n        return edge.type;\n      }\n    }\n    \n    return null;\n  };\n\n  // Handle canvas mouse events\n  const handleMouseDown = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const x = (e.clientX - rect.left) / zoom - panOffset.x;\n    const y = (e.clientY - rect.top) / zoom - panOffset.y;\n\n    if (tool === 'select') {\n      // Check if clicking on a selected object's handle first\n      if (selectedObject) {\n        const selectedObj = objects.find(obj => obj.id === selectedObject);\n        if (selectedObj) {\n          const handleType = isClickOnHandle(x, y, selectedObj);\n          if (handleType) {\n            setIsDragging(true);\n            setDragOffset({\n              x: x - selectedObj.x,\n              y: y - selectedObj.y\n            });\n            // Visual feedback for dragging\n            canvas.style.cursor = handleType === 'move' ? 'grabbing' : 'grabbing';\n            return;\n          }\n        }\n      }\n      \n      // Find clicked object\n      const clickedObject = objects.find(obj =>\n        x >= obj.x && x <= obj.x + obj.width &&\n        y >= obj.y && y <= obj.y + obj.height\n      );\n\n      if (clickedObject) {\n        setSelectedObject(clickedObject.id);\n        // Check if clicking on handle of newly selected object\n        const handleType = isClickOnHandle(x, y, clickedObject);\n        if (handleType) {\n          setIsDragging(true);\n          setDragOffset({\n            x: x - clickedObject.x,\n            y: y - clickedObject.y\n          });\n          canvas.style.cursor = 'grabbing';\n        }\n      } else {\n        setSelectedObject(null);\n      }\n    } else {\n      // Add new object\n      const templateGroup = objectTemplates[tool as keyof typeof objectTemplates];\n      const templateKey = Object.keys(templateGroup)[0];\n      const template = templateGroup[templateKey as keyof typeof templateGroup];\n      if (template) {\n        const newObject: FloorPlanObject = {\n          id: `${tool}-${Date.now()}`,\n          type: tool,\n          x: x - template.width / 2,\n          y: y - template.height / 2,\n          width: template.width,\n          height: template.height,\n          rotation: 0,\n          color: template.color,\n          seats: template.seats,\n          label: `${tool.charAt(0).toUpperCase() + tool.slice(1)} ${objects.filter(o => o.type === tool).length + 1}`\n        };\n\n        const newObjects = [...objects, newObject];\n        setObjects(newObjects);\n        saveToHistory(newObjects);\n        setSelectedObject(newObject.id);\n        setTool('select');\n      }\n    }\n  };\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const x = (e.clientX - rect.left) / zoom - panOffset.x;\n    const y = (e.clientY - rect.top) / zoom - panOffset.y;\n\n    // Update cursor based on what we're hovering over\n    if (!isDragging && selectedObject && tool === 'select') {\n      const selectedObj = objects.find(obj => obj.id === selectedObject);\n      if (selectedObj) {\n        const handleType = isClickOnHandle(x, y, selectedObj);\n        if (handleType) {\n          canvas.style.cursor = handleType === 'move' ? 'grab' : 'pointer';\n        } else if (x >= selectedObj.x && x <= selectedObj.x + selectedObj.width &&\n                   y >= selectedObj.y && y <= selectedObj.y + selectedObj.height) {\n          canvas.style.cursor = 'grab';\n        } else {\n          canvas.style.cursor = 'default';\n        }\n      } else {\n        canvas.style.cursor = 'default';\n      }\n    }\n\n    // Handle dragging with boundary constraints\n    if (isDragging && selectedObject) {\n      const newObjects = objects.map(obj => {\n        if (obj.id === selectedObject) {\n          const newX = Math.max(0, Math.min(canvasSize.width - obj.width, x - dragOffset.x));\n          const newY = Math.max(0, Math.min(canvasSize.height - obj.height, y - dragOffset.y));\n          \n          return {\n            ...obj,\n            x: newX,\n            y: newY\n          };\n        }\n        return obj;\n      });\n\n      setObjects(newObjects);\n    }\n  };\n\n  const handleMouseUp = () => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      canvas.style.cursor = 'default';\n    }\n    \n    if (isDragging && selectedObject) {\n      saveToHistory(objects);\n    }\n    setIsDragging(false);\n  };\n\n  // Delete selected object\n  const deleteSelected = () => {\n    if (selectedObject) {\n      const newObjects = objects.filter(obj => obj.id !== selectedObject);\n      setObjects(newObjects);\n      saveToHistory(newObjects);\n      setSelectedObject(null);\n    }\n  };\n\n  // Zoom functions\n  const zoomIn = () => setZoom(prev => Math.min(prev + 0.2, 3));\n  const zoomOut = () => setZoom(prev => Math.max(prev - 0.2, 0.5));\n\n  // Save floor plan\n  const handleSave = () => {\n    const planData = {\n      objects,\n      canvasSize,\n      setupStyle,\n      venueId,\n      totalSeats: objects.reduce((sum, obj) => sum + (obj.seats || 0), 0),\n      createdAt: new Date().toISOString()\n    };\n\n    onSave?.(planData);\n    onClose();\n  };\n\n  const selectedObj = objects.find(obj => obj.id === selectedObject);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-7xl h-[90vh] p-0\">\n        <DialogHeader className=\"p-6 pb-4\">\n          <DialogTitle className=\"flex items-center gap-3\">\n            <Grid3X3 className=\"h-6 w-6 text-blue-600\" />\n            3D Floor Plan Designer\n            {setupStyle && (\n              <Badge variant=\"secondary\" className=\"ml-2\">\n                {setupStyle.replace('-', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n              </Badge>\n            )}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"flex-1 flex overflow-hidden\">\n          {/* Left Sidebar - Tools */}\n          <div className=\"w-64 border-r bg-slate-50 flex flex-col\">\n            <div className=\"p-4 space-y-4\">\n              {/* Tools */}\n              <div>\n                <Label className=\"text-sm font-medium mb-2 block\">Tools</Label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <Button\n                    variant={tool === 'select' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setTool('select')}\n                  >\n                    <Move className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant={tool === 'table' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setTool('table')}\n                  >\n                    <Square className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant={tool === 'chair' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setTool('chair')}\n                  >\n                    <Users className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant={tool === 'stage' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setTool('stage')}\n                  >\n                    <Music className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant={tool === 'bar' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setTool('bar')}\n                  >\n                    <Utensils className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              {/* Controls */}\n              <div>\n                <Label className=\"text-sm font-medium mb-2 block\">View Controls</Label>\n                <div className=\"flex gap-2\">\n                  <Button variant=\"outline\" size=\"sm\" onClick={zoomOut}>\n                    <ZoomOut className=\"h-4 w-4\" />\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" onClick={zoomIn}>\n                    <ZoomIn className=\"h-4 w-4\" />\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" onClick={undo} disabled={historyIndex <= 0}>\n                    <Undo className=\"h-4 w-4\" />\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" onClick={redo} disabled={historyIndex >= history.length - 1}>\n                    <Redo className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                <div className=\"mt-2\">\n                  <Label className=\"text-xs text-slate-600\">Zoom: {Math.round(zoom * 100)}%</Label>\n                </div>\n              </div>\n\n              {/* Object Properties */}\n              {selectedObj && (\n                <Card className=\"p-3\">\n                  <Label className=\"text-sm font-medium block mb-2\">Selected Object</Label>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <Label className=\"text-xs\">Label</Label>\n                      <Input\n                        value={selectedObj.label || ''}\n                        onChange={(e) => {\n                          const newObjects = objects.map(obj =>\n                            obj.id === selectedObject ? { ...obj, label: e.target.value } : obj\n                          );\n                          setObjects(newObjects);\n                        }}\n                        className=\"mt-1 h-8\"\n                      />\n                    </div>\n                    \n                    {selectedObj.seats && (\n                      <div>\n                        <Label className=\"text-xs\">Seats</Label>\n                        <Input\n                          type=\"number\"\n                          value={selectedObj.seats}\n                          onChange={(e) => {\n                            const newObjects = objects.map(obj =>\n                              obj.id === selectedObject ? { ...obj, seats: parseInt(e.target.value) || 0 } : obj\n                            );\n                            setObjects(newObjects);\n                          }}\n                          className=\"mt-1 h-8\"\n                        />\n                      </div>\n                    )}\n\n                    <div>\n                      <Label className=\"text-xs\">Rotation</Label>\n                      <Slider\n                        value={[selectedObj.rotation]}\n                        onValueChange={(value) => {\n                          const newObjects = objects.map(obj =>\n                            obj.id === selectedObject ? { ...obj, rotation: value[0] } : obj\n                          );\n                          setObjects(newObjects);\n                        }}\n                        max={360}\n                        step={15}\n                        className=\"mt-2\"\n                      />\n                      <div className=\"text-xs text-slate-600 mt-1\">{selectedObj.rotation}°</div>\n                    </div>\n\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={deleteSelected}\n                      className=\"w-full text-red-600 border-red-200 hover:bg-red-50\"\n                    >\n                      <Trash2 className=\"h-4 w-4 mr-1\" />\n                      Delete\n                    </Button>\n                  </div>\n                </Card>\n              )}\n            </div>\n\n            {/* Statistics */}\n            <div className=\"mt-auto p-4 border-t bg-white\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Total Objects:</span>\n                  <span className=\"font-medium\">{objects.length}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Total Seats:</span>\n                  <span className=\"font-medium\">{objects.reduce((sum, obj) => sum + (obj.seats || 0), 0)}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Main Canvas Area */}\n          <div className=\"flex-1 flex flex-col\">\n            {/* Canvas Toolbar */}\n            <div className=\"p-4 border-b bg-white flex items-center justify-between\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex items-center gap-2\">\n                  <Label className=\"text-sm\">Canvas Size:</Label>\n                  <Select\n                    value={`${canvasSize.width}x${canvasSize.height}`}\n                    onValueChange={(value) => {\n                      const [width, height] = value.split('x').map(Number);\n                      setCanvasSize({ width, height });\n                    }}\n                  >\n                    <SelectTrigger className=\"w-32\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"800x600\">800 × 600</SelectItem>\n                      <SelectItem value=\"1024x768\">1024 × 768</SelectItem>\n                      <SelectItem value=\"1200x900\">1200 × 900</SelectItem>\n                      <SelectItem value=\"1600x1200\">1600 × 1200</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <Button variant=\"outline\" size=\"sm\">\n                  <Upload className=\"h-4 w-4 mr-1\" />\n                  Import\n                </Button>\n                <Button variant=\"outline\" size=\"sm\">\n                  <Download className=\"h-4 w-4 mr-1\" />\n                  Export\n                </Button>\n                <Button onClick={handleSave} size=\"sm\">\n                  <Save className=\"h-4 w-4 mr-1\" />\n                  Save Plan\n                </Button>\n              </div>\n            </div>\n\n            {/* Canvas */}\n            <div className=\"flex-1 overflow-auto bg-slate-100 p-4\">\n              <div className=\"flex justify-center\">\n                <canvas\n                  ref={canvasRef}\n                  width={canvasSize.width}\n                  height={canvasSize.height}\n                  className=\"border-2 border-slate-300 bg-white shadow-lg cursor-crosshair\"\n                  onMouseDown={handleMouseDown}\n                  onMouseMove={handleMouseMove}\n                  onMouseUp={handleMouseUp}\n                  onMouseLeave={handleMouseUp}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":28553},"client/src/components/forms/setup-style-floor-plan-modal.tsx":{"content":"import { useState, useRef, useCallback, useEffect, useMemo } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { \n  RotateCcw, Square, Circle, Save, Plus, Trash2, Move, RotateCw, Layout, Box, Eye, \n  ZoomIn, ZoomOut, Copy, Clipboard, Grid3X3, Layers, Maximize2, MousePointer2,\n  Target, Palette, FlipHorizontal, FlipVertical, AlignCenter, MoreHorizontal\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface FloorPlanElement {\n  id: string;\n  type: 'table' | 'stage' | 'bar' | 'door' | 'wall' | 'chair' | 'plant' | 'entrance' | 'restroom' | 'kitchen';\n  shape: 'rectangle' | 'circle' | 'square' | 'round-rectangle';\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  rotation: number;\n  seats?: number;\n  label?: string;\n  color: string;\n  opacity?: number;\n  zIndex?: number;\n  locked?: boolean;\n  visible?: boolean;\n  borderWidth?: number;\n  borderColor?: string;\n  gradient?: boolean;\n}\n\ninterface SetupStyleFloorPlanModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  setupStyle: any;\n  onSave: (floorPlan: any) => void;\n}\n\nconst ELEMENT_TYPES = [\n  { type: 'table', label: 'Round Table', shape: 'circle', defaultSize: { width: 80, height: 80 }, color: '#8B4513', icon: Circle, category: 'Seating' },\n  { type: 'table', label: 'Rectangle Table', shape: 'rectangle', defaultSize: { width: 120, height: 60 }, color: '#8B4513', icon: Square, category: 'Seating' },\n  { type: 'table', label: 'Square Table', shape: 'square', defaultSize: { width: 80, height: 80 }, color: '#8B4513', icon: Square, category: 'Seating' },\n  { type: 'chair', label: 'Chair', shape: 'round-rectangle', defaultSize: { width: 24, height: 24 }, color: '#654321', icon: Square, category: 'Seating' },\n  { type: 'stage', label: 'Stage', shape: 'rectangle', defaultSize: { width: 160, height: 100 }, color: '#4A5568', icon: Square, category: 'Features' },\n  { type: 'bar', label: 'Bar Counter', shape: 'rectangle', defaultSize: { width: 140, height: 40 }, color: '#2D3748', icon: Square, category: 'Features' },\n  { type: 'entrance', label: 'Entrance', shape: 'rectangle', defaultSize: { width: 60, height: 15 }, color: '#10B981', icon: Square, category: 'Structure' },\n  { type: 'door', label: 'Door', shape: 'rectangle', defaultSize: { width: 40, height: 12 }, color: '#F7FAFC', icon: Square, category: 'Structure' },\n  { type: 'wall', label: 'Wall', shape: 'rectangle', defaultSize: { width: 12, height: 120 }, color: '#1A202C', icon: Square, category: 'Structure' },\n  { type: 'restroom', label: 'Restroom', shape: 'square', defaultSize: { width: 60, height: 60 }, color: '#6366F1', icon: Square, category: 'Facilities' },\n  { type: 'kitchen', label: 'Kitchen', shape: 'rectangle', defaultSize: { width: 100, height: 80 }, color: '#EF4444', icon: Square, category: 'Facilities' },\n  { type: 'plant', label: 'Plant/Decor', shape: 'circle', defaultSize: { width: 30, height: 30 }, color: '#22C55E', icon: Circle, category: 'Decor' },\n];\n\nconst TEMPLATES = [\n  {\n    name: 'Wedding Reception',\n    elements: [\n      { id: 'head-table', type: 'table', shape: 'rectangle', x: 250, y: 50, width: 120, height: 60, rotation: 0, seats: 8, label: 'Head Table', color: '#8B4513' },\n      { id: 'round-1', type: 'table', shape: 'circle', x: 100, y: 150, width: 80, height: 80, rotation: 0, seats: 8, label: 'Table 1', color: '#8B4513' },\n      { id: 'round-2', type: 'table', shape: 'circle', x: 250, y: 150, width: 80, height: 80, rotation: 0, seats: 8, label: 'Table 2', color: '#8B4513' },\n      { id: 'round-3', type: 'table', shape: 'circle', x: 400, y: 150, width: 80, height: 80, rotation: 0, seats: 8, label: 'Table 3', color: '#8B4513' },\n      { id: 'stage', type: 'stage', shape: 'rectangle', x: 200, y: 300, width: 160, height: 80, rotation: 0, label: 'Stage', color: '#4A5568' },\n    ]\n  },\n  {\n    name: 'Corporate Meeting',\n    elements: [\n      { id: 'main-table', type: 'table', shape: 'rectangle', x: 150, y: 100, width: 300, height: 80, rotation: 0, seats: 12, label: 'Conference Table', color: '#8B4513' },\n      { id: 'presentation', type: 'stage', shape: 'rectangle', x: 200, y: 50, width: 200, height: 40, rotation: 0, label: 'Presentation Area', color: '#4A5568' },\n    ]\n  },\n  {\n    name: 'Cocktail Party',\n    elements: [\n      { id: 'bar-1', type: 'bar', shape: 'rectangle', x: 50, y: 100, width: 140, height: 40, rotation: 0, label: 'Main Bar', color: '#2D3748' },\n      { id: 'high-1', type: 'table', shape: 'circle', x: 250, y: 100, width: 60, height: 60, rotation: 0, seats: 4, label: 'High Table 1', color: '#8B4513' },\n      { id: 'high-2', type: 'table', shape: 'circle', x: 350, y: 150, width: 60, height: 60, rotation: 0, seats: 4, label: 'High Table 2', color: '#8B4513' },\n      { id: 'high-3', type: 'table', shape: 'circle', x: 150, y: 200, width: 60, height: 60, rotation: 0, seats: 4, label: 'High Table 3', color: '#8B4513' },\n    ]\n  },\n];\n\nexport function SetupStyleFloorPlanModal({ open, onOpenChange, setupStyle, onSave }: SetupStyleFloorPlanModalProps) {\n  const canvasRef = useRef<HTMLDivElement>(null);\n  const [elements, setElements] = useState<FloorPlanElement[]>(() => {\n    const initialData = setupStyle?.floorPlan?.elements || setupStyle?.floorPlan?.objects || [];\n    // Deep clone initial data to prevent reference sharing\n    return JSON.parse(JSON.stringify(initialData));\n  });\n  const [selectedElements, setSelectedElements] = useState<string[]>([]);\n  const [mode, setMode] = useState<'select' | 'add' | 'pan'>('select');\n  const [selectedType, setSelectedType] = useState(ELEMENT_TYPES[0]);\n  const [isDragging, setIsDragging] = useState(false);\n  const [isMultiSelecting, setIsMultiSelecting] = useState(false);\n  const [selectionBox, setSelectionBox] = useState<{x: number, y: number, width: number, height: number} | null>(null);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [canvasSize] = useState({ width: 800, height: 600 });\n  const [viewMode, setViewMode] = useState<'2d' | '3d'>('2d');\n  const [zoom, setZoom] = useState(100);\n  const [showGrid, setShowGrid] = useState(true);\n  const [snapToGrid, setSnapToGrid] = useState(true);\n  const [gridSize, setGridSize] = useState(20);\n  const [copiedElements, setCopiedElements] = useState<FloorPlanElement[]>([]);\n  const [showRulers, setShowRulers] = useState(true);\n  const [layerFilter, setLayerFilter] = useState<string>('all');\n  const [history, setHistory] = useState<FloorPlanElement[][]>([]);\n  const [historyIndex, setHistoryIndex] = useState(-1);\n\n  // History management - defined first to avoid initialization issues\n  const saveToHistory = useCallback((newElements: FloorPlanElement[]) => {\n    const newHistory = history.slice(0, historyIndex + 1);\n    newHistory.push([...newElements]);\n    setHistory(newHistory);\n    setHistoryIndex(newHistory.length - 1);\n  }, [history, historyIndex]);\n\n  const undo = useCallback(() => {\n    if (historyIndex > 0) {\n      setHistoryIndex(historyIndex - 1);\n      setElements([...history[historyIndex - 1]]);\n    }\n  }, [historyIndex, history]);\n\n  const redo = useCallback(() => {\n    if (historyIndex < history.length - 1) {\n      setHistoryIndex(historyIndex + 1);\n      setElements([...history[historyIndex + 1]]);\n    }\n  }, [historyIndex, history]);\n\n  // Copy/paste functionality\n  const copyElements = useCallback(() => {\n    const elementsToCopy = elements.filter(el => selectedElements.includes(el.id));\n    setCopiedElements(elementsToCopy);\n  }, [elements, selectedElements]);\n\n  const pasteElements = useCallback(() => {\n    if (copiedElements.length === 0) return;\n    \n    const newElements = copiedElements.map(el => ({\n      ...el,\n      id: `element-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      x: el.x + 20,\n      y: el.y + 20,\n      label: `${el.label} (Copy)`,\n    }));\n\n    const updatedElements = [...elements, ...newElements];\n    setElements(updatedElements);\n    saveToHistory(updatedElements);\n    setSelectedElements(newElements.map(el => el.id));\n  }, [copiedElements, elements, saveToHistory]);\n\n  const deleteSelectedElements = useCallback(() => {\n    if (selectedElements.length === 0) return;\n    \n    const newElements = elements.filter(el => !selectedElements.includes(el.id));\n    setElements(newElements);\n    saveToHistory(newElements);\n    setSelectedElements([]);\n  }, [selectedElements, elements, saveToHistory]);\n\n  const duplicateSelectedElements = useCallback(() => {\n    if (selectedElements.length === 0) return;\n    \n    const elementsToDuplicate = elements.filter(el => selectedElements.includes(el.id));\n    const newElements = elementsToDuplicate.map(el => ({\n      ...el,\n      id: `element-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      x: el.x + 30,\n      y: el.y + 30,\n      label: `${el.label} (Copy)`,\n    }));\n\n    const updatedElements = [...elements, ...newElements];\n    setElements(updatedElements);\n    saveToHistory(updatedElements);\n    setSelectedElements(newElements.map(el => el.id));\n  }, [selectedElements, elements, saveToHistory]);\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (!open) return;\n      \n      if (e.ctrlKey || e.metaKey) {\n        switch (e.key) {\n          case 'c':\n            e.preventDefault();\n            copyElements();\n            break;\n          case 'v':\n            e.preventDefault();\n            pasteElements();\n            break;\n          case 'd':\n            e.preventDefault();\n            duplicateSelectedElements();\n            break;\n          case 'z':\n            e.preventDefault();\n            if (e.shiftKey) {\n              redo();\n            } else {\n              undo();\n            }\n            break;\n          case 'a':\n            e.preventDefault();\n            setSelectedElements(elements.map(el => el.id));\n            break;\n        }\n      }\n      \n      if (e.key === 'Delete' || e.key === 'Backspace') {\n        e.preventDefault();\n        deleteSelectedElements();\n      }\n      \n      if (e.key === 'Escape') {\n        setSelectedElements([]);\n        setMode('select');\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyPress);\n    return () => document.removeEventListener('keydown', handleKeyPress);\n  }, [open, copyElements, pasteElements, duplicateSelectedElements, undo, redo, deleteSelectedElements, elements]);\n\n  // Alignment functions\n  const alignElements = useCallback((alignment: 'left' | 'center' | 'right' | 'top' | 'middle' | 'bottom') => {\n    if (selectedElements.length < 2) return;\n    \n    const selectedElementData = elements.filter(el => selectedElements.includes(el.id));\n    let referenceValue: number;\n    \n    switch (alignment) {\n      case 'left':\n        referenceValue = Math.min(...selectedElementData.map(el => el.x));\n        setElements(prev => prev.map(el => \n          selectedElements.includes(el.id) ? { ...el, x: referenceValue } : el\n        ));\n        break;\n      case 'right':\n        referenceValue = Math.max(...selectedElementData.map(el => el.x + el.width));\n        setElements(prev => prev.map(el => \n          selectedElements.includes(el.id) ? { ...el, x: referenceValue - el.width } : el\n        ));\n        break;\n      case 'center':\n        const avgX = selectedElementData.reduce((sum, el) => sum + el.x + el.width / 2, 0) / selectedElementData.length;\n        setElements(prev => prev.map(el => \n          selectedElements.includes(el.id) ? { ...el, x: avgX - el.width / 2 } : el\n        ));\n        break;\n      case 'top':\n        referenceValue = Math.min(...selectedElementData.map(el => el.y));\n        setElements(prev => prev.map(el => \n          selectedElements.includes(el.id) ? { ...el, y: referenceValue } : el\n        ));\n        break;\n      case 'bottom':\n        referenceValue = Math.max(...selectedElementData.map(el => el.y + el.height));\n        setElements(prev => prev.map(el => \n          selectedElements.includes(el.id) ? { ...el, y: referenceValue - el.height } : el\n        ));\n        break;\n      case 'middle':\n        const avgY = selectedElementData.reduce((sum, el) => sum + el.y + el.height / 2, 0) / selectedElementData.length;\n        setElements(prev => prev.map(el => \n          selectedElements.includes(el.id) ? { ...el, y: avgY - el.height / 2 } : el\n        ));\n        break;\n    }\n    saveToHistory(elements);\n  }, [selectedElements, elements, saveToHistory]);\n\n  // Grid snapping\n  const snapToGridPosition = useCallback((x: number, y: number) => {\n    if (!snapToGrid) return { x, y };\n    return {\n      x: Math.round(x / gridSize) * gridSize,\n      y: Math.round(y / gridSize) * gridSize\n    };\n  }, [snapToGrid, gridSize]);\n\n  const addElement = useCallback((x: number, y: number) => {\n    if (mode !== 'add') return;\n\n    const snappedPos = snapToGridPosition(x - selectedType.defaultSize.width / 2, y - selectedType.defaultSize.height / 2);\n    \n    const newElement: FloorPlanElement = {\n      id: `element-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      type: selectedType.type as any,\n      shape: selectedType.shape as any,\n      x: snappedPos.x,\n      y: snappedPos.y,\n      width: selectedType.defaultSize.width,\n      height: selectedType.defaultSize.height,\n      rotation: 0,\n      seats: selectedType.type === 'table' ? (selectedType.shape === 'circle' ? 6 : 8) : undefined,\n      label: `${selectedType.label} ${elements.filter(e => e.type === selectedType.type).length + 1}`,\n      color: selectedType.color,\n      opacity: 1,\n      zIndex: elements.length + 1,\n      locked: false,\n      visible: true,\n      borderWidth: 2,\n      borderColor: '#000000',\n      gradient: false,\n    };\n\n    const newElements = [...elements, newElement];\n    setElements(newElements);\n    saveToHistory(newElements);\n    setSelectedElements([newElement.id]);\n    // Keep add mode active for continuous adding\n  }, [mode, selectedType, elements, snapToGridPosition, saveToHistory]);\n\n  // Multi-selection and improved interaction\n  const handleCanvasClick = useCallback((e: React.MouseEvent) => {\n    if (!canvasRef.current) return;\n    \n    const rect = canvasRef.current.getBoundingClientRect();\n    const x = (e.clientX - rect.left) / (zoom / 100);\n    const y = (e.clientY - rect.top) / (zoom / 100);\n\n    if (mode === 'add') {\n      addElement(x, y);\n    } else if (!e.ctrlKey && !e.metaKey) {\n      setSelectedElements([]);\n    }\n  }, [mode, addElement, zoom]);\n\n  const handleCanvasMouseDown = useCallback((e: React.MouseEvent) => {\n    if (mode === 'select' && !isDragging) {\n      setIsMultiSelecting(true);\n      const rect = canvasRef.current?.getBoundingClientRect();\n      if (rect) {\n        const x = (e.clientX - rect.left) / (zoom / 100);\n        const y = (e.clientY - rect.top) / (zoom / 100);\n        setSelectionBox({ x, y, width: 0, height: 0 });\n      }\n    }\n  }, [mode, isDragging, zoom]);\n\n  const handleCanvasMouseMove = useCallback((e: React.MouseEvent) => {\n    if (isMultiSelecting && selectionBox && canvasRef.current) {\n      const rect = canvasRef.current.getBoundingClientRect();\n      const currentX = (e.clientX - rect.left) / (zoom / 100);\n      const currentY = (e.clientY - rect.top) / (zoom / 100);\n      \n      setSelectionBox({\n        x: Math.min(selectionBox.x, currentX),\n        y: Math.min(selectionBox.y, currentY),\n        width: Math.abs(currentX - selectionBox.x),\n        height: Math.abs(currentY - selectionBox.y),\n      });\n\n      // Update selection based on box\n      const selected = elements.filter(element => {\n        const box = selectionBox;\n        return element.x < box.x + box.width &&\n               element.x + element.width > box.x &&\n               element.y < box.y + box.height &&\n               element.y + element.height > box.y;\n      }).map(el => el.id);\n      \n      setSelectedElements(selected);\n    }\n  }, [isMultiSelecting, selectionBox, elements, zoom]);\n\n  const handleCanvasMouseUp = useCallback(() => {\n    if (isMultiSelecting) {\n      setIsMultiSelecting(false);\n      setSelectionBox(null);\n    }\n  }, [isMultiSelecting]);\n\n  const handleElementClick = useCallback((e: React.MouseEvent, elementId: string) => {\n    e.stopPropagation();\n    \n    if (e.ctrlKey || e.metaKey) {\n      // Multi-select\n      setSelectedElements(prev => \n        prev.includes(elementId) \n          ? prev.filter(id => id !== elementId)\n          : [...prev, elementId]\n      );\n    } else {\n      setSelectedElements([elementId]);\n    }\n  }, []);\n\n  const handleElementMouseDown = useCallback((e: React.MouseEvent, elementId: string) => {\n    e.stopPropagation();\n    e.preventDefault();\n    \n    const element = elements.find(el => el.id === elementId);\n    if (!element || element.locked) return;\n\n    if (!selectedElements.includes(elementId)) {\n      setSelectedElements([elementId]);\n    }\n    setIsDragging(true);\n    \n    const rect = canvasRef.current?.getBoundingClientRect();\n    if (rect) {\n      setDragStart({ x: e.clientX, y: e.clientY });\n      setDragOffset({ \n        x: (e.clientX - rect.left) / (zoom / 100) - element.x, \n        y: (e.clientY - rect.top) / (zoom / 100) - element.y \n      });\n    }\n  }, [elements, selectedElements, zoom]);\n\n  const handleMouseMove = useCallback((e: React.MouseEvent) => {\n    if (!isDragging || selectedElements.length === 0 || !canvasRef.current) return;\n\n    const rect = canvasRef.current.getBoundingClientRect();\n    const x = (e.clientX - rect.left) / (zoom / 100) - dragOffset.x;\n    const y = (e.clientY - rect.top) / (zoom / 100) - dragOffset.y;\n\n    const deltaX = x - (elements.find(el => el.id === selectedElements[0])?.x || 0);\n    const deltaY = y - (elements.find(el => el.id === selectedElements[0])?.y || 0);\n\n    setElements(prev => prev.map(el => {\n      if (selectedElements.includes(el.id) && !el.locked) {\n        const newX = el.x + deltaX;\n        const newY = el.y + deltaY;\n        \n        const snappedPos = snapToGridPosition(newX, newY);\n        const constrainedX = Math.max(0, Math.min(snappedPos.x, canvasSize.width - el.width));\n        const constrainedY = Math.max(0, Math.min(snappedPos.y, canvasSize.height - el.height));\n        \n        return { ...el, x: constrainedX, y: constrainedY };\n      }\n      return el;\n    }));\n  }, [isDragging, selectedElements, dragOffset, elements, canvasSize, zoom, snapToGridPosition]);\n\n  const handleMouseUp = useCallback(() => {\n    setIsDragging(false);\n    setDragStart({ x: 0, y: 0 });\n    setDragOffset({ x: 0, y: 0 });\n  }, []);\n\n  const rotateSelectedElements = useCallback(() => {\n    if (selectedElements.length === 0) return;\n    \n    const newElements = elements.map(el => \n      selectedElements.includes(el.id) \n        ? { ...el, rotation: (el.rotation + 90) % 360 }\n        : el\n    );\n    setElements(newElements);\n    saveToHistory(newElements);\n  }, [selectedElements, elements, saveToHistory]);\n\n  const flipSelectedElements = useCallback((direction: 'horizontal' | 'vertical') => {\n    if (selectedElements.length === 0) return;\n    \n    const newElements = elements.map(el => {\n      if (selectedElements.includes(el.id)) {\n        if (direction === 'horizontal') {\n          return { ...el, rotation: (180 - el.rotation) % 360 };\n        } else {\n          return { ...el, rotation: (360 - el.rotation) % 360 };\n        }\n      }\n      return el;\n    });\n    setElements(newElements);\n    saveToHistory(newElements);\n  }, [selectedElements, elements, saveToHistory]);\n\n  const updateSelectedElements = useCallback((updates: Partial<FloorPlanElement>) => {\n    if (selectedElements.length === 0) return;\n    \n    const newElements = elements.map(el => \n      selectedElements.includes(el.id) ? { ...el, ...updates } : el\n    );\n    setElements(newElements);\n    saveToHistory(newElements);\n  }, [selectedElements, elements, saveToHistory]);\n\n  // Template loading\n  const loadTemplate = useCallback((template: typeof TEMPLATES[0]) => {\n    const newElements = template.elements.map(el => ({\n      ...el,\n      id: `element-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      opacity: 1,\n      zIndex: 1,\n      locked: false,\n      visible: true,\n      borderWidth: 2,\n      borderColor: '#000000',\n      gradient: false,\n    })) as FloorPlanElement[];\n    \n    setElements(newElements);\n    saveToHistory(newElements);\n    setSelectedElements([]);\n  }, [saveToHistory]);\n\n\n\n  const handleSave = () => {\n    // Create proper deep clones to prevent reference sharing across setup styles\n    const elementsClone = JSON.parse(JSON.stringify(elements));\n    const floorPlan = {\n      elements: elementsClone,\n      objects: JSON.parse(JSON.stringify(elements)), // Keep both formats for compatibility with separate clones\n      dimensions: { ...canvasSize },\n      canvasSize: { ...canvasSize }\n    };\n    console.log('Saving floor plan for setup:', setupStyle?.name, 'with', elementsClone.length, 'elements');\n    onSave(floorPlan);\n    onOpenChange(false);\n  };\n\n  const selectedElementData = selectedElements.length === 1 ? elements.find(el => el.id === selectedElements[0]) : null;\n\n  // Enhanced 3D perspective transform for elements\n  const get3DTransform = (element: FloorPlanElement) => {\n    if (viewMode === '2d') return '';\n    \n    // Improved perspective for better 3D effect while staying in bounds\n    const depth = Math.min(element.y / canvasSize.height, 0.8); // Limit depth to prevent overflow\n    const scale = Math.max(0.7, 1 - (depth * 0.2)); // Less aggressive scaling\n    const skewX = depth * -5; // Reduced skew for subtlety\n    const translateY = -(depth * 10); // Reduced translation to stay in bounds\n    const rotateX = 30; // Fixed rotation angle for consistency\n    \n    return `perspective(1000px) rotateX(${rotateX}deg) scale(${scale}) skewX(${skewX}deg) translateY(${translateY}px)`;\n  };\n\n  const get3DCanvasTransform = () => {\n    const scaleValue = zoom / 100;\n    const baseTransform = `scale(${scaleValue})`;\n    if (viewMode === '2d') return baseTransform;\n    // Constrain 3D transform to prevent canvas overflow\n    return `${baseTransform} perspective(1000px) rotateX(20deg) translateZ(0)`;\n  };\n\n  const handleZoomIn = () => {\n    setZoom(prev => Math.min(prev + 25, 200));\n  };\n\n  const handleZoomOut = () => {\n    setZoom(prev => Math.max(prev - 25, 50));\n  };\n\n  // Enhanced realistic object shapes for 3D view\n  const renderObjectShape = (element: FloorPlanElement) => {\n    const baseStyle = {\n      width: '100%',\n      height: '100%',\n      position: 'absolute' as const,\n      top: 0,\n      left: 0,\n    };\n\n    const is3D = viewMode === '3d';\n\n    switch (element.type) {\n      case 'stage':\n        return (\n          <div style={baseStyle} className=\"relative\">\n            {is3D ? (\n              <>\n                {/* 3D Stage - Platform with elevated appearance */}\n                <div \n                  className=\"absolute bg-gray-700 border-2 border-gray-800\"\n                  style={{\n                    width: '100%',\n                    height: '100%',\n                    borderRadius: '4px',\n                    boxShadow: 'inset 0 2px 4px rgba(0,0,0,0.3), 0 4px 8px rgba(0,0,0,0.4)',\n                    background: 'linear-gradient(145deg, #4a5568, #2d3748)',\n                  }}\n                />\n                {/* Stage edge highlight */}\n                <div \n                  className=\"absolute border-t-2 border-gray-500\"\n                  style={{\n                    width: '100%',\n                    height: '4px',\n                    top: '2px',\n                    left: 0,\n                    borderRadius: '2px 2px 0 0'\n                  }}\n                />\n                {/* Stage front panel */}\n                <div \n                  className=\"absolute bg-gray-800\"\n                  style={{\n                    width: '100%',\n                    height: '8px',\n                    bottom: '-6px',\n                    left: 0,\n                    borderRadius: '0 0 4px 4px',\n                    boxShadow: '0 2px 4px rgba(0,0,0,0.6)'\n                  }}\n                />\n              </>\n            ) : (\n              <div \n                className=\"w-full h-full bg-gray-600 border-2 border-gray-700\"\n                style={{ borderRadius: '4px' }}\n              />\n            )}\n          </div>\n        );\n\n      case 'chair':\n        return (\n          <div style={baseStyle} className=\"relative\">\n            {is3D ? (\n              <>\n                {/* Ultra-realistic 3D Chair */}\n                {/* Chair back with detailed structure */}\n                <div \n                  className=\"absolute\"\n                  style={{\n                    width: '90%',\n                    height: '40%',\n                    top: '5%',\n                    left: '5%',\n                    background: 'linear-gradient(145deg, #8B4513, #654321)',\n                    borderRadius: '4px 4px 0 0',\n                    boxShadow: 'inset 2px 2px 4px rgba(139,69,19,0.3), inset -1px -1px 3px rgba(0,0,0,0.4), 0 3px 6px rgba(0,0,0,0.4)',\n                    border: '1px solid #654321',\n                  }}\n                />\n                {/* Chair back cushion */}\n                <div \n                  className=\"absolute\"\n                  style={{\n                    width: '75%',\n                    height: '30%',\n                    top: '10%',\n                    left: '12.5%',\n                    background: 'linear-gradient(145deg, #CD853F, #A0522D)',\n                    borderRadius: '3px',\n                    boxShadow: 'inset 1px 1px 2px rgba(205,133,63,0.3), 0 1px 3px rgba(0,0,0,0.3)',\n                  }}\n                />\n                \n                {/* Chair seat with realistic padding */}\n                <div \n                  className=\"absolute\"\n                  style={{\n                    width: '90%',\n                    height: '35%',\n                    top: '40%',\n                    left: '5%',\n                    background: 'linear-gradient(145deg, #D2691E, #A0522D)',\n                    borderRadius: '4px',\n                    boxShadow: 'inset 2px 2px 4px rgba(210,105,30,0.3), inset -2px -2px 4px rgba(0,0,0,0.3), 0 4px 8px rgba(0,0,0,0.4)',\n                    border: '1px solid #8B4513',\n                  }}\n                />\n                {/* Seat cushion detail */}\n                <div \n                  className=\"absolute\"\n                  style={{\n                    width: '80%',\n                    height: '25%',\n                    top: '45%',\n                    left: '10%',\n                    background: 'linear-gradient(135deg, #DEB887, #CD853F)',\n                    borderRadius: '2px',\n                    boxShadow: 'inset 1px 1px 2px rgba(222,184,135,0.4)',\n                  }}\n                />\n                \n                {/* Four realistic chair legs */}\n                <div \n                  className=\"absolute bg-gradient-to-b from-amber-800 to-amber-900\"\n                  style={{\n                    width: '6%',\n                    height: '30%',\n                    bottom: 0,\n                    left: '15%',\n                    borderRadius: '0 0 2px 2px',\n                    boxShadow: '1px 1px 2px rgba(0,0,0,0.4)'\n                  }}\n                />\n                <div \n                  className=\"absolute bg-gradient-to-b from-amber-800 to-amber-900\"\n                  style={{\n                    width: '6%',\n                    height: '30%',\n                    bottom: 0,\n                    right: '15%',\n                    borderRadius: '0 0 2px 2px',\n                    boxShadow: '1px 1px 2px rgba(0,0,0,0.4)'\n                  }}\n                />\n                <div \n                  className=\"absolute bg-gradient-to-b from-amber-800 to-amber-900\"\n                  style={{\n                    width: '6%',\n                    height: '30%',\n                    bottom: 0,\n                    left: '79%',\n                    borderRadius: '0 0 2px 2px',\n                    boxShadow: '1px 1px 2px rgba(0,0,0,0.4)'\n                  }}\n                />\n                <div \n                  className=\"absolute bg-gradient-to-b from-amber-800 to-amber-900\"\n                  style={{\n                    width: '6%',\n                    height: '30%',\n                    bottom: 0,\n                    right: '79%',\n                    borderRadius: '0 0 2px 2px',\n                    boxShadow: '1px 1px 2px rgba(0,0,0,0.4)'\n                  }}\n                />\n                \n                {/* Chair armrests */}\n                <div \n                  className=\"absolute\"\n                  style={{\n                    width: '8%',\n                    height: '25%',\n                    top: '45%',\n                    left: '0%',\n                    background: 'linear-gradient(145deg, #8B4513, #654321)',\n                    borderRadius: '2px',\n                    boxShadow: '1px 1px 3px rgba(0,0,0,0.4)'\n                  }}\n                />\n                <div \n                  className=\"absolute\"\n                  style={{\n                    width: '8%',\n                    height: '25%',\n                    top: '45%',\n                    right: '0%',\n                    background: 'linear-gradient(145deg, #8B4513, #654321)',\n                    borderRadius: '2px',\n                    boxShadow: '1px 1px 3px rgba(0,0,0,0.4)'\n                  }}\n                />\n              </>\n            ) : (\n              <>\n                {/* 2D Chair - Simplified but recognizable */}\n                <div \n                  className=\"absolute bg-amber-800 border border-amber-900\"\n                  style={{\n                    width: '100%',\n                    height: '30%',\n                    top: 0,\n                    left: 0,\n                    borderRadius: '2px 2px 0 0'\n                  }}\n                />\n                <div \n                  className=\"absolute bg-amber-700 border border-amber-900\"\n                  style={{\n                    width: '100%',\n                    height: '70%',\n                    bottom: 0,\n                    left: 0,\n                    borderRadius: '0 0 2px 2px'\n                  }}\n                />\n              </>\n            )}\n          </div>\n        );\n\n      case 'table':\n        if (element.shape === 'circle') {\n          return (\n            <div style={baseStyle}>\n              {is3D ? (\n                <>\n                  {/* Ultra-realistic round table */}\n                  {/* Table top with wood grain effect */}\n                  <div \n                    className=\"absolute rounded-full\"\n                    style={{\n                      width: '100%',\n                      height: '100%',\n                      background: 'radial-gradient(ellipse at 30% 30%, #D2691E, #8B4513, #654321)',\n                      boxShadow: 'inset 3px 3px 8px rgba(139,69,19,0.3), inset -3px -3px 8px rgba(0,0,0,0.4), 0 6px 12px rgba(0,0,0,0.4)',\n                      border: '2px solid #654321',\n                    }}\n                  />\n                  {/* Wood grain lines */}\n                  <div \n                    className=\"absolute rounded-full\"\n                    style={{\n                      width: '90%',\n                      height: '90%',\n                      top: '5%',\n                      left: '5%',\n                      background: 'conic-gradient(from 45deg, rgba(139,69,19,0.2) 0deg, transparent 60deg, rgba(139,69,19,0.2) 120deg, transparent 180deg, rgba(139,69,19,0.2) 240deg, transparent 300deg)',\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {/* Table edge highlight */}\n                  <div \n                    className=\"absolute rounded-full\"\n                    style={{\n                      width: '96%',\n                      height: '96%',\n                      top: '2%',\n                      left: '2%',\n                      border: '1px solid rgba(210,105,30,0.6)',\n                      boxShadow: 'inset 0 2px 4px rgba(210,105,30,0.3)',\n                    }}\n                  />\n                  \n                  {/* Center pedestal base */}\n                  <div \n                    className=\"absolute rounded-full\"\n                    style={{\n                      width: '25%',\n                      height: '25%',\n                      top: '37.5%',\n                      left: '37.5%',\n                      background: 'linear-gradient(145deg, #8B4513, #654321)',\n                      boxShadow: '0 4px 8px rgba(0,0,0,0.5), inset 1px 1px 3px rgba(139,69,19,0.3)',\n                      border: '1px solid #654321',\n                    }}\n                  />\n                </>\n              ) : (\n                <div \n                  className=\"absolute bg-amber-800 border-2 border-amber-900 rounded-full\"\n                  style={{\n                    width: '100%',\n                    height: '100%',\n                    background: 'radial-gradient(circle at 30% 30%, #a16207, #92400e)'\n                  }}\n                />\n              )}\n            </div>\n          );\n        } else {\n          return (\n            <div style={baseStyle}>\n              {is3D ? (\n                <>\n                  {/* Ultra-realistic rectangular table */}\n                  {/* Table top with detailed wood surface */}\n                  <div \n                    className=\"absolute\"\n                    style={{\n                      width: '100%',\n                      height: '100%',\n                      background: 'linear-gradient(135deg, #D2691E 0%, #8B4513 40%, #654321 100%)',\n                      borderRadius: '6px',\n                      boxShadow: 'inset 3px 3px 8px rgba(139,69,19,0.3), inset -3px -3px 8px rgba(0,0,0,0.4), 0 6px 12px rgba(0,0,0,0.4)',\n                      border: '2px solid #654321',\n                    }}\n                  />\n                  {/* Wood grain pattern */}\n                  <div \n                    className=\"absolute\"\n                    style={{\n                      width: '95%',\n                      height: '95%',\n                      top: '2.5%',\n                      left: '2.5%',\n                      background: 'repeating-linear-gradient(90deg, rgba(139,69,19,0.1) 0px, transparent 2px, rgba(139,69,19,0.1) 4px, transparent 8px)',\n                      borderRadius: '4px',\n                    }}\n                  />\n                  {/* Table edge bevel */}\n                  <div \n                    className=\"absolute\"\n                    style={{\n                      width: '98%',\n                      height: '98%',\n                      top: '1%',\n                      left: '1%',\n                      border: '1px solid rgba(210,105,30,0.6)',\n                      borderRadius: '5px',\n                      boxShadow: 'inset 0 2px 4px rgba(210,105,30,0.3)',\n                    }}\n                  />\n                  \n                  {/* Four detailed table legs */}\n                  <div \n                    className=\"absolute\"\n                    style={{\n                      width: '8%',\n                      height: '100%',\n                      left: '8%',\n                      background: 'linear-gradient(180deg, #8B4513, #654321)',\n                      boxShadow: '2px 2px 4px rgba(0,0,0,0.4), inset 1px 1px 2px rgba(139,69,19,0.3)',\n                      borderRadius: '0 0 3px 3px',\n                    }}\n                  />\n                  <div \n                    className=\"absolute\"\n                    style={{\n                      width: '8%',\n                      height: '100%',\n                      right: '8%',\n                      background: 'linear-gradient(180deg, #8B4513, #654321)',\n                      boxShadow: '2px 2px 4px rgba(0,0,0,0.4), inset 1px 1px 2px rgba(139,69,19,0.3)',\n                      borderRadius: '0 0 3px 3px',\n                    }}\n                  />\n                  <div \n                    className=\"absolute\"\n                    style={{\n                      width: '8%',\n                      height: '100%',\n                      left: '84%',\n                      background: 'linear-gradient(180deg, #8B4513, #654321)',\n                      boxShadow: '2px 2px 4px rgba(0,0,0,0.4), inset 1px 1px 2px rgba(139,69,19,0.3)',\n                      borderRadius: '0 0 3px 3px',\n                    }}\n                  />\n                  <div \n                    className=\"absolute\"\n                    style={{\n                      width: '8%',\n                      height: '100%',\n                      right: '84%',\n                      background: 'linear-gradient(180deg, #8B4513, #654321)',\n                      boxShadow: '2px 2px 4px rgba(0,0,0,0.4), inset 1px 1px 2px rgba(139,69,19,0.3)',\n                      borderRadius: '0 0 3px 3px',\n                    }}\n                  />\n                </>\n              ) : (\n                <div \n                  className=\"absolute bg-amber-800 border-2 border-amber-900 rounded\"\n                  style={{\n                    width: '100%',\n                    height: '100%',\n                    background: 'linear-gradient(135deg, #a16207, #92400e)'\n                  }}\n                />\n              )}\n            </div>\n          );\n        }\n\n      case 'bar':\n        return (\n          <div style={baseStyle}>\n            {is3D ? (\n              <>\n                {/* Ultra-realistic bar counter */}\n                {/* Main bar surface with marble-like finish */}\n                <div \n                  className=\"absolute\"\n                  style={{\n                    width: '100%',\n                    height: '100%',\n                    background: 'linear-gradient(135deg, #2C3E50 0%, #34495E 30%, #1A252F 100%)',\n                    borderRadius: '8px 8px 4px 4px',\n                    boxShadow: 'inset 3px 3px 8px rgba(44,62,80,0.3), inset -3px -3px 8px rgba(0,0,0,0.4), 0 8px 16px rgba(0,0,0,0.5)',\n                    border: '2px solid #1A252F',\n                  }}\n                />\n                {/* Marble pattern */}\n                <div \n                  className=\"absolute\"\n                  style={{\n                    width: '95%',\n                    height: '95%',\n                    top: '2.5%',\n                    left: '2.5%',\n                    background: 'repeating-linear-gradient(45deg, rgba(255,255,255,0.05) 0px, transparent 3px, rgba(255,255,255,0.05) 6px, transparent 12px)',\n                    borderRadius: '6px',\n                  }}\n                />\n                {/* Bar edge with brass trim */}\n                <div \n                  className=\"absolute\"\n                  style={{\n                    width: '100%',\n                    height: '8%',\n                    top: '0%',\n                    left: '0%',\n                    background: 'linear-gradient(135deg, #B8860B, #DAA520, #B8860B)',\n                    borderRadius: '8px 8px 0 0',\n                    boxShadow: 'inset 1px 1px 3px rgba(218,165,32,0.3), 0 2px 4px rgba(0,0,0,0.3)',\n                  }}\n                />\n                \n                {/* Bar base/cabinet */}\n                <div \n                  className=\"absolute\"\n                  style={{\n                    width: '100%',\n                    height: '25%',\n                    bottom: '0%',\n                    left: '0%',\n                    background: 'linear-gradient(180deg, #1A252F, #0F1419)',\n                    borderRadius: '0 0 4px 4px',\n                    boxShadow: 'inset 2px 2px 4px rgba(15,20,25,0.3), 0 4px 8px rgba(0,0,0,0.5)',\n                  }}\n                />\n                \n                {/* Realistic bar stools */}\n                <div \n                  className=\"absolute rounded-full\"\n                  style={{ \n                    top: '-12px', \n                    left: '15%',\n                    width: '12px',\n                    height: '12px',\n                    background: 'linear-gradient(145deg, #8B4513, #654321)',\n                    boxShadow: '1px 1px 3px rgba(0,0,0,0.4)',\n                    border: '1px solid #654321',\n                  }}\n                />\n                {/* Stool back */}\n                <div \n                  className=\"absolute\"\n                  style={{ \n                    top: '-18px', \n                    left: '16%',\n                    width: '10px',\n                    height: '8px',\n                    background: 'linear-gradient(145deg, #8B4513, #654321)',\n                    borderRadius: '2px 2px 0 0',\n                    boxShadow: '1px 1px 2px rgba(0,0,0,0.3)',\n                  }}\n                />\n                \n                <div \n                  className=\"absolute rounded-full\"\n                  style={{ \n                    top: '-12px', \n                    right: '15%',\n                    width: '12px',\n                    height: '12px',\n                    background: 'linear-gradient(145deg, #8B4513, #654321)',\n                    boxShadow: '1px 1px 3px rgba(0,0,0,0.4)',\n                    border: '1px solid #654321',\n                  }}\n                />\n                {/* Stool back */}\n                <div \n                  className=\"absolute\"\n                  style={{ \n                    top: '-18px', \n                    right: '16%',\n                    width: '10px',\n                    height: '8px',\n                    background: 'linear-gradient(145deg, #8B4513, #654321)',\n                    borderRadius: '2px 2px 0 0',\n                    boxShadow: '1px 1px 2px rgba(0,0,0,0.3)',\n                  }}\n                />\n                \n                {/* Center stool */}\n                <div \n                  className=\"absolute rounded-full\"\n                  style={{ \n                    top: '-12px', \n                    left: '44%',\n                    width: '12px',\n                    height: '12px',\n                    background: 'linear-gradient(145deg, #8B4513, #654321)',\n                    boxShadow: '1px 1px 3px rgba(0,0,0,0.4)',\n                    border: '1px solid #654321',\n                  }}\n                />\n                <div \n                  className=\"absolute\"\n                  style={{ \n                    top: '-18px', \n                    left: '45%',\n                    width: '10px',\n                    height: '8px',\n                    background: 'linear-gradient(145deg, #8B4513, #654321)',\n                    borderRadius: '2px 2px 0 0',\n                    boxShadow: '1px 1px 2px rgba(0,0,0,0.3)',\n                  }}\n                />\n              </>\n            ) : (\n              <div \n                className=\"absolute bg-slate-800 border-2 border-slate-900 rounded\"\n                style={{\n                  width: '100%',\n                  height: '100%',\n                  background: 'linear-gradient(135deg, #1e293b, #0f172a)'\n                }}\n              />\n            )}\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-5xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Layout className=\"w-5 h-5\" />\n            Floor Plan Designer - {setupStyle?.name}\n          </DialogTitle>\n          <DialogDescription>\n            Design the floor plan layout for this setup style. This will serve as a template when applying this setup to venues.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Tools Panel */}\n          <div className=\"space-y-4\">\n            {/* Templates */}\n            <Card className=\"p-4\">\n              <div className=\"space-y-3\">\n                <Label className=\"text-sm font-medium\">Quick Templates</Label>\n                <div className=\"space-y-2\">\n                  {TEMPLATES.map((template) => (\n                    <Button\n                      key={template.name}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"w-full justify-start\"\n                      onClick={() => loadTemplate(template)}\n                    >\n                      <Layout className=\"w-4 h-4 mr-2\" />\n                      {template.name}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            </Card>\n\n            {/* Multi-Selection Tools */}\n            {selectedElements.length > 1 && (\n              <Card className=\"p-4\">\n                <div className=\"space-y-3\">\n                  <Label className=\"text-sm font-medium\">Multi-Selection ({selectedElements.length})</Label>\n                  \n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={duplicateSelectedElements}\n                    >\n                      <Copy className=\"w-4 h-4 mr-1\" />\n                      Duplicate\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={deleteSelectedElements}\n                      className=\"text-red-600 hover:text-red-700\"\n                    >\n                      <Trash2 className=\"w-4 h-4 mr-1\" />\n                      Delete\n                    </Button>\n                  </div>\n\n                  <Separator />\n                  \n                  <div className=\"space-y-2\">\n                    <Label className=\"text-xs\">Alignment</Label>\n                    <div className=\"grid grid-cols-3 gap-1\">\n                      <Button variant=\"outline\" size=\"sm\" onClick={() => alignElements('left')}>L</Button>\n                      <Button variant=\"outline\" size=\"sm\" onClick={() => alignElements('center')}>C</Button>\n                      <Button variant=\"outline\" size=\"sm\" onClick={() => alignElements('right')}>R</Button>\n                      <Button variant=\"outline\" size=\"sm\" onClick={() => alignElements('top')}>T</Button>\n                      <Button variant=\"outline\" size=\"sm\" onClick={() => alignElements('middle')}>M</Button>\n                      <Button variant=\"outline\" size=\"sm\" onClick={() => alignElements('bottom')}>B</Button>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            )}\n\n            {/* Grid & Snap Settings */}\n            <Card className=\"p-4\">\n              <div className=\"space-y-3\">\n                <Label className=\"text-sm font-medium\">Grid & Snap</Label>\n                \n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-xs\">Show Grid</Label>\n                  <Switch checked={showGrid} onCheckedChange={setShowGrid} />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-xs\">Snap to Grid</Label>\n                  <Switch checked={snapToGrid} onCheckedChange={setSnapToGrid} />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label className=\"text-xs\">Grid Size: {gridSize}px</Label>\n                  <Slider\n                    value={[gridSize]}\n                    onValueChange={(value) => setGridSize(value[0])}\n                    min={10}\n                    max={50}\n                    step={5}\n                    className=\"w-full\"\n                  />\n                </div>\n              </div>\n            </Card>\n            <Card className=\"p-4\">\n              <div className=\"space-y-3\">\n                <Label className=\"text-sm font-medium\">Mode</Label>\n                <div className=\"grid grid-cols-3 gap-2\">\n                  <Button\n                    variant={mode === 'select' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setMode('select')}\n                  >\n                    <MousePointer2 className=\"w-4 h-4 mr-1\" />\n                    Select\n                  </Button>\n                  <Button\n                    variant={mode === 'add' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setMode('add')}\n                  >\n                    <Plus className=\"w-4 h-4 mr-1\" />\n                    Add\n                  </Button>\n                  <Button\n                    variant={mode === 'pan' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setMode('pan')}\n                  >\n                    <Move className=\"w-4 h-4 mr-1\" />\n                    Pan\n                  </Button>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-4\">\n              <div className=\"space-y-3\">\n                <Label className=\"text-sm font-medium\">View Mode</Label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <Button\n                    variant={viewMode === '2d' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setViewMode('2d')}\n                  >\n                    <Square className=\"w-4 h-4 mr-1\" />\n                    2D\n                  </Button>\n                  <Button\n                    variant={viewMode === '3d' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setViewMode('3d')}\n                  >\n                    <Box className=\"w-4 h-4 mr-1\" />\n                    3D\n                  </Button>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-4\">\n              <div className=\"space-y-3\">\n                <Label className=\"text-sm font-medium\">Zoom ({zoom}%)</Label>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleZoomOut}\n                    disabled={zoom <= 50}\n                  >\n                    <ZoomOut className=\"w-4 h-4\" />\n                  </Button>\n                  <div className=\"flex-1 text-center text-xs\">{zoom}%</div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleZoomIn}\n                    disabled={zoom >= 200}\n                  >\n                    <ZoomIn className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </Card>\n\n            {mode === 'add' && (\n              <Card className=\"p-4 border-blue-200 bg-blue-50\">\n                <div className=\"mb-3 p-2 bg-blue-100 rounded border border-blue-200\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <div className=\"w-2 h-2 bg-blue-600 rounded-full animate-pulse\"></div>\n                    <span className=\"text-xs font-medium text-blue-800\">ADD MODE ACTIVE</span>\n                  </div>\n                  <p className=\"text-xs text-blue-700\">\n                    1. Select object type below → 2. Click anywhere on floor plan to place\n                  </p>\n                </div>\n                <Label className=\"text-sm font-medium mb-3 block\">Add Element</Label>\n                <div className=\"space-y-3\">\n                  {Object.entries(\n                    ELEMENT_TYPES.reduce((acc, type) => {\n                      if (!acc[type.category]) acc[type.category] = [];\n                      acc[type.category].push(type);\n                      return acc;\n                    }, {} as Record<string, typeof ELEMENT_TYPES>)\n                  ).map(([category, types]) => (\n                    <div key={category}>\n                      <Label className=\"text-xs text-muted-foreground mb-2 block\">{category}</Label>\n                      <div className=\"space-y-1\">\n                        {types.map((type) => (\n                          <Button\n                            key={`${type.type}-${type.shape}`}\n                            variant={selectedType === type ? 'default' : 'outline'}\n                            size=\"sm\"\n                            className=\"w-full justify-start\"\n                            onClick={() => setSelectedType(type)}\n                          >\n                            <type.icon className=\"w-4 h-4 mr-2\" />\n                            {type.label}\n                          </Button>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </Card>\n            )}\n\n            {selectedElementData && (\n              <Card className=\"p-4\">\n                <div className=\"space-y-3\">\n                  <Label className=\"text-sm font-medium\">Selected Element</Label>\n                  \n                  <div className=\"space-y-2\">\n                    <Label className=\"text-xs\">Label</Label>\n                    <Input\n                      value={selectedElementData?.label || ''}\n                      onChange={(e) => updateSelectedElements({ label: e.target.value })}\n                      placeholder=\"Element label\"\n                      className=\"h-8\"\n                    />\n                  </div>\n\n                  {selectedElementData?.type === 'table' && (\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-xs\">Seats</Label>\n                      <Input\n                        type=\"number\"\n                        value={selectedElementData?.seats || 0}\n                        onChange={(e) => updateSelectedElements({ seats: parseInt(e.target.value) || 0 })}\n                        min=\"1\"\n                        max=\"20\"\n                        className=\"h-8\"\n                      />\n                    </div>\n                  )}\n\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={rotateSelectedElements}\n                    >\n                      <RotateCw className=\"w-4 h-4 mr-1\" />\n                      Rotate\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => flipSelectedElements('horizontal')}\n                    >\n                      <FlipHorizontal className=\"w-4 h-4 mr-1\" />\n                      Flip H\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => flipSelectedElements('vertical')}\n                    >\n                      <FlipVertical className=\"w-4 h-4 mr-1\" />\n                      Flip V\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={deleteSelectedElements}\n                      className=\"text-red-600 hover:text-red-700\"\n                    >\n                      <Trash2 className=\"w-4 h-4 mr-1\" />\n                      Delete\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            )}\n          </div>\n\n          {/* Canvas */}\n          <div className=\"lg:col-span-3\">\n            <Card className=\"p-4\">\n              <div className=\"mb-4 flex items-center justify-between\">\n                <Label className=\"text-sm font-medium\">Canvas</Label>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={undo}\n                    disabled={historyIndex <= 0}\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-1\" />\n                    Undo\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={redo}\n                    disabled={historyIndex >= history.length - 1}\n                  >\n                    <RotateCw className=\"w-4 h-4 mr-1\" />\n                    Redo\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setElements([]);\n                      setSelectedElements([]);\n                    }}\n                  >\n                    <Trash2 className=\"w-4 h-4 mr-1\" />\n                    Clear All\n                  </Button>\n                </div>\n              </div>\n              \n              {/* Canvas Container with proper zoom containment */}\n              <div className=\"relative w-full h-[600px] border-2 border-dashed border-slate-300 overflow-auto bg-slate-100\">\n                <div className=\"flex items-center justify-center min-h-full p-8\">\n                  <div\n                    ref={canvasRef}\n                    className={cn(\n                      \"relative transition-transform duration-300 border border-slate-400\",\n                      mode === 'add' ? \"cursor-crosshair\" : \"cursor-default\",\n                      viewMode === '3d' ? \"bg-gradient-to-b from-slate-100 to-slate-300\" : \"bg-slate-50\"\n                    )}\n                    style={{\n                      width: canvasSize.width,\n                      height: canvasSize.height,\n                      transform: get3DCanvasTransform(),\n                      transformOrigin: 'center center',\n                      // Create space for zoom expansion\n                      minWidth: canvasSize.width,\n                      minHeight: canvasSize.height,\n                    }}\n                onClick={handleCanvasClick}\n                onMouseDown={handleCanvasMouseDown}\n                onMouseMove={(e) => {\n                  handleMouseMove(e);\n                  handleCanvasMouseMove(e);\n                }}\n                onMouseUp={() => {\n                  handleMouseUp();\n                  handleCanvasMouseUp();\n                }}\n                onMouseLeave={() => {\n                  handleMouseUp();\n                  handleCanvasMouseUp();\n                }}\n              >\n                {/* Grid pattern */}\n                {showGrid && (\n                  <div \n                    className={cn(\n                      \"absolute inset-0\",\n                      viewMode === '3d' ? \"opacity-10\" : \"opacity-20\"\n                    )}\n                    style={{\n                      backgroundImage: `\n                        linear-gradient(to right, #cbd5e1 1px, transparent 1px),\n                        linear-gradient(to bottom, #cbd5e1 1px, transparent 1px)\n                      `,\n                      backgroundSize: `${gridSize}px ${gridSize}px`\n                    }}\n                  />\n                )}\n\n                {/* Selection box */}\n                {isMultiSelecting && selectionBox && (\n                  <div\n                    className=\"absolute border-2 border-blue-500 bg-blue-100 bg-opacity-20 pointer-events-none z-30\"\n                    style={{\n                      left: selectionBox.x,\n                      top: selectionBox.y,\n                      width: selectionBox.width,\n                      height: selectionBox.height,\n                    }}\n                  />\n                )}\n\n                {/* 3D Floor effect */}\n                {viewMode === '3d' && (\n                  <div \n                    className=\"absolute inset-0 opacity-30\"\n                    style={{\n                      background: 'linear-gradient(to bottom, rgba(148, 163, 184, 0.1) 0%, rgba(148, 163, 184, 0.4) 100%)'\n                    }}\n                  />\n                )}\n\n                {/* Elements */}\n                {elements.map((element) => {\n                  const depth = element.y / canvasSize.height;\n                  const shadowSize = viewMode === '3d' ? Math.max(2, 8 * (1 - depth)) : 0;\n                  \n                  return (\n                    <div\n                      key={element.id}\n                      className={cn(\n                        \"absolute border-2 flex items-center justify-center text-xs font-medium text-white select-none transition-all duration-200\",\n                        selectedElements.includes(element.id) ? \"border-blue-500 ring-2 ring-blue-200 cursor-move\" : \"border-gray-400 cursor-pointer\",\n                        isDragging && selectedElements.includes(element.id) ? \"cursor-grabbing\" : \"\",\n                        viewMode === '3d' && \"shadow-lg\"\n                      )}\n                      style={{\n                        left: element.x,\n                        top: element.y,\n                        width: element.width,\n                        height: element.height,\n                        backgroundColor: element.color,\n                        borderRadius: element.shape === 'circle' ? '50%' : '4px',\n                        transform: viewMode === '3d' \n                          ? `rotate(${element.rotation}deg) ${get3DTransform(element)}`\n                          : `rotate(${element.rotation}deg)`,\n                        zIndex: selectedElements.includes(element.id) ? 10 : Math.floor((1 - depth) * 5) + 1,\n                        boxShadow: viewMode === '3d' \n                          ? `0 ${shadowSize}px ${shadowSize * 2}px rgba(0,0,0,0.3)`\n                          : 'none',\n                        filter: viewMode === '3d' ? `brightness(${1 - depth * 0.2})` : 'none',\n                      }}\n                      onClick={(e) => handleElementClick(e, element.id)}\n                      onMouseDown={(e) => handleElementMouseDown(e, element.id)}\n                    >\n                      {/* Render realistic object shapes */}\n                      {renderObjectShape(element)}\n                      \n                      {/* Label overlay */}\n                      <span className=\"absolute inset-0 flex items-center justify-center text-center text-xs leading-tight pointer-events-none text-white font-semibold z-10\" style={{ textShadow: '1px 1px 2px rgba(0,0,0,0.8)' }}>\n                        {element.label}\n                        {element.seats && <br />}\n                        {element.seats && `${element.seats} seats`}\n                      </span>\n                      \n                      {/* 3D Height indicator */}\n                      {viewMode === '3d' && (element.type === 'table' || element.type === 'bar') && (\n                        <div \n                          className=\"absolute inset-0 border-2 border-gray-600 opacity-30\"\n                          style={{\n                            borderRadius: element.shape === 'circle' ? '50%' : '4px',\n                            transform: 'translateZ(20px) translateY(-2px)',\n                            backgroundColor: 'transparent',\n                            borderTop: '2px solid rgba(0,0,0,0.3)',\n                          }}\n                        />\n                      )}\n                    </div>\n                  );\n                })}\n\n                {mode === 'add' && (\n                  <div className=\"absolute top-2 left-2 bg-blue-600 text-white px-2 py-1 rounded text-xs z-20\">\n                    Click to place {selectedType.label}\n                  </div>\n                )}\n\n                {viewMode === '3d' && (\n                  <div className=\"absolute top-2 right-2 bg-green-600 text-white px-2 py-1 rounded text-xs z-20 flex items-center gap-1\">\n                    <Eye className=\"w-3 h-3\" />\n                    3D Preview\n                  </div>\n                )}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mt-4 grid grid-cols-1 md:grid-cols-2 gap-2 text-xs text-slate-600\">\n                <div>\n                  <p>• <strong>Add Individual Objects:</strong> Select object type → Click \"Add\" mode → Click anywhere to place</p>\n                  <p>• <strong>Continuous Adding:</strong> Add mode stays active - keep clicking to add multiple objects</p>\n                  <p>• <strong>Multi-select:</strong> Ctrl+Click elements or drag selection box</p>\n                  <p>• <strong>Move Objects:</strong> Select mode → Click and drag objects around</p>\n                </div>\n                <div>\n                  <p>• <strong>Shortcuts:</strong> Ctrl+C/V (copy/paste), Del (delete)</p>\n                  <p>• <strong>3D View:</strong> Ultra-realistic furniture with detailed materials</p>\n                  <p>• <strong>Grid Snap:</strong> Auto-align to grid points for precise placement</p>\n                  <p>• <strong>Templates:</strong> Quick layout presets or start from scratch</p>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end gap-3 pt-4 border-t\">\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n            Cancel\n          </Button>\n          <Button onClick={handleSave}>\n            <Save className=\"w-4 h-4 mr-2\" />\n            Save Floor Plan\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":66212},"client/src/components/proposals/email-preview-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Send, User, Calendar, MapPin, Users, DollarSign } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\n\ninterface EventDate {\n  date: Date;\n  startTime: string;\n  endTime: string;\n  venue: string;\n  space: string;\n  guestCount: number;\n  totalAmount: number;\n}\n\ninterface EmailPreviewModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  eventData: {\n    eventName: string;\n    customerId: string;\n    eventDates: EventDate[];\n    totalAmount: number;\n    customerData?: {\n      name: string;\n      email: string;\n      company?: string;\n    };\n  };\n  onSend: (proposalId: string) => void;\n}\n\nexport function EmailPreviewModal({\n  open,\n  onOpenChange,\n  eventData,\n  onSend\n}: EmailPreviewModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [emailSubject, setEmailSubject] = useState(\n    `Event Proposal: ${eventData.eventName}`\n  );\n  const [emailMessage, setEmailMessage] = useState(`\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <div style=\"background: #3b82f6; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0;\">\n        <h1 style=\"margin: 0;\">Venuine Events</h1>\n        <p style=\"margin: 5px 0 0 0;\">Your Event Proposal</p>\n      </div>\n      \n      <div style=\"background: #f8fafc; padding: 30px; border-radius: 0 0 8px 8px;\">\n        <h2 style=\"color: #1f2937;\">Dear ${eventData.customerData?.name || 'Valued Customer'},</h2>\n        \n        <p>Thank you for considering Venuine Events for your upcoming event. We're excited to present you with a customized proposal for <strong>${eventData.eventName}</strong>.</p>\n        \n        <div style=\"background: white; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #3b82f6;\">\n          <h3 style=\"color: #1f2937; margin-top: 0;\">Event Details</h3>\n          ${eventData.eventDates.map(eventDate => `\n            <div style=\"margin-bottom: 15px; padding-bottom: 15px; border-bottom: 1px solid #e5e7eb;\">\n              <p><strong>📅 Date:</strong> ${eventDate.date instanceof Date && !isNaN(eventDate.date.getTime()) ? format(eventDate.date, 'MMMM d, yyyy') : 'Invalid Date'}</p>\n              <p><strong>🕐 Time:</strong> ${eventDate.startTime} - ${eventDate.endTime}</p>\n              <p><strong>📍 Location:</strong> ${eventDate.venue} - ${eventDate.space}</p>\n              <p><strong>👥 Guest Count:</strong> ${eventDate.guestCount} guests</p>\n            </div>\n          `).join('')}\n          \n          <div style=\"margin-top: 20px; padding: 15px; background: #ecfdf5; border-radius: 6px; border: 1px solid #10b981;\">\n            <p style=\"margin: 0; font-size: 18px; font-weight: bold; color: #065f46;\">\n              💰 Total Investment: $${eventData.totalAmount.toFixed(2)}\n            </p>\n          </div>\n        </div>\n        \n        <p>This proposal includes all the details and services we've discussed to make your event memorable and successful. Our experienced team will be with you every step of the way to ensure everything runs smoothly.</p>\n        \n        <p>Please review the complete proposal details and let us know if you have any questions or would like to make any adjustments. We're here to make your vision come to life!</p>\n        \n        <p>Best regards,<br>\n        <strong>The Venuine Events Team</strong></p>\n      </div>\n      \n      <div style=\"text-align: center; margin-top: 20px; padding: 15px; color: #6b7280; font-size: 12px;\">\n        <p>This proposal was generated by Venuine Event Management System</p>\n      </div>\n    </div>\n  `);\n\n  const sendEmailMutation = useMutation({\n    mutationFn: async (emailData: any) => {\n      return await apiRequest(\"/api/proposals/send-email\", {\n        method: \"POST\",\n        body: JSON.stringify(emailData),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Email Sent Successfully\",\n        description: \"Your proposal has been sent to the customer and logged in communications.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/communications\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/proposals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] }); // Refresh bookings to show tentative booking\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      console.error(\"Email sending failed:\", error);\n      toast({\n        title: \"Email Failed\",\n        description: error instanceof Error ? error.message : \"Failed to send email. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSendEmail = async () => {\n    if (!eventData.customerData?.email) {\n      toast({\n        title: \"Missing Email\",\n        description: \"Customer email address is required to send the proposal.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check if email is configured before attempting to send\n    try {\n      const emailStatusResponse = await apiRequest(\"GET\", \"/api/gmail/status\");\n      const emailStatus = await emailStatusResponse.json();\n      \n      if (!emailStatus.configured) {\n        toast({\n          title: \"Email Not Configured\",\n          description: \"Please set up Gmail credentials in Settings > Integrations before sending proposals.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    } catch (error) {\n      toast({\n        title: \"Email Configuration Error\",\n        description: \"Unable to verify email configuration. Please check Settings > Integrations.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Create a temporary proposal to get an ID (in a real app, this might be handled differently)\n    const proposalId = `proposal_${Date.now()}`;\n    \n    const emailData = {\n      proposalId: proposalId,\n      customerId: eventData.customerId,\n      emailData: {\n        to: eventData.customerData.email,\n        subject: emailSubject,\n        message: emailMessage,\n        proposalViewLink: `${window.location.origin}/proposals/${proposalId}` // This would be a real link in production\n      },\n      // Include event data to create tentative booking\n      eventData: {\n        eventName: eventData.eventName || \"Event Proposal\",\n        eventType: \"general\",\n        eventDate: eventData.eventDates?.[0]?.date || new Date(),\n        startTime: eventData.eventDates?.[0]?.startTime || \"09:00\",\n        endTime: eventData.eventDates?.[0]?.endTime || \"17:00\",\n        guestCount: eventData.eventDates?.[0]?.guestCount || 50,\n        venueId: null, // Will be set when customer selects venue\n        spaceId: null  // Will be set when customer selects space\n      }\n    };\n\n    sendEmailMutation.mutate(emailData);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Send className=\"h-5 w-5\" />\n            Email Preview & Send\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Email Configuration */}\n          <div className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Email Configuration</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"email-to\">To</Label>\n                  <Input\n                    id=\"email-to\"\n                    value={eventData.customerData?.email || \"\"}\n                    disabled\n                    className=\"bg-gray-50\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"email-subject\">Subject</Label>\n                  <Input\n                    id=\"email-subject\"\n                    value={emailSubject}\n                    onChange={(e) => setEmailSubject(e.target.value)}\n                    placeholder=\"Event Proposal Subject\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"email-message\">Email Message</Label>\n                  <Textarea\n                    id=\"email-message\"\n                    value={emailMessage}\n                    onChange={(e) => setEmailMessage(e.target.value)}\n                    rows={12}\n                    className=\"font-mono text-sm\"\n                    placeholder=\"Email content with HTML formatting...\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <User className=\"h-4 w-4\" />\n                  Customer Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Name:</span>\n                  <span>{eventData.customerData?.name || 'N/A'}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Email:</span>\n                  <span>{eventData.customerData?.email || 'N/A'}</span>\n                </div>\n                {eventData.customerData?.company && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Company:</span>\n                    <span>{eventData.customerData.company}</span>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Email Preview */}\n          <div className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Email Preview</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div \n                  className=\"border rounded-lg p-4 bg-white max-h-[400px] overflow-y-auto\"\n                  dangerouslySetInnerHTML={{ __html: emailMessage }}\n                />\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <Calendar className=\"h-4 w-4\" />\n                  Event Summary\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"font-medium\">{eventData.eventName}</span>\n                  <Badge variant=\"outline\">{eventData.eventDates.length} event{eventData.eventDates.length > 1 ? 's' : ''}</Badge>\n                </div>\n                \n                <Separator />\n                \n                {eventData.eventDates.map((eventDate, index) => (\n                  <div key={index} className=\"space-y-2 p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <Calendar className=\"h-3 w-3\" />\n                      <span>{eventDate.date instanceof Date && !isNaN(eventDate.date.getTime()) ? format(eventDate.date, 'MMM d, yyyy') : 'Invalid Date'}</span>\n                      <span className=\"text-gray-500\">•</span>\n                      <span>{eventDate.startTime} - {eventDate.endTime}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <MapPin className=\"h-3 w-3\" />\n                      <span>{eventDate.venue} - {eventDate.space}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <Users className=\"h-3 w-3\" />\n                      <span>{eventDate.guestCount} guests</span>\n                    </div>\n                  </div>\n                ))}\n                \n                <Separator />\n                \n                <div className=\"flex items-center justify-between font-medium text-lg\">\n                  <span className=\"flex items-center gap-2\">\n                    <DollarSign className=\"h-4 w-4\" />\n                    Total:\n                  </span>\n                  <span>${eventData.totalAmount.toFixed(2)}</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-end gap-3 pt-4 border-t\">\n          <Button \n            variant=\"outline\" \n            onClick={() => onOpenChange(false)}\n          >\n            Cancel\n          </Button>\n          <Button \n            onClick={handleSendEmail}\n            disabled={sendEmailMutation.isPending || !eventData.customerData?.email}\n            className=\"min-w-[120px]\"\n          >\n            <Send className=\"h-4 w-4 mr-2\" />\n            {sendEmailMutation.isPending ? \"Sending...\" : \"Send Email\"}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":13920},"client/src/components/lead-capture/public-quote-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { CalendarIcon, CheckCircle2, Mail, Phone, MapPin, Users, Calendar as CalendarClock } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst leadFormSchema = z.object({\n  firstName: z.string().min(2, \"First name must be at least 2 characters\"),\n  lastName: z.string().min(2, \"Last name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  phone: z.string().optional(),\n  eventType: z.string().min(1, \"Please select an event type\"),\n  guestCount: z.number().min(1, \"Guest count must be at least 1\"),\n  dateStart: z.date({\n    required_error: \"Please select an event date\",\n  }),\n  dateEnd: z.date().optional(),\n  budgetMin: z.number().optional(),\n  budgetMax: z.number().optional(),\n  preferredContact: z.enum([\"email\", \"phone\"], {\n    required_error: \"Please select a preferred contact method\",\n  }),\n  notes: z.string().optional(),\n  consentEmail: z.boolean().default(true),\n  consentSms: z.boolean().default(false),\n  utmSource: z.string().optional(),\n  utmMedium: z.string().optional(),\n  utmCampaign: z.string().optional(),\n});\n\ntype LeadFormData = z.infer<typeof leadFormSchema>;\n\ninterface PublicQuoteFormProps {\n  onSuccess?: () => void;\n  embedded?: boolean;\n  className?: string;\n}\n\nexport function PublicQuoteForm({ onSuccess, embedded = false, className }: PublicQuoteFormProps) {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  \n  // Fetch venues for selection\n  const { data: venues = [] } = useQuery({\n    queryKey: [\"/api/venues\"]\n  });\n\n  const form = useForm<LeadFormData>({\n    resolver: zodResolver(leadFormSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      eventType: \"\",\n      guestCount: 50,\n      preferredContact: \"email\",\n      notes: \"\",\n      consentEmail: true,\n      consentSms: false,\n      utmSource: \"website\",\n      utmMedium: \"organic\",\n    },\n  });\n\n  const createLeadMutation = useMutation({\n    mutationFn: async (data: LeadFormData) => {\n      // Get first venue ID if available\n      const venueId = venues.length > 0 ? venues[0].id : null;\n      \n      return apiRequest(\"POST\", \"/api/leads\", {\n        ...data,\n        venueId,\n        sourceId: null, // Will be set to default source on backend\n        status: \"NEW\"\n      });\n    },\n    onSuccess: () => {\n      setIsSubmitted(true);\n      onSuccess?.();\n    }\n  });\n\n  const onSubmit = (data: LeadFormData) => {\n    createLeadMutation.mutate(data);\n  };\n\n  if (isSubmitted) {\n    return (\n      <Card className={cn(\"w-full max-w-2xl mx-auto\", className)}>\n        <CardContent className=\"p-8 text-center\">\n          <CheckCircle2 className=\"h-16 w-16 text-green-500 mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold mb-2\">Thank You!</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            We've received your request and will get back to you within 24 hours with availability and pricing details.\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Mail className=\"h-4 w-4 text-muted-foreground\" />\n              <span>Check your email for confirmation</span>\n            </div>\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Phone className=\"h-4 w-4 text-muted-foreground\" />\n              <span>We'll call you if needed</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={cn(\"w-full max-w-2xl mx-auto\", className)}>\n      <CardHeader className=\"text-center\">\n        <CardTitle className=\"text-2xl\">Get Your Event Quote</CardTitle>\n        <p className=\"text-muted-foreground\">\n          Tell us about your event and we'll provide personalized availability and pricing\n        </p>\n      </CardHeader>\n      \n      <CardContent className=\"p-6\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Personal Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold flex items-center\">\n                <Users className=\"h-5 w-5 mr-2\" />\n                Contact Information\n              </h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>First Name *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"John\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Last Name *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Smith\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address *</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"john@example.com\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone Number</FormLabel>\n                      <FormControl>\n                        <Input type=\"tel\" placeholder=\"(555) 123-4567\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Event Details */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold flex items-center\">\n                <CalendarClock className=\"h-5 w-5 mr-2\" />\n                Event Details\n              </h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"eventType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Event Type *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select event type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"wedding\">Wedding</SelectItem>\n                          <SelectItem value=\"corporate\">Corporate Event</SelectItem>\n                          <SelectItem value=\"birthday\">Birthday Party</SelectItem>\n                          <SelectItem value=\"anniversary\">Anniversary</SelectItem>\n                          <SelectItem value=\"graduation\">Graduation</SelectItem>\n                          <SelectItem value=\"social\">Social Gathering</SelectItem>\n                          <SelectItem value=\"conference\">Conference</SelectItem>\n                          <SelectItem value=\"other\">Other</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"guestCount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Number of Guests *</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          placeholder=\"50\" \n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"dateStart\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-col\">\n                      <FormLabel>Event Date *</FormLabel>\n                      <Popover>\n                        <PopoverTrigger asChild>\n                          <FormControl>\n                            <Button\n                              variant={\"outline\"}\n                              className={cn(\n                                \"w-full pl-3 text-left font-normal\",\n                                !field.value && \"text-muted-foreground\"\n                              )}\n                            >\n                              {field.value ? (\n                                format(field.value, \"PPP\")\n                              ) : (\n                                <span>Pick a date</span>\n                              )}\n                              <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                            </Button>\n                          </FormControl>\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                          <Calendar\n                            mode=\"single\"\n                            selected={field.value}\n                            onSelect={field.onChange}\n                            disabled={(date) =>\n                              date < new Date() || date < new Date(\"1900-01-01\")\n                            }\n                            initialFocus\n                          />\n                        </PopoverContent>\n                      </Popover>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"preferredContact\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Preferred Contact Method *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"How should we contact you?\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"email\">Email</SelectItem>\n                          <SelectItem value=\"phone\">Phone</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Budget Range */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Budget Range (Optional)</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"budgetMin\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Minimum Budget</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          placeholder=\"5000\" \n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || undefined)}\n                        />\n                      </FormControl>\n                      <FormDescription>Optional: helps us provide better recommendations</FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"budgetMax\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Maximum Budget</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          placeholder=\"15000\" \n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || undefined)}\n                        />\n                      </FormControl>\n                      <FormDescription>Optional: helps us provide better recommendations</FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Additional Notes */}\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Additional Details</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Tell us more about your event vision, special requirements, preferred time, etc.\"\n                      className=\"min-h-[100px]\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Optional: Share any special requirements, preferred time of day, themes, or other details\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Consent */}\n            <div className=\"space-y-3\">\n              <FormField\n                control={form.control}\n                name=\"consentEmail\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                      />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel>\n                        I agree to receive email communications about my event inquiry\n                      </FormLabel>\n                    </div>\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"consentSms\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                      />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel>\n                        I agree to receive SMS/text messages about my event inquiry\n                      </FormLabel>\n                      <FormDescription>\n                        Optional: for urgent updates and quick coordination\n                      </FormDescription>\n                    </div>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              size=\"lg\"\n              disabled={createLeadMutation.isPending}\n            >\n              {createLeadMutation.isPending ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2\"></div>\n                  Submitting Request...\n                </>\n              ) : (\n                \"Get My Quote\"\n              )}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":17972},"client/src/pages/Leads.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Phone, Mail, Calendar, User, Building, Clock, Tag, Plus, Search, Filter, Eye } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useFormattedCurrency } from \"@/lib/currency\";\nimport type { Lead, CampaignSource, Tag as TagType } from \"@shared/schema\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { MobileNav } from \"@/components/layout/mobile-nav\";\nimport { PublicQuoteForm } from \"@/components/lead-capture/public-quote-form\";\n\nexport default function Leads() {\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [sourceFilter, setSourceFilter] = useState<string>(\"all\");\n  const [showAddModal, setShowAddModal] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { formatAmount } = useFormattedCurrency();\n\n  // Fetch leads with filters\n  const { data: leads = [], isLoading: leadsLoading } = useQuery({\n    queryKey: [\"/api/leads\"],\n    enabled: true\n  });\n\n  // Fetch campaign sources\n  const { data: sources = [] } = useQuery({\n    queryKey: [\"/api/campaign-sources\"]\n  });\n\n  // Fetch tags\n  const { data: tags = [] } = useQuery({\n    queryKey: [\"/api/tags\"]\n  });\n\n  // Fetch proposals to show which proposals were sent for leads\n  const { data: proposals = [] } = useQuery({\n    queryKey: [\"/api/proposals\"]\n  });\n\n  // Lead status update mutation\n  const updateLeadMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Lead> }) => {\n      return apiRequest(\"PATCH\", `/api/leads/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n    }\n  });\n\n  // Convert lead to customer mutation\n  const convertToCustomerMutation = useMutation({\n    mutationFn: async (leadId: string) => {\n      return apiRequest(\"POST\", `/api/leads/${leadId}/convert`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n    }\n  });\n\n  // Handle lead status change\n  const handleStatusChange = (leadId: string, newStatus: string) => {\n    updateLeadMutation.mutate({ id: leadId, data: { status: newStatus } });\n  };\n\n  // Handle convert to customer\n  const handleConvertToCustomer = (leadId: string) => {\n    convertToCustomerMutation.mutate(leadId);\n  };\n\n  // Handle schedule tour\n  const handleScheduleTour = (leadId: string) => {\n    // Update status to tour scheduled and set a reminder/task\n    updateLeadMutation.mutate({ \n      id: leadId, \n      data: { status: \"TOUR_SCHEDULED\" } \n    });\n  };\n\n  // Send proposal mutation\n  const sendProposalMutation = useMutation({\n    mutationFn: async (leadId: string) => {\n      return await apiRequest(\"POST\", `/api/leads/${leadId}/send-proposal`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({\n        title: \"Success\",\n        description: \"Proposal sent successfully!\",\n        variant: \"default\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send proposal. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle send proposal\n  const handleSendProposal = (leadId: string) => {\n    sendProposalMutation.mutate(leadId);\n  };\n\n  // Find proposal for a lead\n  const getProposalForLead = (leadId: string) => {\n    // Find lead activities to get proposalId\n    const lead = leads.find(l => l.id === leadId);\n    if (!lead || !lead.proposalId) return null;\n    \n    return proposals.find(p => p.id === lead.proposalId);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"NEW\": return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\";\n      case \"CONTACTED\": return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\";\n      case \"QUALIFIED\": return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"TOUR_SCHEDULED\": return \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\";\n      case \"PROPOSAL_SENT\": return \"bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200\";\n      case \"WON\": return \"bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-200\";\n      case \"LOST\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n      default: return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n    }\n  };\n\n  const getEventTypeIcon = (eventType: string) => {\n    switch (eventType.toLowerCase()) {\n      case \"wedding\": return \"💒\";\n      case \"corporate\": return \"🏢\";\n      case \"birthday\": return \"🎂\";\n      case \"social\": return \"🎉\";\n      default: return \"📅\";\n    }\n  };\n\n  const formatBudgetRange = (min?: number | null, max?: number | null) => {\n    if (!min && !max) return \"Budget not specified\";\n    if (min && max) return `$${min.toLocaleString()} - $${max.toLocaleString()}`;\n    if (min) return `$${min.toLocaleString()}+`;\n    if (max) return `Up to $${max.toLocaleString()}`;\n    return \"Budget not specified\";\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount);\n  };\n\n  const leadsArray = Array.isArray(leads) ? leads as Lead[] : [];\n\n  // Apply filters to leads\n  const filteredLeads = leadsArray.filter((lead: Lead) => {\n    const matchesSearch = !searchQuery || \n      lead.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      lead.lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      lead.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      lead.eventType.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || lead.status === statusFilter;\n    const matchesSource = sourceFilter === \"all\" || lead.sourceId === sourceFilter;\n    \n    return matchesSearch && matchesStatus && matchesSource;\n  });\n\n  const leadCounts = {\n    total: leadsArray.length,\n    new: leadsArray.filter((l: Lead) => l.status === \"NEW\").length,\n    contacted: leadsArray.filter((l: Lead) => l.status === \"CONTACTED\").length,\n    qualified: leadsArray.filter((l: Lead) => l.status === \"QUALIFIED\").length,\n    won: leadsArray.filter((l: Lead) => l.status === \"WON\").length\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <div className=\"hidden lg:block\">\n        <Sidebar collapsed={sidebarCollapsed} />\n      </div>\n      \n      <MobileNav \n        isOpen={mobileNavOpen} \n        onClose={() => setMobileNavOpen(false)} \n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Lead Management\" \n          subtitle=\"Track and manage potential customers through your sales pipeline\"\n          onMobileMenuToggle={() => setMobileNavOpen(true)}\n          onSidebarToggle={() => setSidebarCollapsed(!sidebarCollapsed)}\n          sidebarCollapsed={sidebarCollapsed}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"space-y-6\">\n      {/* Add Lead Button */}\n      <div className=\"flex justify-end\">\n        <Button onClick={() => setShowAddModal(true)}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Lead\n        </Button>\n      </div>\n\n      {/* Lead Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"h-4 w-4 text-muted-foreground\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{leadCounts.total}</p>\n                <p className=\"text-sm text-muted-foreground\">Total Leads</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n              <div>\n                <p className=\"text-2xl font-bold\">{leadCounts.new}</p>\n                <p className=\"text-sm text-muted-foreground\">New</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-yellow-500 rounded-full\"></div>\n              <div>\n                <p className=\"text-2xl font-bold\">{leadCounts.contacted}</p>\n                <p className=\"text-sm text-muted-foreground\">Contacted</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n              <div>\n                <p className=\"text-2xl font-bold\">{leadCounts.qualified}</p>\n                <p className=\"text-sm text-muted-foreground\">Qualified</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-emerald-500 rounded-full\"></div>\n              <div>\n                <p className=\"text-2xl font-bold\">{leadCounts.won}</p>\n                <p className=\"text-sm text-muted-foreground\">Won</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search leads by name, email, or event type...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            \n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Statuses</SelectItem>\n                <SelectItem value=\"NEW\">New</SelectItem>\n                <SelectItem value=\"CONTACTED\">Contacted</SelectItem>\n                <SelectItem value=\"QUALIFIED\">Qualified</SelectItem>\n                <SelectItem value=\"TOUR_SCHEDULED\">Tour Scheduled</SelectItem>\n                <SelectItem value=\"PROPOSAL_SENT\">Proposal Sent</SelectItem>\n                <SelectItem value=\"WON\">Won</SelectItem>\n                <SelectItem value=\"LOST\">Lost</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={sourceFilter} onValueChange={setSourceFilter}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"Filter by source\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Sources</SelectItem>\n                {Array.isArray(sources) && sources.map((source: CampaignSource) => (\n                  <SelectItem key={source.id} value={source.id}>\n                    {source.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Leads List */}\n      <div className=\"grid gap-4\">\n        {leadsLoading ? (\n          <div className=\"text-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n            <p className=\"mt-2 text-muted-foreground\">Loading leads...</p>\n          </div>\n        ) : filteredLeads.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <User className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No leads found</h3>\n              <p className=\"text-muted-foreground\">\n                {searchQuery || statusFilter !== \"all\" || sourceFilter !== \"all\" \n                  ? \"Try adjusting your filters to see more results.\"\n                  : \"Start capturing leads to see them here.\"\n                }\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          filteredLeads.map((lead: Lead) => (\n            <Card key={lead.id} className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"text-2xl\">{getEventTypeIcon(lead.eventType)}</div>\n                    <div>\n                      <h3 className=\"text-lg font-semibold\">\n                        {lead.firstName} {lead.lastName}\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground capitalize\">\n                        {lead.eventType} Event\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className={getStatusColor(lead.status)}>\n                      {lead.status.replace(\"_\", \" \")}\n                    </Badge>\n                    <Select \n                      value={lead.status} \n                      onValueChange={(newStatus) => handleStatusChange(lead.id, newStatus)}\n                      disabled={updateLeadMutation.isPending}\n                    >\n                      <SelectTrigger className=\"w-32\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"NEW\">New</SelectItem>\n                        <SelectItem value=\"CONTACTED\">Contacted</SelectItem>\n                        <SelectItem value=\"QUALIFIED\">Qualified</SelectItem>\n                        <SelectItem value=\"TOUR_SCHEDULED\">Tour Scheduled</SelectItem>\n                        <SelectItem value=\"PROPOSAL_SENT\">Proposal Sent</SelectItem>\n                        <SelectItem value=\"WON\">Won</SelectItem>\n                        <SelectItem value=\"LOST\">Lost</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"truncate\">{lead.email}</span>\n                  </div>\n                  \n                  {lead.phone && (\n                    <div className=\"flex items-center space-x-2\">\n                      <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                      <span>{lead.phone}</span>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>{lead.dateStart ? new Date(lead.dateStart).toLocaleDateString() : 'No date set'}</span>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <User className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>{lead.guestCount ?? 0} guests</span>\n                  </div>\n                </div>\n\n                {/* Proposal Information */}\n                {lead.status === \"PROPOSAL_SENT\" && getProposalForLead(lead.id) && (\n                  <div className=\"mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Mail className=\"h-4 w-4 text-blue-600\" />\n                        <span className=\"font-medium text-blue-800\">Proposal Sent</span>\n                      </div>\n                      <Badge className=\"bg-blue-100 text-blue-800\">\n                        {getProposalForLead(lead.id)?.status}\n                      </Badge>\n                    </div>\n                    <div className=\"mt-2 text-sm text-blue-700\">\n                      <div><strong>Title:</strong> {getProposalForLead(lead.id)?.title}</div>\n                      <div><strong>Amount:</strong> {formatAmount(parseFloat(getProposalForLead(lead.id)?.totalAmount || \"0\"))}</div>\n                      <div><strong>Valid Until:</strong> {new Date(getProposalForLead(lead.id)?.validUntil || \"\").toLocaleDateString()}</div>\n                    </div>\n                    <div className=\"mt-2 flex space-x-2\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => window.open(`/proposals/${getProposalForLead(lead.id)?.id}`, '_blank')}\n                      >\n                        <Eye className=\"h-4 w-4 mr-1\" />\n                        View Proposal\n                      </Button>\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"mt-4 flex justify-between items-center\">\n                  <div className=\"text-sm\">\n                    <span className=\"font-medium\">{formatBudgetRange(lead.budgetMin, lead.budgetMax)}</span>\n                    {lead.notes && (\n                      <p className=\"text-muted-foreground mt-1 line-clamp-2\">{lead.notes}</p>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex space-x-2\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handleScheduleTour(lead.id)}\n                      disabled={updateLeadMutation.isPending}\n                    >\n                      <Calendar className=\"h-4 w-4 mr-1\" />\n                      Schedule Tour\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handleSendProposal(lead.id)}\n                      disabled={sendProposalMutation.isPending || updateLeadMutation.isPending || lead.status === \"PROPOSAL_SENT\"}\n                    >\n                      <Mail className=\"h-4 w-4 mr-1\" />\n                      {sendProposalMutation.isPending ? \"Sending...\" : \n                       lead.status === \"PROPOSAL_SENT\" ? \"Proposal Sent\" : \"Send Proposal\"}\n                    </Button>\n                    {lead.status === \"QUALIFIED\" && (\n                      <Button \n                        size=\"sm\"\n                        onClick={() => handleConvertToCustomer(lead.id)}\n                        disabled={convertToCustomerMutation.isPending}\n                      >\n                        Convert to Customer\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n          </div>\n        </main>\n      </div>\n\n      {/* Proposals Tracking Section */}\n      <div className=\"fixed bottom-6 right-6 z-50\">\n        <Card className=\"w-80 max-h-96 overflow-y-auto shadow-lg\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm flex items-center gap-2\">\n              <Mail className=\"h-4 w-4\" />\n              Recent Proposals Sent ({proposals.filter(p => p.status === 'sent').length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            {proposals.filter(p => p.status === 'sent').slice(0, 5).map((proposal) => {\n              const relatedLead = leads.find(l => l.proposalId === proposal.id);\n              return (\n                <div key={proposal.id} className=\"p-2 bg-gray-50 rounded text-xs\">\n                  <div className=\"font-medium truncate\">{proposal.title}</div>\n                  <div className=\"text-gray-600\">\n                    {relatedLead ? `${relatedLead.firstName} ${relatedLead.lastName}` : 'Unknown Lead'}\n                  </div>\n                  <div className=\"flex justify-between items-center mt-1\">\n                    <span className=\"text-green-600 font-medium\">\n                      {formatAmount(parseFloat(proposal.totalAmount || \"0\"))}\n                    </span>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {proposal.status}\n                    </Badge>\n                  </div>\n                </div>\n              );\n            })}\n            {proposals.filter(p => p.status === 'sent').length === 0 && (\n              <div className=\"text-gray-500 text-xs text-center py-4\">\n                No proposals sent yet\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Add Lead Modal */}\n      <Dialog open={showAddModal} onOpenChange={setShowAddModal}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Add New Lead</DialogTitle>\n            <DialogDescription>\n              Fill out the form below to add a new lead to your system.\n            </DialogDescription>\n          </DialogHeader>\n          <PublicQuoteForm \n            onSuccess={() => {\n              setShowAddModal(false);\n              queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n            }}\n            embedded={true}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":23097},"client/src/components/proposals/proposal-email-modal.tsx":{"content":"import { useState } from \"react\";\nimport { format } from \"date-fns\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/api\";\nimport { Send, Mail, Eye, DollarSign } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface ProposalEmailModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  eventData: {\n    eventName: string;\n    customerId: string;\n    customerEmail: string;\n    customerName: string;\n    totalAmount: number;\n    eventDates: Array<{\n      date: Date;\n      startTime: string;\n      endTime: string;\n      venue: string;\n      space: string;\n      guestCount: number;\n    }>;\n  };\n  onProposalSent: (proposalId: string) => void;\n}\n\nexport function ProposalEmailModal({\n  open,\n  onOpenChange,\n  eventData,\n  onProposalSent\n}: ProposalEmailModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [emailTo, setEmailTo] = useState(eventData.customerEmail);\n  const [emailSubject, setEmailSubject] = useState(\n    `Event Proposal: ${eventData.eventName}`\n  );\n\n  // Fetch current deposits settings\n  const { data: settings } = useQuery({\n    queryKey: [\"/api/settings\"],\n  });\n\n  // Deposit amendment state\n  const [enableDepositAmendment, setEnableDepositAmendment] = useState(false);\n  const [customDepositPercentage, setCustomDepositPercentage] = useState(\n    (settings as any)?.deposits?.defaultDepositPercentage || 25\n  );\n\n  // Check if deposit amendment is allowed in settings\n  const allowDepositAmendment = (settings as any)?.deposits?.allowDepositAmendment !== false;\n  \n  const [emailMessage, setEmailMessage] = useState(`Dear ${eventData.customerName},\n\nThank you for considering us for your upcoming event. We're excited to present you with a customized proposal for ${eventData.eventName}.\n\nEvent Details:\n${eventData.eventDates.map(date => \n  `• ${format(date.date, 'MMMM d, yyyy')} from ${date.startTime} to ${date.endTime}\n  Location: ${date.venue} - ${date.space}\n  Guest Count: ${date.guestCount} guests`\n).join('\\n')}\n\nTotal Investment: $${eventData.totalAmount.toFixed(2)}\n\nWe've included all the details and pricing in your personalized proposal. You can view the complete proposal by clicking the link below:\n\n[View Your Proposal]\n\nWe're committed to making your event exceptional and would be happy to discuss any questions you might have.\n\nBest regards,\nVenuine Events Team\n\n---\nThis proposal is valid for 30 days from the date of this email.`);\n\n  // Generate the HTML version of the email\n  const generateHtmlContent = (proposalId?: string) => {\n    const proposalUrl = proposalId ? \n      `${window.location.origin}/proposal/${proposalId}` : \n      `${window.location.origin}/proposal/PLACEHOLDER_ID`;\n    \n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <style>\n          @media only screen and (max-width: 600px) {\n            .container { width: 100% !important; padding: 10px !important; }\n            .header { padding: 15px !important; }\n            .content { padding: 20px 15px !important; }\n            .button { padding: 10px 20px !important; font-size: 14px !important; }\n            h1 { font-size: 20px !important; }\n            h2 { font-size: 18px !important; }\n            h3 { font-size: 16px !important; }\n            .event-detail { margin-bottom: 10px !important; }\n          }\n        </style>\n      </head>\n      <body style=\"margin: 0; padding: 0; background-color: #f5f5f5;\">\n        <div class=\"container\" style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <div class=\"header\" style=\"background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%); color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0;\">\n            <h1 style=\"margin: 0; font-size: 24px;\">Venuine Events</h1>\n            <p style=\"margin: 5px 0 0 0; font-size: 16px;\">Your Event Proposal</p>\n          </div>\n          \n          <div class=\"content\" style=\"background: #f8fafc; padding: 30px; border-radius: 0 0 8px 8px; border: 1px solid #e2e8f0; border-top: none;\">\n            <h2 style=\"color: #1f2937; margin-top: 0;\">Dear ${eventData.customerName},</h2>\n            \n            <p style=\"color: #374151; line-height: 1.6;\">Thank you for considering Venuine Events for your upcoming event. We're excited to present you with a customized proposal for <strong>${eventData.eventName}</strong>.</p>\n            \n            <div style=\"background: white; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #3b82f6;\">\n              <h3 style=\"color: #1f2937; margin-top: 0;\">Event Details</h3>\n              ${eventData.eventDates.map(date => `\n                <div class=\"event-detail\" style=\"margin-bottom: 15px; padding-bottom: 15px; border-bottom: 1px solid #e5e7eb;\">\n                  <p style=\"margin: 3px 0; color: #374151;\"><strong>📅 Date:</strong> ${format(date.date, 'MMMM d, yyyy')}</p>\n                  <p style=\"margin: 3px 0; color: #374151;\"><strong>🕐 Time:</strong> ${date.startTime} - ${date.endTime}</p>\n                  <p style=\"margin: 3px 0; color: #374151;\"><strong>📍 Location:</strong> ${date.venue} - ${date.space}</p>\n                  <p style=\"margin: 3px 0; color: #374151;\"><strong>👥 Guest Count:</strong> ${date.guestCount} guests</p>\n                </div>\n              `).join('')}\n              \n              <div style=\"margin-top: 20px; padding: 15px; background: #ecfdf5; border-radius: 6px; border: 1px solid #10b981;\">\n                <p style=\"margin: 0; font-size: 18px; font-weight: bold; color: #065f46;\">\n                  💰 Total Investment: $${eventData.totalAmount.toFixed(2)}\n                </p>\n              </div>\n            </div>\n            \n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a class=\"button\" href=\"${proposalUrl}\" style=\"display: inline-block; background: #3b82f6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: bold;\">\n                View Your Complete Proposal\n              </a>\n            </div>\n            \n            <p style=\"color: #374151; line-height: 1.6;\">We're committed to making your event exceptional and would be happy to discuss any questions you might have.</p>\n            \n            <p style=\"color: #374151; line-height: 1.6;\">\n              Best regards,<br>\n              <strong>Venuine Events Team</strong>\n            </p>\n            \n            <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center; color: #6b7280; font-size: 12px;\">\n              <p style=\"margin: 5px 0;\">This proposal is valid for 30 days from the date of this email.</p>\n              <p style=\"margin: 5px 0;\">Venuine Events | Professional Event Management</p>\n            </div>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n  };\n\n  const sendProposal = useMutation({\n    mutationFn: async () => {\n      // Calculate deposit amount based on custom percentage if enabled\n      const depositPercentage = enableDepositAmendment ? \n        customDepositPercentage : \n        ((settings as any)?.deposits?.defaultDepositPercentage || 25);\n      const depositAmount = (eventData.totalAmount * depositPercentage) / 100;\n\n      // Create proposal in the proposals table first\n      const proposalData = {\n        customerId: eventData.customerId,\n        title: `Proposal for ${eventData.eventName}`,\n        content: generateHtmlContent(), // Generate without ID first, will be updated\n        totalAmount: eventData.totalAmount.toString(),\n        validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days from now\n        status: 'sent',\n        sentAt: new Date().toISOString(),\n        eventType: 'corporate',\n        guestCount: eventData.eventDates[0]?.guestCount || 1,\n        // Include deposit information\n        depositPercentage: depositPercentage,\n        depositAmount: depositAmount.toFixed(2)\n      };\n      \n      const proposalResponse = await fetch(\"/api/proposals\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(proposalData)\n      });\n      \n      if (!proposalResponse.ok) {\n        const errorData = await proposalResponse.json();\n        console.error('Proposal creation failed:', errorData);\n        throw new Error(errorData.errors ? \n          errorData.errors.map((e: any) => `${e.path}: ${e.message}`).join(', ') : \n          errorData.message || 'Failed to create proposal'\n        );\n      }\n      \n      const proposal = await proposalResponse.json();\n      \n      // Now update the proposal with the correct content including the proposal ID\n      const updatedContent = generateHtmlContent(proposal.id);\n      await fetch(`/api/proposals/${proposal.id}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          content: updatedContent\n        })\n      });\n      \n      // Then send the email via Gmail with the correct proposal ID\n      await fetch(\"/api/gmail/send-proposal\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          to: emailTo,\n          customerName: eventData.customerName,\n          proposalContent: updatedContent,\n          totalAmount: eventData.totalAmount.toString(),\n          validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days from now\n          companyName: 'Venuine Events',\n          proposalId: proposal.id\n        })\n      }).then(res => res.json());\n      \n      return proposal;\n    },\n    onSuccess: (proposal) => {\n      toast({\n        title: \"Proposal Sent!\",\n        description: `Proposal email sent successfully to ${emailTo}`,\n        variant: \"default\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/proposals\"] });\n      console.log('Calling onProposalSent with proposal ID:', proposal.id);\n      onProposalSent(proposal.id);\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Send Proposal\",\n        description: error.message || \"Failed to send proposal. Please check your Gmail configuration.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Mail className=\"h-5 w-5\" />\n            Send Proposal Email\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Tabs defaultValue=\"compose\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"compose\" className=\"flex items-center gap-2\">\n              <Send className=\"h-4 w-4\" />\n              Compose\n            </TabsTrigger>\n            <TabsTrigger value=\"preview\" className=\"flex items-center gap-2\">\n              <Eye className=\"h-4 w-4\" />\n              Preview\n            </TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"compose\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 gap-4\">\n              <div>\n                <Label htmlFor=\"email-to\">To:</Label>\n                <Input\n                  id=\"email-to\"\n                  value={emailTo}\n                  onChange={(e) => setEmailTo(e.target.value)}\n                  placeholder=\"customer@example.com\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"email-subject\">Subject:</Label>\n                <Input\n                  id=\"email-subject\"\n                  value={emailSubject}\n                  onChange={(e) => setEmailSubject(e.target.value)}\n                  placeholder=\"Event Proposal: Your Event Name\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"email-message\">Message:</Label>\n                <Textarea\n                  id=\"email-message\"\n                  value={emailMessage}\n                  onChange={(e) => setEmailMessage(e.target.value)}\n                  rows={12}\n                  className=\"font-mono text-sm\"\n                  placeholder=\"Your email message...\"\n                />\n                <div className=\"text-xs text-slate-500 mt-1\">\n                  Tip: Use [View Your Proposal] as a placeholder for the proposal link button\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"preview\" className=\"space-y-4\">\n            <div className=\"border rounded-lg p-4 bg-white\">\n              <div className=\"mb-4 pb-4 border-b\">\n                <div className=\"text-sm text-slate-600 mb-1\">To: {emailTo}</div>\n                <div className=\"text-sm text-slate-600 mb-1\">Subject: {emailSubject}</div>\n                <div className=\"text-sm text-slate-600\">From: Venuine Events</div>\n              </div>\n              \n              <div \n                className=\"prose prose-sm max-w-none\"\n                dangerouslySetInnerHTML={{ __html: generateHtmlContent() }}\n              />\n            </div>\n          </TabsContent>\n        </Tabs>\n        \n        {/* Deposit Amendment Section */}\n        {allowDepositAmendment && (\n          <Card className=\"mt-4\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center gap-2 text-sm\">\n                <DollarSign className=\"h-4 w-4\" />\n                Deposit Configuration\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label className=\"text-sm font-medium\">\n                    Override Default Deposit Percentage\n                  </Label>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Default: {(settings as any)?.deposits?.defaultDepositPercentage || 25}%\n                  </p>\n                </div>\n                <Switch\n                  checked={enableDepositAmendment}\n                  onCheckedChange={setEnableDepositAmendment}\n                />\n              </div>\n              \n              {enableDepositAmendment && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"custom-deposit\" className=\"text-sm\">\n                    Custom Deposit Percentage\n                  </Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"custom-deposit\"\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"100\"\n                      step=\"1\"\n                      value={customDepositPercentage}\n                      onChange={(e) => setCustomDepositPercentage(parseInt(e.target.value) || 0)}\n                      className=\"pr-8\"\n                    />\n                    <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 text-sm\">\n                      %\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    This will override the default deposit percentage for this proposal only\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        <div className=\"flex justify-end gap-3 pt-4 border-t\">\n          <Button \n            variant=\"outline\" \n            onClick={() => onOpenChange(false)}\n            disabled={sendProposal.isPending}\n          >\n            Cancel\n          </Button>\n          <Button \n            onClick={() => sendProposal.mutate()}\n            disabled={sendProposal.isPending || !emailTo.trim() || !emailSubject.trim()}\n            className=\"bg-blue-600 hover:bg-blue-700\"\n          >\n            <Send className=\"h-4 w-4 mr-2\" />\n            {sendProposal.isPending ? 'Sending...' : 'Send Proposal'}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":16951},"client/src/pages/proposal-view.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { CheckCircle, Calendar, Clock, MapPin, Users, Mail, Phone, ArrowRight, Sparkles, Star, Award, ChefHat, Music, Camera, Utensils, Settings, FileText } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface ProposalData {\n  id: string;\n  title: string;\n  content: string;\n  totalAmount: string;\n  depositAmount?: string;\n  status: string;\n  validUntil?: string;\n  eventType?: string;\n  eventDate?: string;\n  startTime?: string;\n  endTime?: string;\n  guestCount?: number;\n  customer?: {\n    name: string;\n    email: string;\n    phone?: string;\n  };\n  venue?: {\n    name: string;\n    description?: string;\n  };\n  space?: {\n    name: string;\n    description?: string;\n  };\n  eventDates?: Array<{\n    date: string;\n    startTime: string;\n    endTime: string;\n    venue: string;\n    space: string;\n    guestCount: number;\n    packageName?: string;\n    services: Array<{\n      name: string;\n      price: number;\n    }>;\n  }>;\n  companyInfo?: {\n    name: string;\n    address: string;\n    phone: string;\n    email: string;\n  };\n}\n\nexport default function ProposalView() {\n  const [location] = useLocation();\n  const [isAccepting, setIsAccepting] = useState(false);\n  const proposalId = location.split('/').pop();\n  \n  const { data: proposal, isLoading, error } = useQuery({\n    queryKey: [\"/api/proposals/public\", proposalId],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/proposals/public/${proposalId}`);\n      return response.json();\n    },\n    enabled: !!proposalId,\n  });\n\n  const acceptProposalMutation = useMutation({\n    mutationFn: async () => {\n      if (!proposal?.id) throw new Error(\"No proposal ID\");\n      const response = await apiRequest(\"POST\", `/api/proposals/${proposal.id}/accept`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/proposals/public\", proposalId] });\n      window.location.href = `/proposal/${proposalId}/payment`;\n    }\n  });\n\n  const handleAcceptProposal = () => {\n    setIsAccepting(true);\n    acceptProposalMutation.mutate();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-indigo-50/30 flex items-center justify-center\">\n        <div className=\"animate-spin w-12 h-12 border-4 border-blue-500 border-t-transparent rounded-full\"></div>\n      </div>\n    );\n  }\n\n  if (error || !proposal) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-indigo-50/30 flex items-center justify-center\">\n        <div className=\"text-center max-w-md mx-auto px-6\">\n          <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Mail className=\"w-8 h-8 text-red-600\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Proposal Not Found</h1>\n          <p className=\"text-gray-600\">The proposal you're looking for doesn't exist or may have expired.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const eventDate = proposal.eventDate ? new Date(proposal.eventDate) : null;\n  const validUntil = proposal.validUntil ? new Date(proposal.validUntil) : null;\n  const isExpired = validUntil && validUntil < new Date();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-indigo-50/30\">\n      {/* Floating Elements */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute -top-40 -right-40 w-80 h-80 rounded-full bg-gradient-to-br from-purple-400/20 to-pink-400/20 blur-3xl\"></div>\n        <div className=\"absolute top-1/2 -left-40 w-96 h-96 rounded-full bg-gradient-to-br from-blue-400/20 to-cyan-400/20 blur-3xl\"></div>\n        <div className=\"absolute -bottom-40 right-1/3 w-64 h-64 rounded-full bg-gradient-to-br from-amber-400/20 to-orange-400/20 blur-3xl\"></div>\n      </div>\n\n      {/* Hero Section */}\n      <div className=\"relative\">\n        <div className=\"absolute inset-0 bg-[linear-gradient(rgba(59,130,246,0.03)_1px,transparent_1px),linear-gradient(90deg,rgba(59,130,246,0.03)_1px,transparent_1px)] bg-[size:20px_20px]\"></div>\n        \n        <div className=\"relative max-w-6xl mx-auto px-6 pt-20 pb-16\">\n          <div className=\"text-center\">\n            <div className=\"inline-flex items-center gap-2 bg-white/80 backdrop-blur-sm border border-gray-200/50 rounded-full px-5 py-2.5 mb-8 shadow-sm\">\n              <div className=\"w-2 h-2 bg-emerald-500 rounded-full animate-pulse\"></div>\n              <span className=\"text-gray-700 text-sm font-medium\">Venuine Events</span>\n              <Badge variant=\"secondary\" className=\"text-xs bg-emerald-50 text-emerald-700 border-emerald-200\">Premium</Badge>\n            </div>\n            \n            <h1 className=\"text-5xl md:text-7xl font-extrabold bg-gradient-to-r from-gray-900 via-blue-900 to-indigo-900 bg-clip-text text-transparent mb-6 tracking-tight leading-tight\">\n              {proposal.title || \"Your Event Proposal\"}\n            </h1>\n            \n            <p className=\"text-xl md:text-2xl text-gray-600 max-w-3xl mx-auto mb-12 font-light leading-relaxed\">\n              A bespoke event experience crafted exclusively for you, with every detail thoughtfully curated to exceed your expectations.\n            </p>\n            \n            {!isExpired && proposal.status !== 'accepted' && (\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n                <Button \n                  onClick={handleAcceptProposal}\n                  disabled={isAccepting || acceptProposalMutation.isPending}\n                  size=\"lg\"\n                  className=\"group bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white px-10 py-4 rounded-full font-semibold shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:scale-105 hover:-translate-y-1\"\n                >\n                  {isAccepting || acceptProposalMutation.isPending ? (\n                    <>\n                      <div className=\"animate-spin w-5 h-5 border-2 border-white/30 border-t-white rounded-full mr-2\"></div>\n                      Processing...\n                    </>\n                  ) : (\n                    <>\n                      <CheckCircle className=\"w-5 h-5 mr-2 group-hover:scale-110 transition-transform\" />\n                      Accept This Proposal\n                      <ArrowRight className=\"w-5 h-5 ml-2 group-hover:translate-x-1 transition-transform\" />\n                    </>\n                  )}\n                </Button>\n                \n                <div className=\"flex items-center gap-2 text-gray-600\">\n                  <span className=\"text-sm\">Total Investment:</span>\n                  <span className=\"text-2xl font-bold text-gray-900\">${proposal.totalAmount}</span>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Status Banner */}\n      {proposal.status === 'accepted' && (\n        <div className=\"bg-green-50 border-b border-green-200\">\n          <div className=\"max-w-7xl mx-auto px-6 py-4\">\n            <div className=\"flex items-center justify-center gap-2 text-green-700\">\n              <CheckCircle className=\"w-5 h-5\" />\n              <span className=\"font-medium\">Proposal Accepted - Payment Processing Available</span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {isExpired && (\n        <div className=\"bg-amber-50 border-b border-amber-200\">\n          <div className=\"max-w-7xl mx-auto px-6 py-4\">\n            <div className=\"flex items-center justify-center gap-2 text-amber-700\">\n              <Clock className=\"w-5 h-5\" />\n              <span className=\"font-medium\">This proposal has expired. Please contact us for an updated quote.</span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Main Content */}\n      <div className=\"relative max-w-7xl mx-auto px-6 py-20\">\n        {proposal.eventDates && proposal.eventDates.length > 0 && (\n          <div className=\"space-y-20\">\n            {proposal.eventDates.map((eventDate, index) => (\n              <div key={index} className=\"space-y-12\">\n                <Card className=\"border border-slate-200 shadow-sm bg-white\">\n                  <CardContent className=\"p-0\">\n                    {/* Professional Header */}\n                    <div className=\"bg-slate-50 border-b border-slate-200 px-8 py-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          {proposal.eventDates.length > 1 && (\n                            <div className=\"inline-flex items-center gap-2 bg-slate-200 text-slate-700 px-3 py-1 rounded-md text-sm font-medium mb-3\">\n                              <span>Day {index + 1} of {proposal.eventDates.length}</span>\n                            </div>\n                          )}\n                          <h2 className=\"text-2xl font-semibold text-slate-900 mb-1\">\n                            {proposal.eventDates.length > 1 ? `Event Day ${index + 1}` : \"Event Details\"}\n                          </h2>\n                          <p className=\"text-slate-600\">Complete breakdown of services and pricing</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-sm text-slate-500\">Total for this date</p>\n                          <p className=\"text-2xl font-bold text-slate-900\">${eventDate.totalAmount?.toLocaleString() || '0'}</p>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Event Information Grid - Professional & Compact */}\n                    <div className=\"p-8\">\n                      <div className=\"grid md:grid-cols-4 gap-4 mb-8\">\n                        <div className=\"bg-slate-50 border border-slate-200 rounded-lg p-4\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <Calendar className=\"w-4 h-4 text-slate-600\" />\n                            <span className=\"text-sm font-medium text-slate-600 uppercase tracking-wide\">Date</span>\n                          </div>\n                          <p className=\"text-base font-semibold text-slate-900\">\n                            {new Date(eventDate.date).toLocaleDateString('en-US', { \n                              weekday: 'long', \n                              month: 'long', \n                              day: 'numeric',\n                              year: 'numeric'\n                            })}\n                          </p>\n                        </div>\n\n                        <div className=\"bg-slate-50 border border-slate-200 rounded-lg p-4\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <Clock className=\"w-4 h-4 text-slate-600\" />\n                            <span className=\"text-sm font-medium text-slate-600 uppercase tracking-wide\">Time</span>\n                          </div>\n                          <p className=\"text-base font-semibold text-slate-900\">\n                            {eventDate.startTime} - {eventDate.endTime}\n                          </p>\n                        </div>\n\n                        <div className=\"bg-slate-50 border border-slate-200 rounded-lg p-4\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <MapPin className=\"w-4 h-4 text-slate-600\" />\n                            <span className=\"text-sm font-medium text-slate-600 uppercase tracking-wide\">Location</span>\n                          </div>\n                          <p className=\"text-base font-semibold text-slate-900\">{eventDate.venue?.name || eventDate.venue}</p>\n                          <p className=\"text-sm text-slate-600\">{eventDate.space?.name || eventDate.space}</p>\n                          {eventDate.space?.capacity && (\n                            <p className=\"text-xs text-slate-500 mt-1\">Max capacity: {eventDate.space.capacity}</p>\n                          )}\n                        </div>\n\n                        <div className=\"bg-slate-50 border border-slate-200 rounded-lg p-4\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <Users className=\"w-4 h-4 text-slate-600\" />\n                            <span className=\"text-sm font-medium text-slate-600 uppercase tracking-wide\">Guests</span>\n                          </div>\n                          <p className=\"text-base font-semibold text-slate-900\">{eventDate.guestCount}</p>\n                          <p className=\"text-sm text-slate-600\">Expected attendees</p>\n                        </div>\n                      </div>\n\n                      {/* Package Details */}\n                      {eventDate.packageDetails && (\n                        <div className=\"mb-8\">\n                          <div className=\"border border-slate-200 rounded-lg\">\n                            <div className=\"bg-slate-50 border-b border-slate-200 px-6 py-4\">\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center gap-3\">\n                                  <Award className=\"w-5 h-5 text-slate-600\" />\n                                  <h3 className=\"text-lg font-semibold text-slate-900\">Package: {eventDate.packageDetails.name}</h3>\n                                </div>\n                                <div className=\"text-right\">\n                                  <p className=\"text-sm text-slate-500\">{eventDate.packageDetails.pricingModel === 'per_person' ? 'Per Person' : 'Fixed Price'}</p>\n                                  <p className=\"text-lg font-bold text-slate-900\">${eventDate.packageDetails.price.toLocaleString()}</p>\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"p-6\">\n                              {eventDate.packageDetails.description && (\n                                <p className=\"text-slate-600 mb-4\">{eventDate.packageDetails.description}</p>\n                              )}\n                              {eventDate.packageDetails.category && (\n                                <div className=\"inline-flex items-center gap-2 bg-slate-100 text-slate-700 px-3 py-1 rounded-md text-sm font-medium mb-4\">\n                                  <span>{eventDate.packageDetails.category}</span>\n                                </div>\n                              )}\n                              {eventDate.packageDetails.services && eventDate.packageDetails.services.length > 0 && (\n                                <div>\n                                  <h4 className=\"text-sm font-semibold text-slate-700 mb-3\">Included Services:</h4>\n                                  <div className=\"grid md:grid-cols-2 gap-2\">\n                                    {eventDate.packageDetails.services.map((serviceId, idx) => (\n                                      <div key={idx} className=\"flex items-center gap-2 text-sm text-slate-600\">\n                                        <div className=\"w-1.5 h-1.5 bg-slate-400 rounded-full\"></div>\n                                        <span>Service ID: {serviceId}</span>\n                                      </div>\n                                    ))}\n                                  </div>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Setup Style Information */}\n                      {eventDate.setupStyle && (\n                        <div className=\"mb-8\">\n                          <div className=\"border border-slate-200 rounded-lg\">\n                            <div className=\"bg-slate-50 border-b border-slate-200 px-6 py-4\">\n                              <div className=\"flex items-center gap-3\">\n                                <Settings className=\"w-5 h-5 text-slate-600\" />\n                                <h3 className=\"text-lg font-semibold text-slate-900\">Setup Style: {eventDate.setupStyle.name}</h3>\n                              </div>\n                            </div>\n                            <div className=\"p-6\">\n                              {eventDate.setupStyle.description && (\n                                <p className=\"text-slate-600 mb-4\">{eventDate.setupStyle.description}</p>\n                              )}\n                              <div className=\"grid md:grid-cols-3 gap-4\">\n                                <div>\n                                  <p className=\"text-sm font-medium text-slate-700\">Category</p>\n                                  <p className=\"text-slate-600\">{eventDate.setupStyle.category}</p>\n                                </div>\n                                {eventDate.setupStyle.capacity?.min && (\n                                  <div>\n                                    <p className=\"text-sm font-medium text-slate-700\">Min Capacity</p>\n                                    <p className=\"text-slate-600\">{eventDate.setupStyle.capacity.min} guests</p>\n                                  </div>\n                                )}\n                                {eventDate.setupStyle.capacity?.max && (\n                                  <div>\n                                    <p className=\"text-sm font-medium text-slate-700\">Max Capacity</p>\n                                    <p className=\"text-slate-600\">{eventDate.setupStyle.capacity.max} guests</p>\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Additional Services */}\n                      {eventDate.services && eventDate.services.length > 0 && (\n                        <div className=\"mb-8\">\n                          <div className=\"border border-slate-200 rounded-lg\">\n                            <div className=\"bg-slate-50 border-b border-slate-200 px-6 py-4\">\n                              <div className=\"flex items-center gap-3\">\n                                <Sparkles className=\"w-5 h-5 text-slate-600\" />\n                                <h3 className=\"text-lg font-semibold text-slate-900\">Additional Services</h3>\n                              </div>\n                            </div>\n                            <div className=\"p-6\">\n                              <div className=\"space-y-4\">\n                                {eventDate.services.map((service, serviceIndex) => (\n                                  <div key={serviceIndex} className=\"border border-slate-100 rounded-lg p-4\">\n                                    <div className=\"flex items-start justify-between\">\n                                      <div className=\"flex-1\">\n                                        <div className=\"flex items-center gap-3 mb-2\">\n                                          <div className=\"w-8 h-8 bg-slate-100 rounded-lg flex items-center justify-center\">\n                                            <Star className=\"w-4 h-4 text-slate-600\" />\n                                          </div>\n                                          <h4 className=\"text-base font-semibold text-slate-900\">{service.name}</h4>\n                                        </div>\n                                        {service.description && (\n                                          <p className=\"text-sm text-slate-600 mb-3 ml-11\">{service.description}</p>\n                                        )}\n                                        <div className=\"flex items-center gap-6 ml-11\">\n                                          {service.category && (\n                                            <div className=\"inline-flex items-center gap-1 text-xs text-slate-500\">\n                                              <span>Category:</span>\n                                              <span className=\"font-medium\">{service.category}</span>\n                                            </div>\n                                          )}\n                                          {service.duration && (\n                                            <div className=\"inline-flex items-center gap-1 text-xs text-slate-500\">\n                                              <span>Duration:</span>\n                                              <span className=\"font-medium\">{service.duration}</span>\n                                            </div>\n                                          )}\n                                          <div className=\"inline-flex items-center gap-1 text-xs text-slate-500\">\n                                            <span>Pricing:</span>\n                                            <span className=\"font-medium\">{service.pricingModel === 'per_hour' ? 'Per Hour' : service.pricingModel === 'per_person' ? 'Per Person' : 'Fixed Price'}</span>\n                                          </div>\n                                        </div>\n                                      </div>\n                                      <div className=\"text-right\">\n                                        <p className=\"text-lg font-bold text-slate-900\">${service.price.toLocaleString()}</p>\n                                      </div>\n                                    </div>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Additional Event Details */}\n                      {eventDate.notes && (\n                        <div className=\"mb-8\">\n                          <div className=\"border border-slate-200 rounded-lg\">\n                            <div className=\"bg-slate-50 border-b border-slate-200 px-6 py-4\">\n                              <div className=\"flex items-center gap-3\">\n                                <FileText className=\"w-5 h-5 text-slate-600\" />\n                                <h3 className=\"text-lg font-semibold text-slate-900\">Event Notes</h3>\n                              </div>\n                            </div>\n                            <div className=\"p-6\">\n                              <p className=\"text-slate-600\">{eventDate.notes}</p>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Total Investment */}\n                      <div className=\"mt-8\">\n                        <div className=\"border border-slate-300 rounded-lg bg-slate-50\">\n                          <div className=\"bg-slate-100 border-b border-slate-300 px-6 py-4\">\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center gap-3\">\n                                <Award className=\"w-5 h-5 text-slate-700\" />\n                                <h3 className=\"text-lg font-semibold text-slate-900\">Total Investment for this Date</h3>\n                              </div>\n                              <div className=\"text-right\">\n                                <p className=\"text-2xl font-bold text-slate-900\">\n                                  ${eventDate.totalAmount?.toLocaleString() || '0'}\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"p-6\">\n                            <div className=\"grid md:grid-cols-3 gap-6\">\n                              <div>\n                                <p className=\"text-sm font-medium text-slate-700 mb-1\">Pricing Model</p>\n                                <p className=\"text-slate-600 capitalize\">{eventDate.pricingModel || 'Fixed'}</p>\n                              </div>\n                              <div>\n                                <p className=\"text-sm font-medium text-slate-700 mb-1\">Payment Terms</p>\n                                <p className=\"text-slate-600\">30% deposit required</p>\n                              </div>\n                              <div>\n                                <p className=\"text-sm font-medium text-slate-700 mb-1\">Deposit Amount</p>\n                                <p className=\"text-slate-600 font-semibold\">${Math.round((eventDate.totalAmount || 0) * 0.3).toLocaleString()}</p>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Overall Total and Company Information */}\n        <div className=\"mt-12 space-y-8\">\n          {/* Overall Total for Multi-Date Events */}\n          {proposal.eventDates && proposal.eventDates.length > 1 && (\n            <div className=\"border-2 border-slate-300 rounded-lg bg-white\">\n              <div className=\"bg-slate-100 border-b-2 border-slate-300 px-8 py-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"text-xl font-bold text-slate-900\">Grand Total for All Event Dates</h3>\n                    <p className=\"text-slate-600\">Complete {proposal.eventDates.length}-day event package</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-3xl font-bold text-slate-900\">${proposal.totalAmount}</p>\n                    {proposal.depositAmount && (\n                      <p className=\"text-slate-600 mt-1\">Deposit: ${proposal.depositAmount}</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Company Information */}\n          {proposal.companyInfo && (\n            <div className=\"border border-slate-200 rounded-lg bg-white\">\n              <div className=\"bg-slate-50 border-b border-slate-200 px-8 py-6\">\n                <h3 className=\"text-xl font-semibold text-slate-900\">{proposal.companyInfo.name}</h3>\n              </div>\n              <div className=\"p-8\">\n                <p className=\"text-slate-600 mb-6 leading-relaxed\">\n                  Thank you for considering us for your special event. We're committed to delivering exceptional service and creating memorable experiences.\n                </p>\n                <div className=\"grid md:grid-cols-3 gap-6 text-sm\">\n                  <div className=\"flex items-center gap-3\">\n                    <MapPin className=\"w-4 h-4 text-slate-500\" />\n                    <span className=\"text-slate-700\">{proposal.companyInfo.address}</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Phone className=\"w-4 h-4 text-slate-500\" />\n                    <span className=\"text-slate-700\">{proposal.companyInfo.phone}</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Mail className=\"w-4 h-4 text-slate-500\" />\n                    <span className=\"text-slate-700\">{proposal.companyInfo.email}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":28131},"server/services/gmail.ts":{"content":"import nodemailer from 'nodemailer';\nimport type { Transporter } from 'nodemailer';\n\nexport interface GmailConfig {\n  email: string;\n  appPassword: string;\n}\n\nexport class GmailService {\n  private transporter: Transporter | null = null;\n  private config: GmailConfig | null = null;\n\n  constructor(config?: GmailConfig) {\n    if (config) {\n      this.configure(config);\n    }\n  }\n\n  configure(config: GmailConfig) {\n    this.config = config;\n    this.transporter = nodemailer.createTransport({\n      service: 'gmail',\n      auth: {\n        user: config.email,\n        pass: config.appPassword\n      }\n    });\n  }\n\n  async testConnection(): Promise<boolean> {\n    if (!this.transporter) {\n      throw new Error('Gmail not configured. Please set up Gmail credentials first.');\n    }\n\n    try {\n      await this.transporter.verify();\n      return true;\n    } catch (error) {\n      console.error('Gmail connection test failed:', error);\n      return false;\n    }\n  }\n\n\n\n  async sendProposal(options: {\n    to: string;\n    customerName: string;\n    proposalContent: string;\n    totalAmount: string;\n    validUntil?: string;\n    companyName?: string;\n    proposalId?: string;\n    baseUrl?: string;\n  }): Promise<boolean> {\n    if (!this.transporter || !this.config) {\n      throw new Error('Gmail not configured. Please set up Gmail credentials first.');\n    }\n\n    const { to, customerName, proposalContent, totalAmount, validUntil, companyName = 'Venuine Events', proposalId, baseUrl } = options;\n\n    const subject = `Event Proposal from ${companyName}`;\n    \n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Proposal</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }\n          .content { background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; }\n          .proposal-box { background: white; padding: 25px; border-radius: 8px; margin: 20px 0; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n          .amount { font-size: 28px; font-weight: bold; color: #667eea; text-align: center; margin: 20px 0; }\n          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #666; }\n          .btn { background: #667eea; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 10px 0; }\n          .highlight { background: #e3f2fd; padding: 15px; border-left: 4px solid #2196f3; margin: 15px 0; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>Event Proposal</h1>\n          <p>Thank you for considering ${companyName} for your upcoming event</p>\n        </div>\n        \n        <div class=\"content\">\n          <h2>Dear ${customerName},</h2>\n          \n          <p>We're excited to present you with a customized proposal for your event. Our team has carefully crafted this proposal to meet your specific needs and requirements.</p>\n          \n          <div class=\"proposal-box\">\n            <h3>Proposal Details</h3>\n            ${proposalContent}\n            \n            <div class=\"amount\">\n              Total Investment: $${totalAmount}\n            </div>\n            \n            ${validUntil ? `\n              <div class=\"highlight\">\n                <strong>Proposal Valid Until:</strong> ${new Date(validUntil).toLocaleDateString('en-US', { \n                  weekday: 'long', \n                  year: 'numeric', \n                  month: 'long', \n                  day: 'numeric' \n                })}\n              </div>\n            ` : ''}\n          </div>\n          \n          <p>We believe this proposal offers exceptional value and will create an unforgettable experience for your event. Our team is committed to delivering excellence in every detail.</p>\n          \n          <div style=\"text-align: center; margin: 30px 0;\">\n            <a href=\"${baseUrl}/proposal/${proposalId}\" style=\"display: inline-block; background: #3b82f6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: bold; margin-bottom: 10px;\">\n              View Your Complete Proposal\n            </a>\n            <br/>\n            <a href=\"mailto:${this.config.email}?subject=Re: Event Proposal - ${customerName}\" style=\"color: #3b82f6; text-decoration: none;\">\n              Reply to Accept Proposal\n            </a>\n          </div>\n          \n          <p>If you have any questions or would like to discuss any aspect of this proposal, please don't hesitate to reach out. We're here to make your event vision a reality.</p>\n        </div>\n        \n        <div class=\"footer\">\n          <p><strong>${companyName}</strong></p>\n          <p>Creating memorable experiences, one event at a time</p>\n          <p>\n            <a href=\"mailto:${this.config.email}\">${this.config.email}</a>\n          </p>\n        </div>\n\n      </body>\n      </html>\n    `;\n\n    try {\n      await this.transporter.sendMail({\n        from: `\"${companyName}\" <${this.config.email}>`,\n        to,\n        subject,\n        html: htmlContent,\n        text: `\nEvent Proposal from ${companyName}\n\nDear ${customerName},\n\nWe're excited to present you with a customized proposal for your event.\n\n${proposalContent ? proposalContent.replace(/<[^>]*>/g, '') : 'Customized event proposal'} \n\nTotal Investment: $${totalAmount}\n\n${validUntil ? `Proposal Valid Until: ${new Date(validUntil).toLocaleDateString()}` : ''}\n\nPlease reply to this email to accept the proposal or if you have any questions.\n\nBest regards,\n${companyName}\n${this.config.email}\n        `\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Failed to send proposal email:', error);\n      throw new Error(`Failed to send email: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async sendEmail(options: {\n    to: string;\n    subject: string;\n    html: string;\n    text?: string;\n  }): Promise<boolean> {\n    if (!this.transporter || !this.config) {\n      throw new Error('Gmail not configured. Please set up Gmail credentials first.');\n    }\n\n    try {\n      await this.transporter.sendMail({\n        from: this.config.email,\n        ...options\n      });\n      return true;\n    } catch (error) {\n      console.error('Failed to send email:', error);\n      throw new Error(`Failed to send email: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  isConfigured(): boolean {\n    return this.transporter !== null && this.config !== null;\n  }\n\n  getConfiguredEmail(): string {\n    return this.config?.email || \"\";\n  }\n\n  async sendMessage(options: {\n    to: string;\n    subject: string;\n    content: string;\n    customerName: string;\n    attachments?: Array<{\n      filename: string;\n      content: Buffer;\n      contentType?: string;\n    }>;\n  }): Promise<boolean> {\n    if (!this.transporter || !this.config) {\n      throw new Error('Gmail not configured. Please set up Gmail credentials first.');\n    }\n\n    const { to, subject, content, customerName, attachments } = options;\n    \n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>${subject}</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0; }\n          .content { background: #f8f9fa; padding: 20px; border-radius: 0 0 10px 10px; }\n          .footer { text-align: center; margin-top: 20px; padding-top: 15px; border-top: 1px solid #eee; color: #666; font-size: 12px; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h2>Message from Venuine Events</h2>\n        </div>\n        \n        <div class=\"content\">\n          <p>Dear ${customerName},</p>\n          \n          ${content.split('\\n').map(line => `<p>${line}</p>`).join('')}\n          \n          ${attachments && attachments.length > 0 ? `\n          <div style=\"background: #e3f2fd; padding: 15px; border-left: 4px solid #2196f3; margin: 20px 0; border-radius: 4px;\">\n            <strong>📎 Attachments included:</strong><br>\n            ${attachments.map(att => att.filename).join('<br>')}\n          </div>\n          ` : ''}\n          \n          <p>Best regards,<br>\n          <strong>Venuine Events Team</strong></p>\n        </div>\n        \n        <div class=\"footer\">\n          <p>Venuine Events | Professional Event Management</p>\n          <p><a href=\"mailto:${this.config.email}\">${this.config.email}</a></p>\n        </div>\n      </body>\n      </html>\n    `;\n\n    try {\n      const mailOptions: any = {\n        from: `\"Venuine Events\" <${this.config.email}>`,\n        to,\n        subject,\n        html: htmlContent,\n        text: `Dear ${customerName},\\n\\n${content}\\n\\nBest regards,\\nVenuine Events Team`\n      };\n\n      // Add attachments if provided\n      if (attachments && attachments.length > 0) {\n        mailOptions.attachments = attachments.map(att => ({\n          filename: att.filename,\n          content: att.content,\n          contentType: att.contentType\n        }));\n      }\n\n      await this.transporter.sendMail(mailOptions);\n      return true;\n    } catch (error) {\n      console.error('Failed to send message:', error);\n      throw new Error(`Failed to send email: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n\n// Global instance - initialize with environment variables if available\nexport const gmailService = new GmailService();\n\n// Configure with environment variables on startup\nif (process.env.GMAIL_USER && process.env.GMAIL_APP_PASSWORD) {\n  gmailService.configure({\n    email: process.env.GMAIL_USER,\n    appPassword: process.env.GMAIL_APP_PASSWORD\n  });\n}","size_bytes":10264},"server/services/notification.ts":{"content":"import { GmailService } from './gmail';\nimport type { Booking, Customer, Payment, Proposal } from '@shared/schema';\n\nexport interface NotificationPreferences {\n  emailNotifications: boolean;\n  pushNotifications: boolean;\n  bookingConfirmations: boolean;\n  paymentReminders: boolean;\n  maintenanceAlerts: boolean;\n}\n\nexport interface EmailNotificationOptions {\n  to: string;\n  subject: string;\n  html: string;\n  companyName?: string;\n}\n\nexport class NotificationService {\n  private gmailService: GmailService;\n  private preferences: NotificationPreferences;\n\n  constructor(gmailService: GmailService, preferences: NotificationPreferences) {\n    this.gmailService = gmailService;\n    this.preferences = preferences;\n  }\n\n  async sendBookingConfirmation(booking: Booking, customer: Customer): Promise<boolean> {\n    if (!this.preferences.emailNotifications || !this.preferences.bookingConfirmations) {\n      return false;\n    }\n\n    const subject = `Booking Confirmation - ${booking.eventName}`;\n    const html = this.generateBookingConfirmationTemplate(booking, customer);\n\n    return this.sendEmail({\n      to: customer.email,\n      subject,\n      html\n    });\n  }\n\n  async sendCancellationNotification(booking: Booking, customer: Customer, cancellationReason: string): Promise<boolean> {\n    if (!this.preferences.emailNotifications) {\n      return false;\n    }\n\n    const subject = `Booking Cancelled - ${booking.eventName}`;\n    const html = this.generateCancellationTemplate(booking, customer, cancellationReason);\n\n    return this.sendEmail({\n      to: customer.email,\n      subject,\n      html\n    });\n  }\n\n  async sendPaymentReminder(booking: Booking, customer: Customer, amountDue: number): Promise<boolean> {\n    if (!this.preferences.emailNotifications || !this.preferences.paymentReminders) {\n      return false;\n    }\n\n    const subject = `Payment Reminder - ${booking.eventName}`;\n    const html = this.generatePaymentReminderTemplate(booking, customer, amountDue);\n\n    return this.sendEmail({\n      to: customer.email,\n      subject,\n      html\n    });\n  }\n\n  async sendMaintenanceAlert(message: string, recipients: string[]): Promise<boolean> {\n    if (!this.preferences.emailNotifications || !this.preferences.maintenanceAlerts) {\n      return false;\n    }\n\n    const subject = 'System Maintenance Alert';\n    const html = this.generateMaintenanceAlertTemplate(message);\n\n    const results = await Promise.all(\n      recipients.map(email => this.sendEmail({\n        to: email,\n        subject,\n        html\n      }))\n    );\n\n    return results.every(result => result);\n  }\n\n  async sendProposalNotification(proposal: Proposal, customer: Customer, proposalUrl: string): Promise<boolean> {\n    if (!this.preferences.emailNotifications) {\n      return false;\n    }\n\n    const subject = `New Event Proposal - ${proposal.title || 'Your Event'}`;\n    const html = this.generateProposalNotificationTemplate(proposal, customer, proposalUrl);\n\n    return this.sendEmail({\n      to: customer.email,\n      subject,\n      html\n    });\n  }\n\n  private async sendEmail(options: EmailNotificationOptions): Promise<boolean> {\n    try {\n      // Use Gmail service to send the email\n      await this.gmailService.sendEmail({\n        to: options.to,\n        subject: options.subject,\n        html: options.html\n      });\n      return true;\n    } catch (error) {\n      console.error('Failed to send notification email:', error);\n      return false;\n    }\n  }\n\n  private generateBookingConfirmationTemplate(booking: Booking, customer: Customer): string {\n    const eventDate = new Date(booking.eventDate).toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Booking Confirmation</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: linear-gradient(135deg, #10b981 0%, #059669 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }\n          .content { background: #f0fdf4; padding: 30px; border-radius: 0 0 10px 10px; }\n          .booking-box { background: white; padding: 25px; border-radius: 8px; margin: 20px 0; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n          .event-details { background: #ecfdf5; padding: 20px; border-radius: 8px; border-left: 4px solid #10b981; }\n          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #666; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>🎉 Booking Confirmed!</h1>\n          <p>Your event reservation has been successfully confirmed</p>\n        </div>\n        <div class=\"content\">\n          <p>Dear ${customer.name},</p>\n          <p>Thank you for choosing us for your special event! We're excited to confirm your booking.</p>\n          \n          <div class=\"booking-box\">\n            <h2 style=\"color: #059669; margin-top: 0;\">Event Details</h2>\n            <div class=\"event-details\">\n              <p><strong>Event:</strong> ${booking.eventName}</p>\n              <p><strong>Date:</strong> ${eventDate}</p>\n              <p><strong>Time:</strong> ${booking.startTime} - ${booking.endTime}</p>\n              <p><strong>Venue ID:</strong> ${booking.venueId || 'TBD'}</p>\n              ${booking.spaceId ? `<p><strong>Space ID:</strong> ${booking.spaceId}</p>` : ''}\n              <p><strong>Guest Count:</strong> ${booking.guestCount}</p>\n              ${booking.totalAmount ? `<p><strong>Total Amount:</strong> $${booking.totalAmount}</p>` : ''}\n            </div>\n          </div>\n\n          <p>If you have any questions or need to make changes, please don't hesitate to contact us.</p>\n          \n          <div class=\"footer\">\n            <p>Thank you for your business!</p>\n            <p><strong>Venuine Events</strong></p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n\n  private generateCancellationTemplate(booking: Booking, customer: Customer, cancellationReason: string): string {\n    const eventDate = new Date(booking.eventDate).toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n\n    // Format cancellation reason for display\n    const reasonMap: Record<string, string> = {\n      client_request: \"Client request\",\n      venue_conflict: \"Venue scheduling conflict\",\n      weather: \"Weather-related issues\",\n      insufficient_payment: \"Payment issues\",\n      force_majeure: \"Unforeseen circumstances\",\n      vendor_unavailable: \"Required vendor unavailable\",\n      permit_issues: \"Permit or licensing issues\",\n      client_emergency: \"Client emergency\",\n      other: \"Other circumstances\"\n    };\n\n    const displayReason = reasonMap[cancellationReason] || cancellationReason;\n\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Booking Cancellation</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }\n          .content { background: #fef2f2; padding: 30px; border-radius: 0 0 10px 10px; }\n          .booking-box { background: white; padding: 25px; border-radius: 8px; margin: 20px 0; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n          .event-details { background: #fee2e2; padding: 20px; border-radius: 8px; border-left: 4px solid #ef4444; }\n          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #666; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>📅 Booking Cancelled</h1>\n          <p>Your event reservation has been cancelled</p>\n        </div>\n        <div class=\"content\">\n          <p>Dear ${customer.name},</p>\n          <p>We want to inform you that your booking has been cancelled due to: <strong>${displayReason}</strong></p>\n          \n          <div class=\"booking-box\">\n            <h2 style=\"color: #dc2626; margin-top: 0;\">Cancelled Event Details</h2>\n            <div class=\"event-details\">\n              <p><strong>Event:</strong> ${booking.eventName}</p>\n              <p><strong>Date:</strong> ${eventDate}</p>\n              <p><strong>Time:</strong> ${booking.startTime} - ${booking.endTime}</p>\n              <p><strong>Guest Count:</strong> ${booking.guestCount}</p>\n              ${booking.totalAmount ? `<p><strong>Total Amount:</strong> $${booking.totalAmount}</p>` : ''}\n            </div>\n          </div>\n\n          <p>We sincerely apologize for any inconvenience this may cause. If you have any questions about refunds or would like to reschedule, please don't hesitate to contact us.</p>\n          \n          <div class=\"footer\">\n            <p>We appreciate your understanding.</p>\n            <p><strong>Venuine Events</strong></p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n\n  private generatePaymentReminderTemplate(booking: Booking, customer: Customer, amountDue: number): string {\n    const eventDate = new Date(booking.eventDate).toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Payment Reminder</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }\n          .content { background: #fffbeb; padding: 30px; border-radius: 0 0 10px 10px; }\n          .payment-box { background: white; padding: 25px; border-radius: 8px; margin: 20px 0; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n          .amount-due { font-size: 28px; font-weight: bold; color: #d97706; text-align: center; margin: 20px 0; }\n          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #666; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>💳 Payment Reminder</h1>\n          <p>Your event payment is due</p>\n        </div>\n        <div class=\"content\">\n          <p>Dear ${customer.name},</p>\n          <p>This is a friendly reminder that payment is due for your upcoming event:</p>\n          \n          <div class=\"payment-box\">\n            <h2 style=\"color: #d97706; margin-top: 0;\">Event Details</h2>\n            <p><strong>Event:</strong> ${booking.eventName}</p>\n            <p><strong>Date:</strong> ${eventDate}</p>\n            <p><strong>Venue ID:</strong> ${booking.venueId || 'TBD'}</p>\n            \n            <div class=\"amount-due\">\n              Amount Due: $${amountDue.toFixed(2)}\n            </div>\n          </div>\n\n          <p>Please contact us to arrange payment or if you have any questions about your invoice.</p>\n          \n          <div class=\"footer\">\n            <p>Thank you for your business!</p>\n            <p><strong>Venuine Events</strong></p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n\n  private generateMaintenanceAlertTemplate(message: string): string {\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>System Maintenance Alert</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }\n          .content { background: #fef2f2; padding: 30px; border-radius: 0 0 10px 10px; }\n          .alert-box { background: white; padding: 25px; border-radius: 8px; margin: 20px 0; box-shadow: 0 2px 10px rgba(0,0,0,0.1); border-left: 4px solid #ef4444; }\n          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #666; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>⚠️ System Maintenance Alert</h1>\n          <p>Important system notification</p>\n        </div>\n        <div class=\"content\">\n          <div class=\"alert-box\">\n            <h2 style=\"color: #dc2626; margin-top: 0;\">Maintenance Notice</h2>\n            <p>${message}</p>\n          </div>\n\n          <p>If you have any questions or concerns, please contact our support team.</p>\n          \n          <div class=\"footer\">\n            <p><strong>Venuine Events System Team</strong></p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n\n  private generateProposalNotificationTemplate(proposal: Proposal, customer: Customer, proposalUrl: string): string {\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>New Event Proposal</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }\n          .content { background: #faf5ff; padding: 30px; border-radius: 0 0 10px 10px; }\n          .proposal-box { background: white; padding: 25px; border-radius: 8px; margin: 20px 0; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n          .btn { background: #8b5cf6; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 10px 0; }\n          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #666; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>📋 New Event Proposal</h1>\n          <p>We've prepared a custom proposal for your event</p>\n        </div>\n        <div class=\"content\">\n          <p>Dear ${customer.name},</p>\n          <p>Thank you for your interest in hosting your event with us! We've prepared a detailed proposal for your consideration.</p>\n          \n          <div class=\"proposal-box\">\n            <h2 style=\"color: #7c3aed; margin-top: 0;\">Proposal Details</h2>\n            <p><strong>Event:</strong> ${proposal.title || 'Your Event'}</p>\n            ${proposal.totalAmount ? `<p><strong>Total Investment:</strong> $${proposal.totalAmount}</p>` : ''}\n            \n            <div style=\"text-align: center; margin: 20px 0;\">\n              <a href=\"${proposalUrl}\" class=\"btn\">View Full Proposal</a>\n            </div>\n          </div>\n\n          <p>Please review the proposal and let us know if you have any questions. We're here to help make your event perfect!</p>\n          \n          <div class=\"footer\">\n            <p>Thank you for considering us for your special event!</p>\n            <p><strong>Venuine Events</strong></p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n}","size_bytes":15826},"client/src/components/NotificationTestPanel.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bell, Mail, AlertTriangle, CreditCard, CheckCircle, XCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface NotificationStats {\n  notificationSettings: {\n    emailNotifications: boolean;\n    pushNotifications: boolean;\n    bookingConfirmations: boolean;\n    paymentReminders: boolean;\n    maintenanceAlerts: boolean;\n  };\n  stats: {\n    totalBookings: number;\n    confirmedBookings: number;\n    overduePayments: number;\n    gmailConfigured: boolean;\n  };\n}\n\ninterface Customer {\n  id: string;\n  name: string;\n  email: string;\n  phone?: string;\n  company?: string;\n}\n\nexport function NotificationTestPanel() {\n  const [selectedCustomer, setSelectedCustomer] = useState<string>(\"\");\n  const [testType, setTestType] = useState<string>(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch notification stats\n  const { data: notificationStats, isLoading: statsLoading } = useQuery<NotificationStats>({\n    queryKey: [\"/api/notifications/stats\"]\n  });\n\n  // Fetch customers for testing\n  const { data: customers = [] } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"]\n  });\n\n  // Test notification mutation\n  const testNotificationMutation = useMutation({\n    mutationFn: async ({ type, customerId }: { type: string; customerId: string }) => {\n      return apiRequest(\"POST\", \"/api/notifications/test\", { type, customerId });\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Test Notification Sent!\",\n        description: data.message,\n        variant: \"default\"\n      });\n    },\n    onError: (error: any) => {\n      const errorMessage = error.message || \"Failed to send test notification\";\n      toast({\n        title: \"Test Failed\",\n        description: errorMessage,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Send payment reminders mutation\n  const sendPaymentRemindersMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/notifications/payment-reminders\", {});\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Payment Reminders Sent\",\n        description: `${data.results?.length || 0} reminders processed`,\n        variant: \"default\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications/stats\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Send Reminders\",\n        description: error.message || \"Error sending payment reminders\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleTestNotification = () => {\n    if (!selectedCustomer || !testType) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select both a customer and notification type\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    testNotificationMutation.mutate({ type: testType, customerId: selectedCustomer });\n  };\n\n  const handleSendPaymentReminders = () => {\n    sendPaymentRemindersMutation.mutate();\n  };\n\n  if (statsLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"animate-spin w-6 h-6 border-2 border-primary border-t-transparent rounded-full mx-auto\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const settings = notificationStats?.notificationSettings;\n  const stats = notificationStats?.stats;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Notification Status Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Bell className=\"w-5 h-5\" />\n            Notification System Status\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <Mail className=\"w-4 h-4\" />\n              <span className=\"text-sm\">Email Notifications</span>\n              <Badge variant={settings?.emailNotifications ? \"default\" : \"secondary\"}>\n                {settings?.emailNotifications ? \"Enabled\" : \"Disabled\"}\n              </Badge>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              <span className=\"text-sm\">Booking Confirmations</span>\n              <Badge variant={settings?.bookingConfirmations ? \"default\" : \"secondary\"}>\n                {settings?.bookingConfirmations ? \"Enabled\" : \"Disabled\"}\n              </Badge>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <CreditCard className=\"w-4 h-4\" />\n              <span className=\"text-sm\">Payment Reminders</span>\n              <Badge variant={settings?.paymentReminders ? \"default\" : \"secondary\"}>\n                {settings?.paymentReminders ? \"Enabled\" : \"Disabled\"}\n              </Badge>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"w-4 h-4\" />\n              <span className=\"text-sm\">Maintenance Alerts</span>\n              <Badge variant={settings?.maintenanceAlerts ? \"default\" : \"secondary\"}>\n                {settings?.maintenanceAlerts ? \"Enabled\" : \"Disabled\"}\n              </Badge>\n            </div>\n          </div>\n\n          <div className=\"p-4 bg-slate-50 rounded-lg\">\n            <h4 className=\"font-medium mb-2\">System Statistics</h4>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n              <div>\n                <span className=\"font-medium\">{stats?.totalBookings || 0}</span>\n                <p className=\"text-slate-600\">Total Bookings</p>\n              </div>\n              <div>\n                <span className=\"font-medium\">{stats?.confirmedBookings || 0}</span>\n                <p className=\"text-slate-600\">Confirmed Bookings</p>\n              </div>\n              <div>\n                <span className=\"font-medium text-orange-600\">{stats?.overduePayments || 0}</span>\n                <p className=\"text-slate-600\">Overdue Payments</p>\n              </div>\n              <div>\n                <span className=\"font-medium\">\n                  {stats?.gmailConfigured ? (\n                    <Badge variant=\"default\" className=\"text-xs\">Gmail Ready</Badge>\n                  ) : (\n                    <Badge variant=\"secondary\" className=\"text-xs\">Not Configured</Badge>\n                  )}\n                </span>\n                <p className=\"text-slate-600\">Email Service</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Test Notifications */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Mail className=\"w-5 h-5\" />\n            Test Notifications\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Select Customer</label>\n              <Select value={selectedCustomer} onValueChange={setSelectedCustomer}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Choose a customer...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {customers.map(customer => (\n                    <SelectItem key={customer.id} value={customer.id}>\n                      {customer.name} ({customer.email})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Notification Type</label>\n              <Select value={testType} onValueChange={setTestType}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Choose notification type...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"booking\">Booking Confirmation</SelectItem>\n                  <SelectItem value=\"payment\">Payment Reminder</SelectItem>\n                  <SelectItem value=\"maintenance\">Maintenance Alert</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <Button \n            onClick={handleTestNotification}\n            disabled={!selectedCustomer || !testType || testNotificationMutation.isPending}\n            className=\"w-full\"\n          >\n            {testNotificationMutation.isPending ? \"Sending...\" : \"Send Test Notification\"}\n          </Button>\n\n          {!settings?.emailNotifications && (\n            <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n              <p className=\"text-sm text-yellow-800\">\n                <AlertTriangle className=\"w-4 h-4 inline mr-1\" />\n                Email notifications are disabled in settings. Enable them to test notifications.\n              </p>\n            </div>\n          )}\n\n          {!stats?.gmailConfigured && (\n            <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n              <p className=\"text-sm text-blue-800\">\n                <Mail className=\"w-4 h-4 inline mr-1\" />\n                Gmail is not configured. Set up Gmail credentials in Integrations settings to send emails.\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Payment Reminders */}\n      {stats?.overduePayments! > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CreditCard className=\"w-5 h-5 text-orange-600\" />\n              Payment Reminders\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"p-4 bg-orange-50 border border-orange-200 rounded-lg\">\n              <p className=\"text-sm text-orange-800 mb-3\">\n                You have <strong>{stats?.overduePayments}</strong> bookings with overdue payments.\n              </p>\n              <Button \n                onClick={handleSendPaymentReminders}\n                disabled={sendPaymentRemindersMutation.isPending || !settings?.paymentReminders}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                {sendPaymentRemindersMutation.isPending ? \"Sending...\" : \"Send Payment Reminders\"}\n              </Button>\n            </div>\n            \n            {!settings?.paymentReminders && (\n              <p className=\"text-xs text-slate-600\">\n                Payment reminders are disabled in notification settings.\n              </p>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":11188},"client/src/lib/currency.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\n// Currency configuration mapping\nconst CURRENCY_CONFIG = {\n  USD: { symbol: '$', code: 'USD', locale: 'en-US' },\n  EUR: { symbol: '€', code: 'EUR', locale: 'de-DE' },\n  GBP: { symbol: '£', code: 'GBP', locale: 'en-GB' },\n  CAD: { symbol: 'C$', code: 'CAD', locale: 'en-CA' },\n  AUD: { symbol: 'A$', code: 'AUD', locale: 'en-AU' },\n  JPY: { symbol: '¥', code: 'JPY', locale: 'ja-JP' }\n};\n\n// Hook to get current currency setting\nexport function useCurrency() {\n  const { data: settings } = useQuery({\n    queryKey: ['/api/settings'],\n    retry: false,\n  });\n\n  const currencyCode = (settings as any)?.business?.currency || 'USD';\n  const config = CURRENCY_CONFIG[currencyCode as keyof typeof CURRENCY_CONFIG] || CURRENCY_CONFIG.USD;\n\n  return {\n    currencyCode,\n    symbol: config.symbol,\n    locale: config.locale,\n    config\n  };\n}\n\n// Format amount with proper currency\nexport function formatCurrency(amount: number, currencyCode?: string, locale?: string) {\n  const code = currencyCode || 'USD';\n  const loc = locale || 'en-US';\n  const config = CURRENCY_CONFIG[code as keyof typeof CURRENCY_CONFIG] || CURRENCY_CONFIG.USD;\n\n  return new Intl.NumberFormat(loc, {\n    style: 'currency',\n    currency: config.code,\n    minimumFractionDigits: config.code === 'JPY' ? 0 : 2\n  }).format(amount);\n}\n\n// Get currency symbol only\nexport function getCurrencySymbol(currencyCode?: string) {\n  const code = currencyCode || 'USD';\n  const config = CURRENCY_CONFIG[code as keyof typeof CURRENCY_CONFIG] || CURRENCY_CONFIG.USD;\n  return config.symbol;\n}\n\n// Hook for formatted currency display\nexport function useFormattedCurrency() {\n  const { currencyCode, locale, config } = useCurrency();\n\n  const formatAmount = (amount: number) => {\n    return formatCurrency(amount, currencyCode, locale);\n  };\n\n  const getSymbol = () => config.symbol;\n\n  return {\n    formatAmount,\n    getSymbol,\n    currencyCode,\n    locale\n  };\n}","size_bytes":1969},"client/src/components/dashboard/revenue-chart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useFormattedCurrency } from \"@/lib/currency\";\nimport { BarChart3, TrendingUp, DollarSign } from \"lucide-react\";\nimport { format, subDays, eachDayOfInterval } from \"date-fns\";\n\nexport function RevenueChart() {\n  const { data: bookings } = useQuery({ queryKey: [\"/api/bookings\"] });\n  const { formatAmount } = useFormattedCurrency();\n\n  // Calculate revenue for the last 7 days\n  const getRevenueData = () => {\n    if (!bookings || !Array.isArray(bookings)) return [];\n    \n    const today = new Date();\n    const lastWeek = subDays(today, 6);\n    const days = eachDayOfInterval({ start: lastWeek, end: today });\n    \n    return days.map(day => {\n      const dayRevenue = (bookings as any[])\n        .filter(booking => {\n          try {\n            if (!booking.date) return false;\n            const bookingDate = new Date(booking.date);\n            return format(bookingDate, 'yyyy-MM-dd') === format(day, 'yyyy-MM-dd') && \n                   booking.status === 'confirmed';\n          } catch {\n            return false;\n          }\n        })\n        .reduce((sum, booking) => sum + (parseFloat(booking.totalAmount) || 0), 0);\n      \n      return {\n        date: format(day, 'MMM d'),\n        revenue: dayRevenue,\n        isToday: format(day, 'yyyy-MM-dd') === format(today, 'yyyy-MM-dd')\n      };\n    });\n  };\n\n  const revenueData = getRevenueData();\n  const maxRevenue = Math.max(...revenueData.map(d => d.revenue), 1);\n  const totalWeekRevenue = revenueData.reduce((sum, d) => sum + d.revenue, 0);\n  const avgDailyRevenue = totalWeekRevenue / 7;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <BarChart3 className=\"w-5 h-5 text-green-600\" />\n          Weekly Revenue\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {/* Revenue Chart */}\n          <div className=\"space-y-2\">\n            {revenueData.map((day, index) => (\n              <div key={index} className=\"flex items-center gap-3\">\n                <span className=\"text-xs font-medium text-slate-600 w-12\">{day.date}</span>\n                <div className=\"flex-1 relative\">\n                  <div className=\"h-6 bg-slate-100 rounded-full overflow-hidden\">\n                    <div \n                      className={`h-full transition-all duration-500 rounded-full ${\n                        day.isToday ? 'bg-green-500' : 'bg-green-400'\n                      }`}\n                      style={{ width: `${(day.revenue / maxRevenue) * 100}%` }}\n                    />\n                  </div>\n                </div>\n                <span className=\"text-xs font-medium text-slate-700 w-16 text-right\">\n                  {formatAmount(day.revenue)}\n                </span>\n              </div>\n            ))}\n          </div>\n\n          {/* Summary Stats */}\n          <div className=\"pt-4 border-t border-slate-200 space-y-2\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-slate-600\">Total (7 days)</span>\n              <span className=\"font-semibold text-slate-900\">{formatAmount(totalWeekRevenue)}</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-slate-600\">Daily Average</span>\n              <span className=\"font-semibold text-slate-900\">{formatAmount(Math.round(avgDailyRevenue))}</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-green-600 mt-2\">\n              <TrendingUp className=\"w-4 h-4\" />\n              <span>Tracking weekly performance</span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3855},"client/src/components/modals/cancellation-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { AlertTriangle, X } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface CancellationModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  booking: any;\n  onCancelled: () => void;\n}\n\nconst CANCELLATION_REASONS = [\n  { value: \"client_request\", label: \"Client requested cancellation\" },\n  { value: \"venue_conflict\", label: \"Venue scheduling conflict\" },\n  { value: \"weather\", label: \"Weather-related cancellation\" },\n  { value: \"insufficient_payment\", label: \"Payment issues\" },\n  { value: \"force_majeure\", label: \"Force majeure (unforeseen circumstances)\" },\n  { value: \"vendor_unavailable\", label: \"Required vendor unavailable\" },\n  { value: \"permit_issues\", label: \"Permit or licensing issues\" },\n  { value: \"client_emergency\", label: \"Client emergency\" },\n  { value: \"other\", label: \"Other reason\" }\n];\n\nexport function CancellationModal({ open, onOpenChange, booking, onCancelled }: CancellationModalProps) {\n  const [selectedReason, setSelectedReason] = useState(\"\");\n  const [cancellationNote, setCancellationNote] = useState(\"\");\n  const { toast } = useToast();\n\n  const cancelBookingMutation = useMutation({\n    mutationFn: async () => {\n      if (!selectedReason) {\n        throw new Error(\"Please select a cancellation reason\");\n      }\n\n      const response = await apiRequest(`/api/bookings/${booking.id}/cancel`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          cancellationReason: selectedReason,\n          cancellationNote: cancellationNote.trim() || null\n        }),\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Booking Cancelled\",\n        description: \"The booking has been successfully cancelled and logged for reporting.\"\n      });\n      onCancelled();\n      onOpenChange(false);\n      // Reset form\n      setSelectedReason(\"\");\n      setCancellationNote(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Cancellation Failed\",\n        description: error.message || \"Failed to cancel booking. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleCancel = () => {\n    cancelBookingMutation.mutate();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2 text-red-600\">\n            <AlertTriangle className=\"h-5 w-5\" />\n            Cancel Booking\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"p-3 bg-red-50 rounded-lg border border-red-200\">\n            <h4 className=\"font-medium text-sm mb-1\">{booking?.eventName}</h4>\n            <p className=\"text-sm text-gray-600\">\n              {booking?.eventDate && new Date(booking.eventDate).toLocaleDateString()} • {booking?.startTime} - {booking?.endTime}\n            </p>\n            <p className=\"text-sm text-red-700 mt-2\">\n              <strong>Warning:</strong> This action cannot be undone. The booking will be permanently cancelled.\n            </p>\n          </div>\n\n          <div>\n            <Label className=\"text-sm font-medium\">Reason for Cancellation *</Label>\n            <RadioGroup value={selectedReason} onValueChange={setSelectedReason} className=\"mt-2\">\n              {CANCELLATION_REASONS.map((reason) => (\n                <div key={reason.value} className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value={reason.value} id={reason.value} />\n                  <Label htmlFor={reason.value} className=\"text-sm cursor-pointer\">\n                    {reason.label}\n                  </Label>\n                </div>\n              ))}\n            </RadioGroup>\n          </div>\n\n          <div>\n            <Label htmlFor=\"cancellation-note\" className=\"text-sm font-medium\">\n              Additional Details {selectedReason === \"other\" && \"*\"}\n            </Label>\n            <Textarea\n              id=\"cancellation-note\"\n              placeholder={\n                selectedReason === \"other\" \n                  ? \"Please provide details about the cancellation reason...\"\n                  : \"Optional: Add any additional details about this cancellation...\"\n              }\n              value={cancellationNote}\n              onChange={(e) => setCancellationNote(e.target.value)}\n              className=\"mt-1\"\n              rows={3}\n            />\n          </div>\n        </div>\n\n        <div className=\"flex justify-end gap-3 pt-4\">\n          <Button \n            variant=\"outline\" \n            onClick={() => onOpenChange(false)}\n            disabled={cancelBookingMutation.isPending}\n          >\n            Keep Booking\n          </Button>\n          <Button \n            variant=\"destructive\"\n            onClick={handleCancel}\n            disabled={!selectedReason || (selectedReason === \"other\" && !cancellationNote.trim()) || cancelBookingMutation.isPending}\n          >\n            {cancelBookingMutation.isPending ? \"Cancelling...\" : \"Cancel Booking\"}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5640},"client/src/components/modals/status-change-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CancellationModal } from \"./cancellation-modal\";\n\ninterface StatusChangeModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  booking: any;\n  onStatusChanged: () => void;\n}\n\nconst STATUS_OPTIONS = [\n  { value: \"inquiry\", label: \"Lead\", description: \"Active lead - gathering requirements, sending proposals\" },\n  { value: \"confirmed\", label: \"Booked\", description: \"Customer confirmed, contract signed, deposit received\" },\n  { value: \"completed\", label: \"Completed\", description: \"Event finished successfully\" },\n  { value: \"cancelled\", label: \"Cancelled\", description: \"Booking cancelled by customer or venue\" }\n];\n\nexport function StatusChangeModal({ open, onOpenChange, booking, onStatusChanged }: StatusChangeModalProps) {\n  const [selectedStatus, setSelectedStatus] = useState(booking?.status || \"\");\n  const [notes, setNotes] = useState(\"\");\n  const [showCancellationModal, setShowCancellationModal] = useState(false);\n  const { toast } = useToast();\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async () => {\n      const updateData: any = {\n        status: selectedStatus,\n      };\n\n      // Add completion timestamp if marking as completed\n      if (selectedStatus === \"completed\") {\n        updateData.completedAt = new Date().toISOString();\n      }\n\n      // Add notes if provided\n      if (notes.trim()) {\n        updateData.notes = booking.notes ? `${booking.notes}\\n\\nStatus Update: ${notes}` : `Status Update: ${notes}`;\n      }\n\n      const response = await apiRequest(`/api/bookings/${booking.id}`, {\n        method: \"PATCH\",\n        body: JSON.stringify(updateData),\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Status Updated\",\n        description: `Booking status changed to ${STATUS_OPTIONS.find(s => s.value === selectedStatus)?.label}`\n      });\n      onStatusChanged();\n      onOpenChange(false);\n      setNotes(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update booking status. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleStatusChange = () => {\n    if (selectedStatus === \"cancelled\") {\n      setShowCancellationModal(true);\n      return;\n    }\n    updateStatusMutation.mutate();\n  };\n\n  const getCurrentStatusBadge = (status: string) => {\n    const statusConfig = {\n      inquiry: { class: \"bg-purple-100 text-purple-800\", label: \"Lead\" },\n      confirmed: { class: \"bg-green-100 text-green-800\", label: \"Booked\" },\n      completed: { class: \"bg-gray-100 text-gray-800\", label: \"Completed\" },\n      cancelled: { class: \"bg-red-100 text-red-800\", label: \"Cancelled\" }\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig] || { class: \"bg-gray-100 text-gray-800\", label: status };\n    \n    return (\n      <Badge className={config.class}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  return (\n    <>\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Update Booking Status</DialogTitle>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div className=\"p-3 bg-slate-50 rounded-lg\">\n              <h4 className=\"font-medium text-sm mb-1\">{booking?.eventName}</h4>\n              <p className=\"text-sm text-gray-600 mb-2\">\n                {booking?.eventDate && new Date(booking.eventDate).toLocaleDateString()} • {booking?.startTime} - {booking?.endTime}\n              </p>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm text-gray-600\">Current Status:</span>\n                {getCurrentStatusBadge(booking?.status)}\n              </div>\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-medium\">New Status</Label>\n              <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n                <SelectTrigger className=\"mt-1\">\n                  <SelectValue placeholder=\"Select new status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {STATUS_OPTIONS.map((status) => (\n                    <SelectItem key={status.value} value={status.value}>\n                      <div>\n                        <div className=\"font-medium\">{status.label}</div>\n                        <div className=\"text-xs text-gray-500\">{status.description}</div>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {selectedStatus && selectedStatus !== booking?.status && (\n              <div>\n                <Label htmlFor=\"status-notes\" className=\"text-sm font-medium\">\n                  Notes (Optional)\n                </Label>\n                <Textarea\n                  id=\"status-notes\"\n                  placeholder=\"Add any notes about this status change...\"\n                  value={notes}\n                  onChange={(e) => setNotes(e.target.value)}\n                  className=\"mt-1\"\n                  rows={3}\n                />\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex justify-end gap-3 pt-4\">\n            <Button \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n              disabled={updateStatusMutation.isPending}\n            >\n              Cancel\n            </Button>\n            <Button \n              onClick={handleStatusChange}\n              disabled={!selectedStatus || selectedStatus === booking?.status || updateStatusMutation.isPending}\n              variant={selectedStatus === \"cancelled\" ? \"destructive\" : \"default\"}\n            >\n              {updateStatusMutation.isPending ? \"Updating...\" : \n               selectedStatus === \"cancelled\" ? \"Cancel Booking\" : \"Update Status\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      <CancellationModal\n        open={showCancellationModal}\n        onOpenChange={setShowCancellationModal}\n        booking={booking}\n        onCancelled={() => {\n          onStatusChanged();\n          onOpenChange(false);\n        }}\n      />\n    </>\n  );\n}","size_bytes":6916},"client/src/components/forms/enhanced-beo-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { \n  FileOutput, \n  Download, \n  Printer, \n  MapPin, \n  Clock, \n  Users, \n  Calendar,\n  DollarSign,\n  Phone,\n  Mail,\n  Building2,\n  CheckCircle\n} from \"lucide-react\";\n\ninterface EnhancedBeoModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  booking: any;\n}\n\nexport function EnhancedBeoModal({ isOpen, onClose, booking }: EnhancedBeoModalProps) {\n  const [selectedTemplate, setSelectedTemplate] = useState(\"standard\");\n  const [enabledBeoTypes, setEnabledBeoTypes] = useState([\n    \"floor_plan\", \"timeline\", \"catering\", \"av_requirements\"\n  ]);\n\n  // Fetch BEO settings and business info\n  const { data: settings } = useQuery({\n    queryKey: [\"/api/settings\"],\n    enabled: isOpen\n  });\n\n  useEffect(() => {\n    if (settings && typeof settings === 'object' && 'beo' in settings) {\n      const beoSettings = settings.beo as any;\n      setSelectedTemplate(beoSettings?.defaultTemplate || \"standard\");\n      setEnabledBeoTypes(beoSettings?.enabledBeoTypes || [\"timeline\", \"floor_plan\", \"catering\", \"av_requirements\"]);\n    }\n  }, [settings]);\n\n  const getTemplateStyles = () => {\n    switch (selectedTemplate) {\n      case \"luxury\":\n        return \"bg-gradient-to-br from-amber-50 to-yellow-50 border-amber-200\";\n      case \"corporate\":\n        return \"bg-gradient-to-br from-blue-50 to-slate-50 border-blue-200\";\n      case \"wedding\":\n        return \"bg-gradient-to-br from-pink-50 to-rose-50 border-pink-200\";\n      case \"minimal\":\n        return \"bg-white border-gray-200\";\n      case \"executive\":\n        return \"bg-white border-slate-400\";\n      default:\n        return \"bg-gradient-to-br from-gray-50 to-slate-50 border-gray-200\";\n    }\n  };\n\n  const getTemplateTitle = () => {\n    switch (selectedTemplate) {\n      case \"luxury\": return \"LUXURY EVENT ORDER\";\n      case \"corporate\": return \"CORPORATE EVENT ORDER\";\n      case \"wedding\": return \"WEDDING EVENT ORDER\";\n      case \"minimal\": return \"EVENT ORDER\";\n      case \"executive\": return \"EXECUTIVE EVENT ORDER\";\n      default: return \"BANQUET EVENT ORDER\";\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    const currency = settings?.business?.currency || 'USD';\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency\n    }).format(amount);\n  };\n\n  const calculateEventDuration = () => {\n    try {\n      const start = new Date(`2000-01-01 ${booking.startTime}`);\n      const end = new Date(`2000-01-01 ${booking.endTime}`);\n      const diffHours = Math.abs((end.getTime() - start.getTime()) / (1000 * 60 * 60));\n      return `${diffHours} hours`;\n    } catch {\n      return 'TBD';\n    }\n  };\n\n  const generateTimeline = () => {\n    try {\n      const eventStart = new Date(`2000-01-01 ${booking.startTime}`);\n      const eventEnd = new Date(`2000-01-01 ${booking.endTime}`);\n      \n      const setupTime = new Date(eventStart.getTime() - 2 * 60 * 60 * 1000); // 2 hours before\n      const cocktailTime = new Date(eventStart.getTime() + 30 * 60 * 1000);   // 30 min after start\n      const dinnerTime = new Date(eventStart.getTime() + 90 * 60 * 1000);     // 1.5 hours after start\n      const breakdownStart = new Date(eventEnd.getTime() - 30 * 60 * 1000);   // 30 min before end\n      const breakdownEnd = new Date(eventEnd.getTime() + 60 * 60 * 1000);     // 1 hour after end\n\n      return [\n        { time: setupTime, activity: \"Setup & Vendor Load-in\", notes: \"All vendors on-site, setup begins\" },\n        { time: eventStart, activity: \"Guest Arrival & Event Start\", notes: \"Welcome reception begins\" },\n        { time: cocktailTime, activity: \"Cocktail Hour\", notes: \"Bar service in full swing\" },\n        { time: dinnerTime, activity: \"Dinner Service\", notes: \"Meal service commences\" },\n        { time: breakdownStart, activity: \"Event Wind-down\", notes: \"Prepare for conclusion\" },\n        { time: eventEnd, activity: \"Event End\", notes: \"Guest departure begins\" },\n        { time: breakdownEnd, activity: \"Breakdown Complete\", notes: \"All vendors departed\" }\n      ];\n    } catch {\n      return [];\n    }\n  };\n\n  const timelineEvents = generateTimeline();\n\n  if (!booking) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-5xl max-h-[95vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <FileOutput className=\"h-5 w-5\" />\n            Enhanced Banquet Event Order (BEO)\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Action Buttons */}\n          <div className=\"flex gap-2 justify-end\">\n            <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n              <Printer className=\"h-4 w-4\" />\n              Print BEO\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n              <Download className=\"h-4 w-4\" />\n              Download PDF\n            </Button>\n          </div>\n\n          {/* BEO Document */}\n          <Card className={`${getTemplateStyles()} shadow-xl border-2`}>\n            {/* Header with Business Info */}\n            <CardHeader className=\"text-center border-b-2 pb-6 bg-white/80\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-center gap-2 mb-2\">\n                  <Building2 className=\"h-6 w-6 text-blue-600\" />\n                  <h2 className=\"text-2xl font-bold text-gray-800\">\n                    {settings?.business?.companyName || 'Venuine Events'}\n                  </h2>\n                </div>\n                \n                <div className=\"text-sm text-gray-600 space-y-1\">\n                  <div className=\"font-medium\">{settings?.business?.companyAddress || '123 Event Plaza, Venue City, State 12345'}</div>\n                  <div className=\"flex justify-center gap-4\">\n                    <span>{settings?.business?.companyPhone || '+1 (555) 123-4567'}</span>\n                    <span>•</span>\n                    <span>{settings?.business?.companyEmail || 'events@venuine.com'}</span>\n                  </div>\n                  {settings?.business?.website && (\n                    <div className=\"text-blue-600\">{settings.business.website}</div>\n                  )}\n                </div>\n                \n                <div className=\"border-t pt-4\">\n                  <h1 className=\"text-3xl font-bold tracking-wide text-gray-800\">\n                    {getTemplateTitle()}\n                  </h1>\n                  <div className=\"text-sm text-gray-600 flex justify-center gap-6 mt-2\">\n                    <span className=\"font-mono\">BEO #: BEO-{booking.id?.slice(-6)?.toUpperCase() || \"000001\"}</span>\n                    <span>•</span>\n                    <span>Generated: {format(new Date(), \"MMM d, yyyy 'at' h:mm a\")}</span>\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-8 p-8\">\n              {/* Event & Client Information Grid */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                {/* Event Information */}\n                <div className=\"bg-blue-50 p-6 rounded-lg border border-blue-200\">\n                  <h3 className=\"font-bold text-xl mb-4 text-blue-800 flex items-center gap-2\">\n                    <Calendar className=\"h-5 w-5\" />\n                    Event Information\n                  </h3>\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      <span className=\"font-semibold text-gray-700\">Event Name:</span>\n                      <span className=\"col-span-2 font-bold text-gray-900\">{booking.eventName}</span>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      <span className=\"font-semibold text-gray-700\">Event Type:</span>\n                      <span className=\"col-span-2 capitalize\">{booking.eventType?.replace('_', ' ') || 'General Event'}</span>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      <span className=\"font-semibold text-gray-700\">Date:</span>\n                      <span className=\"col-span-2 font-bold text-blue-900\">\n                        {format(new Date(booking.eventDate), \"EEEE, MMMM d, yyyy\")}\n                      </span>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      <span className=\"font-semibold text-gray-700\">Time:</span>\n                      <span className=\"col-span-2\">{booking.startTime} - {booking.endTime}</span>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      <span className=\"font-semibold text-gray-700\">Duration:</span>\n                      <span className=\"col-span-2\">{calculateEventDuration()}</span>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      <span className=\"font-semibold text-gray-700\">Guest Count:</span>\n                      <span className=\"col-span-2 font-bold text-blue-900\">{booking.guestCount} guests</span>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      <span className=\"font-semibold text-gray-700\">Status:</span>\n                      <Badge variant=\"outline\" className=\"w-fit capitalize\">\n                        {booking.status}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Client Information */}\n                <div className=\"bg-green-50 p-6 rounded-lg border border-green-200\">\n                  <h3 className=\"font-bold text-xl mb-4 text-green-800 flex items-center gap-2\">\n                    <Users className=\"h-5 w-5\" />\n                    Client Information\n                  </h3>\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      <span className=\"font-semibold text-gray-700\">Contact Name:</span>\n                      <span className=\"col-span-2 font-bold text-gray-900\">{booking.customerName || 'TBD'}</span>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      <span className=\"font-semibold text-gray-700\">Email:</span>\n                      <span className=\"col-span-2 text-blue-600\">{booking.customerEmail || 'TBD'}</span>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      <span className=\"font-semibold text-gray-700\">Phone:</span>\n                      <span className=\"col-span-2\">{booking.customerPhone || 'TBD'}</span>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      <span className=\"font-semibold text-gray-700\">BEO Date:</span>\n                      <span className=\"col-span-2\">{format(new Date(), \"MMM d, yyyy\")}</span>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      <span className=\"font-semibold text-gray-700\">Event Manager:</span>\n                      <span className=\"col-span-2 font-semibold\">Venuine Events Team</span>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      <span className=\"font-semibold text-gray-700\">Contract ID:</span>\n                      <span className=\"col-span-2 font-mono text-xs\">\n                        {booking.contractId || booking.id?.slice(-8)?.toUpperCase() || \"PENDING\"}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Venue & Space Details */}\n              <div className=\"bg-orange-50 p-6 rounded-lg border border-orange-200\">\n                <h3 className=\"font-bold text-xl mb-4 text-orange-800 flex items-center gap-2\">\n                  <MapPin className=\"h-5 w-5\" />\n                  Venue & Space Configuration\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 text-sm\">\n                  <div className=\"space-y-3\">\n                    <h4 className=\"font-bold text-gray-800 border-b border-orange-300 pb-1\">Location</h4>\n                    <div className=\"space-y-2\">\n                      <div><span className=\"font-semibold\">Venue:</span> {booking.venueName || 'Main Venue'}</div>\n                      <div><span className=\"font-semibold\">Space:</span> {booking.spaceName || 'Grand Ballroom'}</div>\n                      <div><span className=\"font-semibold\">Capacity:</span> {Math.ceil(booking.guestCount * 1.5)} max</div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-3\">\n                    <h4 className=\"font-bold text-gray-800 border-b border-orange-300 pb-1\">Setup</h4>\n                    <div className=\"space-y-2\">\n                      <div><span className=\"font-semibold\">Style:</span> Rounds of 10</div>\n                      <div><span className=\"font-semibold\">Tables:</span> {Math.ceil(booking.guestCount / 10)} round</div>\n                      <div><span className=\"font-semibold\">Setup:</span> 2 hrs prior</div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-3\">\n                    <h4 className=\"font-bold text-gray-800 border-b border-orange-300 pb-1\">Furnishings</h4>\n                    <div className=\"space-y-2\">\n                      <div><span className=\"font-semibold\">Linens:</span> White floor-length</div>\n                      <div><span className=\"font-semibold\">Chairs:</span> Chiavari Gold</div>\n                      <div><span className=\"font-semibold\">Centerpieces:</span> Seasonal florals</div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-3\">\n                    <h4 className=\"font-bold text-gray-800 border-b border-orange-300 pb-1\">Logistics</h4>\n                    <div className=\"space-y-2\">\n                      <div><span className=\"font-semibold\">Breakdown:</span> 30 min post</div>\n                      <div><span className=\"font-semibold\">Load Out:</span> 1 hr post</div>\n                      <div><span className=\"font-semibold\">Security:</span> Standard</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Timeline Section */}\n              {enabledBeoTypes.includes(\"timeline\") && timelineEvents.length > 0 && (\n                <div className=\"bg-purple-50 p-6 rounded-lg border border-purple-200\">\n                  <h3 className=\"font-bold text-xl mb-4 text-purple-800 flex items-center gap-2\">\n                    <Clock className=\"h-5 w-5\" />\n                    Event Timeline\n                  </h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"grid grid-cols-3 gap-4 font-bold text-sm bg-purple-100 p-3 rounded border\">\n                      <span>Time</span>\n                      <span>Activity</span>\n                      <span>Notes</span>\n                    </div>\n                    {timelineEvents.map((event, index) => (\n                      <div key={index} className=\"grid grid-cols-3 gap-4 text-sm p-3 border-b border-purple-200 hover:bg-purple-50\">\n                        <span className=\"font-mono font-semibold\">\n                          {event.time.toLocaleTimeString('en-US', {hour: '2-digit', minute:'2-digit', hour12: true})}\n                        </span>\n                        <span className=\"font-medium\">{event.activity}</span>\n                        <span className=\"text-gray-600\">{event.notes}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Services & Packages */}\n              <div className=\"bg-gray-50 p-6 rounded-lg border border-gray-200\">\n                <h3 className=\"font-bold text-xl mb-4 text-gray-800 flex items-center gap-2\">\n                  <CheckCircle className=\"h-5 w-5\" />\n                  Services & Packages\n                </h3>\n                <div className=\"space-y-4\">\n                  {booking.selectedPackages?.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold text-lg mb-3 text-blue-800\">Selected Package</h4>\n                      {booking.selectedPackages.map((pkg: any, index: number) => (\n                        <div key={index} className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                          <div className=\"flex justify-between items-start mb-2\">\n                            <div>\n                              <h5 className=\"font-bold text-blue-900\">{pkg.name}</h5>\n                              <p className=\"text-sm text-blue-700\">{pkg.description}</p>\n                            </div>\n                            <div className=\"text-right\">\n                              <span className=\"font-bold text-lg text-blue-900\">\n                                {formatCurrency(pkg.finalPrice || pkg.price)}\n                              </span>\n                              <div className=\"text-xs text-blue-600\">\n                                {pkg.pricingModel === 'per_person' ? `${formatCurrency(pkg.price)} per person` : 'Total'}\n                              </div>\n                            </div>\n                          </div>\n                          {pkg.includedServices?.length > 0 && (\n                            <div className=\"mt-3 pt-3 border-t border-blue-200\">\n                              <p className=\"text-xs font-semibold text-blue-800 mb-2\">Included Services:</p>\n                              <div className=\"grid grid-cols-2 gap-2\">\n                                {pkg.includedServices.map((service: any, idx: number) => (\n                                  <div key={idx} className=\"text-xs bg-blue-100 px-2 py-1 rounded\">\n                                    {service.name}\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                  \n                  {booking.selectedServices?.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold text-lg mb-3 text-green-800\">Additional Services</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                        {booking.selectedServices.map((service: any, index: number) => (\n                          <div key={index} className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n                            <div className=\"flex justify-between items-start\">\n                              <div className=\"flex-1\">\n                                <h6 className=\"font-semibold text-green-900\">{service.name}</h6>\n                                <p className=\"text-xs text-green-700\">{service.description}</p>\n                              </div>\n                              <div className=\"text-right ml-2\">\n                                <span className=\"font-semibold text-green-900\">\n                                  {formatCurrency(service.finalPrice || service.price)}\n                                </span>\n                                <div className=\"text-xs text-green-600\">\n                                  {service.pricingModel === 'per_person' ? 'per person' : 'total'}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Financial Summary */}\n              <div className=\"bg-indigo-50 p-6 rounded-lg border border-indigo-200\">\n                <h3 className=\"font-bold text-xl mb-4 text-indigo-800 flex items-center gap-2\">\n                  <DollarSign className=\"h-5 w-5\" />\n                  Financial Summary\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"flex justify-between py-1\">\n                      <span className=\"font-semibold\">Subtotal:</span>\n                      <span>{formatCurrency((booking.totalPrice || 0) * 0.85)}</span>\n                    </div>\n                    <div className=\"flex justify-between py-1\">\n                      <span className=\"font-semibold\">Service Charge (18%):</span>\n                      <span>{formatCurrency((booking.totalPrice || 0) * 0.85 * 0.18)}</span>\n                    </div>\n                    <div className=\"flex justify-between py-1\">\n                      <span className=\"font-semibold\">Sales Tax (8.5%):</span>\n                      <span>{formatCurrency((booking.totalPrice || 0) * 0.085)}</span>\n                    </div>\n                    <Separator />\n                    <div className=\"flex justify-between py-2 text-lg font-bold text-indigo-900\">\n                      <span>Total Amount:</span>\n                      <span>{formatCurrency(booking.totalPrice || 0)}</span>\n                    </div>\n                  </div>\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"flex justify-between py-1\">\n                      <span className=\"font-semibold\">Deposit Required (50%):</span>\n                      <span className=\"font-bold text-orange-600\">{formatCurrency((booking.totalPrice || 0) * 0.5)}</span>\n                    </div>\n                    <div className=\"flex justify-between py-1\">\n                      <span className=\"font-semibold\">Balance Due:</span>\n                      <span>{formatCurrency((booking.totalPrice || 0) * 0.5)}</span>\n                    </div>\n                    <div className=\"flex justify-between py-1\">\n                      <span className=\"font-semibold\">Payment Status:</span>\n                      <Badge variant=\"outline\">{booking.paymentStatus || 'Pending'}</Badge>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Terms & Conditions */}\n              <div className=\"bg-red-50 p-6 rounded-lg border border-red-200\">\n                <h3 className=\"font-bold text-xl mb-4 text-red-800\">Terms & Conditions</h3>\n                <div className=\"text-sm space-y-2 text-gray-700 grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <ul className=\"space-y-1\">\n                      <li>• 50% deposit required to secure booking</li>\n                      <li>• Balance due 7 days prior to event date</li>\n                      <li>• Guest count confirmed 72 hours prior</li>\n                      <li>• Additional charges for guest count increases</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <ul className=\"space-y-1\">\n                      <li>• Setup/breakdown included in space time</li>\n                      <li>• Client responsible for property damages</li>\n                      <li>• 30-day cancellation forfeits deposit</li>\n                      <li>• Force majeure allows date changes</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n\n              {/* Contact & Signatures */}\n              <div className=\"bg-slate-50 p-6 rounded-lg border border-slate-200\">\n                <h3 className=\"font-bold text-xl mb-4 text-slate-800\">Contact Information & Acknowledgment</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6 text-sm\">\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Event Coordinator:</h4>\n                    <div className=\"space-y-1\">\n                      <div className=\"font-semibold\">{settings?.business?.companyName || 'Venuine Events'}</div>\n                      <div>{settings?.business?.companyEmail || 'events@venuine.com'}</div>\n                      <div>{settings?.business?.companyPhone || '+1 (555) 123-4567'}</div>\n                    </div>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Venue Address:</h4>\n                    <div className=\"whitespace-pre-line\">\n                      {settings?.business?.companyAddress || '123 Event Plaza\\nVenue City, State 12345'}\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-8 pt-4 border-t border-slate-300\">\n                  <div className=\"space-y-3\">\n                    <h4 className=\"font-semibold\">Client Signature & Date:</h4>\n                    <div className=\"border-b border-slate-400 h-10\"></div>\n                    <p className=\"text-xs text-slate-600\">\n                      By signing, client acknowledges review and acceptance of all terms and details contained in this BEO.\n                    </p>\n                  </div>\n                  <div className=\"space-y-3\">\n                    <h4 className=\"font-semibold\">Venue Representative & Date:</h4>\n                    <div className=\"border-b border-slate-400 h-10\"></div>\n                    <p className=\"text-xs text-slate-600\">\n                      Venue confirms ability to execute event as detailed above.\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n            </CardContent>\n          </Card>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":26327},"client/src/pages/super-admin.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useUserRole } from \"@/hooks/useUserRole\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Crown,\n  Building2,\n  Package,\n  Users,\n  Activity,\n  Settings,\n  Plus,\n  Edit,\n  Trash2,\n  Eye,\n  BarChart3,\n  DollarSign,\n  Clock,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  LogOut,\n  Shield,\n  Globe\n} from \"lucide-react\";\n\nexport default function SuperAdmin() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const { logout, userRoleData, isSuperAdmin, isLoading } = useUserRole();\n  const [selectedTab, setSelectedTab] = useState(\"overview\");\n\n  // Queries - must be called before any early returns to follow React hooks rules\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/super-admin/stats\"],\n    staleTime: 60000,\n    enabled: isSuperAdmin, // Only run query if user is super admin\n  });\n\n  const { data: tenants } = useQuery({\n    queryKey: [\"/api/super-admin/tenants\"],\n    staleTime: 30000,\n    enabled: isSuperAdmin,\n  });\n\n  const { data: packages } = useQuery({\n    queryKey: [\"/api/super-admin/packages\"],\n    staleTime: 60000,\n    enabled: isSuperAdmin,\n  });\n\n  const { data: activities } = useQuery({\n    queryKey: [\"/api/super-admin/activities\"],\n    staleTime: 30000,\n    enabled: isSuperAdmin,\n  });\n\n  // Show loading while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  // Ensure only Super Admin can access this page\n  if (!isSuperAdmin) {\n    navigate(\"/login\");\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800\">\n      {/* Header */}\n      <div className=\"bg-white dark:bg-slate-900 border-b border-slate-200 dark:border-slate-800 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Crown className=\"w-8 h-8 text-purple-600\" />\n            <div>\n              <h1 className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">Super Admin</h1>\n              <p className=\"text-sm text-slate-600 dark:text-slate-400\">Platform Management Dashboard</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"default\" className=\"bg-purple-600\">\n              <Crown className=\"w-3 h-3 mr-1\" />\n              {userRoleData?.name || \"Super Admin\"}\n            </Badge>\n            <Button\n              onClick={() => {\n                logout();\n                navigate(\"/login\");\n              }}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              <LogOut className=\"w-3 h-3 mr-1\" />\n              Switch Role\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-6\">\n        <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"tenants\">Tenants</TabsTrigger>\n            <TabsTrigger value=\"packages\">Packages</TabsTrigger>\n            <TabsTrigger value=\"activities\">Activity</TabsTrigger>\n            <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Tenants</CardTitle>\n                  <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{(stats as any)?.totalTenants || 0}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    +{(stats as any)?.newTenantsThisMonth || 0} this month\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Active Users</CardTitle>\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{(stats as any)?.activeUsers || 0}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Across all tenants\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Monthly Revenue</CardTitle>\n                  <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">${(stats as any)?.monthlyRevenue || 0}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Subscription revenue\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Platform Health</CardTitle>\n                  <Activity className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-green-600\">99.9%</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Uptime this month\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Activity */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Platform Activity</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {((activities as any[]) || []).slice(0, 5).map((activity: any) => (\n                    <div key={activity.id} className=\"flex items-center gap-3 p-3 bg-slate-50 dark:bg-slate-800 rounded-lg\">\n                      <div className=\"w-2 h-2 bg-blue-600 rounded-full\"></div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium\">{activity.action}</p>\n                        <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                          {activity.tenantName} • {new Date(activity.createdAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                  )) || (\n                    <p className=\"text-sm text-slate-600 dark:text-slate-400 text-center py-4\">\n                      No recent activity\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Tenants Tab */}\n          <TabsContent value=\"tenants\" className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-xl font-semibold\">Account Management</h2>\n              <CreateTenantDialog />\n            </div>\n\n            <Card>\n              <CardContent className=\"p-0\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Account</TableHead>\n                      <TableHead>Package</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Venues</TableHead>\n                      <TableHead>Users</TableHead>\n                      <TableHead>Revenue</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {((tenants as any[]) || []).map((tenant: any) => (\n                      <TableRow key={tenant.id}>\n                        <TableCell>\n                          <div>\n                            <p className=\"font-medium\">{tenant.name}</p>\n                            <p className=\"text-sm text-slate-600\">{tenant.contactEmail}</p>\n                            <p className=\"text-xs text-slate-500 mt-1\">\n                              {tenant.venueCount} venues, {tenant.spaceCount} spaces\n                            </p>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">{tenant.packageName}</Badge>\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={tenant.status === 'active' ? 'default' : 'secondary'}\n                            className={tenant.status === 'active' ? 'bg-green-600' : ''}\n                          >\n                            {tenant.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"space-y-1\">\n                            {tenant.venues?.slice(0, 3).map((venue: any) => (\n                              <div key={venue.id} className=\"text-xs bg-slate-100 dark:bg-slate-800 px-2 py-1 rounded\">\n                                {venue.name} ({venue.spaces} spaces)\n                              </div>\n                            ))}\n                            {tenant.venues?.length > 3 && (\n                              <div className=\"text-xs text-slate-500\">\n                                +{tenant.venues.length - 3} more\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>{tenant.userCount}</TableCell>\n                        <TableCell>\n                          <span className=\"font-medium text-green-600\">\n                            ${tenant.monthlyRevenue?.toLocaleString() || 0}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <TenantActions tenant={tenant} />\n                        </TableCell>\n                      </TableRow>\n                    )) || (\n                      <TableRow>\n                        <TableCell colSpan={7} className=\"text-center py-8 text-slate-600\">\n                          No tenant accounts found. Create the first account to get started.\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Packages Tab */}\n          <TabsContent value=\"packages\" className=\"space-y-6\">\n            <PackageManagement packages={packages} />\n          </TabsContent>\n\n          {/* Activities Tab */}\n          <TabsContent value=\"activities\" className=\"space-y-6\">\n            <ActivityLog activities={activities} />\n          </TabsContent>\n\n          {/* Settings Tab */}\n          <TabsContent value=\"settings\" className=\"space-y-6\">\n            <SystemSettings />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n\n// Tenant Actions Component\nfunction TenantActions({ tenant }: { tenant: any }) {\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [showViewDialog, setShowViewDialog] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const deleteTenantMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/super-admin/tenants/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/super-admin/tenants\"] });\n      toast({\n        title: \"Success\",\n        description: \"Account deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <>\n      <div className=\"flex items-center gap-2\">\n        <Button \n          variant=\"ghost\" \n          size=\"sm\"\n          onClick={() => setShowViewDialog(true)}\n        >\n          <Eye className=\"w-4 h-4\" />\n        </Button>\n        <Button \n          variant=\"ghost\" \n          size=\"sm\"\n          onClick={() => setShowEditDialog(true)}\n        >\n          <Edit className=\"w-4 h-4\" />\n        </Button>\n        <Button \n          variant=\"ghost\" \n          size=\"sm\" \n          className=\"text-red-600\"\n          onClick={() => {\n            if (confirm(`Are you sure you want to delete the account \"${tenant.name}\"? This action cannot be undone.`)) {\n              deleteTenantMutation.mutate(tenant.id);\n            }\n          }}\n          disabled={deleteTenantMutation.isPending}\n        >\n          <Trash2 className=\"w-4 h-4\" />\n        </Button>\n      </div>\n\n      {/* Edit Tenant Dialog */}\n      <EditTenantDialog \n        isOpen={showEditDialog}\n        onClose={() => setShowEditDialog(false)}\n        tenant={tenant}\n      />\n\n      {/* View Tenant Dialog */}\n      <ViewTenantDialog \n        isOpen={showViewDialog}\n        onClose={() => setShowViewDialog(false)}\n        tenant={tenant}\n      />\n    </>\n  );\n}\n\n// View Tenant Dialog Component\nfunction ViewTenantDialog({ isOpen, onClose, tenant }: {\n  isOpen: boolean;\n  onClose: () => void;\n  tenant: any;\n}) {\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>Account Details - {tenant.name}</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Basic Information */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label className=\"text-sm font-medium text-slate-700\">Business Name</Label>\n              <div className=\"mt-1 text-sm\">{tenant.name}</div>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-slate-700\">Status</Label>\n              <div className=\"mt-1\">\n                <Badge variant={tenant.status === 'active' ? 'default' : 'secondary'}>\n                  {tenant.status}\n                </Badge>\n              </div>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-slate-700\">Admin Email</Label>\n              <div className=\"mt-1 text-sm\">{tenant.contactEmail}</div>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-slate-700\">Package</Label>\n              <div className=\"mt-1\">\n                <Badge variant=\"outline\">{tenant.packageName}</Badge>\n              </div>\n            </div>\n          </div>\n\n          {/* Usage Statistics */}\n          <div className=\"border-t pt-4\">\n            <h4 className=\"font-medium mb-3\">Usage Statistics</h4>\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div className=\"text-center p-3 bg-slate-50 dark:bg-slate-800 rounded\">\n                <div className=\"text-2xl font-bold\">{tenant.userCount}</div>\n                <div className=\"text-sm text-slate-600\">Users</div>\n              </div>\n              <div className=\"text-center p-3 bg-slate-50 dark:bg-slate-800 rounded\">\n                <div className=\"text-2xl font-bold\">{tenant.venueCount}</div>\n                <div className=\"text-sm text-slate-600\">Venues</div>\n              </div>\n              <div className=\"text-center p-3 bg-slate-50 dark:bg-slate-800 rounded\">\n                <div className=\"text-2xl font-bold\">{tenant.spaceCount}</div>\n                <div className=\"text-sm text-slate-600\">Spaces</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Venues List */}\n          {tenant.venues && tenant.venues.length > 0 && (\n            <div className=\"border-t pt-4\">\n              <h4 className=\"font-medium mb-3\">Venues</h4>\n              <div className=\"space-y-2\">\n                {tenant.venues.map((venue: any) => (\n                  <div key={venue.id} className=\"flex justify-between items-center p-2 bg-slate-50 dark:bg-slate-800 rounded\">\n                    <span className=\"font-medium\">{venue.name}</span>\n                    <span className=\"text-sm text-slate-600\">{venue.spaces} spaces</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Revenue Information */}\n          <div className=\"border-t pt-4\">\n            <h4 className=\"font-medium mb-3\">Financial Information</h4>\n            <div className=\"text-center p-4 bg-green-50 dark:bg-green-900/20 rounded\">\n              <div className=\"text-3xl font-bold text-green-600\">\n                ${tenant.monthlyRevenue?.toLocaleString() || 0}\n              </div>\n              <div className=\"text-sm text-slate-600\">Monthly Revenue</div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end pt-4 border-t\">\n          <Button variant=\"outline\" onClick={onClose}>\n            Close\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Edit Tenant Dialog Component\nfunction EditTenantDialog({ isOpen, onClose, tenant }: {\n  isOpen: boolean;\n  onClose: () => void;\n  tenant: any;\n}) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    contactEmail: \"\",\n    contactName: \"\",\n    packageId: \"\",\n    status: \"active\"\n  });\n\n  // Get packages for dropdown\n  const { data: packages } = useQuery({\n    queryKey: [\"/api/super-admin/packages\"],\n  });\n\n  // Initialize form data when dialog opens\n  useEffect(() => {\n    if (isOpen && tenant) {\n      console.log(\"Initializing form with tenant data:\", tenant);\n      setFormData({\n        name: tenant.name || \"\",\n        contactEmail: tenant.contactEmail || \"\",\n        contactName: tenant.contactName || \"\",\n        packageId: tenant.packageId || \"\",\n        status: tenant.status || \"active\"\n      });\n    }\n  }, [isOpen, tenant]);\n\n  const updateTenantMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"PUT\", `/api/super-admin/tenants/${tenant.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/super-admin/tenants\"] });\n      toast({\n        title: \"Success\",\n        description: \"Account updated successfully\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateTenantMutation.mutate(formData);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Edit Account - {tenant?.name}</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"edit-name\">Business Name</Label>\n            <Input \n              id=\"edit-name\" \n              value={formData.name}\n              onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n              placeholder=\"Acme Events Inc.\"\n              required\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"edit-contactEmail\">Admin Email</Label>\n            <Input \n              id=\"edit-contactEmail\" \n              type=\"email\" \n              value={formData.contactEmail}\n              onChange={(e) => setFormData({ ...formData, contactEmail: e.target.value })}\n              placeholder=\"admin@acme.com\"\n              required\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"edit-contactName\">Admin Name</Label>\n            <Input \n              id=\"edit-contactName\" \n              value={formData.contactName}\n              onChange={(e) => setFormData({ ...formData, contactName: e.target.value })}\n              placeholder=\"John Doe\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"edit-package\">Package</Label>\n            <Select \n              value={formData.packageId} \n              onValueChange={(value) => setFormData({ ...formData, packageId: value })}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select package\" />\n              </SelectTrigger>\n              <SelectContent>\n                {((packages as any[]) || []).map((pkg: any) => (\n                  <SelectItem key={pkg.id} value={pkg.id}>\n                    {pkg.displayName} - ${pkg.price}/{pkg.billingInterval}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label htmlFor=\"edit-status\">Status</Label>\n            <Select \n              value={formData.status} \n              onValueChange={(value) => setFormData({ ...formData, status: value })}\n            >\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"suspended\">Suspended</SelectItem>\n                <SelectItem value=\"inactive\">Inactive</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex gap-2 pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={updateTenantMutation.isPending}>\n              {updateTenantMutation.isPending ? \"Updating...\" : \"Update Account\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Create Tenant Dialog Component\nfunction CreateTenantDialog() {\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get packages for dropdown\n  const { data: packages } = useQuery({\n    queryKey: [\"/api/super-admin/packages\"],\n  });\n\n  const [formData, setFormData] = useState({\n    name: \"\",\n    contactEmail: \"\",\n    contactName: \"\",\n    packageId: \"\"\n  });\n\n  const createTenantMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/super-admin/tenants\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/super-admin/tenants\"] });\n      toast({\n        title: \"Success\",\n        description: \"Account created successfully\",\n      });\n      setOpen(false);\n      setFormData({ name: \"\", contactEmail: \"\", contactName: \"\", packageId: \"\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createTenantMutation.mutate(formData);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button>\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Create Account\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Create New Account</DialogTitle>\n          <p className=\"text-sm text-slate-600\">\n            Create an account that can manage multiple venues and spaces.\n          </p>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"name\">Business Name</Label>\n            <Input \n              id=\"name\" \n              value={formData.name}\n              onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n              placeholder=\"Acme Events Inc.\" \n              required\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"contactEmail\">Admin Email</Label>\n            <Input \n              id=\"contactEmail\" \n              type=\"email\" \n              value={formData.contactEmail}\n              onChange={(e) => setFormData({ ...formData, contactEmail: e.target.value })}\n              placeholder=\"admin@acme.com\" \n              required\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"contactName\">Admin Name</Label>\n            <Input \n              id=\"contactName\" \n              value={formData.contactName}\n              onChange={(e) => setFormData({ ...formData, contactName: e.target.value })}\n              placeholder=\"John Doe\" \n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"package\">Package</Label>\n            <Select \n              value={formData.packageId} \n              onValueChange={(value) => setFormData({ ...formData, packageId: value })}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select package\" />\n              </SelectTrigger>\n              <SelectContent>\n                {((packages as any[]) || []).map((pkg: any) => (\n                  <SelectItem key={pkg.id} value={pkg.id}>\n                    {pkg.displayName} - ${pkg.price}/{pkg.billingInterval}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <Button type=\"submit\" className=\"w-full\" disabled={createTenantMutation.isPending}>\n            {createTenantMutation.isPending ? \"Creating...\" : \"Create Account\"}\n          </Button>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Package Management Component\nfunction PackageManagement({ packages }: { packages: any }) {\n  const { toast } = useToast();\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [editingPackage, setEditingPackage] = useState<any>(null);\n  const queryClient = useQueryClient();\n\n  const togglePackageMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"PATCH\", `/api/super-admin/packages/${id}/toggle`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/super-admin/packages\"] });\n      toast({\n        title: \"Success\",\n        description: \"Package status updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update package status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePackageMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/super-admin/packages/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/super-admin/packages\"] });\n      toast({\n        title: \"Success\",\n        description: \"Package deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete package\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getPackageIcon = (pkg: any) => {\n    if (pkg.id === \"starter\") return \"🌱\";\n    if (pkg.id === \"professional\") return \"💼\";\n    if (pkg.id === \"business\") return \"🏢\";\n    if (pkg.id === \"enterprise\") return \"👑\";\n    return \"📦\";\n  };\n\n  const getPackageColor = (pkg: any) => {\n    if (pkg.id === \"starter\") return \"border-green-200 bg-green-50\";\n    if (pkg.id === \"professional\") return \"border-blue-200 bg-blue-50\";\n    if (pkg.id === \"business\") return \"border-purple-200 bg-purple-50\";\n    if (pkg.id === \"enterprise\") return \"border-yellow-200 bg-yellow-50\";\n    return \"border-gray-200 bg-gray-50\";\n  };\n\n  const getFeatureList = (features: any) => {\n    const featureKeys = Object.keys(features).filter(key => features[key] === true);\n    return featureKeys.slice(0, 6); // Show first 6 features\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-xl font-semibold\">Feature Packages</h2>\n          <p className=\"text-sm text-slate-600 mt-1\">Manage subscription tiers and feature access</p>\n        </div>\n        <Button onClick={() => setShowCreateDialog(true)}>\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Create Package\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6\">\n        {((packages as any[]) || []).map((pkg: any) => (\n          <Card key={pkg.id} className={`relative ${getPackageColor(pkg)} hover:shadow-lg transition-shadow`}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-2xl\">{getPackageIcon(pkg)}</span>\n                  <CardTitle className=\"text-lg\">{pkg.displayName}</CardTitle>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Badge variant={pkg.isActive ? \"default\" : \"secondary\"} className=\"text-xs\">\n                    {pkg.isActive ? \"Active\" : \"Inactive\"}\n                  </Badge>\n                  {!pkg.isCustom && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      System\n                    </Badge>\n                  )}\n                </div>\n              </div>\n              <p className=\"text-sm text-slate-600 dark:text-slate-400\">{pkg.description}</p>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-slate-900 dark:text-slate-100\">\n                  ${pkg.price}\n                </div>\n                <div className=\"text-sm text-slate-500\">per {pkg.billingInterval}</div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                  <div className=\"bg-white dark:bg-slate-800 p-2 rounded\">\n                    <div className=\"font-medium\">Users</div>\n                    <div className=\"text-slate-600\">{pkg.maxUsers || \"∞\"}</div>\n                  </div>\n                  <div className=\"bg-white dark:bg-slate-800 p-2 rounded\">\n                    <div className=\"font-medium\">Venues</div>\n                    <div className=\"text-slate-600\">{pkg.maxVenues || \"∞\"}</div>\n                  </div>\n                  <div className=\"bg-white dark:bg-slate-800 p-2 rounded\">\n                    <div className=\"font-medium\">Spaces</div>\n                    <div className=\"text-slate-600\">{pkg.maxSpaces || \"∞\"}</div>\n                  </div>\n                  <div className=\"bg-white dark:bg-slate-800 p-2 rounded\">\n                    <div className=\"font-medium\">Storage</div>\n                    <div className=\"text-slate-600\">{pkg.storageLimit}GB</div>\n                  </div>\n                </div>\n\n                {pkg.maxBookingsPerMonth && (\n                  <div className=\"bg-white dark:bg-slate-800 p-2 rounded text-xs\">\n                    <div className=\"font-medium\">Monthly Bookings</div>\n                    <div className=\"text-slate-600\">{pkg.maxBookingsPerMonth || \"∞\"}</div>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"text-xs font-medium text-slate-700 dark:text-slate-300\">Key Features:</div>\n                <div className=\"space-y-1\">\n                  {getFeatureList(pkg.features).map((feature: string) => (\n                    <div key={feature} className=\"flex items-center gap-1 text-xs text-slate-600\">\n                      <CheckCircle className=\"w-3 h-3 text-green-500\" />\n                      <span className=\"capitalize\">{feature.replace(/([A-Z])/g, ' $1').trim()}</span>\n                    </div>\n                  ))}\n                  {Object.keys(pkg.features).length > 6 && (\n                    <div className=\"text-xs text-slate-500\">\n                      +{Object.keys(pkg.features).length - 6} more features\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex gap-2 pt-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"flex-1\"\n                  onClick={() => setEditingPackage(pkg)}\n                >\n                  <Edit className=\"w-3 h-3 mr-1\" />\n                  Edit\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => togglePackageMutation.mutate(pkg.id)}\n                  disabled={togglePackageMutation.isPending}\n                >\n                  {pkg.isActive ? (\n                    <XCircle className=\"w-3 h-3\" />\n                  ) : (\n                    <CheckCircle className=\"w-3 h-3\" />\n                  )}\n                </Button>\n                {pkg.isCustom && (\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"text-red-600\"\n                    onClick={() => {\n                      if (confirm(\"Are you sure you want to delete this package?\")) {\n                        deletePackageMutation.mutate(pkg.id);\n                      }\n                    }}\n                    disabled={deletePackageMutation.isPending}\n                  >\n                    <Trash2 className=\"w-3 h-3\" />\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )) || (\n          <Card className=\"col-span-full\">\n            <CardContent className=\"text-center py-8 text-slate-600\">\n              <Package className=\"w-12 h-12 mx-auto mb-4 text-slate-400\" />\n              <p>No packages found. Create the first package to get started.</p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Package Creation/Edit Dialog would go here */}\n      <PackageDialog \n        isOpen={showCreateDialog || !!editingPackage}\n        onClose={() => {\n          setShowCreateDialog(false);\n          setEditingPackage(null);\n        }}\n        package={editingPackage}\n        isEdit={!!editingPackage}\n      />\n    </div>\n  );\n}\n\n// Package Creation/Edit Dialog Component\nfunction PackageDialog({ isOpen, onClose, package: pkg, isEdit }: {\n  isOpen: boolean;\n  onClose: () => void;\n  package?: any;\n  isEdit: boolean;\n}) {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    displayName: \"\",\n    description: \"\",\n    price: \"\",\n    billingInterval: \"monthly\",\n    maxUsers: \"\",\n    maxVenues: \"\",\n    maxSpaces: \"\",\n    maxBookingsPerMonth: \"\",\n    storageLimit: \"\",\n    features: {} as any\n  });\n\n  const queryClient = useQueryClient();\n\n  // Complete list of all available features (functional features only)\n  const allFeatures = {\n    // Core Booking & Customer Management\n    bookingManagement: \"Booking Management\",\n    customerManagement: \"Customer Management\", \n    proposalSystem: \"Proposal System\",\n    contractManagement: \"Contract Management\",\n    taskManagement: \"Task Management\",\n    \n    // Calendar & Scheduling\n    calendarView: \"Calendar View\",\n    realTimeAvailability: \"Real-Time Availability\",\n    conflictDetection: \"Booking Conflict Detection\",\n    \n    // Venue & Space Management\n    venueManagement: \"Venue Management\",\n    spaceManagement: \"Space Management\",\n    floorPlanDesigner: \"Floor Plan Designer\",\n    setupManagement: \"Setup Management\",\n    \n    // Services & Packages\n    serviceManagement: \"Service Management\",\n    packageManagement: \"Package Management\",\n    pricingConfiguration: \"Pricing Configuration\",\n    \n    // Financial Management\n    paymentProcessing: \"Payment Processing\",\n    invoicing: \"Invoicing\",\n    taxConfiguration: \"Tax Configuration\",\n    \n    // BEO & Documentation\n    beoGeneration: \"BEO Generation\",\n    beoTemplates: \"BEO Templates\",\n    contractGeneration: \"Contract Generation\",\n    \n    // Reporting & Analytics\n    basicReporting: \"Basic Reporting\",\n    advancedReporting: \"Advanced Reporting\",\n    realTimeAnalytics: \"Real-Time Analytics\",\n    dashboardInsights: \"Dashboard Insights\",\n    \n    // AI Features\n    aiInsights: \"AI Insights\",\n    voiceBooking: \"Voice-to-Text Booking\",\n    smartScheduling: \"Smart Scheduling\",\n    automatedEmailReplies: \"Automated Email Replies\",\n    leadScoring: \"Lead Scoring\",\n    \n    // Communication\n    emailIntegration: \"Email Integration\",\n    smsNotifications: \"SMS Notifications\",\n    internalNotes: \"Internal Notes\",\n    customerCommunication: \"Customer Communication Panel\",\n    \n    // Multi-tenant Features\n    multiVenueSupport: \"Multi-Venue Support\",\n    userRoleManagement: \"User Role Management\",\n    \n    // Data & Export\n    dataExport: \"Data Export\",\n    dataImport: \"Data Import\",\n    bulkOperations: \"Bulk Operations\"\n  };\n\n  // Initialize form data when editing\n  useEffect(() => {\n    if (isEdit && pkg) {\n      setFormData({\n        name: pkg.name || \"\",\n        displayName: pkg.displayName || \"\",\n        description: pkg.description || \"\",\n        price: pkg.price?.toString() || \"\",\n        billingInterval: pkg.billingInterval || \"monthly\",\n        maxUsers: pkg.maxUsers?.toString() || \"\",\n        maxVenues: pkg.maxVenues?.toString() || \"\",\n        maxSpaces: pkg.maxSpaces?.toString() || \"\",\n        maxBookingsPerMonth: pkg.maxBookingsPerMonth?.toString() || \"\",\n        storageLimit: pkg.storageLimit?.toString() || \"\",\n        features: pkg.features || {}\n      });\n    } else {\n      // Initialize with all features disabled for new packages\n      const initialFeatures = Object.keys(allFeatures).reduce((acc, key) => {\n        acc[key] = false;\n        return acc;\n      }, {} as any);\n      setFormData(prev => ({ ...prev, features: initialFeatures }));\n    }\n  }, [isEdit, pkg]);\n\n  const toggleFeature = (featureKey: string) => {\n    setFormData(prev => ({\n      ...prev,\n      features: {\n        ...prev.features,\n        [featureKey]: !prev.features[featureKey]\n      }\n    }));\n  };\n\n  const toggleAllFeatures = (enabled: boolean) => {\n    const allFeaturesState = Object.keys(allFeatures).reduce((acc, key) => {\n      acc[key] = enabled;\n      return acc;\n    }, {} as any);\n    setFormData(prev => ({ ...prev, features: allFeaturesState }));\n  };\n\n  const getFeaturesByCategory = () => {\n    return {\n      \"Core Management\": {\n        bookingManagement: \"Booking Management\",\n        customerManagement: \"Customer Management\",\n        proposalSystem: \"Proposal System\",\n        contractManagement: \"Contract Management\",\n        taskManagement: \"Task Management\"\n      },\n      \"Calendar & Scheduling\": {\n        calendarView: \"Calendar View\",\n        realTimeAvailability: \"Real-Time Availability\",\n        conflictDetection: \"Booking Conflict Detection\"\n      },\n      \"Venue & Space\": {\n        venueManagement: \"Venue Management\",\n        spaceManagement: \"Space Management\",\n        floorPlanDesigner: \"Floor Plan Designer\",\n        setupManagement: \"Setup Management\"\n      },\n      \"Services & Pricing\": {\n        serviceManagement: \"Service Management\",\n        packageManagement: \"Package Management\",\n        pricingConfiguration: \"Pricing Configuration\"\n      },\n      \"Financial\": {\n        paymentProcessing: \"Payment Processing\",\n        invoicing: \"Invoicing\",\n        taxConfiguration: \"Tax Configuration\"\n      },\n      \"Documentation\": {\n        beoGeneration: \"BEO Generation\",\n        beoTemplates: \"BEO Templates\",\n        contractGeneration: \"Contract Generation\"\n      },\n      \"Analytics & Reporting\": {\n        basicReporting: \"Basic Reporting\",\n        advancedReporting: \"Advanced Reporting\",\n        realTimeAnalytics: \"Real-Time Analytics\",\n        dashboardInsights: \"Dashboard Insights\"\n      },\n      \"AI Features\": {\n        aiInsights: \"AI Insights\",\n        voiceBooking: \"Voice-to-Text Booking\",\n        smartScheduling: \"Smart Scheduling\",\n        automatedEmailReplies: \"Automated Email Replies\",\n        leadScoring: \"Lead Scoring\"\n      },\n      \"Communication\": {\n        emailIntegration: \"Email Integration\",\n        smsNotifications: \"SMS Notifications\",\n        internalNotes: \"Internal Notes\",\n        customerCommunication: \"Customer Communication Panel\"\n      },\n      \"Multi-tenant & Data\": {\n        multiVenueSupport: \"Multi-Venue Support\",\n        userRoleManagement: \"User Role Management\",\n        dataExport: \"Data Export\",\n        dataImport: \"Data Import\",\n        bulkOperations: \"Bulk Operations\"\n      }\n    };\n  };\n\n  const createPackageMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const endpoint = isEdit ? `/api/super-admin/packages/${pkg.id}` : \"/api/super-admin/packages\";\n      const method = isEdit ? \"PUT\" : \"POST\";\n      return apiRequest(method, endpoint, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/super-admin/packages\"] });\n      toast({\n        title: \"Success\",\n        description: `Package ${isEdit ? \"updated\" : \"created\"} successfully`,\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to ${isEdit ? \"update\" : \"create\"} package`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const submitData = {\n      ...formData,\n      price: parseFloat(formData.price),\n      maxUsers: formData.maxUsers ? parseInt(formData.maxUsers) : null,\n      maxVenues: formData.maxVenues ? parseInt(formData.maxVenues) : null,\n      maxSpaces: formData.maxSpaces ? parseInt(formData.maxSpaces) : null,\n      maxBookingsPerMonth: formData.maxBookingsPerMonth ? parseInt(formData.maxBookingsPerMonth) : null,\n      storageLimit: parseInt(formData.storageLimit)\n    };\n\n    createPackageMutation.mutate(submitData);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{isEdit ? \"Edit Package\" : \"Create New Package\"}</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Basic Package Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Basic Information</h3>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"name\">Package Name</Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  placeholder=\"e.g. custom-package\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"displayName\">Display Name</Label>\n                <Input\n                  id=\"displayName\"\n                  value={formData.displayName}\n                  onChange={(e) => setFormData({ ...formData, displayName: e.target.value })}\n                  placeholder=\"e.g. Custom Package\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                placeholder=\"Describe what this package includes...\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"price\">Price</Label>\n                <Input\n                  id=\"price\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={formData.price}\n                  onChange={(e) => setFormData({ ...formData, price: e.target.value })}\n                  placeholder=\"29.99\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"billingInterval\">Billing Interval</Label>\n                <Select \n                  value={formData.billingInterval} \n                  onValueChange={(value) => setFormData({ ...formData, billingInterval: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"monthly\">Monthly</SelectItem>\n                    <SelectItem value=\"yearly\">Yearly</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          {/* Package Limits */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Package Limits</h3>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"maxUsers\">Max Users (leave empty for unlimited)</Label>\n                <Input\n                  id=\"maxUsers\"\n                  type=\"number\"\n                  value={formData.maxUsers}\n                  onChange={(e) => setFormData({ ...formData, maxUsers: e.target.value })}\n                  placeholder=\"10\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"maxVenues\">Max Venues (leave empty for unlimited)</Label>\n                <Input\n                  id=\"maxVenues\"\n                  type=\"number\"\n                  value={formData.maxVenues}\n                  onChange={(e) => setFormData({ ...formData, maxVenues: e.target.value })}\n                  placeholder=\"5\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"maxSpaces\">Max Spaces (leave empty for unlimited)</Label>\n                <Input\n                  id=\"maxSpaces\"\n                  type=\"number\"\n                  value={formData.maxSpaces}\n                  onChange={(e) => setFormData({ ...formData, maxSpaces: e.target.value })}\n                  placeholder=\"25\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"storageLimit\">Storage Limit (GB)</Label>\n                <Input\n                  id=\"storageLimit\"\n                  type=\"number\"\n                  value={formData.storageLimit}\n                  onChange={(e) => setFormData({ ...formData, storageLimit: e.target.value })}\n                  placeholder=\"50\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"maxBookingsPerMonth\">Max Monthly Bookings (leave empty for unlimited)</Label>\n              <Input\n                id=\"maxBookingsPerMonth\"\n                type=\"number\"\n                value={formData.maxBookingsPerMonth}\n                onChange={(e) => setFormData({ ...formData, maxBookingsPerMonth: e.target.value })}\n                placeholder=\"100\"\n              />\n            </div>\n          </div>\n\n          {/* Feature Configuration */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-medium\">Feature Configuration</h3>\n              <div className=\"flex gap-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => toggleAllFeatures(true)}\n                >\n                  Enable All\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => toggleAllFeatures(false)}\n                >\n                  Disable All\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {Object.entries(getFeaturesByCategory()).map(([category, features]) => (\n                <Card key={category} className=\"p-4\">\n                  <h4 className=\"font-medium mb-3 text-sm\">{category}</h4>\n                  <div className=\"space-y-2\">\n                    {Object.entries(features).map(([featureKey, featureLabel]) => (\n                      <div key={featureKey} className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"checkbox\"\n                          id={featureKey}\n                          checked={formData.features[featureKey] || false}\n                          onChange={() => toggleFeature(featureKey)}\n                          className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                        />\n                        <Label \n                          htmlFor={featureKey} \n                          className=\"text-sm font-normal cursor-pointer\"\n                        >\n                          {featureLabel}\n                        </Label>\n                      </div>\n                    ))}\n                  </div>\n                </Card>\n              ))}\n            </div>\n\n            {/* Feature Summary */}\n            <div className=\"mt-4 p-3 bg-slate-50 dark:bg-slate-800 rounded-lg\">\n              <div className=\"text-sm text-slate-600 dark:text-slate-400\">\n                <strong>Selected Features: </strong>\n                {Object.values(formData.features).filter(Boolean).length} of {Object.keys(allFeatures).length} features enabled\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex gap-2 pt-4 border-t\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={createPackageMutation.isPending}>\n              {createPackageMutation.isPending ? \"Saving...\" : (isEdit ? \"Update Package\" : \"Create Package\")}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Activity Log Component\nfunction ActivityLog({ activities }: { activities: any }) {\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-xl font-semibold\">Platform Activity Log</h2>\n      \n      <Card>\n        <CardContent className=\"p-0\">\n          <div className=\"space-y-4 p-6\">\n            {((activities as any[]) || []).map((activity: any) => (\n              <div key={activity.id} className=\"flex items-start gap-3 p-4 bg-slate-50 dark:bg-slate-800 rounded-lg\">\n                <div className=\"w-2 h-2 bg-blue-600 rounded-full mt-2\"></div>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center justify-between\">\n                    <p className=\"font-medium\">{activity.action}</p>\n                    <span className=\"text-xs text-slate-500\">\n                      {new Date(activity.createdAt).toLocaleString()}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400 mt-1\">\n                    Tenant: {activity.tenantName}\n                  </p>\n                  {activity.details && (\n                    <p className=\"text-xs text-slate-500 mt-1\">\n                      {activity.details}\n                    </p>\n                  )}\n                </div>\n              </div>\n            )) || (\n              <p className=\"text-center py-8 text-slate-600\">\n                No activity logs found.\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// System Settings Component\nfunction SystemSettings() {\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-xl font-semibold\">System Settings</h2>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Platform Configuration</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"platformName\">Platform Name</Label>\n              <Input id=\"platformName\" defaultValue=\"Venuine\" />\n            </div>\n            <div>\n              <Label htmlFor=\"supportEmail\">Support Email</Label>\n              <Input id=\"supportEmail\" defaultValue=\"support@venuine.com\" />\n            </div>\n            <Button>Save Settings</Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Default Limits</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"trialDays\">Trial Period (days)</Label>\n              <Input id=\"trialDays\" type=\"number\" defaultValue=\"14\" />\n            </div>\n            <div>\n              <Label htmlFor=\"maxFileSize\">Max File Size (MB)</Label>\n              <Input id=\"maxFileSize\" type=\"number\" defaultValue=\"50\" />\n            </div>\n            <Button>Save Limits</Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":55184},"client/src/pages/tenant-dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Building2, Users, Calendar, DollarSign, Settings, LogOut } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface TenantSession {\n  tenantId: string;\n  userId: string;\n  userRole: string;\n  tenantName: string;\n  packageFeatures: any;\n}\n\ninterface TenantUser {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n}\n\ninterface Tenant {\n  id: string;\n  name: string;\n  status: string;\n  packageId: string;\n}\n\nexport default function TenantDashboard() {\n  const { toast } = useToast();\n  const [session, setSession] = useState<TenantSession | null>(null);\n  const [user, setUser] = useState<TenantUser | null>(null);\n  const [tenant, setTenant] = useState<Tenant | null>(null);\n\n  useEffect(() => {\n    // Check if user is authenticated\n    const sessionData = localStorage.getItem(\"tenantSession\");\n    const userData = localStorage.getItem(\"tenantUser\");\n    const tenantData = localStorage.getItem(\"tenant\");\n\n    if (!sessionData || !userData || !tenantData) {\n      // Redirect to login if no session\n      window.location.href = \"/tenant/login\";\n      return;\n    }\n\n    try {\n      setSession(JSON.parse(sessionData));\n      setUser(JSON.parse(userData));\n      setTenant(JSON.parse(tenantData));\n    } catch (error) {\n      console.error(\"Error parsing session data:\", error);\n      handleLogout();\n    }\n  }, []);\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"tenantSession\");\n    localStorage.removeItem(\"tenantUser\");\n    localStorage.removeItem(\"tenant\");\n    \n    toast({\n      title: \"Logged Out\",\n      description: \"You have been successfully logged out.\",\n    });\n\n    window.location.href = \"/tenant/login\";\n  };\n\n  if (!session || !user || !tenant) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-800 shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <Building2 className=\"h-8 w-8 text-blue-600 mr-3\" />\n              <div>\n                <h1 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                  {tenant.name}\n                </h1>\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                  Venue Management Dashboard\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <Badge variant={tenant.status === \"active\" ? \"default\" : \"secondary\"}>\n                {tenant.status}\n              </Badge>\n              \n              <div className=\"flex items-center space-x-2\">\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    {user.name}\n                  </p>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400 capitalize\">\n                    {user.role}\n                  </p>\n                </div>\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleLogout}\n                  className=\"text-gray-500 hover:text-gray-700\"\n                >\n                  <LogOut size={16} />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            Welcome back, {user.name}!\n          </h2>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Here's what's happening with your venues today.\n          </p>\n        </div>\n\n        {/* Feature Access Information */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Account Information</CardTitle>\n            <CardDescription>\n              Your current subscription and feature access\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div className=\"text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                <Building2 className=\"h-8 w-8 text-blue-600 mx-auto mb-2\" />\n                <p className=\"text-sm font-medium text-gray-900 dark:text-white\">Tenant ID</p>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">{tenant.id}</p>\n              </div>\n              \n              <div className=\"text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                <Users className=\"h-8 w-8 text-green-600 mx-auto mb-2\" />\n                <p className=\"text-sm font-medium text-gray-900 dark:text-white\">Role</p>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400 capitalize\">{user.role}</p>\n              </div>\n              \n              <div className=\"text-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\n                <Calendar className=\"h-8 w-8 text-purple-600 mx-auto mb-2\" />\n                <p className=\"text-sm font-medium text-gray-900 dark:text-white\">Package</p>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">{tenant.packageId}</p>\n              </div>\n              \n              <div className=\"text-center p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg\">\n                <DollarSign className=\"h-8 w-8 text-orange-600 mx-auto mb-2\" />\n                <p className=\"text-sm font-medium text-gray-900 dark:text-white\">Status</p>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400 capitalize\">{tenant.status}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Calendar className=\"h-5 w-5 mr-2\" />\n                Bookings\n              </CardTitle>\n              <CardDescription>\n                Manage your venue bookings and events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button className=\"w-full\" onClick={() => window.location.href = '/bookings'}>\n                View Bookings\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Users className=\"h-5 w-5 mr-2\" />\n                Customers\n              </CardTitle>\n              <CardDescription>\n                View and manage your customer database\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button className=\"w-full\" onClick={() => window.location.href = '/customers'}>\n                View Customers\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Building2 className=\"h-5 w-5 mr-2\" />\n                Venues\n              </CardTitle>\n              <CardDescription>\n                Configure your venues and spaces\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button className=\"w-full\" onClick={() => window.location.href = '/venues'}>\n                Manage Venues\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Feature Access Details */}\n        {session.packageFeatures && (\n          <Card className=\"mt-8\">\n            <CardHeader>\n              <CardTitle>Available Features</CardTitle>\n              <CardDescription>\n                Features included in your current package\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                {Object.entries(session.packageFeatures).map(([feature, enabled]) => (\n                  <div key={feature} className=\"flex items-center space-x-2\">\n                    <div className={`w-3 h-3 rounded-full ${enabled ? 'bg-green-500' : 'bg-gray-300'}`} />\n                    <span className=\"text-sm text-gray-700 dark:text-gray-300 capitalize\">\n                      {feature.replace(/([A-Z])/g, ' $1').trim()}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </main>\n    </div>\n  );\n}","size_bytes":9251},"client/src/pages/tenant-login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, clearTenantCache } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Building, Eye, EyeOff } from \"lucide-react\";\n\nexport default function TenantLogin() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [credentials, setCredentials] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const [showPassword, setShowPassword] = useState(false);\n\n  const loginMutation = useMutation({\n    mutationFn: (loginData: { email: string; password: string }) =>\n      apiRequest(\"/api/auth/login\", {\n        method: \"POST\",\n        body: JSON.stringify(loginData),\n      }),\n    onSuccess: (response) => {\n      // Clear any previous tenant cache to prevent cross-contamination\n      clearTenantCache();\n      \n      // Clear any other potential cached data\n      sessionStorage.clear();\n      \n      // Store auth token\n      localStorage.setItem(\"auth_token\", response.token);\n      toast({ title: \"Login successful\", description: `Welcome back, ${response.user.name}!` });\n      // Redirect to dashboard\n      setLocation(\"/dashboard\");\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Login failed\", \n        description: error.message || \"Invalid credentials\", \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!credentials.email || !credentials.password) {\n      toast({ title: \"Please enter both email and password\", variant: \"destructive\" });\n      return;\n    }\n    \n    loginMutation.mutate(credentials);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-12 h-12 bg-indigo-600 rounded-full flex items-center justify-center mb-4\">\n            <Building className=\"w-6 h-6 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl\">Tenant Login</CardTitle>\n          <p className=\"text-gray-600\">Sign in to your venue management dashboard</p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"email\">Email Address</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={credentials.email}\n                onChange={(e) => setCredentials(prev => ({ ...prev, email: e.target.value }))}\n                placeholder=\"your.email@example.com\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={credentials.password}\n                  onChange={(e) => setCredentials(prev => ({ ...prev, password: e.target.value }))}\n                  placeholder=\"••••••••\"\n                  required\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={loginMutation.isPending}\n            >\n              {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Don't have an account?{\" \"}\n              <Button\n                variant=\"link\"\n                className=\"p-0 h-auto text-sm\"\n                onClick={() => setLocation(\"/signup\")}\n              >\n                Sign up here\n              </Button>\n            </p>\n            \n            <div className=\"mt-4 pt-4 border-t\">\n              <p className=\"text-xs text-gray-500\">\n                Super Admin?{\" \"}\n                <Button\n                  variant=\"link\"\n                  className=\"p-0 h-auto text-xs\"\n                  onClick={() => setLocation(\"/super-admin/login\")}\n                >\n                  Admin Login\n                </Button>\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5205},"client/src/pages/login-select.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Crown, UserCheck, Building2, LogOut } from \"lucide-react\";\nimport { useUserRole } from \"@/hooks/useUserRole\";\n\nexport default function LoginSelect() {\n  const [, setLocation] = useLocation();\n  const { setUserRole, logout, userRole } = useUserRole();\n  \n  // Clear any existing role when component mounts\n  useEffect(() => {\n    if (userRole) {\n      logout();\n    }\n  }, []);\n\n  const roles = [\n    {\n      id: \"super-admin\",\n      name: \"Super Admin\",\n      title: \"Platform Administrator\",\n      description: \"Manage all tenant accounts and platform settings\",\n      icon: Crown,\n      color: \"from-purple-600 to-pink-600\",\n      textColor: \"text-purple-600\",\n      permissions: [\n        \"Tenant Management\",\n        \"Feature Package Control\", \n        \"Platform Analytics\",\n        \"System Configuration\"\n      ]\n    },\n    {\n      id: \"admin\",\n      name: \"Admin\",\n      title: \"Venue Administrator\",\n      description: \"Full access to venue management and settings\",\n      icon: Crown,\n      color: \"from-blue-600 to-purple-600\",\n      textColor: \"text-purple-600\",\n      permissions: [\n        \"User Management\",\n        \"Venue Configuration\",\n        \"Financial Reports\",\n        \"System Settings\"\n      ]\n    },\n    {\n      id: \"staff\",\n      name: \"Staff\",\n      title: \"Venue Staff\",\n      description: \"Day-to-day operations and customer management\",\n      icon: UserCheck,\n      color: \"from-green-600 to-blue-600\",\n      textColor: \"text-blue-600\",\n      permissions: [\n        \"Event Management\",\n        \"Customer Service\",\n        \"Booking Operations\",\n        \"Basic Reports\"\n      ]\n    }\n  ];\n\n  const handleRoleSelect = (roleId: string) => {\n    console.log(\"Setting user role to:\", roleId);\n    setUserRole(roleId);\n    \n    // Add a small delay to ensure state is updated before navigation\n    setTimeout(() => {\n      console.log(\"Navigating to dashboard\");\n      setLocation(\"/\");\n    }, 100);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-6xl\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl flex items-center justify-center\">\n              <span className=\"text-white font-bold text-xl\">V</span>\n            </div>\n            <span className=\"ml-3 text-3xl font-bold text-slate-900\">Venuine</span>\n          </div>\n          <h1 className=\"text-2xl font-bold text-slate-900 mb-2\">Select Your Role</h1>\n          <p className=\"text-slate-600\">Choose how you'd like to access the platform</p>\n        </div>\n\n        {/* Role Cards */}\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          {roles.map((role) => {\n            const Icon = role.icon;\n            return (\n              <Card key={role.id} className=\"relative overflow-hidden hover:shadow-lg transition-shadow cursor-pointer group\" onClick={() => handleRoleSelect(role.id)}>\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <Icon className={`w-8 h-8 ${role.textColor}`} />\n                    <Badge className={`bg-gradient-to-r ${role.color} text-white border-0`}>\n                      {role.name}\n                    </Badge>\n                  </div>\n                  <CardTitle className=\"text-xl font-semibold text-slate-900\">\n                    {role.name}\n                  </CardTitle>\n                  <CardDescription className=\"text-slate-600\">\n                    {role.description}\n                  </CardDescription>\n                </CardHeader>\n                \n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-3\">\n                    <div>\n                      <h4 className=\"text-sm font-medium text-slate-900 mb-2\">Key Permissions</h4>\n                      <ul className=\"space-y-1\">\n                        {role.permissions.map((permission, index) => (\n                          <li key={index} className=\"text-sm text-slate-600 flex items-center\">\n                            <div className=\"w-1.5 h-1.5 bg-slate-400 rounded-full mr-2\"></div>\n                            {permission}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                    \n                    <Button \n                      className={`w-full bg-gradient-to-r ${role.color} hover:opacity-90 text-white border-0 group-hover:scale-105 transition-transform`}\n                      onClick={() => handleRoleSelect(role.id)}\n                    >\n                      <Icon className=\"w-4 h-4 mr-2\" />\n                      Continue as {role.name}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Demo Note */}\n        <div className=\"text-center mt-8 p-4 bg-white/50 backdrop-blur-sm rounded-lg border border-slate-200\">\n          <p className=\"text-sm text-slate-600\">\n            <strong>Demo Mode:</strong> This is a demonstration of the multi-tenant SaaS platform. \n            In a real deployment, authentication would be handled through secure login systems.\n          </p>\n          {userRole && (\n            <div className=\"mt-3\">\n              <Button variant=\"outline\" size=\"sm\" onClick={logout} className=\"text-slate-600\">\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Clear Current Session ({userRole})\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Tenant Login Section */}\n        <div className=\"mt-6 pt-6 border-t border-slate-200\">\n          <div className=\"text-center\">\n            <p className=\"text-sm text-slate-600 mb-4 font-medium\">\n              Multi-Tenant Login\n            </p>\n            <Button\n              variant=\"outline\"\n              onClick={() => setLocation(\"/tenant/login\")}\n              className=\"w-full max-w-md mx-auto border-slate-300 hover:border-blue-500 hover:text-blue-600\"\n            >\n              <Building2 className=\"h-4 w-4 mr-2\" />\n              Tenant Account Login\n            </Button>\n            <p className=\"text-xs text-slate-500 mt-2\">\n              For tenant accounts created by Super Admin\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6800},"client/src/pages/tenant-register.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { AlertCircle, Building2, Mail, Phone, MapPin, User, Lock } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nconst tenantRegisterSchema = z.object({\n  // Company Information\n  companyName: z.string().min(2, \"Company name is required\"),\n  subdomain: z.string()\n    .min(3, \"Subdomain must be at least 3 characters\")\n    .regex(/^[a-z0-9-]+$/, \"Subdomain can only contain lowercase letters, numbers, and hyphens\"),\n  businessEmail: z.string().email(\"Please enter a valid business email\"),\n  businessPhone: z.string().min(10, \"Please enter a valid phone number\"),\n  address: z.string().min(10, \"Please enter a complete address\"),\n  \n  // Admin User Information\n  adminName: z.string().min(2, \"Admin name is required\"),\n  adminEmail: z.string().email(\"Please enter a valid admin email\"),\n  adminPassword: z.string().min(8, \"Password must be at least 8 characters\"),\n  confirmPassword: z.string(),\n  \n  // Package Selection\n  packageId: z.string().min(1, \"Please select a subscription package\"),\n}).refine((data) => data.adminPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype TenantRegisterForm = z.infer<typeof tenantRegisterSchema>;\n\nexport default function TenantRegister() {\n  const [, setLocation] = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  // Fetch available subscription packages\n  const { data: packages, isLoading: packagesLoading } = useQuery({\n    queryKey: [\"/api/subscription-packages/public\"],\n  });\n\n  const form = useForm<TenantRegisterForm>({\n    resolver: zodResolver(tenantRegisterSchema),\n    defaultValues: {\n      companyName: \"\",\n      subdomain: \"\",\n      businessEmail: \"\",\n      businessPhone: \"\",\n      address: \"\",\n      adminName: \"\",\n      adminEmail: \"\",\n      adminPassword: \"\",\n      confirmPassword: \"\",\n      packageId: \"\",\n    },\n  });\n\n  const onSubmit = async (data: TenantRegisterForm) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/tenant-register\", data);\n      \n      if (response.ok) {\n        const result = await response.json();\n        toast({\n          title: \"Registration Successful!\",\n          description: \"Your account has been created and is pending approval.\",\n        });\n        \n        // Redirect to success page or login\n        setLocation(\"/tenant-registration-success\");\n      } else {\n        const errorData = await response.json();\n        setError(errorData.message || \"Registration failed. Please try again.\");\n      }\n    } catch (err) {\n      setError(\"Unable to connect to server. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-4\">\n      <div className=\"max-w-2xl mx-auto py-8\">\n        <Card>\n          <CardHeader className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-4\">\n              <Building2 className=\"h-8 w-8 text-primary\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">Join VENUIN</CardTitle>\n            <CardDescription>\n              Create your venue management account and start managing events professionally\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {error && (\n                  <Alert variant=\"destructive\">\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <AlertDescription>{error}</AlertDescription>\n                  </Alert>\n                )}\n\n                {/* Company Information Section */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold border-b pb-2\">Company Information</h3>\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"companyName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Company Name</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Building2 className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                            <Input\n                              {...field}\n                              placeholder=\"Your Venue Company\"\n                              className=\"pl-10\"\n                              disabled={isLoading}\n                            />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"subdomain\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Company Subdomain</FormLabel>\n                        <FormControl>\n                          <div className=\"flex items-center space-x-2\">\n                            <Input\n                              {...field}\n                              placeholder=\"your-company\"\n                              className=\"flex-1\"\n                              disabled={isLoading}\n                              onChange={(e) => {\n                                const value = e.target.value.toLowerCase().replace(/[^a-z0-9-]/g, '');\n                                field.onChange(value);\n                              }}\n                            />\n                            <span className=\"text-sm text-muted-foreground\">.venuin.com</span>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"businessEmail\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Business Email</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                              <Input\n                                {...field}\n                                type=\"email\"\n                                placeholder=\"info@yourcompany.com\"\n                                className=\"pl-10\"\n                                disabled={isLoading}\n                              />\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"businessPhone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Business Phone</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Phone className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                              <Input\n                                {...field}\n                                placeholder=\"+1 (555) 123-4567\"\n                                className=\"pl-10\"\n                                disabled={isLoading}\n                              />\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"address\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Business Address</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <MapPin className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                            <Textarea\n                              {...field}\n                              placeholder=\"123 Business Street, City, State, ZIP\"\n                              className=\"pl-10 min-h-[80px]\"\n                              disabled={isLoading}\n                            />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Admin Account Section */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold border-b pb-2\">Admin Account Setup</h3>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"adminName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Admin Full Name</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                              <Input\n                                {...field}\n                                placeholder=\"John Smith\"\n                                className=\"pl-10\"\n                                disabled={isLoading}\n                              />\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"adminEmail\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Admin Email</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                              <Input\n                                {...field}\n                                type=\"email\"\n                                placeholder=\"admin@yourcompany.com\"\n                                className=\"pl-10\"\n                                disabled={isLoading}\n                              />\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"adminPassword\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                              <Input\n                                {...field}\n                                type=\"password\"\n                                placeholder=\"Create a strong password\"\n                                className=\"pl-10\"\n                                disabled={isLoading}\n                              />\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"confirmPassword\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Confirm Password</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                              <Input\n                                {...field}\n                                type=\"password\"\n                                placeholder=\"Confirm your password\"\n                                className=\"pl-10\"\n                                disabled={isLoading}\n                              />\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n\n                {/* Package Selection */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold border-b pb-2\">Choose Your Plan</h3>\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"packageId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Subscription Package</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isLoading || packagesLoading}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select a subscription package\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {packages?.map((pkg: any) => (\n                              <SelectItem key={pkg.id} value={pkg.id}>\n                                {pkg.name} - ${pkg.price}/{pkg.billingInterval}\n                                {pkg.isPopular && \" (Popular)\"}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"flex gap-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    className=\"flex-1\"\n                    onClick={() => setLocation(\"/tenant-login\")}\n                    disabled={isLoading}\n                  >\n                    Back to Login\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    className=\"flex-1\"\n                    disabled={isLoading}\n                  >\n                    {isLoading ? \"Creating Account...\" : \"Create Account\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":16479},"client/src/pages/superadmin/SuperAdminDashboard.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Building2, \n  Users, \n  Activity, \n  TrendingUp, \n  Plus,\n  Search,\n  Filter,\n  MoreHorizontal,\n  Edit,\n  Trash2,\n  LogOut,\n  Ban\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\n// Using PostgreSQL-based authentication\nimport { FeaturePackageForm } from './FeaturePackageForm';\nimport UsersManagement from './UsersManagement';\nimport { AdminAuthGuard } from \"@/components/AdminAuthGuard\";\n\ninterface Tenant {\n  id: string;\n  name: string;\n  slug: string;\n  status: 'active' | 'suspended' | 'pending';\n  featurePackageId: string | null;\n  contactName: string;\n  contactEmail: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface FeaturePackage {\n  id: string;\n  name: string;\n  description: string;\n  features: any;\n  limits: any;\n  priceMonthly: number;\n  price_monthly: number;\n  status: string;\n  isActive: boolean;\n}\n\ninterface Analytics {\n  totalTenants: number;\n  activeTenants: number;\n  totalUsers: number;\n  recentActivity: any[];\n}\n\nfunction SuperAdminDashboardContent({ user }: { user: any }) {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n  const [isCreateTenantOpen, setIsCreateTenantOpen] = useState(false);\n  const [isCreatePackageOpen, setIsCreatePackageOpen] = useState(false);\n  const [isEditPackageOpen, setIsEditPackageOpen] = useState(false);\n  const [editingPackage, setEditingPackage] = useState<any>(null);\n  const [isEditTenantOpen, setIsEditTenantOpen] = useState(false);\n  const [editingTenant, setEditingTenant] = useState<Tenant | null>(null);\n  const [, setLocation] = useLocation();\n  \n  const generateSlug = (name: string) => {\n    return name\n      .toLowerCase()\n      .replace(/[^a-z0-9\\s-]/g, '') // Remove special characters\n      .replace(/\\s+/g, '-') // Replace spaces with hyphens  \n      .replace(/-+/g, '-') // Replace multiple hyphens with single\n      .replace(/^-|-$/g, '') // Remove leading/trailing hyphens\n      .trim();\n  };\n  const queryClient = useQueryClient();\n\n  // PostgreSQL logout\n  const handleLogout = async () => {\n    try {\n      await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include',\n      });\n      toast({\n        title: \"Logged out successfully\",\n        description: \"You have been logged out of the superadmin console.\",\n      });\n      setLocation(\"/auth/login\");\n    } catch (error: any) {\n      toast({\n        title: \"Logout failed\", \n        description: error.message || \"Failed to logout\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Analytics query\n  const { data: analytics, isLoading: analyticsLoading } = useQuery<Analytics>({\n    queryKey: ['/api/admin/analytics'],\n  });\n\n  // Tenants query with search and filter\n  const { data: tenants = [], isLoading: tenantsLoading } = useQuery<Tenant[]>({\n    queryKey: ['/api/admin/tenants', searchTerm, statusFilter],\n  });\n\n  // Users query\n  const { data: users = [], isLoading: usersLoading } = useQuery<any[]>({\n    queryKey: ['/api/admin/users'],\n  });\n\n  // Feature packages query\n  const { data: featurePackages = [], isLoading: packagesLoading } = useQuery<FeaturePackage[]>({\n    queryKey: ['/api/admin/packages'],\n  });\n\n  // Create tenant mutation\n  const createTenantMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest('POST', '/api/admin/tenants', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/tenants'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/analytics'] });\n      setIsCreateTenantOpen(false);\n      toast({ title: \"Success\", description: \"Tenant created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create tenant\", variant: \"destructive\" });\n    },\n  });\n\n  // Create feature package mutation\n  const createPackageMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest('POST', '/api/admin/packages', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/packages'] });\n      setIsCreatePackageOpen(false);\n      toast({ title: \"Success\", description: \"Feature package created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create feature package\", variant: \"destructive\" });\n    },\n  });\n\n  // Update feature package mutation\n  const updatePackageMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest('PUT', `/api/admin/packages/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/packages'] });\n      setIsEditPackageOpen(false);\n      setEditingPackage(null);\n      toast({ title: \"Success\", description: \"Feature package updated successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to update feature package\", \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Delete feature package mutation\n  const deletePackageMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest('DELETE', `/api/admin/packages/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/packages'] });\n      toast({ title: \"Success\", description: \"Feature package deleted successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to delete feature package\", \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return await apiRequest('DELETE', `/api/admin/users/${userId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/analytics'] });\n      toast({ title: \"Success\", description: \"User deleted successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to delete user\", \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Update tenant mutation\n  const updateTenantMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string, data: any }) => {\n      return await apiRequest('PUT', `/api/admin/tenants/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/tenants'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/analytics'] });\n      setIsEditTenantOpen(false);\n      setEditingTenant(null);\n      toast({ title: \"Success\", description: \"Tenant updated successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to update tenant\", \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const handleCreateTenant = (event: React.FormEvent) => {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget as HTMLFormElement);\n    const featurePackageId = formData.get('featurePackageId');\n    createTenantMutation.mutate({\n      name: formData.get('name'),\n      slug: formData.get('slug'),\n      contactName: formData.get('contactName'),\n      contactEmail: formData.get('contactEmail'),\n      featurePackageId: featurePackageId === 'no-package' ? null : featurePackageId,\n      status: 'active',\n    });\n  };\n\n  const handleCreatePackage = (event: React.FormEvent) => {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget as HTMLFormElement);\n    const features = (formData.get('features') as string).split('\\n').filter(f => f.trim());\n    createPackageMutation.mutate({\n      name: formData.get('name'),\n      description: formData.get('description'),\n      features,\n      maxUsers: parseInt(formData.get('maxUsers') as string),\n      priceMonthly: parseFloat(formData.get('priceMonthly') as string),\n      isActive: true,\n    });\n  };\n\n  const handleEditPackage = (pkg: any) => {\n    setEditingPackage(pkg);\n    setIsEditPackageOpen(true);\n  };\n\n  const handleUpdatePackage = (data: any) => {\n    if (editingPackage) {\n      updatePackageMutation.mutate({\n        id: editingPackage.id,\n        data\n      });\n    }\n  };\n\n  const handleDeletePackage = (pkg: any) => {\n    if (confirm(`Are you sure you want to delete the feature package \"${pkg.name}\"? This action cannot be undone.`)) {\n      deletePackageMutation.mutate(pkg.id);\n    }\n  };\n\n  const handleEditTenant = (tenant: Tenant) => {\n    setEditingTenant(tenant);\n    setIsEditTenantOpen(true);\n  };\n\n  const handleUpdateTenant = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (!editingTenant) return;\n    \n    const formData = new FormData(event.currentTarget as HTMLFormElement);\n    const planId = formData.get('planId');\n    \n    updateTenantMutation.mutate({\n      id: editingTenant.id,\n      data: {\n        name: formData.get('name'),\n        slug: formData.get('slug'),\n        contactName: formData.get('contactName'),\n        contactEmail: formData.get('contactEmail'),\n        status: formData.get('status'),\n        planId: planId === 'no-package' ? null : planId,\n      }\n    });\n  };\n\n\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      active: 'default',\n      suspended: 'destructive',\n      pending: 'secondary',\n    };\n    return <Badge variant={variants[status as keyof typeof variants] as any}>{status}</Badge>;\n  };\n\n  // Loading state for dashboard data\n  if (tenantsLoading || analyticsLoading || packagesLoading) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\"/>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 dark:from-slate-900 dark:via-slate-800 dark:to-indigo-950\">\n      <div className=\"container mx-auto p-6 space-y-8\">\n        {/* Stunning Header Section */}\n        <div className=\"relative overflow-hidden rounded-3xl bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 p-8 text-white shadow-2xl\">\n          <div className=\"absolute inset-0 bg-black/20\"></div>\n          <div className=\"relative flex justify-between items-center\">\n            <div className=\"space-y-2\">\n              <h1 className=\"text-4xl font-bold bg-white/10 backdrop-blur-sm rounded-2xl px-6 py-3 inline-block\">\n                🚀 Super Admin Console\n              </h1>\n              <p className=\"text-white/90 text-lg font-medium\">\n                Platform command center • Manage everything from one place\n              </p>\n            </div>\n            <Button \n              variant=\"secondary\"\n              onClick={handleLogout}\n              className=\"bg-white/20 hover:bg-white/30 backdrop-blur-sm border-white/30 text-white hover:text-white transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1\"\n            >\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              Sign Out\n            </Button>\n          </div>\n          \n          {/* Floating decorative elements */}\n          <div className=\"absolute -top-10 -right-10 w-40 h-40 bg-white/10 rounded-full blur-3xl\"></div>\n          <div className=\"absolute -bottom-10 -left-10 w-60 h-60 bg-purple-400/20 rounded-full blur-3xl\"></div>\n        </div>\n\n        {/* Enhanced Navigation Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-8\">\n          <div className=\"flex justify-center\">\n            <TabsList className=\"bg-white/60 backdrop-blur-lg shadow-xl border-0 p-2 rounded-2xl\">\n              <TabsTrigger value=\"overview\" className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-indigo-500 data-[state=active]:to-purple-600 data-[state=active]:text-white rounded-xl px-6 py-3 font-medium transition-all duration-300\">\n                <Activity className=\"w-4 h-4 mr-2\" />\n                Overview\n              </TabsTrigger>\n              <TabsTrigger value=\"users\" className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-cyan-600 data-[state=active]:text-white rounded-xl px-6 py-3 font-medium transition-all duration-300\">\n                <Users className=\"w-4 h-4 mr-2\" />\n                Users\n              </TabsTrigger>\n              <TabsTrigger value=\"tenants\" className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-emerald-500 data-[state=active]:to-teal-600 data-[state=active]:text-white rounded-xl px-6 py-3 font-medium transition-all duration-300\">\n                <Building2 className=\"w-4 h-4 mr-2\" />\n                Tenants\n              </TabsTrigger>\n              <TabsTrigger value=\"packages\" className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-orange-500 data-[state=active]:to-red-600 data-[state=active]:text-white rounded-xl px-6 py-3 font-medium transition-all duration-300\">\n                <TrendingUp className=\"w-4 h-4 mr-2\" />\n                Packages\n              </TabsTrigger>\n              <TabsTrigger value=\"activity\" className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-pink-500 data-[state=active]:to-rose-600 data-[state=active]:text-white rounded-xl px-6 py-3 font-medium transition-all duration-300\">\n                <Activity className=\"w-4 h-4 mr-2\" />\n                Activity\n              </TabsTrigger>\n            </TabsList>\n          </div>\n\n          <TabsContent value=\"overview\" className=\"space-y-8\">\n            {analyticsLoading ? (\n              <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n                {[...Array(4)].map((_, i) => (\n                  <Card key={i} className=\"bg-white/60 backdrop-blur-lg shadow-xl border-0 rounded-2xl overflow-hidden\">\n                    <CardContent className=\"p-8\">\n                      <div className=\"animate-pulse\">\n                        <div className=\"h-4 bg-gradient-to-r from-gray-200 to-gray-300 rounded-full mb-4\"></div>\n                        <div className=\"h-8 bg-gradient-to-r from-gray-300 to-gray-400 rounded-full\"></div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n                <Card className=\"group bg-gradient-to-br from-blue-500 to-blue-600 text-white shadow-2xl border-0 rounded-2xl overflow-hidden hover:shadow-3xl transition-all duration-300 transform hover:-translate-y-2\">\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-transparent to-white/10\"></div>\n                  <CardHeader className=\"relative flex flex-row items-center justify-between space-y-0 pb-4\">\n                    <CardTitle className=\"text-sm font-semibold text-white/90\">Total Tenants</CardTitle>\n                    <div className=\"p-3 bg-white/20 rounded-xl backdrop-blur-sm\">\n                      <Building2 className=\"h-6 w-6 text-white\" />\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"relative\">\n                    <div className=\"text-4xl font-bold text-white mb-2\">{analytics?.totalTenants || 0}</div>\n                    <p className=\"text-white/80 text-sm\">Active organizations</p>\n                  </CardContent>\n                </Card>\n                \n                <Card className=\"group bg-gradient-to-br from-emerald-500 to-emerald-600 text-white shadow-2xl border-0 rounded-2xl overflow-hidden hover:shadow-3xl transition-all duration-300 transform hover:-translate-y-2\">\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-transparent to-white/10\"></div>\n                  <CardHeader className=\"relative flex flex-row items-center justify-between space-y-0 pb-4\">\n                    <CardTitle className=\"text-sm font-semibold text-white/90\">Active Tenants</CardTitle>\n                    <div className=\"p-3 bg-white/20 rounded-xl backdrop-blur-sm\">\n                      <TrendingUp className=\"h-6 w-6 text-white\" />\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"relative\">\n                    <div className=\"text-4xl font-bold text-white mb-2\">{analytics?.activeTenants || 0}</div>\n                    <p className=\"text-white/80 text-sm\">Currently paying</p>\n                  </CardContent>\n                </Card>\n                \n                <Card className=\"group bg-gradient-to-br from-purple-500 to-purple-600 text-white shadow-2xl border-0 rounded-2xl overflow-hidden hover:shadow-3xl transition-all duration-300 transform hover:-translate-y-2\">\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-transparent to-white/10\"></div>\n                  <CardHeader className=\"relative flex flex-row items-center justify-between space-y-0 pb-4\">\n                    <CardTitle className=\"text-sm font-semibold text-white/90\">Total Users</CardTitle>\n                    <div className=\"p-3 bg-white/20 rounded-xl backdrop-blur-sm\">\n                      <Users className=\"h-6 w-6 text-white\" />\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"relative\">\n                    <div className=\"text-4xl font-bold text-white mb-2\">{analytics?.totalUsers || 0}</div>\n                    <p className=\"text-white/80 text-sm\">Platform members</p>\n                  </CardContent>\n                </Card>\n                \n                <Card className=\"group bg-gradient-to-br from-orange-500 to-orange-600 text-white shadow-2xl border-0 rounded-2xl overflow-hidden hover:shadow-3xl transition-all duration-300 transform hover:-translate-y-2\">\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-transparent to-white/10\"></div>\n                  <CardHeader className=\"relative flex flex-row items-center justify-between space-y-0 pb-4\">\n                    <CardTitle className=\"text-sm font-semibold text-white/90\">Recent Activity</CardTitle>\n                    <div className=\"p-3 bg-white/20 rounded-xl backdrop-blur-sm\">\n                      <Activity className=\"h-6 w-6 text-white\" />\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"relative\">\n                    <div className=\"text-4xl font-bold text-white mb-2\">{analytics?.recentActivity?.length || 0}</div>\n                    <p className=\"text-white/80 text-sm\">System events</p>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n            \n            {/* Quick Actions Section */}\n            <div className=\"bg-white/60 backdrop-blur-lg rounded-2xl shadow-xl border-0 p-8\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <h3 className=\"text-2xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent\">\n                    Quick Actions\n                  </h3>\n                  <p className=\"text-gray-600 mt-1\">Common administrative tasks</p>\n                </div>\n              </div>\n              \n              <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                <Button \n                  onClick={() => setIsCreateTenantOpen(true)}\n                  className=\"h-20 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 rounded-xl\"\n                >\n                  <div className=\"flex flex-col items-center space-y-2\">\n                    <Plus className=\"h-6 w-6\" />\n                    <span className=\"font-semibold\">Create Tenant</span>\n                  </div>\n                </Button>\n                \n                <Button \n                  onClick={() => setIsCreatePackageOpen(true)}\n                  className=\"h-20 bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 rounded-xl\"\n                >\n                  <div className=\"flex flex-col items-center space-y-2\">\n                    <Plus className=\"h-6 w-6\" />\n                    <span className=\"font-semibold\">New Package</span>\n                  </div>\n                </Button>\n                \n                <Button \n                  onClick={() => setActiveTab(\"users\")}\n                  className=\"h-20 bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 rounded-xl\"\n                >\n                  <div className=\"flex flex-col items-center space-y-2\">\n                    <Search className=\"h-6 w-6\" />\n                    <span className=\"font-semibold\">Manage Users</span>\n                  </div>\n                </Button>\n              </div>\n            </div>\n          </TabsContent>\n\n        <TabsContent value=\"users\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Users Management</h2>\n          </div>\n\n          <Card>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>User</TableHead>\n                  <TableHead>Role</TableHead>\n                  <TableHead>Tenants</TableHead>\n                  <TableHead>Created</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {usersLoading ? (\n                  [...Array(5)].map((_, i) => (\n                    <TableRow key={i}>\n                      {[...Array(5)].map((_, j) => (\n                        <TableCell key={j}>\n                          <div className=\"animate-pulse bg-gray-300 h-4 rounded\"></div>\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                  ))\n                ) : users && users.length > 0 ? (\n                  users.map((user: any) => (\n                    <TableRow key={user.id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{user.firstName} {user.lastName}</div>\n                          <div className=\"text-sm text-muted-foreground\">{user.email}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {user.isSuperAdmin ? (\n                          <Badge variant=\"destructive\">Super Admin</Badge>\n                        ) : (\n                          <Badge variant=\"outline\">User</Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {user.tenantCount || 0} tenants\n                      </TableCell>\n                      <TableCell>\n                        {new Date(user.createdAt).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>\n                        {!user.isSuperAdmin && (\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => deleteUserMutation.mutate(user.id)}\n                            disabled={deleteUserMutation.isPending}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={5} className=\"text-center\">\n                      No users found\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"tenants\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex gap-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  placeholder=\"Search tenants...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 w-64\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"All statuses\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All statuses</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"suspended\">Suspended</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <Dialog open={isCreateTenantOpen} onOpenChange={setIsCreateTenantOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Tenant\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Create New Tenant</DialogTitle>\n                  <DialogDescription>\n                    Create a new tenant organization on the platform.\n                  </DialogDescription>\n                </DialogHeader>\n                <form onSubmit={handleCreateTenant} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Organization Name</Label>\n                    <Input \n                      name=\"name\" \n                      required \n                      onChange={(e) => {\n                        const slugField = e.target.form?.querySelector('input[name=\"slug\"]') as HTMLInputElement;\n                        if (slugField) {\n                          slugField.value = generateSlug(e.target.value);\n                        }\n                      }}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"slug\">URL Identifier</Label>\n                    <Input \n                      name=\"slug\" \n                      placeholder=\"Auto-generated from organization name\" \n                      required \n                      readOnly\n                      className=\"bg-muted\"\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Automatically created from the organization name. Creates: /t/[slug]/app\n                    </p>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"contactName\">Contact Name</Label>\n                    <Input name=\"contactName\" required />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"contactEmail\">Contact Email</Label>\n                    <Input name=\"contactEmail\" type=\"email\" required />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"featurePackageId\">Feature Package</Label>\n                    <Select name=\"featurePackageId\">\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select package (optional)\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"no-package\">No package</SelectItem>\n                        {featurePackages?.map(pkg => (\n                          <SelectItem key={pkg.id} value={pkg.id}>\n                            {pkg.name} - ${pkg.priceMonthly}/month\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"flex justify-end gap-2\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateTenantOpen(false)}>\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createTenantMutation.isPending}>\n                      {createTenantMutation.isPending ? \"Creating...\" : \"Create Tenant\"}\n                    </Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Organization</TableHead>\n                  <TableHead>Contact</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Package</TableHead>\n                  <TableHead>Created</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {tenantsLoading ? (\n                  [...Array(5)].map((_, i) => (\n                    <TableRow key={i}>\n                      {[...Array(6)].map((_, j) => (\n                        <TableCell key={j}>\n                          <div className=\"animate-pulse bg-gray-300 h-4 rounded\"></div>\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                  ))\n                ) : tenants && tenants.length > 0 ? (\n                  tenants.map((tenant: Tenant) => (\n                    <TableRow key={tenant.id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{tenant.name}</div>\n                          <div className=\"text-sm text-muted-foreground\">{tenant.slug}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{tenant.contactName}</div>\n                          <div className=\"text-sm text-muted-foreground\">{tenant.contactEmail}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>{getStatusBadge(tenant.status)}</TableCell>\n                      <TableCell>\n                        {tenant.planId ? (\n                          <Badge variant=\"outline\">Package Assigned</Badge>\n                        ) : (\n                          <span className=\"text-muted-foreground\">No package</span>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {new Date(tenant.createdAt).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => handleEditTenant(tenant)}>\n                              <Edit className=\"h-4 w-4 mr-2\" />\n                              Edit Tenant\n                            </DropdownMenuItem>\n                            <DropdownMenuItem \n                              onClick={() => {\n                                if (confirm(`Are you sure you want to suspend tenant \"${tenant.name}\"?`)) {\n                                  updateTenantMutation.mutate({\n                                    id: tenant.id,\n                                    data: { status: 'suspended' }\n                                  });\n                                }\n                              }}\n                              disabled={tenant.status === 'suspended'}\n                            >\n                              <Ban className=\"h-4 w-4 mr-2\" />\n                              Suspend\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center\">\n                      No tenants found\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"packages\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Feature Packages</h2>\n            <Dialog open={isCreatePackageOpen} onOpenChange={setIsCreatePackageOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Package\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>Create Feature Package</DialogTitle>\n                  <DialogDescription>\n                    Define a new feature package with specific VENUIN features, usage limits, and pricing.\n                  </DialogDescription>\n                </DialogHeader>\n                <FeaturePackageForm \n                  onSubmit={(data: any) => createPackageMutation.mutate(data)}\n                  isPending={createPackageMutation.isPending}\n                  onCancel={() => setIsCreatePackageOpen(false)}\n                />\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {/* Edit Feature Package Dialog */}\n          <Dialog open={isEditPackageOpen} onOpenChange={setIsEditPackageOpen}>\n            <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Edit Feature Package</DialogTitle>\n                <DialogDescription>\n                  Update the feature package settings, pricing, and capabilities.\n                </DialogDescription>\n              </DialogHeader>\n              <FeaturePackageForm \n                initialData={editingPackage}\n                onSubmit={handleUpdatePackage}\n                isPending={updatePackageMutation.isPending}\n                onCancel={() => {\n                  setIsEditPackageOpen(false);\n                  setEditingPackage(null);\n                }}\n              />\n            </DialogContent>\n          </Dialog>\n\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {packagesLoading ? (\n              [...Array(3)].map((_, i) => (\n                <Card key={i}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"animate-pulse space-y-2\">\n                      <div className=\"h-6 bg-gray-300 rounded\"></div>\n                      <div className=\"h-4 bg-gray-300 rounded\"></div>\n                      <div className=\"h-4 bg-gray-300 rounded w-3/4\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            ) : featurePackages?.length > 0 ? (\n              featurePackages.map((pkg) => (\n                <Card key={pkg.id}>\n                  <CardHeader>\n                    <CardTitle className=\"flex justify-between items-center\">\n                      {pkg.name}\n                      <Badge variant={pkg.status === 'active' ? \"default\" : \"secondary\"}>\n                        {pkg.status === 'active' ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </CardTitle>\n                    <CardDescription>{pkg.description}</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <div className=\"text-2xl font-bold\">${pkg.price_monthly}/month</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {pkg.limits?.staff && `Max ${pkg.limits.staff} staff`}\n                          {pkg.limits?.venues && ` • ${pkg.limits.venues} venues`}\n                        </div>\n                        <div className=\"space-y-1\">\n                          <div className=\"text-sm font-medium\">Features:</div>\n                          <ul className=\"text-sm text-muted-foreground space-y-1\">\n                            {Object.entries(pkg.features || {}).filter(([key, value]) => value).map(([feature, value], index) => (\n                              <li key={index} className=\"flex items-center\">\n                                <span className=\"w-1 h-1 bg-current rounded-full mr-2\"></span>\n                                {feature}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex gap-2 pt-2 border-t\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEditPackage(pkg)}\n                          className=\"flex-1\"\n                        >\n                          <Edit className=\"h-4 w-4 mr-2\" />\n                          Edit\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDeletePackage(pkg)}\n                          className=\"text-red-600 hover:text-red-700 hover:border-red-300\"\n                          disabled={deletePackageMutation.isPending}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            ) : (\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"text-muted-foreground\">No feature packages found</div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"activity\">\n          <Card>\n            <CardHeader>\n              <CardTitle>System Activity Logs</CardTitle>\n              <CardDescription>Recent platform-wide activity and changes</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center text-muted-foreground p-8\">\n                Activity logs will be displayed here\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Edit Tenant Dialog */}\n      <Dialog open={isEditTenantOpen} onOpenChange={setIsEditTenantOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Tenant</DialogTitle>\n            <DialogDescription>\n              Update tenant information, contact details, and plan assignment.\n            </DialogDescription>\n          </DialogHeader>\n          {editingTenant && (\n            <form onSubmit={handleUpdateTenant} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\">Tenant Name</Label>\n                  <Input\n                    id=\"name\"\n                    name=\"name\"\n                    defaultValue={editingTenant.name}\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"slug\">Slug</Label>\n                  <Input\n                    id=\"slug\"\n                    name=\"slug\"\n                    defaultValue={editingTenant.slug}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"contactName\">Contact Name</Label>\n                  <Input\n                    id=\"contactName\"\n                    name=\"contactName\"\n                    defaultValue={editingTenant.contactName}\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"contactEmail\">Contact Email</Label>\n                  <Input\n                    id=\"contactEmail\"\n                    name=\"contactEmail\"\n                    type=\"email\"\n                    defaultValue={editingTenant.contactEmail}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"status\">Status</Label>\n                  <Select name=\"status\" defaultValue={editingTenant.status}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"suspended\">Suspended</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"planId\">Feature Package</Label>\n                  <Select name=\"planId\" defaultValue={editingTenant.featurePackageId || 'no-package'}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"no-package\">No Package</SelectItem>\n                      {featurePackages?.map((pkg: any) => (\n                        <SelectItem key={pkg.id} value={pkg.id}>\n                          {pkg.name} - ${pkg.price}/month\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end gap-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsEditTenantOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={updateTenantMutation.isPending}>\n                  {updateTenantMutation.isPending ? 'Updating...' : 'Update Tenant'}\n                </Button>\n              </div>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n      </div>\n    </div>\n  );\n}\n\n// Main component with authentication\nexport default function SuperAdminDashboard() {\n  const [, setLocation] = useLocation();\n  \n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (!isLoading && (!user || !user.isSuperAdmin)) {\n      console.log('User not authorized for super admin, redirecting to login');\n      setLocation('/login');\n    }\n  }, [user, isLoading, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!user || !user.isSuperAdmin) {\n    return null;\n  }\n\n  return <SuperAdminDashboardContent user={user} />;\n}","size_bytes":45493},"server/middleware/tenantContext.ts":{"content":"import type { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"../storage\";\n\n// Extended Request interface to include tenant context\nexport interface TenantRequest extends Request {\n  tenantId?: string;\n  tenant?: {\n    id: string;\n    name: string;\n    slug: string;\n    status: string;\n  };\n  userRole?: string;\n  user?: any;\n}\n\n// Tenant context middleware - extracts tenant from PostgreSQL user session\nexport const tenantContext = async (req: TenantRequest, res: Response, next: NextFunction) => {\n  try {\n    // Skip tenant context for admin routes, public routes, and non-authenticated routes\n    if (req.path.startsWith('/api/admin') || \n        req.path.startsWith('/api/public') || \n        req.path.startsWith('/api/auth') || \n        !req.user) {\n      return next();\n    }\n\n    const user = req.user;\n\n    // Block super admins from accessing tenant routes\n    if (user.isSuperAdmin) {\n      console.log('Blocking super admin from accessing tenant route:', req.path);\n      return res.status(403).json({ \n        message: 'Super admin users cannot access tenant routes. Please use super admin dashboard.' \n      });\n    }\n\n    // Check if user has tenant context from auth middleware\n    \n    if (!user.currentTenant) {\n      console.log('Tenant context debug - user:', JSON.stringify(user, null, 2));\n      return res.status(403).json({ \n        message: 'Tenant access required' \n      });\n    }\n\n    // Get full tenant information\n    const tenant = await storage.getTenant(user.currentTenant.id);\n    \n    if (!tenant || tenant.status !== 'active') {\n      return res.status(403).json({ \n        message: 'No active tenant found for user' \n      });\n    }\n\n    // Set tenant context on request\n    req.tenantId = tenant.id;\n    req.tenant = {\n      id: tenant.id,\n      name: tenant.name,\n      slug: tenant.slug,\n      status: tenant.status,\n    };\n    req.userRole = user.currentTenant.role;\n    req.user = { id: user.id };\n\n    next();\n  } catch (error) {\n    console.error('Tenant context middleware error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n};","size_bytes":2134},"server/routes/superadmin.ts":{"content":"import type { Express } from \"express\";\nimport { storage } from \"../storage\";\nimport { requireAuth, requireSuperAdmin } from \"../middleware/auth\";\nimport { insertFeaturePackageSchema } from \"@shared/schema\";\n\nexport function registerSuperAdminRoutes(app: Express) {\n  // Get all users with tenant information\n  app.get(\"/api/admin/users\", requireAuth, requireSuperAdmin, async (req, res) => {\n    try {\n      const users = await storage.getUsers();\n      const usersWithTenants = await Promise.all(\n        users.map(async (user) => {\n          const tenants = await storage.getUserTenants(user.id);\n          const { passwordHash, emailVerificationToken, passwordResetToken, ...userResponse } = user;\n          return {\n            ...userResponse,\n            tenants: tenants.map(t => ({\n              id: t.tenant.id,\n              name: t.tenant.name,\n              slug: t.tenant.slug,\n              role: t.role,\n              planId: t.tenant.planId,\n              status: t.tenant.status,\n            })),\n            tenantCount: tenants.length,\n          };\n        })\n      );\n      \n      res.json(usersWithTenants);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Delete user\n  app.delete(\"/api/admin/users/:userId\", requireAuth, requireSuperAdmin, async (req, res) => {\n    try {\n      const { userId } = req.params;\n      \n      // Prevent deleting super admin\n      const user = await storage.getUser(userId);\n      if (user?.isSuperAdmin) {\n        return res.status(403).json({ message: \"Cannot delete super admin user\" });\n      }\n\n      const success = await storage.deleteUser(userId);\n      if (success) {\n        res.json({ message: \"User deleted successfully\" });\n      } else {\n        res.status(404).json({ message: \"User not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // Get all tenants with owner information\n  app.get(\"/api/admin/tenants\", requireAuth, requireSuperAdmin, async (req, res) => {\n    try {\n      // This would need to be implemented in storage\n      const tenants = await storage.getAllTenantsWithOwners();\n      res.json(tenants);\n    } catch (error) {\n      console.error(\"Error fetching tenants:\", error);\n      res.status(500).json({ message: \"Failed to fetch tenants\" });\n    }\n  });\n\n  // Update tenant\n  app.put(\"/api/admin/tenants/:tenantId\", requireAuth, requireSuperAdmin, async (req, res) => {\n    try {\n      const { tenantId } = req.params;\n      const updates = req.body;\n      const updatedTenant = await storage.updateTenant(tenantId, updates);\n      res.json(updatedTenant);\n    } catch (error) {\n      console.error(\"Error updating tenant:\", error);\n      res.status(500).json({ message: \"Failed to update tenant\" });\n    }\n  });\n\n  // Delete tenant\n  app.delete(\"/api/admin/tenants/:tenantId\", requireAuth, requireSuperAdmin, async (req, res) => {\n    try {\n      const { tenantId } = req.params;\n      await storage.deleteTenant(tenantId);\n      res.json({ message: \"Tenant deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting tenant:\", error);\n      res.status(500).json({ message: \"Failed to delete tenant\" });\n    }\n  });\n\n  // Get feature packages\n  app.get(\"/api/admin/packages\", requireAuth, requireSuperAdmin, async (req, res) => {\n    try {\n      const packages = await storage.getFeaturePackages();\n      res.json(packages);\n    } catch (error) {\n      console.error(\"Error fetching packages:\", error);\n      res.status(500).json({ message: \"Failed to fetch packages\" });\n    }\n  });\n\n  // Create feature package\n  app.post(\"/api/admin/packages\", requireAuth, requireSuperAdmin, async (req, res) => {\n    try {\n      const packageData = insertFeaturePackageSchema.parse(req.body);\n      const newPackage = await storage.createFeaturePackage(packageData);\n      res.status(201).json(newPackage);\n    } catch (error: any) {\n      console.error(\"Error creating package:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to create package\" });\n    }\n  });\n\n  // Update feature package\n  app.patch(\"/api/admin/packages/:packageId\", requireAuth, requireSuperAdmin, async (req, res) => {\n    try {\n      const { packageId } = req.params;\n      const updates = req.body;\n      const updatedPackage = await storage.updateFeaturePackage(packageId, updates);\n      res.json(updatedPackage);\n    } catch (error) {\n      console.error(\"Error updating package:\", error);\n      res.status(500).json({ message: \"Failed to update package\" });\n    }\n  });\n\n  // Delete feature package\n  app.delete(\"/api/admin/packages/:packageId\", requireSuperAdmin, async (req, res) => {\n    try {\n      const { packageId } = req.params;\n      await storage.deleteFeaturePackage(packageId);\n      res.json({ message: \"Package deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting package:\", error);\n      res.status(500).json({ message: \"Failed to delete package\" });\n    }\n  });\n\n  // Get platform analytics\n  app.get(\"/api/admin/analytics\", requireSuperAdmin, async (req, res) => {\n    try {\n      const users = await storage.getUsers();\n      const totalUsers = users.length;\n      const activeUsers = users.filter(u => !u.isSuperAdmin).length;\n      const superAdmins = users.filter(u => u.isSuperAdmin).length;\n\n      // Get recent signups (last 30 days)\n      const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n      const recentSignups = users.filter(u => \n        u.createdAt && new Date(u.createdAt) > thirtyDaysAgo && !u.isSuperAdmin\n      ).length;\n\n      // This could be enhanced with more analytics from the database\n      const analytics = {\n        totalUsers: activeUsers,\n        recentSignups,\n        totalRevenue: 0, // Would need to calculate from Stripe data\n        activePlans: {\n          starter: 0,\n          professional: 0,\n          enterprise: 0,\n        },\n        userGrowth: [], // Would need historical data\n      };\n\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  // Impersonate user (for support)\n  app.post(\"/api/admin/impersonate/:userId\", requireSuperAdmin, async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (user.isSuperAdmin) {\n        return res.status(403).json({ message: \"Cannot impersonate super admin\" });\n      }\n\n      // Store original admin info for switching back\n      (req.session as any).impersonation = {\n        originalUserId: req.user?.id,\n        impersonatedUserId: userId,\n      };\n\n      // Update session to impersonated user\n      (req.session as any).user = {\n        id: user.id,\n        email: user.email,\n        isSuperAdmin: false,\n      };\n\n      res.json({ \n        message: \"Impersonation started\",\n        user: {\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n        }\n      });\n    } catch (error) {\n      console.error(\"Error starting impersonation:\", error);\n      res.status(500).json({ message: \"Failed to start impersonation\" });\n    }\n  });\n\n  // Stop impersonation\n  app.post(\"/api/admin/stop-impersonation\", requireSuperAdmin, async (req, res) => {\n    try {\n      const impersonation = (req.session as any).impersonation;\n      if (!impersonation) {\n        return res.status(400).json({ message: \"No active impersonation\" });\n      }\n\n      const originalUser = await storage.getUser(impersonation.originalUserId);\n      if (!originalUser) {\n        return res.status(500).json({ message: \"Original user not found\" });\n      }\n\n      // Restore original admin session\n      (req.session as any).user = {\n        id: originalUser.id,\n        email: originalUser.email,\n        isSuperAdmin: originalUser.isSuperAdmin || false,\n      };\n\n      delete (req.session as any).impersonation;\n\n      res.json({ message: \"Impersonation stopped\" });\n    } catch (error) {\n      console.error(\"Error stopping impersonation:\", error);\n      res.status(500).json({ message: \"Failed to stop impersonation\" });\n    }\n  });\n}","size_bytes":8641},"client/src/pages/superadmin/FeaturePackageForm.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\n// Define actual VENUIN features based on the platform capabilities\nconst VENUIN_FEATURES = {\n  'dashboard-analytics': 'Dashboard & Analytics',\n  'event-management': 'Event & Booking Management', \n  'customer-management': 'Customer Management',\n  'lead-management': 'Lead Management & Scoring',\n  'proposal-system': 'Proposal Generation & Tracking',\n  'stripe-payments': 'Payment Processing (Stripe Connect)',\n  'venue-management': 'Multi-Venue Management',\n  'service-packages': 'Service & Package Management',\n  'gmail-integration': 'Gmail Integration',\n  'task-management': 'Task & Team Management',\n  'ai-voice-booking': 'AI Voice-to-Text Booking',\n  'ai-scheduling': 'Smart AI Scheduling',\n  'ai-email-replies': 'AI Email Auto-Replies',\n  'ai-lead-scoring': 'AI Lead Priority Scoring',\n  'ai-insights': 'AI-Powered Insights',\n  'ai-proposal-generation': 'AI Proposal Content Generation',\n  'mobile-responsive': 'Mobile-Responsive Interface',\n  'audit-logs': 'Audit Logging & Security',\n  'custom-branding': 'Custom Branding & Themes',\n  'priority-support': 'Priority Customer Support',\n  'api-access': 'API Access',\n  'advanced-reporting': 'Advanced Reports & Export',\n  'calendar-integration': 'Calendar Integration',\n  'floor-plan-designer': '2D Floor Plan Designer'\n};\n\ninterface FeaturePackageFormProps {\n  onSubmit: (data: any) => void;\n  isPending: boolean;\n  onCancel: () => void;\n  initialData?: any;\n}\n\nexport function FeaturePackageForm({ onSubmit, isPending, onCancel, initialData }: FeaturePackageFormProps) {\n  const [selectedFeatures, setSelectedFeatures] = useState<string[]>(() => {\n    if (initialData?.features) {\n      return Object.keys(initialData.features).filter(key => initialData.features[key]);\n    }\n    return [];\n  });\n\n  const handleFeatureToggle = (featureKey: string, checked: boolean) => {\n    if (checked) {\n      setSelectedFeatures(prev => [...prev, featureKey]);\n    } else {\n      setSelectedFeatures(prev => prev.filter(f => f !== featureKey));\n    }\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget as HTMLFormElement);\n    \n    // Create features object - set ALL features to false first, then enable selected ones\n    const features: Record<string, boolean> = {};\n    Object.keys(VENUIN_FEATURES).forEach(key => {\n      features[key] = selectedFeatures.includes(key);\n    });\n\n    // Create limits object\n    const limits = {\n      maxUsers: parseInt(formData.get('maxUsers') as string) || 0,\n      maxVenues: parseInt(formData.get('maxVenues') as string) || 0,\n      maxSpacesPerVenue: parseInt(formData.get('maxSpaces') as string) || 0\n    };\n\n    const packageName = formData.get('name') as string;\n    const packageId = initialData?.id || packageName.toLowerCase().replace(/\\s+/g, '-');\n    \n    onSubmit({\n      id: packageId,\n      name: packageName,\n      description: formData.get('description'),\n      price: formData.get('priceMonthly') as string,\n      billingCycle: 'monthly',\n      features,\n      limits,\n      isActive: true\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      {/* Basic Info */}\n      <div className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"name\">Package Name</Label>\n          <Input \n            name=\"name\" \n            required \n            placeholder=\"e.g., Professional, Enterprise\"\n            defaultValue={initialData?.name || ''}\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"description\">Description</Label>\n          <Textarea \n            name=\"description\" \n            required \n            placeholder=\"Brief description of this package...\"\n            defaultValue={initialData?.description || ''}\n          />\n        </div>\n      </div>\n\n      {/* Features Selection */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Features</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">Select which VENUIN features this package includes</p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex justify-between items-center mb-4\">\n            <div className=\"flex gap-2\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => {\n                  const allFeatureKeys = Object.keys(VENUIN_FEATURES);\n                  setSelectedFeatures(allFeatureKeys);\n                }}\n              >\n                Enable All\n              </Button>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => setSelectedFeatures([])}\n              >\n                Disable All\n              </Button>\n            </div>\n            <div className=\"text-sm text-muted-foreground\">\n              {selectedFeatures.length} of {Object.keys(VENUIN_FEATURES).length} features selected\n            </div>\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            {Object.entries(VENUIN_FEATURES).map(([key, label]) => (\n              <div key={key} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={key}\n                  checked={selectedFeatures.includes(key)}\n                  onCheckedChange={(checked) => handleFeatureToggle(key, checked as boolean)}\n                />\n                <Label htmlFor={key} className=\"text-sm font-normal\">\n                  {label}\n                </Label>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Limits */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Usage Limits</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">Set maximum usage limits for this package</p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"maxUsers\">Max Users</Label>\n              <Input \n                name=\"maxUsers\" \n                type=\"number\" \n                required \n                placeholder=\"50\"\n                defaultValue={initialData?.limits?.maxUsers || initialData?.limits?.staff || ''}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"maxVenues\">Max Venues</Label>\n              <Input \n                name=\"maxVenues\" \n                type=\"number\" \n                required \n                placeholder=\"5\"\n                defaultValue={initialData?.limits?.maxVenues || initialData?.limits?.venues || ''}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"maxSpaces\">Max Spaces per Venue</Label>\n              <Input \n                name=\"maxSpaces\" \n                type=\"number\" \n                required \n                placeholder=\"20\"\n                defaultValue={initialData?.limits?.maxSpacesPerVenue || ''}\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Pricing */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Pricing</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">Set monthly and yearly pricing (USD)</p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"priceMonthly\">Monthly Price ($)</Label>\n              <Input \n                name=\"priceMonthly\" \n                type=\"number\" \n                step=\"0.01\" \n                required \n                placeholder=\"99.00\"\n                defaultValue={initialData?.price_monthly || ''}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"priceYearly\">Yearly Price ($)</Label>\n              <Input \n                name=\"priceYearly\" \n                type=\"number\" \n                step=\"0.01\" \n                required \n                placeholder=\"999.00\"\n                defaultValue={initialData?.price_yearly || ''}\n              />\n              <p className=\"text-xs text-muted-foreground mt-1\">Usually ~10-15% discount from monthly</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Actions */}\n      <div className=\"flex justify-end gap-2\">\n        <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\n          Cancel\n        </Button>\n        <Button type=\"submit\" disabled={isPending}>\n          {isPending ? \"Creating...\" : \"Create Package\"}\n        </Button>\n      </div>\n    </form>\n  );\n}","size_bytes":8960},"client/src/pages/auth/Signup.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Calendar, AlertCircle, Eye, EyeOff } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\n// Using PostgreSQL-based authentication\n\nconst signupSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype SignupData = z.infer<typeof signupSchema>;\n\nexport default function Signup() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [error, setError] = useState<string>(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const form = useForm<SignupData>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const onSubmit = async (data: SignupData) => {\n    setIsSubmitting(true);\n    setError(\"\");\n    \n    try {\n      const response = await fetch('/api/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: data.email,\n          password: data.password,\n        }),\n        credentials: 'include',\n      });\n\n      const result = await response.json();\n\n      if (response.ok) {\n        toast({\n          title: \"Account created!\",\n          description: \"Welcome to VENUIN. Redirecting to dashboard...\",\n        });\n        setLocation('/');\n      } else {\n        setError(result.message || \"Failed to create account\");\n      }\n    } catch (error) {\n      console.error('Signup error:', error);\n      setError(\"Failed to create account. Please try again.\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <Calendar className=\"h-8 w-8 text-blue-600\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Join VENUIN</CardTitle>\n          <CardDescription>\n            Create your account to start managing your venue\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {error && (\n            <Alert variant=\"destructive\" className=\"mb-4\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"email\"\n                        placeholder=\"Enter your email\"\n                        disabled={isSubmitting}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          {...field}\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Create a password (min 6 characters)\"\n                          disabled={isSubmitting}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          disabled={isSubmitting}\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"h-4 w-4\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Confirm Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          {...field}\n                          type={showConfirmPassword ? \"text\" : \"password\"}\n                          placeholder=\"Confirm your password\"\n                          disabled={isSubmitting}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                          onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                          disabled={isSubmitting}\n                        >\n                          {showConfirmPassword ? (\n                            <EyeOff className=\"h-4 w-4\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={isSubmitting}\n              >\n                {isSubmitting ? \"Creating account...\" : \"Create Account\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Already have an account?{\" \"}\n              <Link href=\"/login\" className=\"text-blue-600 hover:underline\">\n                Sign in\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7562},"client/src/pages/superadmin/SuperAdminLogin.tsx":{"content":"import React, { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Shield, AlertCircle } from \"lucide-react\";\n\nexport default function SuperAdminLogin() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [, navigate] = useLocation();\n\n  // Check if already authenticated and is super admin\n  const { data: authUser, isLoading: authLoading } = useQuery({\n    queryKey: ['/api/auth/me'],\n    retry: false,\n  });\n\n  // Redirect if already super admin\n  React.useEffect(() => {\n    if (authUser && (authUser as any)?.isSuperAdmin) {\n      navigate('/admin/dashboard');\n    }\n  }, [authUser, navigate]);\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: { email: string; password: string }) => {\n      return await apiRequest(\"POST\", \"/api/auth/login\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome to the superadmin console.\",\n      });\n      navigate('/admin/dashboard');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email || !password) {\n      toast({\n        title: \"Validation error\",\n        description: \"Please enter both email and password\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    loginMutation.mutate({ email, password });\n  };\n\n  // Redirect if already authenticated\n  if (authUser && !authLoading) {\n    navigate('/admin/dashboard');\n    return null;\n  }\n\n  if (authLoading) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\"/>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card>\n          <CardHeader className=\"space-y-1 text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <Shield className=\"h-12 w-12 text-primary\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">Superadmin Access</CardTitle>\n            <CardDescription>\n              Secure login for platform administrators\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Alert className=\"mb-6\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                This is a restricted area. Only authorized personnel may access this console.\n              </AlertDescription>\n            </Alert>\n\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"admin@example.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  autoComplete=\"email\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  autoComplete=\"current-password\"\n                />\n              </div>\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loginMutation.isPending}\n              >\n                {loginMutation.isPending ? (\n                  <>\n                    <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                    Signing In...\n                  </>\n                ) : (\n                  \"Access Console\"\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":4759},"server/routes/public.ts":{"content":"import type { Express } from \"express\";\nimport { storage } from \"../storage\";\n\nexport function registerPublicRoutes(app: Express) {\n  // Get feature packages for pricing page\n  app.get(\"/api/public/plans\", async (req, res) => {\n    try {\n      const packages = await storage.getFeaturePackages();\n      res.json(packages);\n    } catch (error) {\n      console.error(\"Error fetching feature packages:\", error);\n      res.status(500).json({ message: \"Failed to fetch plans\" });\n    }\n  });\n\n  // Health check endpoint\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n}","size_bytes":632},"client/src/pages/auth/Login.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Calendar, AlertCircle, Eye, EyeOff } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\n// Using PostgreSQL-based authentication\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype LoginData = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState<string>(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const form = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginData) => {\n    setIsSubmitting(true);\n    setError(\"\");\n    \n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n        credentials: 'include',\n      });\n\n      const result = await response.json();\n\n      if (response.ok && result.user) {\n        toast({\n          title: \"Login successful\",\n          description: \"Welcome back!\",\n        });\n\n        // Redirect based on user type\n        if (result.user.isSuperAdmin) {\n          setLocation('/super-admin');\n        } else {\n          // Redirect to tenant dashboard or home page\n          if (result.user.currentTenant?.slug) {\n            setLocation(`/t/${result.user.currentTenant.slug}/app`);\n          } else {\n            setLocation('/');\n          }\n        }\n      } else {\n        setError(result.message || \"Login failed\");\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      setError(\"Login failed. Please try again.\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <Calendar className=\"h-8 w-8 text-blue-600\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Welcome to VENUIN</CardTitle>\n          <CardDescription>\n            Sign in to your venue management dashboard\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {error && (\n            <Alert variant=\"destructive\" className=\"mb-4\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"email\"\n                        placeholder=\"Enter your email\"\n                        disabled={isSubmitting}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          {...field}\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Enter your password\"\n                          disabled={isSubmitting}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          disabled={isSubmitting}\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"h-4 w-4\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={isSubmitting}\n              >\n                {isSubmitting ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Don't have an account?{\" \"}\n              <Link href=\"/signup\" className=\"text-blue-600 hover:underline\">\n                Sign up\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6018},"client/src/pages/auth/VerifyEmailSent.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Calendar, Mail, ArrowRight } from \"lucide-react\";\n\nexport default function VerifyEmailSent() {\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center px-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <Calendar className=\"h-8 w-8 text-primary\" />\n            <span className=\"text-2xl font-bold\">VENUIN</span>\n          </div>\n          <h1 className=\"text-2xl font-bold\">Check Your Email</h1>\n          <p className=\"text-muted-foreground\">We've sent you a verification link</p>\n        </div>\n\n        <Card>\n          <CardHeader className=\"text-center\">\n            <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Mail className=\"h-8 w-8 text-primary\" />\n            </div>\n            <CardTitle className=\"text-xl\">Verification Email Sent</CardTitle>\n            <CardDescription>\n              Please check your email inbox and click the verification link to activate your VENUIN account.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"text-center space-y-4\">\n            <div className=\"p-4 bg-muted rounded-lg text-sm\">\n              <p className=\"font-medium mb-2\">What's next?</p>\n              <ol className=\"text-left space-y-1 text-muted-foreground\">\n                <li>1. Check your email inbox (and spam folder)</li>\n                <li>2. Click the verification link in the email</li>\n                <li>3. Complete your tenant setup</li>\n                <li>4. Start managing your venue!</li>\n              </ol>\n            </div>\n\n            <div className=\"space-y-2\">\n              <p className=\"text-sm text-muted-foreground\">\n                Didn't receive the email?\n              </p>\n              <Button variant=\"outline\" size=\"sm\">\n                Resend Verification Email\n              </Button>\n            </div>\n\n            <div className=\"pt-4\">\n              <Link href=\"/login\">\n                <Button className=\"w-full\">\n                  Continue to Sign In\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"mt-8 text-center\">\n          <Link href=\"/\" className=\"text-sm text-muted-foreground hover:text-foreground\">\n            ← Back to homepage\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2782},"client/src/pages/public/Features.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Calendar, \n  Users, \n  TrendingUp,\n  Brain,\n  MessageSquare,\n  CreditCard,\n  ArrowRight,\n  CheckCircle,\n  Zap,\n  Shield,\n  Globe,\n  Mic,\n  FileText,\n  BarChart3,\n  Settings,\n  Smartphone,\n  Mail,\n  Star,\n  Building\n} from \"lucide-react\";\n\nexport default function Features() {\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Navigation */}\n      <nav className=\"fixed top-0 w-full z-50 bg-white/80 backdrop-blur-xl border-b border-gray-100\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-8\">\n              <Link href=\"/\" className=\"flex items-center space-x-2\">\n                <Calendar className=\"h-8 w-8 text-blue-600\" />\n                <span className=\"text-xl font-semibold text-gray-900\">VENUIN</span>\n              </Link>\n              <div className=\"hidden md:flex space-x-8\">\n                <Link href=\"/features\" className=\"text-gray-900 font-medium\">Features</Link>\n                <Link href=\"/pricing\" className=\"text-gray-700 hover:text-gray-900 font-medium\">Pricing</Link>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/login\" className=\"text-gray-700 hover:text-gray-900 font-medium\">Sign in</Link>\n              <Link href=\"/signup\">\n                <Button className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-full font-medium\">\n                  Start Free Trial\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"pt-32 pb-20 px-4 bg-gradient-to-b from-gray-50 to-white\">\n        <div className=\"max-w-6xl mx-auto text-center\">\n          <Badge variant=\"outline\" className=\"mb-6 text-blue-600 border-blue-200 bg-blue-50\">\n            <Zap className=\"w-4 h-4 mr-2\" />\n            Powered by AI\n          </Badge>\n          \n          <h1 className=\"text-6xl md:text-7xl font-bold text-gray-900 mb-6 leading-tight\">\n            Features that\n            <br />\n            <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              work for you\n            </span>\n          </h1>\n          \n          <p className=\"text-xl text-gray-600 mb-10 max-w-3xl mx-auto leading-relaxed\">\n            VENUIN combines powerful venue management tools with intelligent automation \n            to help you run your business more efficiently and profitably.\n          </p>\n          \n          <Link href=\"/signup\">\n            <Button size=\"lg\" className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-4 rounded-full text-lg font-medium\">\n              Try All Features Free <ArrowRight className=\"ml-2 h-5 w-5\" />\n            </Button>\n          </Link>\n        </div>\n      </section>\n\n      {/* AI Features Highlight */}\n      <section className=\"py-24 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-5xl font-bold mb-6\">AI-Powered Intelligence</h2>\n            <p className=\"text-xl text-blue-100 max-w-3xl mx-auto\">\n              Let artificial intelligence handle the routine tasks while you focus on growing your business.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {[\n              {\n                icon: Mic,\n                title: \"Voice-to-Text Booking\",\n                description: \"Speak your booking details and watch them automatically convert to structured data\"\n              },\n              {\n                icon: Brain,\n                title: \"Smart Scheduling\",\n                description: \"AI suggests optimal booking times based on availability and revenue potential\"\n              },\n              {\n                icon: Star,\n                title: \"Lead Scoring\",\n                description: \"Automatically prioritize leads based on likelihood to convert and revenue potential\"\n              }\n            ].map((feature, index) => (\n              <Card key={index} className=\"bg-white/10 backdrop-blur border-white/20 text-white\">\n                <CardContent className=\"p-8 text-center\">\n                  <div className=\"w-16 h-16 mx-auto mb-6 bg-white/20 rounded-2xl flex items-center justify-center\">\n                    <feature.icon className=\"h-8 w-8\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-4\">{feature.title}</h3>\n                  <p className=\"text-blue-100\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Core Features */}\n      <section className=\"py-24 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"text-center mb-20\">\n            <h2 className=\"text-5xl font-bold text-gray-900 mb-6\">\n              Everything you need in one platform\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              From lead capture to final payment, manage every aspect of your venue business with our comprehensive feature set.\n            </p>\n          </div>\n          \n          <div className=\"grid lg:grid-cols-2 gap-16 items-center mb-24\">\n            <div>\n              <Badge className=\"mb-4 bg-blue-100 text-blue-600 border-blue-200\">\n                Booking Management\n              </Badge>\n              <h3 className=\"text-4xl font-bold text-gray-900 mb-6\">\n                Smart calendar that thinks ahead\n              </h3>\n              <p className=\"text-gray-600 mb-8 text-lg leading-relaxed\">\n                Our intelligent booking system helps you visualize availability, prevent double bookings, \n                and optimize your venue utilization with automated scheduling suggestions.\n              </p>\n              <div className=\"space-y-4\">\n                {[\n                  \"Interactive calendar with drag-and-drop booking\",\n                  \"Multi-venue and multi-room management\",\n                  \"Automated conflict prevention\",\n                  \"Recurring event templates\",\n                  \"Buffer time management\"\n                ].map((feature, index) => (\n                  <div key={index} className=\"flex items-center space-x-3\">\n                    <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                    <span className=\"text-gray-700\">{feature}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div className=\"relative\">\n              <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 rounded-3xl p-8\">\n                <div className=\"bg-white rounded-2xl p-6\">\n                  <div className=\"grid grid-cols-7 gap-2 mb-4\">\n                    {Array.from({length: 21}, (_, i) => (\n                      <div key={i} className={`h-8 rounded ${\n                        i === 8 || i === 9 || i === 15 ? 'bg-blue-100' :\n                        i === 10 || i === 16 ? 'bg-green-100' :\n                        'bg-gray-50'\n                      }`} />\n                    ))}\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"bg-blue-600 text-white p-3 rounded-lg text-sm\">\n                      Wedding Reception - Grand Ballroom\n                    </div>\n                    <div className=\"bg-green-600 text-white p-3 rounded-lg text-sm\">\n                      Corporate Meeting - Conference Room A\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-16 items-center mb-24\">\n            <div className=\"order-2 lg:order-1 relative\">\n              <div className=\"bg-gradient-to-r from-green-600 to-blue-600 rounded-3xl p-8\">\n                <div className=\"bg-white rounded-2xl p-6 space-y-4\">\n                  <div className=\"flex items-center space-x-3 p-4 bg-gray-50 rounded-lg\">\n                    <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                      <Users className=\"w-5 h-5 text-green-600\" />\n                    </div>\n                    <div>\n                      <p className=\"font-semibold\">Sarah Chen</p>\n                      <p className=\"text-sm text-gray-600\">Wedding Planning - High Priority</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-3 p-4 bg-gray-50 rounded-lg\">\n                    <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                      <Building className=\"w-5 h-5 text-blue-600\" />\n                    </div>\n                    <div>\n                      <p className=\"font-semibold\">Acme Corp</p>\n                      <p className=\"text-sm text-gray-600\">Annual Conference - Medium Priority</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"order-1 lg:order-2\">\n              <Badge className=\"mb-4 bg-green-100 text-green-600 border-green-200\">\n                Customer & Lead Management\n              </Badge>\n              <h3 className=\"text-4xl font-bold text-gray-900 mb-6\">\n                Never lose a lead again\n              </h3>\n              <p className=\"text-gray-600 mb-8 text-lg leading-relaxed\">\n                Track every interaction, score leads automatically, and nurture prospects \n                with personalized communication workflows that convert better.\n              </p>\n              <div className=\"space-y-4\">\n                {[\n                  \"AI-powered lead scoring and prioritization\",\n                  \"Complete customer interaction history\",\n                  \"Automated follow-up workflows\",\n                  \"UTM tracking and attribution\",\n                  \"Custom fields and tags\"\n                ].map((feature, index) => (\n                  <div key={index} className=\"flex items-center space-x-3\">\n                    <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                    <span className=\"text-gray-700\">{feature}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-16 items-center\">\n            <div>\n              <Badge className=\"mb-4 bg-purple-100 text-purple-600 border-purple-200\">\n                Proposals & Payments\n              </Badge>\n              <h3 className=\"text-4xl font-bold text-gray-900 mb-6\">\n                Close deals faster\n              </h3>\n              <p className=\"text-gray-600 mb-8 text-lg leading-relaxed\">\n                Create stunning proposals in minutes, track engagement, collect digital signatures, \n                and process payments seamlessly with integrated Stripe Connect.\n              </p>\n              <div className=\"space-y-4\">\n                {[\n                  \"Professional proposal templates\",\n                  \"Digital signature collection\",\n                  \"Proposal tracking and analytics\",\n                  \"Integrated payment processing\",\n                  \"Automated invoice generation\"\n                ].map((feature, index) => (\n                  <div key={index} className=\"flex items-center space-x-3\">\n                    <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                    <span className=\"text-gray-700\">{feature}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div className=\"relative\">\n              <div className=\"bg-gradient-to-r from-purple-600 to-pink-600 rounded-3xl p-8\">\n                <div className=\"bg-white rounded-2xl p-6\">\n                  <div className=\"text-center mb-6\">\n                    <h4 className=\"font-bold text-lg mb-2\">Wedding Venue Proposal</h4>\n                    <p className=\"text-gray-600\">Grand Ballroom Package</p>\n                  </div>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between py-2 border-b\">\n                      <span>Venue Rental</span>\n                      <span className=\"font-semibold\">$3,500</span>\n                    </div>\n                    <div className=\"flex justify-between py-2 border-b\">\n                      <span>Catering Package</span>\n                      <span className=\"font-semibold\">$4,200</span>\n                    </div>\n                    <div className=\"flex justify-between py-2 font-bold text-lg\">\n                      <span>Total</span>\n                      <span>$7,700</span>\n                    </div>\n                    <Button className=\"w-full bg-purple-600 hover:bg-purple-700 text-white\">\n                      Accept & Sign\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Feature Grid */}\n      <section className=\"py-24 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"text-center mb-20\">\n            <h2 className=\"text-5xl font-bold text-gray-900 mb-6\">\n              Built for venue professionals\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Every feature designed with your workflow in mind, from first inquiry to final payment.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[\n              {\n                icon: BarChart3,\n                title: \"Advanced Analytics\",\n                description: \"Track revenue, booking patterns, and performance metrics with detailed reports and insights.\",\n                color: \"bg-blue-100 text-blue-600\"\n              },\n              {\n                icon: Mail,\n                title: \"Gmail Integration\", \n                description: \"Connect your Gmail account for seamless email workflows and communication tracking.\",\n                color: \"bg-red-100 text-red-600\"\n              },\n              {\n                icon: Smartphone,\n                title: \"Mobile Access\",\n                description: \"Manage your venue business on the go with our responsive mobile interface.\",\n                color: \"bg-green-100 text-green-600\"\n              },\n              {\n                icon: Settings,\n                title: \"Custom Workflows\",\n                description: \"Build automated workflows that match your unique business processes and requirements.\",\n                color: \"bg-purple-100 text-purple-600\"\n              },\n              {\n                icon: Shield,\n                title: \"Enterprise Security\",\n                description: \"Bank-level security with encryption, regular backups, and compliance standards.\",\n                color: \"bg-orange-100 text-orange-600\"\n              },\n              {\n                icon: Globe,\n                title: \"API Access\",\n                description: \"Integrate with your existing tools and build custom solutions with our robust API.\",\n                color: \"bg-indigo-100 text-indigo-600\"\n              }\n            ].map((feature, index) => (\n              <Card key={index} className=\"border-0 shadow-sm hover:shadow-lg transition-all duration-300 bg-white\">\n                <CardContent className=\"p-8\">\n                  <div className={`w-12 h-12 rounded-xl ${feature.color} flex items-center justify-center mb-6`}>\n                    <feature.icon className=\"h-6 w-6\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">{feature.title}</h3>\n                  <p className=\"text-gray-600 leading-relaxed\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Integration Section */}\n      <section className=\"py-24 bg-white\">\n        <div className=\"max-w-4xl mx-auto px-4 text-center\">\n          <h2 className=\"text-5xl font-bold text-gray-900 mb-6\">\n            Seamless integrations\n          </h2>\n          <p className=\"text-xl text-gray-600 mb-16\">\n            VENUIN works with the tools you already use, making it easy to get started without disrupting your workflow.\n          </p>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 items-center opacity-60\">\n            {[\n              { name: \"Stripe\", logo: \"💳\" },\n              { name: \"Gmail\", logo: \"📧\" },\n              { name: \"Google Cal\", logo: \"📅\" },\n              { name: \"Zoom\", logo: \"📹\" }\n            ].map((integration, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"text-4xl mb-2\">{integration.logo}</div>\n                <p className=\"text-gray-700 font-medium\">{integration.name}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-24 bg-gradient-to-r from-blue-600 to-purple-600\">\n        <div className=\"max-w-4xl mx-auto text-center px-4\">\n          <h2 className=\"text-5xl font-bold text-white mb-6\">\n            Ready to experience all features?\n          </h2>\n          <p className=\"text-xl text-blue-100 mb-10\">\n            Start your free 14-day trial and discover how VENUIN can transform your venue management.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n            <Link href=\"/signup\">\n              <Button size=\"lg\" className=\"bg-white text-blue-600 hover:bg-gray-50 px-8 py-4 rounded-full text-lg font-medium\">\n                Try All Features Free <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n            </Link>\n            <Link href=\"/pricing\">\n              <Button variant=\"outline\" size=\"lg\" className=\"px-8 py-4 rounded-full text-lg font-medium border-white text-white hover:bg-white hover:text-blue-600\">\n                View Pricing\n              </Button>\n            </Link>\n          </div>\n          <p className=\"text-blue-100 mt-6\">\n            No credit card required • Full access to all features\n          </p>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-16\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div>\n              <Link href=\"/\" className=\"flex items-center space-x-2 mb-4\">\n                <Calendar className=\"h-6 w-6 text-blue-400\" />\n                <span className=\"text-xl font-semibold\">VENUIN</span>\n              </Link>\n              <p className=\"text-gray-400\">\n                The modern venue management platform for the digital age.\n              </p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-4\">Product</h3>\n              <div className=\"space-y-2 text-gray-400\">\n                <Link href=\"/features\" className=\"block hover:text-white\">Features</Link>\n                <Link href=\"/pricing\" className=\"block hover:text-white\">Pricing</Link>\n              </div>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-4\">Company</h3>\n              <div className=\"space-y-2 text-gray-400\">\n                <a href=\"#\" className=\"block hover:text-white\">About</a>\n                <a href=\"#\" className=\"block hover:text-white\">Contact</a>\n              </div>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-4\">Legal</h3>\n              <div className=\"space-y-2 text-gray-400\">\n                <Link href=\"/privacy\" className=\"block hover:text-white\">Privacy</Link>\n                <Link href=\"/terms\" className=\"block hover:text-white\">Terms</Link>\n              </div>\n            </div>\n          </div>\n          <div className=\"border-t border-gray-800 mt-12 pt-8 text-center text-gray-400\">\n            <p>&copy; 2025 VENUIN. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":20577},"client/src/pages/public/Home.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Calendar, \n  Users, \n  TrendingUp, \n  Zap, \n  Shield, \n  Globe, \n  ArrowRight,\n  Play,\n  CheckCircle,\n  Star,\n  Brain,\n  MessageSquare,\n  CreditCard,\n  ChevronRight\n} from \"lucide-react\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Navigation */}\n      <nav className=\"fixed top-0 w-full z-50 bg-white/80 backdrop-blur-xl border-b border-gray-100\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-8\">\n              <div className=\"flex items-center space-x-2\">\n                <Calendar className=\"h-8 w-8 text-blue-600\" />\n                <span className=\"text-xl font-semibold text-gray-900\">VENUIN</span>\n              </div>\n              <div className=\"hidden md:flex space-x-8\">\n                <Link href=\"/features\" className=\"text-gray-700 hover:text-gray-900 font-medium\">Features</Link>\n                <Link href=\"/pricing\" className=\"text-gray-700 hover:text-gray-900 font-medium\">Pricing</Link>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/login\" className=\"text-gray-700 hover:text-gray-900 font-medium\">Sign in</Link>\n              <Link href=\"/signup\">\n                <Button className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-full font-medium\">\n                  Start Free Trial\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"pt-32 pb-20 px-4\">\n        <div className=\"max-w-6xl mx-auto text-center\">\n          <Badge variant=\"outline\" className=\"mb-6 text-blue-600 border-blue-200 bg-blue-50\">\n            New: AI-powered venue management\n          </Badge>\n          \n          <h1 className=\"text-6xl md:text-7xl font-bold text-gray-900 mb-6 leading-tight\">\n            The future of\n            <br />\n            <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              venue management\n            </span>\n          </h1>\n          \n          <p className=\"text-xl text-gray-600 mb-10 max-w-3xl mx-auto leading-relaxed\">\n            Transform your venue business with intelligent booking management, \n            automated workflows, and powerful analytics. Trusted by hundreds of venues worldwide.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center mb-16\">\n            <Link href=\"/signup\">\n              <Button size=\"lg\" className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-4 rounded-full text-lg font-medium\">\n                Start Free Trial <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n            </Link>\n            <Button variant=\"outline\" size=\"lg\" className=\"px-8 py-4 rounded-full text-lg font-medium border-gray-300\">\n              <Play className=\"mr-2 h-5 w-5\" /> Watch Demo\n            </Button>\n          </div>\n          \n          {/* Hero Image/Video Placeholder */}\n          <div className=\"relative\">\n            <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 rounded-3xl p-1\">\n              <div className=\"bg-gray-900 rounded-3xl aspect-video flex items-center justify-center\">\n                <Play className=\"h-20 w-20 text-white opacity-80\" />\n              </div>\n            </div>\n            {/* Floating cards */}\n            <div className=\"absolute -top-4 -left-4 bg-white rounded-2xl shadow-xl p-4 hidden lg:block\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"bg-green-100 p-2 rounded-lg\">\n                  <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <div>\n                  <p className=\"font-semibold text-gray-900\">Booking Confirmed</p>\n                  <p className=\"text-sm text-gray-600\">Grand Ballroom - Dec 15</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"absolute -bottom-4 -right-4 bg-white rounded-2xl shadow-xl p-4 hidden lg:block\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"bg-blue-100 p-2 rounded-lg\">\n                  <TrendingUp className=\"h-6 w-6 text-blue-600\" />\n                </div>\n                <div>\n                  <p className=\"font-semibold text-gray-900\">Revenue Up 34%</p>\n                  <p className=\"text-sm text-gray-600\">This quarter</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-24 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"text-center mb-20\">\n            <h2 className=\"text-5xl font-bold text-gray-900 mb-6\">\n              Everything you need to manage your venue\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              From booking management to payment processing, VENUIN provides all the tools \n              to streamline your operations and grow your business.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[\n              {\n                icon: Brain,\n                title: \"AI-Powered Insights\",\n                description: \"Get intelligent recommendations and automated workflows powered by advanced AI\",\n                color: \"bg-purple-100 text-purple-600\"\n              },\n              {\n                icon: Calendar,\n                title: \"Smart Booking System\",\n                description: \"Manage bookings, availability, and scheduling with our intuitive calendar interface\",\n                color: \"bg-blue-100 text-blue-600\"\n              },\n              {\n                icon: Users,\n                title: \"Customer Management\",\n                description: \"Track customer relationships, preferences, and booking history in one place\",\n                color: \"bg-green-100 text-green-600\"\n              },\n              {\n                icon: CreditCard,\n                title: \"Integrated Payments\",\n                description: \"Accept payments, manage deposits, and handle refunds with Stripe integration\",\n                color: \"bg-orange-100 text-orange-600\"\n              },\n              {\n                icon: MessageSquare,\n                title: \"Communication Hub\",\n                description: \"Automated email workflows and centralized communication management\",\n                color: \"bg-pink-100 text-pink-600\"\n              },\n              {\n                icon: TrendingUp,\n                title: \"Advanced Analytics\",\n                description: \"Track performance, revenue trends, and key metrics with detailed reports\",\n                color: \"bg-indigo-100 text-indigo-600\"\n              }\n            ].map((feature, index) => (\n              <Card key={index} className=\"border-0 shadow-sm hover:shadow-lg transition-all duration-300 bg-white\">\n                <CardContent className=\"p-8\">\n                  <div className={`w-12 h-12 rounded-xl ${feature.color} flex items-center justify-center mb-6`}>\n                    <feature.icon className=\"h-6 w-6\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">{feature.title}</h3>\n                  <p className=\"text-gray-600 leading-relaxed\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Social Proof */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 text-center\">\n          <p className=\"text-gray-600 mb-8\">Trusted by venue owners worldwide</p>\n          <div className=\"flex items-center justify-center space-x-2 mb-8\">\n            {[1,2,3,4,5].map(i => (\n              <Star key={i} className=\"h-6 w-6 fill-yellow-400 text-yellow-400\" />\n            ))}\n            <span className=\"ml-4 text-gray-900 font-semibold\">4.9/5 from 500+ reviews</span>\n          </div>\n          <div className=\"grid md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n            {[\n              {\n                quote: \"VENUIN transformed how we manage our venue. The AI features save us hours every week.\",\n                author: \"Sarah Chen\",\n                role: \"Event Manager, Grand Palace\"\n              },\n              {\n                quote: \"The booking system is intuitive and our clients love the professional proposals.\",\n                author: \"Michael Rodriguez\",\n                role: \"Owner, Riverside Events\"\n              },\n              {\n                quote: \"Revenue tracking and analytics help us make better business decisions every day.\",\n                author: \"Emily Johnson\",\n                role: \"Operations Director, Metro Center\"\n              }\n            ].map((testimonial, index) => (\n              <Card key={index} className=\"border border-gray-200\">\n                <CardContent className=\"p-6\">\n                  <p className=\"text-gray-700 mb-4 italic\">\"{testimonial.quote}\"</p>\n                  <div className=\"text-sm\">\n                    <p className=\"font-semibold text-gray-900\">{testimonial.author}</p>\n                    <p className=\"text-gray-600\">{testimonial.role}</p>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-24 bg-gradient-to-r from-blue-600 to-purple-600\">\n        <div className=\"max-w-4xl mx-auto text-center px-4\">\n          <h2 className=\"text-5xl font-bold text-white mb-6\">\n            Ready to transform your venue?\n          </h2>\n          <p className=\"text-xl text-blue-100 mb-10\">\n            Join hundreds of venues already using VENUIN to streamline operations and grow their business.\n          </p>\n          <Link href=\"/signup\">\n            <Button size=\"lg\" className=\"bg-white text-blue-600 hover:bg-gray-50 px-8 py-4 rounded-full text-lg font-medium\">\n              Start Your Free Trial <ChevronRight className=\"ml-2 h-5 w-5\" />\n            </Button>\n          </Link>\n          <p className=\"text-blue-100 mt-4\">\n            14-day free trial • No credit card required • Cancel anytime\n          </p>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-16\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <Calendar className=\"h-6 w-6 text-blue-400\" />\n                <span className=\"text-xl font-semibold\">VENUIN</span>\n              </div>\n              <p className=\"text-gray-400\">\n                The modern venue management platform for the digital age.\n              </p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-4\">Product</h3>\n              <div className=\"space-y-2 text-gray-400\">\n                <Link href=\"/features\" className=\"block hover:text-white\">Features</Link>\n                <Link href=\"/pricing\" className=\"block hover:text-white\">Pricing</Link>\n              </div>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-4\">Company</h3>\n              <div className=\"space-y-2 text-gray-400\">\n                <a href=\"#\" className=\"block hover:text-white\">About</a>\n                <a href=\"#\" className=\"block hover:text-white\">Contact</a>\n              </div>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-4\">Legal</h3>\n              <div className=\"space-y-2 text-gray-400\">\n                <Link href=\"/privacy\" className=\"block hover:text-white\">Privacy</Link>\n                <Link href=\"/terms\" className=\"block hover:text-white\">Terms</Link>\n              </div>\n            </div>\n          </div>\n          <div className=\"border-t border-gray-800 mt-12 pt-8 text-center text-gray-400\">\n            <p>&copy; 2025 VENUIN. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":12587},"client/src/pages/public/Pricing.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  Calendar, \n  Check, \n  ArrowRight, \n  Sparkles, \n  Shield, \n  Users,\n  Brain,\n  CreditCard,\n  MessageSquare,\n  BarChart3\n} from \"lucide-react\";\n\ninterface Plan {\n  id: string;\n  name: string;\n  slug: string;\n  description: string;\n  billingModes: {\n    monthly: { amount: number; currency: string };\n    yearly?: { amount: number; currency: string };\n  };\n  limits: {\n    venues: number;\n    staff: number;\n    monthlyBookings: number;\n  };\n  flags: Record<string, boolean>;\n  trialDays: number;\n  features: string[];\n}\n\nexport default function Pricing() {\n  const [isYearly, setIsYearly] = useState(false);\n  \n  const { data: plans = [], isLoading } = useQuery<Plan[]>({\n    queryKey: [\"/api/public/plans\"],\n    retry: false,\n  });\n\n  const formatPrice = (cents: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n    }).format(cents / 100);\n  };\n\n  const getYearlyDiscount = (monthlyAmount: number, yearlyAmount: number) => {\n    const monthlyYearly = monthlyAmount * 12;\n    const discount = ((monthlyYearly - yearlyAmount) / monthlyYearly) * 100;\n    return Math.round(discount);\n  };\n\n  const planFeatures = {\n    starter: [\n      \"Smart booking management\",\n      \"Customer database\",\n      \"Basic reporting\",\n      \"Email support\",\n      \"Mobile access\"\n    ],\n    professional: [\n      \"Everything in Starter\",\n      \"Lead management & scoring\",\n      \"Professional proposals\",\n      \"Stripe payment processing\",\n      \"Gmail integration\",\n      \"Advanced analytics\",\n      \"Priority support\"\n    ],\n    enterprise: [\n      \"Everything in Professional\", \n      \"AI-powered insights\",\n      \"Voice-to-text booking\",\n      \"Multi-venue management\",\n      \"Team collaboration\",\n      \"Custom branding\",\n      \"Dedicated success manager\",\n      \"API access & integrations\"\n    ]\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Navigation */}\n      <nav className=\"fixed top-0 w-full z-50 bg-white/80 backdrop-blur-xl border-b border-gray-100\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-8\">\n              <Link href=\"/\" className=\"flex items-center space-x-2\">\n                <Calendar className=\"h-8 w-8 text-blue-600\" />\n                <span className=\"text-xl font-semibold text-gray-900\">VENUIN</span>\n              </Link>\n              <div className=\"hidden md:flex space-x-8\">\n                <Link href=\"/features\" className=\"text-gray-700 hover:text-gray-900 font-medium\">Features</Link>\n                <Link href=\"/pricing\" className=\"text-gray-900 font-medium\">Pricing</Link>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/login\" className=\"text-gray-700 hover:text-gray-900 font-medium\">Sign in</Link>\n              <Link href=\"/signup\">\n                <Button className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-full font-medium\">\n                  Start Free Trial\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Header */}\n      <section className=\"pt-32 pb-16 px-4 bg-gradient-to-b from-gray-50 to-white\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <Badge variant=\"outline\" className=\"mb-6 text-blue-600 border-blue-200 bg-blue-50\">\n            <Sparkles className=\"w-4 h-4 mr-2\" />\n            14-day free trial included\n          </Badge>\n          \n          <h1 className=\"text-5xl md:text-6xl font-bold text-gray-900 mb-6 leading-tight\">\n            Choose your\n            <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\"> growth plan</span>\n          </h1>\n          \n          <p className=\"text-xl text-gray-600 mb-10 max-w-3xl mx-auto\">\n            Start with a free trial, then choose a plan that scales with your venue business.\n            All plans include our core features with no hidden fees.\n          </p>\n\n          {/* Billing Toggle */}\n          <div className=\"flex items-center justify-center space-x-4 mb-16\">\n            <span className={`text-lg font-medium ${!isYearly ? 'text-gray-900' : 'text-gray-600'}`}>\n              Monthly\n            </span>\n            <Switch\n              checked={isYearly}\n              onCheckedChange={setIsYearly}\n              className=\"data-[state=checked]:bg-blue-600\"\n            />\n            <span className={`text-lg font-medium ${isYearly ? 'text-gray-900' : 'text-gray-600'}`}>\n              Yearly\n            </span>\n            <Badge variant=\"secondary\" className=\"ml-2 bg-green-100 text-green-700 border-green-200\">\n              Save 20%\n            </Badge>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Plans */}\n      <section className=\"pb-24 px-4\">\n        <div className=\"max-w-7xl mx-auto\">\n          {isLoading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"animate-spin w-8 h-8 border-2 border-blue-600 border-t-transparent rounded-full mx-auto\" />\n              <p className=\"mt-4 text-gray-600\">Loading plans...</p>\n            </div>\n          ) : (\n            <div className=\"grid md:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n              {plans.map((plan, index) => {\n                const isPopular = plan.slug === 'professional';\n                const monthlyPrice = plan.billingModes.monthly.amount;\n                const yearlyPrice = plan.billingModes.yearly?.amount || monthlyPrice * 12;\n                const currentPrice = isYearly ? yearlyPrice / 12 : monthlyPrice;\n                const discount = isYearly && plan.billingModes.yearly \n                  ? getYearlyDiscount(monthlyPrice, yearlyPrice)\n                  : 0;\n\n                return (\n                  <Card \n                    key={plan.id} \n                    className={`relative border-2 transition-all duration-300 hover:shadow-xl ${\n                      isPopular \n                        ? 'border-blue-600 shadow-lg scale-105' \n                        : 'border-gray-200 hover:border-gray-300'\n                    }`}\n                  >\n                    {isPopular && (\n                      <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                        <Badge className=\"bg-blue-600 text-white px-4 py-1\">\n                          Most Popular\n                        </Badge>\n                      </div>\n                    )}\n                    \n                    <CardHeader className=\"text-center pb-8 pt-8\">\n                      <div className={`w-16 h-16 mx-auto mb-4 rounded-2xl flex items-center justify-center ${\n                        plan.slug === 'starter' \n                          ? 'bg-green-100 text-green-600' \n                          : plan.slug === 'professional' \n                          ? 'bg-blue-100 text-blue-600' \n                          : 'bg-purple-100 text-purple-600'\n                      }`}>\n                        {plan.slug === 'starter' && <Users className=\"w-8 h-8\" />}\n                        {plan.slug === 'professional' && <BarChart3 className=\"w-8 h-8\" />}\n                        {plan.slug === 'enterprise' && <Brain className=\"w-8 h-8\" />}\n                      </div>\n                      \n                      <CardTitle className=\"text-2xl font-bold text-gray-900 mb-2\">\n                        {plan.name}\n                      </CardTitle>\n                      \n                      <p className=\"text-gray-600 mb-6\">{plan.description}</p>\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-baseline justify-center\">\n                          <span className=\"text-5xl font-bold text-gray-900\">\n                            {formatPrice(currentPrice)}\n                          </span>\n                          <span className=\"text-gray-600 ml-2\">/month</span>\n                        </div>\n                        \n                        {discount > 0 && (\n                          <div className=\"flex items-center justify-center space-x-2\">\n                            <span className=\"text-sm text-gray-500 line-through\">\n                              {formatPrice(monthlyPrice)}\n                            </span>\n                            <Badge variant=\"secondary\" className=\"text-green-700 bg-green-100\">\n                              {discount}% off\n                            </Badge>\n                          </div>\n                        )}\n                        \n                        {isYearly && (\n                          <p className=\"text-sm text-gray-600\">\n                            {formatPrice(yearlyPrice)} billed annually\n                          </p>\n                        )}\n                      </div>\n                    </CardHeader>\n                    \n                    <CardContent className=\"space-y-6\">\n                      <Link href=\"/signup\">\n                        <Button \n                          className={`w-full py-3 rounded-full font-medium ${\n                            isPopular\n                              ? 'bg-blue-600 hover:bg-blue-700 text-white' \n                              : 'bg-gray-100 hover:bg-gray-200 text-gray-900'\n                          }`}\n                        >\n                          Start Free Trial <ArrowRight className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </Link>\n                      \n                      <div className=\"space-y-1 text-center text-sm text-gray-600\">\n                        <p>{plan.trialDays}-day free trial</p>\n                        <p>No credit card required</p>\n                      </div>\n                      \n                      <div className=\"pt-6 border-t border-gray-200\">\n                        <div className=\"space-y-4\">\n                          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                            <div>\n                              <span className=\"text-gray-600\">Venues:</span>\n                              <span className=\"font-semibold text-gray-900 ml-1\">\n                                {plan.limits.venues === 999 ? 'Unlimited' : plan.limits.venues}\n                              </span>\n                            </div>\n                            <div>\n                              <span className=\"text-gray-600\">Staff:</span>\n                              <span className=\"font-semibold text-gray-900 ml-1\">\n                                {plan.limits.staff === 999 ? 'Unlimited' : plan.limits.staff}\n                              </span>\n                            </div>\n                            <div className=\"col-span-2\">\n                              <span className=\"text-gray-600\">Bookings/month:</span>\n                              <span className=\"font-semibold text-gray-900 ml-1\">\n                                {plan.limits.monthlyBookings === 999 ? 'Unlimited' : plan.limits.monthlyBookings}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"pt-4\">\n                        <h4 className=\"font-semibold text-gray-900 mb-4\">Features included:</h4>\n                        <div className=\"space-y-3\">\n                          {(planFeatures[plan.slug as keyof typeof planFeatures] || []).map((feature, idx) => (\n                            <div key={idx} className=\"flex items-start space-x-3\">\n                              <Check className=\"h-5 w-5 text-green-500 mt-0.5 flex-shrink-0\" />\n                              <span className=\"text-gray-700 text-sm\">{feature}</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <section className=\"py-24 bg-gray-50\">\n        <div className=\"max-w-4xl mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">\n              Frequently asked questions\n            </h2>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {[\n              {\n                question: \"Can I switch plans anytime?\",\n                answer: \"Yes, you can upgrade or downgrade your plan at any time. Changes take effect immediately.\"\n              },\n              {\n                question: \"Is there a setup fee?\",\n                answer: \"No setup fees, no hidden costs. You only pay for your subscription.\"\n              },\n              {\n                question: \"What payment methods do you accept?\",\n                answer: \"We accept all major credit cards and process payments securely through Stripe.\"\n              },\n              {\n                question: \"Can I cancel anytime?\",\n                answer: \"Absolutely. You can cancel your subscription at any time with no cancellation fees.\"\n              },\n              {\n                question: \"Do you offer refunds?\",\n                answer: \"We offer a 14-day free trial. If you're not satisfied, you can request a refund within 30 days.\"\n              },\n              {\n                question: \"Is my data secure?\",\n                answer: \"Yes, we use enterprise-grade security and encryption to protect your data at all times.\"\n              }\n            ].map((faq, index) => (\n              <div key={index} className=\"bg-white p-6 rounded-xl shadow-sm\">\n                <h3 className=\"font-semibold text-gray-900 mb-3\">{faq.question}</h3>\n                <p className=\"text-gray-600\">{faq.answer}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-24 bg-gradient-to-r from-blue-600 to-purple-600\">\n        <div className=\"max-w-4xl mx-auto text-center px-4\">\n          <h2 className=\"text-5xl font-bold text-white mb-6\">\n            Ready to get started?\n          </h2>\n          <p className=\"text-xl text-blue-100 mb-10\">\n            Try VENUIN free for 14 days. No credit card required.\n          </p>\n          <Link href=\"/signup\">\n            <Button size=\"lg\" className=\"bg-white text-blue-600 hover:bg-gray-50 px-8 py-4 rounded-full text-lg font-medium\">\n              Start Your Free Trial <ArrowRight className=\"ml-2 h-5 w-5\" />\n            </Button>\n          </Link>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-16\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div>\n              <Link href=\"/\" className=\"flex items-center space-x-2 mb-4\">\n                <Calendar className=\"h-6 w-6 text-blue-400\" />\n                <span className=\"text-xl font-semibold\">VENUIN</span>\n              </Link>\n              <p className=\"text-gray-400\">\n                The modern venue management platform for the digital age.\n              </p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-4\">Product</h3>\n              <div className=\"space-y-2 text-gray-400\">\n                <Link href=\"/features\" className=\"block hover:text-white\">Features</Link>\n                <Link href=\"/pricing\" className=\"block hover:text-white\">Pricing</Link>\n              </div>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-4\">Company</h3>\n              <div className=\"space-y-2 text-gray-400\">\n                <a href=\"#\" className=\"block hover:text-white\">About</a>\n                <a href=\"#\" className=\"block hover:text-white\">Contact</a>\n              </div>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-4\">Legal</h3>\n              <div className=\"space-y-2 text-gray-400\">\n                <Link href=\"/privacy\" className=\"block hover:text-white\">Privacy</Link>\n                <Link href=\"/terms\" className=\"block hover:text-white\">Terms</Link>\n              </div>\n            </div>\n          </div>\n          <div className=\"border-t border-gray-800 mt-12 pt-8 text-center text-gray-400\">\n            <p>&copy; 2025 VENUIN. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":17052},"server/routes/auth.ts":{"content":"import type { Express } from \"express\";\nimport { storage } from \"../storage\";\nimport { requireAuth, generateToken } from \"../middleware/auth\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport crypto from \"crypto\";\n\nexport function registerAuthRoutes(app: Express) {\n  // Signup endpoint - matches frontend call\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const { email, password, firstName, lastName, packageId, companyName } = req.body;\n\n      // Validate required fields\n      if (!email || !password || !firstName || !lastName || !packageId || !companyName) {\n        return res.status(400).json({ message: \"All fields are required\" });\n      }\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      // Verify package exists\n      const selectedPackage = await storage.getFeaturePackage(packageId);\n      if (!selectedPackage) {\n        return res.status(400).json({ message: \"Invalid package selected\" });\n      }\n\n      // Generate email verification token\n      const emailVerificationToken = crypto.randomBytes(32).toString('hex');\n\n      // Create user\n      const user = await storage.createUser({\n        email,\n        firstName,\n        lastName,\n        passwordHash: password, // Will be hashed in storage\n        emailVerificationToken,\n        emailVerified: false,\n      });\n\n      // Create tenant for the user with selected package\n      const tenantSlug = companyName.toLowerCase()\n        .replace(/[^a-z0-9]+/g, '-')\n        .replace(/^-+|-+$/g, '') + '-' + Date.now().toString(36);\n\n      const tenant = await storage.createTenant({\n        name: companyName,\n        slug: tenantSlug,\n        planId: packageId,\n        contactName: `${firstName} ${lastName}`,\n        contactEmail: email,\n        ownerId: user.id,\n        status: 'active',\n      });\n\n      // Add user as owner to tenant\n      await storage.addUserToTenant({\n        tenantId: tenant.id,\n        userId: user.id,\n        role: 'owner',\n        permissions: {},\n      });\n\n      // Generate token\n      const token = generateToken(user);\n\n      // Store user in session with tenant context\n      req.session.user = {\n        id: user.id,\n        email: user.email,\n        isSuperAdmin: user.isSuperAdmin || false,\n        currentTenant: {\n          id: tenant.id,\n          slug: tenant.slug,\n          name: tenant.name,\n          role: 'owner',\n        },\n      };\n\n      // Remove sensitive data from response\n      const { passwordHash, emailVerificationToken: _, ...userResponse } = user;\n\n      res.status(201).json({\n        message: \"Account created successfully\",\n        user: userResponse,\n        tenant: {\n          id: tenant.id,\n          name: tenant.name,\n          slug: tenant.slug,\n          planId: tenant.planId,\n        },\n        token,\n      });\n    } catch (error: any) {\n      console.error(\"Signup error:\", error);\n      res.status(500).json({ message: \"Failed to create account. Please try again.\" });\n    }\n  });\n\n  // Login endpoint\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n\n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email and password are required\" });\n      }\n\n      // Verify user credentials\n      const user = await storage.verifyPassword(email, password);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Generate token\n      const token = generateToken(user);\n\n      // Get user's primary tenant for session and response\n      const primaryTenant = await storage.getUserPrimaryTenant(user.id);\n\n      // Store user in session with tenant context\n      (req.session as any).user = {\n        id: user.id,\n        email: user.email,\n        isSuperAdmin: user.isSuperAdmin || false,\n        currentTenant: primaryTenant ? {\n          id: primaryTenant.tenant.id,\n          slug: primaryTenant.tenant.slug,\n          name: primaryTenant.tenant.name,\n          role: primaryTenant.role,\n        } : null,\n      };\n\n      // Remove sensitive data from response\n      const { passwordHash, ...userResponse } = user;\n\n      res.json({\n        message: \"Login successful\",\n        user: {\n          ...userResponse,\n          currentTenant: primaryTenant ? {\n            id: primaryTenant.tenant.id,\n            slug: primaryTenant.tenant.slug,\n            name: primaryTenant.tenant.name,\n            role: primaryTenant.role,\n          } : null,\n        },\n        token,\n      });\n    } catch (error: any) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Get current user endpoint\n  app.get(\"/api/auth/user\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.user!.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Get user's primary tenant\n      const primaryTenant = await storage.getUserPrimaryTenant(user.id);\n\n      // Remove sensitive data from response\n      const { passwordHash, ...userResponse } = user;\n\n      res.json({\n        ...userResponse,\n        currentTenant: primaryTenant ? {\n          id: primaryTenant.tenant.id,\n          slug: primaryTenant.tenant.slug,\n          name: primaryTenant.tenant.name,\n          role: primaryTenant.role,\n        } : null,\n      });\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  // Logout endpoint\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.json({ message: \"Logout successful\" });\n    });\n  });\n\n  // Email verification endpoint\n  app.post(\"/api/auth/verify-email\", async (req, res) => {\n    try {\n      const { token } = req.body;\n\n      if (!token) {\n        return res.status(400).json({ message: \"Verification token is required\" });\n      }\n\n      // Find user by verification token\n      const users = await storage.getUsers(); // We need to implement this\n      const user = users.find(u => u.emailVerificationToken === token);\n\n      if (!user) {\n        return res.status(400).json({ message: \"Invalid or expired verification token\" });\n      }\n\n      // Update user as verified\n      await storage.updateUser(user.id, {\n        emailVerified: true,\n        emailVerificationToken: null,\n      });\n\n      res.json({ message: \"Email verified successfully\" });\n    } catch (error) {\n      console.error(\"Email verification error:\", error);\n      res.status(500).json({ message: \"Email verification failed\" });\n    }\n  });\n\n  // Password reset request endpoint\n  app.post(\"/api/auth/forgot-password\", async (req, res) => {\n    try {\n      const { email } = req.body;\n\n      if (!email) {\n        return res.status(400).json({ message: \"Email is required\" });\n      }\n\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        // Don't reveal if email exists for security\n        return res.json({ message: \"If an account with that email exists, you will receive a password reset email.\" });\n      }\n\n      // Generate reset token\n      const resetToken = crypto.randomBytes(32).toString('hex');\n      const resetExpires = new Date(Date.now() + 60 * 60 * 1000); // 1 hour\n\n      await storage.updateUser(user.id, {\n        passwordResetToken: resetToken,\n        passwordResetExpires: resetExpires,\n      });\n\n      // TODO: Send email with reset token\n      \n      res.json({ message: \"If an account with that email exists, you will receive a password reset email.\" });\n    } catch (error) {\n      console.error(\"Password reset request error:\", error);\n      res.status(500).json({ message: \"Failed to process password reset request\" });\n    }\n  });\n\n  // Password reset endpoint\n  app.post(\"/api/auth/reset-password\", async (req, res) => {\n    try {\n      const { token, password } = req.body;\n\n      if (!token || !password) {\n        return res.status(400).json({ message: \"Token and password are required\" });\n      }\n\n      // Find user by reset token\n      const users = await storage.getUsers(); // We need to implement this\n      const user = users.find(u => \n        u.passwordResetToken === token && \n        u.passwordResetExpires && \n        u.passwordResetExpires > new Date()\n      );\n\n      if (!user) {\n        return res.status(400).json({ message: \"Invalid or expired reset token\" });\n      }\n\n      // Update password and clear reset token\n      await storage.updateUser(user.id, {\n        passwordHash: password, // Will be hashed in storage\n        passwordResetToken: null,\n        passwordResetExpires: null,\n      });\n\n      res.json({ message: \"Password reset successfully\" });\n    } catch (error) {\n      console.error(\"Password reset error:\", error);\n      res.status(500).json({ message: \"Password reset failed\" });\n    }\n  });\n}","size_bytes":9141},"server/routes/onboarding.ts":{"content":"import type { Express } from \"express\";\nimport { storage } from \"../storage\";\nimport { requireAuth } from \"../middleware/auth\";\nimport { insertTenantSchema, insertTenantUserSchema } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport function registerOnboardingRoutes(app: Express) {\n  // Create tenant during onboarding\n  app.post(\"/api/onboarding/create-tenant\", requireAuth, async (req, res) => {\n    try {\n      const {\n        tenantName,\n        tenantSlug,\n        industry,\n        planId,\n        contactName,\n        contactEmail,\n        businessPhone,\n        businessAddress,\n        businessDescription,\n      } = req.body;\n\n      // Validate required fields\n      if (!tenantName || !tenantSlug || !planId) {\n        return res.status(400).json({ \n          message: 'Tenant name, slug, and plan are required.' \n        });\n      }\n\n      // Check if slug is already taken\n      const existingTenant = await storage.getTenantBySlug(tenantSlug);\n      if (existingTenant) {\n        return res.status(400).json({ \n          message: 'Tenant slug is already taken. Please choose a different one.' \n        });\n      }\n\n      // Get the selected plan\n      const selectedPlan = await storage.getFeaturePackage(planId);\n      if (!selectedPlan) {\n        return res.status(400).json({ \n          message: 'Selected plan not found. Please choose a valid plan.' \n        });\n      }\n\n      // Create tenant\n      const tenantData = insertTenantSchema.parse({\n        name: tenantName,\n        slug: tenantSlug,\n        industry: industry,\n        planId: selectedPlan.id,\n        status: 'active',\n        contactName: contactName,\n        contactEmail: contactEmail,\n        businessPhone: businessPhone,\n        businessAddress: businessAddress,\n        businessDescription: businessDescription,\n        ownerId: req.user!.id,\n        stripeCustomerId: null,\n        stripeSubscriptionId: null,\n      });\n\n      const tenant = await storage.createTenant(tenantData);\n\n      // Add user to tenant as owner\n      await storage.addUserToTenant(insertTenantUserSchema.parse({\n        tenantId: tenant.id,\n        userId: req.user!.id,\n        role: 'owner',\n        permissions: {},\n      }));\n\n      res.status(201).json({\n        message: 'Tenant created successfully',\n        tenant: {\n          id: tenant.id,\n          name: tenant.name,\n          slug: tenant.slug,\n          planId: tenant.planId,\n        },\n      });\n\n    } catch (error) {\n      console.error('Error creating tenant:', error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ \n        message: 'Failed to create tenant. Please try again.' \n      });\n    }\n  });\n}","size_bytes":2812},"client/src/pages/plan-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { CheckCircle2, Crown, Zap, Star, ArrowRight, Calendar } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface PlanFeature {\n  name: string;\n  included: boolean;\n  limit?: string;\n}\n\ninterface Plan {\n  id: string;\n  name: string;\n  slug: string;\n  description: string;\n  priceMonthly: number;\n  priceYearly: number;\n  features: Record<string, any>;\n  limits: Record<string, any>;\n  sortOrder: number;\n}\n\ninterface TenantPlan {\n  currentPlan: Plan;\n  tenant: {\n    id: string;\n    name: string;\n    slug: string;\n    status: string;\n    stripeCustomerId: string | null;\n    stripeSubscriptionId: string | null;\n  };\n}\n\nexport default function PlanManagement() {\n  const [billingCycle, setBillingCycle] = useState<'monthly' | 'yearly'>('monthly');\n\n  // Get current tenant plan info\n  const { data: tenantPlan, isLoading: planLoading } = useQuery<TenantPlan>({\n    queryKey: [\"/api/tenant/plan-info\"],\n  });\n\n  // Get all available plans\n  const { data: allPlans, isLoading: plansLoading } = useQuery<Plan[]>({\n    queryKey: [\"/api/public/plans\"],\n  });\n\n  const upgradeMutation = useMutation({\n    mutationFn: async (planId: string) => {\n      const response = await apiRequest(\"POST\", \"/api/tenant/upgrade-plan\", {\n        planId,\n        billingCycle,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.checkoutUrl) {\n        // Redirect to Stripe Checkout\n        window.location.href = data.checkoutUrl;\n      } else {\n        toast({\n          title: \"Plan Updated\",\n          description: \"Your plan has been successfully updated.\",\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/tenant/plan-info\"] });\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Upgrade Failed\",\n        description: error.message || \"Failed to upgrade plan. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getPlanIcon = (slug: string) => {\n    switch (slug) {\n      case 'starter': return <Zap className=\"h-6 w-6 text-blue-600\" />;\n      case 'professional': return <Star className=\"h-6 w-6 text-purple-600\" />;\n      case 'enterprise': return <Crown className=\"h-6 w-6 text-yellow-600\" />;\n      default: return <CheckCircle2 className=\"h-6 w-6 text-gray-600\" />;\n    }\n  };\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(price);\n  };\n\n  if (planLoading || plansLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\" />\n      </div>\n    );\n  }\n\n  if (!tenantPlan || !allPlans) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <p className=\"text-gray-500\">Failed to load plan information.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const currentPlan = tenantPlan.currentPlan;\n  const isCurrentPlan = (planSlug: string) => currentPlan.slug === planSlug;\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-4xl font-bold\">Manage Your Plan</h1>\n        <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n          Upgrade or manage your VENUIN subscription to unlock more powerful features\n        </p>\n      </div>\n\n      {/* Current Plan Status */}\n      <Card className=\"border-2 border-blue-200 bg-blue-50\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              {getPlanIcon(currentPlan.slug)}\n              <div>\n                <CardTitle className=\"text-xl\">Current Plan: {currentPlan.name}</CardTitle>\n                <CardDescription>\n                  {tenantPlan.tenant.name} • {tenantPlan.tenant.status === 'active' ? 'Active' : 'Inactive'}\n                </CardDescription>\n              </div>\n            </div>\n            <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n              Current\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-semibold mb-2\">Plan Features</h4>\n              <div className=\"space-y-1 text-sm\">\n                {currentPlan.limits.maxUsers && (\n                  <div>• Up to {currentPlan.limits.maxUsers} team members</div>\n                )}\n                {currentPlan.limits.maxVenues && (\n                  <div>• Up to {currentPlan.limits.maxVenues} venues</div>\n                )}\n                {currentPlan.limits.maxSpacesPerVenue && (\n                  <div>• Up to {currentPlan.limits.maxSpacesPerVenue} spaces per venue</div>\n                )}\n                {currentPlan.features.aiFeatures && <div>• AI-powered insights</div>}\n                {currentPlan.features.proposalGeneration && <div>• Proposal generation</div>}\n                {currentPlan.features.stripeConnect && <div>• Payment processing</div>}\n              </div>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-2\">Billing Information</h4>\n              <div className=\"space-y-1 text-sm\">\n                <div>Monthly: {formatPrice(currentPlan.priceMonthly)}</div>\n                <div>Yearly: {formatPrice(currentPlan.priceYearly)}</div>\n                {tenantPlan.tenant.stripeSubscriptionId ? (\n                  <div className=\"text-green-600\">• Active subscription</div>\n                ) : (\n                  <div className=\"text-amber-600\">• Trial or free plan</div>\n                )}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Billing Cycle Toggle */}\n      <div className=\"flex justify-center\">\n        <div className=\"bg-gray-100 p-1 rounded-lg inline-flex\">\n          <button\n            onClick={() => setBillingCycle('monthly')}\n            className={`px-4 py-2 rounded-md transition-colors ${\n              billingCycle === 'monthly' \n                ? 'bg-white text-gray-900 shadow' \n                : 'text-gray-600 hover:text-gray-900'\n            }`}\n          >\n            <Calendar className=\"h-4 w-4 inline mr-2\" />\n            Monthly\n          </button>\n          <button\n            onClick={() => setBillingCycle('yearly')}\n            className={`px-4 py-2 rounded-md transition-colors ${\n              billingCycle === 'yearly' \n                ? 'bg-white text-gray-900 shadow' \n                : 'text-gray-600 hover:text-gray-900'\n            }`}\n          >\n            <Calendar className=\"h-4 w-4 inline mr-2\" />\n            Yearly\n            <Badge variant=\"secondary\" className=\"ml-2 bg-green-100 text-green-800\">\n              Save 20%\n            </Badge>\n          </button>\n        </div>\n      </div>\n\n      {/* Available Plans */}\n      <div className=\"grid md:grid-cols-3 gap-6\">\n        {allPlans\n          .sort((a, b) => a.sortOrder - b.sortOrder)\n          .map((plan) => (\n            <Card \n              key={plan.id} \n              className={`relative ${\n                isCurrentPlan(plan.slug) \n                  ? 'border-2 border-blue-500 bg-blue-50' \n                  : 'hover:shadow-lg transition-shadow'\n              }`}\n            >\n              {isCurrentPlan(plan.slug) && (\n                <Badge className=\"absolute -top-2 left-1/2 -translate-x-1/2 bg-blue-600\">\n                  Current Plan\n                </Badge>\n              )}\n              \n              <CardHeader className=\"text-center pb-4\">\n                <div className=\"flex justify-center mb-2\">\n                  {getPlanIcon(plan.slug)}\n                </div>\n                <CardTitle className=\"text-2xl\">{plan.name}</CardTitle>\n                <CardDescription>{plan.description}</CardDescription>\n                <div className=\"text-3xl font-bold text-gray-900\">\n                  {formatPrice(billingCycle === 'monthly' ? plan.priceMonthly : plan.priceYearly)}\n                  <span className=\"text-base font-normal text-gray-500\">\n                    /{billingCycle === 'monthly' ? 'month' : 'year'}\n                  </span>\n                </div>\n                {billingCycle === 'yearly' && (\n                  <div className=\"text-sm text-green-600\">\n                    Save {formatPrice(plan.priceMonthly * 12 - plan.priceYearly)} per year\n                  </div>\n                )}\n              </CardHeader>\n\n              <Separator />\n\n              <CardContent className=\"pt-4\">\n                <div className=\"space-y-3 mb-6\">\n                  {plan.limits.maxUsers && (\n                    <div className=\"flex items-center text-sm\">\n                      <CheckCircle2 className=\"h-4 w-4 text-green-500 mr-2\" />\n                      Up to {plan.limits.maxUsers} team members\n                    </div>\n                  )}\n                  {plan.limits.maxVenues && (\n                    <div className=\"flex items-center text-sm\">\n                      <CheckCircle2 className=\"h-4 w-4 text-green-500 mr-2\" />\n                      Up to {plan.limits.maxVenues} venues\n                    </div>\n                  )}\n                  {plan.limits.maxSpacesPerVenue && (\n                    <div className=\"flex items-center text-sm\">\n                      <CheckCircle2 className=\"h-4 w-4 text-green-500 mr-2\" />\n                      Up to {plan.limits.maxSpacesPerVenue} spaces per venue\n                    </div>\n                  )}\n                  {plan.features.aiFeatures && (\n                    <div className=\"flex items-center text-sm\">\n                      <CheckCircle2 className=\"h-4 w-4 text-green-500 mr-2\" />\n                      AI-powered insights\n                    </div>\n                  )}\n                  {plan.features.proposalGeneration && (\n                    <div className=\"flex items-center text-sm\">\n                      <CheckCircle2 className=\"h-4 w-4 text-green-500 mr-2\" />\n                      Proposal generation\n                    </div>\n                  )}\n                  {plan.features.stripeConnect && (\n                    <div className=\"flex items-center text-sm\">\n                      <CheckCircle2 className=\"h-4 w-4 text-green-500 mr-2\" />\n                      Payment processing\n                    </div>\n                  )}\n                </div>\n\n                <Button \n                  className=\"w-full\"\n                  variant={isCurrentPlan(plan.slug) ? \"secondary\" : \"default\"}\n                  disabled={isCurrentPlan(plan.slug) || upgradeMutation.isPending}\n                  onClick={() => !isCurrentPlan(plan.slug) && upgradeMutation.mutate(plan.id)}\n                >\n                  {upgradeMutation.isPending ? (\n                    \"Processing...\"\n                  ) : isCurrentPlan(plan.slug) ? (\n                    \"Current Plan\"\n                  ) : (\n                    <>\n                      Upgrade to {plan.name}\n                      <ArrowRight className=\"ml-2 h-4 w-4\" />\n                    </>\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n      </div>\n\n      {/* Billing Portal Link */}\n      {tenantPlan.tenant.stripeSubscriptionId && (\n        <Card>\n          <CardContent className=\"text-center py-6\">\n            <h3 className=\"font-semibold mb-2\">Manage Billing</h3>\n            <p className=\"text-gray-600 mb-4\">\n              Update payment methods, download invoices, and manage your subscription\n            </p>\n            <Button variant=\"outline\">\n              Open Billing Portal\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":12361},"server/routes/tenant.ts":{"content":"import type { Express } from \"express\";\nimport { db } from \"../db\";\nimport { \n  tenants, \n  tenantUsers,\n  featurePackages,\n  venues,\n  spaces,\n  customers,\n  bookings,\n  proposals,\n  contracts,\n  payments,\n  leads,\n  leadActivities,\n  leadTasks,\n  tours,\n  setupStyles,\n  services,\n  packages,\n  tasks,\n  communications,\n  aiInsights,\n  taxSettings,\n  settings,\n  tags,\n  campaignSources\n} from \"../../shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport { tenantContext } from \"../middleware/tenantContext\";\nimport { getTenantFeatures } from \"../middleware/featureGating\";\n\nexport function registerTenantRoutes(app: Express) {\n  // GET /api/tenant/plan-info - Get current tenant plan information  \n  app.get('/api/tenant/plan-info', async (req: any, res) => {\n    try {\n      console.log('Plan info request - session:', req.session?.userId);\n      console.log('Plan info request - tenant context:', req.tenant);\n      \n      if (!req.session?.userId) {\n        return res.status(401).json({ message: 'Authentication required' });\n      }\n\n      // Get user's tenant directly from session/database\n      const userId = req.session.userId;\n      const tenantUser = await db\n        .select({\n          tenantId: tenantUsers.tenantId,\n          tenant: {\n            id: tenants.id,\n            name: tenants.name,\n            slug: tenants.slug,\n            status: tenants.status,\n          }\n        })\n        .from(tenantUsers)\n        .innerJoin(tenants, eq(tenants.id, tenantUsers.tenantId))\n        .where(eq(tenantUsers.userId, userId))\n        .limit(1);\n\n      if (!tenantUser.length) {\n        return res.status(404).json({ message: 'No tenant found for user' });\n      }\n\n      const tenantId = tenantUser[0].tenantId;\n\n      // Get tenant with current plan\n      const [tenantWithPlan] = await db\n        .select({\n          tenant: {\n            id: tenants.id,\n            name: tenants.name,\n            slug: tenants.slug,\n            status: tenants.status,\n            stripeCustomerId: tenants.stripeCustomerId,\n            stripeSubscriptionId: tenants.stripeSubscriptionId,\n          },\n          plan: {\n            id: featurePackages.id,\n            name: featurePackages.name,\n            slug: featurePackages.slug,\n            description: featurePackages.description,\n            priceMonthly: featurePackages.priceMonthly,\n            priceYearly: featurePackages.priceYearly,\n            features: featurePackages.features,\n            limits: featurePackages.limits,\n            sortOrder: featurePackages.sortOrder,\n          }\n        })\n        .from(tenants)\n        .leftJoin(featurePackages, eq(tenants.featurePackageId, featurePackages.id))\n        .where(eq(tenants.id, tenantId))\n        .limit(1);\n\n      if (!tenantWithPlan) {\n        return res.status(404).json({ message: 'Tenant not found' });\n      }\n\n      res.json({\n        tenant: tenantWithPlan.tenant,\n        currentPlan: tenantWithPlan.plan,\n      });\n\n    } catch (error) {\n      console.error('Get tenant plan error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // POST /api/tenant/upgrade-plan - Upgrade tenant plan\n  app.post('/api/tenant/upgrade-plan', tenantContext, async (req: any, res) => {\n    try {\n      const tenantId = req.tenant.id;\n      const { planId, billingCycle } = req.body;\n\n      if (!planId || !billingCycle) {\n        return res.status(400).json({ \n          message: 'planId and billingCycle are required' \n        });\n      }\n\n      // Get the target plan\n      const [targetPlan] = await db\n        .select()\n        .from(featurePackages)\n        .where(eq(featurePackages.id, planId))\n        .limit(1);\n\n      if (!targetPlan) {\n        return res.status(404).json({ message: 'Plan not found' });\n      }\n\n      // Get current tenant\n      const [currentTenant] = await db\n        .select()\n        .from(tenants)\n        .where(eq(tenants.id, tenantId))\n        .limit(1);\n\n      if (!currentTenant) {\n        return res.status(404).json({ message: 'Tenant not found' });\n      }\n\n      // Check if it's the same plan\n      if (currentTenant.featurePackageId === planId) {\n        return res.status(400).json({ \n          message: 'You are already on this plan' \n        });\n      }\n\n      // For now, just update the plan directly (later we'll add Stripe integration)\n      const [updatedTenant] = await db\n        .update(tenants)\n        .set({\n          featurePackageId: planId,\n          planSlug: targetPlan.slug,\n          updatedAt: new Date(),\n        })\n        .where(eq(tenants.id, tenantId))\n        .returning();\n\n      res.json({\n        message: 'Plan updated successfully',\n        tenant: updatedTenant,\n        newPlan: targetPlan,\n      });\n\n    } catch (error) {\n      console.error('Upgrade plan error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // DELETE /api/tenant/clear-demo-data - Clear all demo data for tenant\n  app.delete('/api/tenant/clear-demo-data', tenantContext, async (req: any, res) => {\n    try {\n      // For now, just return success since new tenants start clean\n      // Later we can implement actual data clearing if needed\n      res.json({\n        message: 'Demo data cleared successfully',\n        clearedTables: 0,\n      });\n\n    } catch (error) {\n      console.error('Clear demo data error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n}","size_bytes":5463},"client/src/contexts/dashboard-context.tsx":{"content":"import { createContext, useContext, ReactNode } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface DashboardContextType {\n  dashboardData: any;\n  quickStats: any;\n  isLoading: boolean;\n  error: any;\n}\n\nconst DashboardContext = createContext<DashboardContextType | null>(null);\n\nexport function DashboardProvider({ children }: { children: ReactNode }) {\n  // Main dashboard data - everything in one call\n  const { data: dashboardData, isLoading: dashboardLoading, error: dashboardError } = useQuery({\n    queryKey: [\"/api/dashboard/overview\"],\n    staleTime: 5 * 60 * 1000, // Cache for 5 minutes\n    refetchInterval: false, // Disabled automatic refetching\n  });\n\n  // Quick stats for real-time updates\n  const { data: quickStats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/quick-stats\"],\n    refetchInterval: false, // Disabled automatic refetching  \n    staleTime: 5 * 60 * 1000, // Cache for 5 minutes\n  });\n\n  const value = {\n    dashboardData,\n    quickStats,\n    isLoading: dashboardLoading || statsLoading,\n    error: dashboardError\n  };\n\n  return (\n    <DashboardContext.Provider value={value}>\n      {children}\n    </DashboardContext.Provider>\n  );\n}\n\nexport function useDashboard() {\n  const context = useContext(DashboardContext);\n  if (!context) {\n    throw new Error(\"useDashboard must be used within a DashboardProvider\");\n  }\n  return context;\n}\n\n// Hook to get specific data with fallbacks\nexport function useDashboardData() {\n  const { dashboardData, quickStats, isLoading, error } = useDashboard();\n  \n  return {\n    // Metrics with real-time updates\n    metrics: {\n      ...(dashboardData?.metrics || {}),\n      todayBookings: quickStats?.todayBookings || 0,\n      weeklyRevenue: quickStats?.weeklyRevenue || 0,\n      hotLeads: quickStats?.hotLeads || 0\n    },\n    \n    // Data from unified endpoint - no separate API calls needed\n    bookings: dashboardData?.allBookings || [],\n    customers: dashboardData?.allCustomers || [],\n    venues: dashboardData?.allVenues || [],\n    upcomingBookings: dashboardData?.upcomingBookings || [],\n    activeLeads: dashboardData?.activeLeads || [],\n    recentPayments: dashboardData?.recentPayments || [],\n    calendar: dashboardData?.calendar || { data: [] },\n    insights: dashboardData?.insights || [],\n    business: dashboardData?.business || {},\n    \n    isLoading,\n    error\n  };\n}","size_bytes":2393},"client/src/pages/optimized-dashboard.tsx":{"content":"import { useState, Suspense } from \"react\";\nimport { DashboardProvider } from \"@/contexts/dashboard-context\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { MobileNav } from \"@/components/layout/mobile-nav\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, DollarSign, Users, BarChart3, TrendingUp } from \"lucide-react\";\nimport { EventSummaryModal } from \"@/components/forms/event-summary-modal\";\nimport { EventEditFullModal } from \"@/components/forms/event-edit-full-modal\";\nimport { CreateEventModal } from \"@/components/forms/create-event-modal\";\nimport { AdvancedCalendar } from \"@/components/dashboard/advanced-calendar\";\nimport { OptimizedRecentBookings, OptimizedActiveLeads, OptimizedRecentPayments } from \"@/components/dashboard/optimized-components\";\nimport { useDashboardData } from \"@/contexts/dashboard-context\";\n\n// Inner Dashboard Component that uses context\nfunction DashboardContent() {\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<any>(null);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [showCreateEventModal, setShowCreateEventModal] = useState(false);\n  \n  // Get all data from context - no individual API calls\n  const { metrics, business, insights, isLoading, error } = useDashboardData();\n\n  const handleEventClick = (booking: any) => {\n    setSelectedEvent(booking);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n        <div className=\"hidden lg:block\">\n          <Sidebar collapsed={sidebarCollapsed} />\n        </div>\n        \n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          <Header \n            title=\"Dashboard\" \n            subtitle=\"Loading your venue data...\"\n            onMobileMenuToggle={() => setMobileNavOpen(true)}\n            onNewBooking={() => setShowCreateEventModal(true)}\n            onSidebarToggle={() => setSidebarCollapsed(!sidebarCollapsed)}\n            sidebarCollapsed={sidebarCollapsed}\n          />\n          \n          <main className=\"flex-1 overflow-y-auto p-6\">\n            {/* Loading skeleton */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n              {[1, 2, 3, 4].map(i => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-8 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-3/4\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n            \n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <div className=\"lg:col-span-2 bg-white rounded-lg shadow-sm h-96 animate-pulse\"></div>\n              <div className=\"bg-white rounded-lg shadow-sm h-96 animate-pulse\"></div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  const displayMetrics = metrics;\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <div className=\"hidden lg:block\">\n        <Sidebar collapsed={sidebarCollapsed} />\n      </div>\n      \n      <MobileNav \n        isOpen={mobileNavOpen} \n        onClose={() => setMobileNavOpen(false)} \n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Dashboard\" \n          subtitle={`Welcome back! Here's what's happening at ${business.companyName || 'your venues'} today.`}\n          onMobileMenuToggle={() => setMobileNavOpen(true)}\n          onNewBooking={() => setShowCreateEventModal(true)}\n          onSidebarToggle={() => setSidebarCollapsed(!sidebarCollapsed)}\n          sidebarCollapsed={sidebarCollapsed}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* AI Insights Banner */}\n          {insights.length > 0 && (\n            <div className=\"mb-6 bg-gradient-to-r from-purple-600 to-blue-600 rounded-xl p-6 text-white\">\n              <div className=\"flex flex-col sm:flex-row items-start justify-between gap-4\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center mb-2\">\n                    <TrendingUp className=\"w-6 h-6 mr-2\" />\n                    <h3 className=\"text-lg font-semibold\">AI-Powered Insights</h3>\n                  </div>\n                  <p className=\"text-purple-100 mb-3\">\n                    {insights[0]?.message || 'Your venue management is optimized with AI insights.'}\n                  </p>\n                  <div className=\"flex flex-wrap gap-4 text-sm\">\n                    <span className=\"bg-white/20 px-3 py-1 rounded-full\">\n                      {displayMetrics.thisMonthBookings || 0} Bookings This Month\n                    </span>\n                    <span className=\"bg-white/20 px-3 py-1 rounded-full\">\n                      {displayMetrics.hotLeads || 0} Hot Leads\n                    </span>\n                    <span className=\"bg-white/20 px-3 py-1 rounded-full\">\n                      ${(displayMetrics.weeklyRevenue || 0).toLocaleString()} This Week\n                    </span>\n                  </div>\n                </div>\n                <button \n                  onClick={() => setShowCreateEventModal(true)}\n                  className=\"bg-white/20 hover:bg-white/30 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors\"\n                >\n                  New Booking\n                </button>\n              </div>\n            </div>\n          )}\n\n          {/* Unified Metrics Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-600\">Total Bookings</p>\n                    <p className=\"text-2xl font-bold\">{displayMetrics.totalBookings || 0}</p>\n                    <p className=\"text-xs text-slate-500 flex items-center mt-1\">\n                      <span className=\"text-green-600\">+{displayMetrics.todayBookings || 0}</span>\n                      <span className=\"ml-1\">today</span>\n                    </p>\n                  </div>\n                  <div className=\"h-12 w-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <Calendar className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-600\">Revenue</p>\n                    <p className=\"text-2xl font-bold\">${(displayMetrics.revenue || 0).toLocaleString()}</p>\n                    <p className=\"text-xs text-slate-500 flex items-center mt-1\">\n                      <span className=\"text-green-600\">\n                        {displayMetrics.revenueGrowth > 0 ? '+' : ''}{(displayMetrics.revenueGrowth || 0).toFixed(1)}%\n                      </span>\n                      <span className=\"ml-1\">from last month</span>\n                    </p>\n                  </div>\n                  <div className=\"h-12 w-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <DollarSign className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-600\">Active Leads</p>\n                    <p className=\"text-2xl font-bold\">{displayMetrics.activeLeads || 0}</p>\n                    <p className=\"text-xs text-slate-500 flex items-center mt-1\">\n                      <span className=\"text-orange-600\">{displayMetrics.hotLeads || 0}</span>\n                      <span className=\"ml-1\">hot leads</span>\n                    </p>\n                  </div>\n                  <div className=\"h-12 w-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                    <Users className=\"h-6 w-6 text-orange-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-600\">Venues</p>\n                    <p className=\"text-2xl font-bold\">{displayMetrics.totalVenues || 0}</p>\n                    <p className=\"text-xs text-slate-500 flex items-center mt-1\">\n                      <span className=\"text-blue-600\">Active</span>\n                      <span className=\"ml-1\">locations</span>\n                    </p>\n                  </div>\n                  <div className=\"h-12 w-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                    <BarChart3 className=\"h-6 w-6 text-purple-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Calendar - Full Width */}\n          <div className=\"mb-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <h2 className=\"text-lg font-semibold mb-4\">Event Calendar</h2>\n                <AdvancedCalendar \n                  onEventClick={handleEventClick} \n                />\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content Grid */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Recent Bookings - Using optimized component */}\n            <div className=\"lg:col-span-2\">\n              <OptimizedRecentBookings />\n            </div>\n\n            {/* Side Panel - Using optimized components */}\n            <div className=\"space-y-6\">\n              <OptimizedActiveLeads />\n              <OptimizedRecentPayments />\n            </div>\n          </div>\n        </main>\n\n        {/* Modals */}\n        <EventSummaryModal \n          open={!!selectedEvent && !showEditModal} \n          onOpenChange={(open) => !open && setSelectedEvent(null)}\n          booking={selectedEvent}\n          onEditClick={() => setShowEditModal(true)}\n        />\n\n        <EventEditFullModal \n          open={showEditModal} \n          onOpenChange={(open) => {\n            setShowEditModal(false);\n            if (!open) {\n              setSelectedEvent(null);\n            }\n          }}\n          booking={selectedEvent}\n        />\n\n        <CreateEventModal\n          open={showCreateEventModal}\n          onOpenChange={setShowCreateEventModal}\n        />\n      </div>\n    </div>\n  );\n}\n\n// Main component with context provider\nexport default function OptimizedDashboard() {\n  return (\n    <DashboardProvider>\n      <DashboardContent />\n    </DashboardProvider>\n  );\n}","size_bytes":11643},"client/src/hooks/useAuthRedirect.ts":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useFirebaseAuth } from './useFirebaseAuth';\n\nexport function useAuthRedirect() {\n  const [, setLocation] = useLocation();\n  const { user, isLoading } = useFirebaseAuth();\n\n  useEffect(() => {\n    console.log('useAuthRedirect hook:', { isLoading, user, isSuperAdmin: user?.isSuperAdmin, currentPath: window.location.pathname });\n    \n    if (isLoading) return;\n\n    // Not authenticated - redirect to login if on protected pages\n    if (!user) {\n      const currentPath = window.location.pathname;\n      // If user is on a protected page (not public pages), redirect to login\n      if (!currentPath.startsWith('/login') && \n          !currentPath.startsWith('/signup') && \n          !currentPath.startsWith('/') &&\n          !currentPath.startsWith('/features') &&\n          !currentPath.startsWith('/pricing') &&\n          !currentPath.startsWith('/contact') &&\n          !currentPath.startsWith('/terms') &&\n          !currentPath.startsWith('/privacy')) {\n        console.log('Not authenticated, redirecting to login from:', currentPath);\n        setLocation('/login');\n      }\n      return;\n    }\n\n    // Handle super admin routing - they get redirected immediately to admin dashboard\n    if (user.isSuperAdmin) {\n      const currentPath = window.location.pathname;\n      \n      // Super admins should NEVER see onboarding, tenant routes, or public pages\n      if (!currentPath.startsWith('/admin')) {\n        console.log('Super admin redirected from:', currentPath, 'to /admin/dashboard');\n        setLocation('/admin/dashboard');\n        return;\n      }\n      \n      return;\n    }\n\n    // Handle regular user routing\n    if (user.currentTenant) {\n      const currentPath = window.location.pathname;\n      \n      // If user is on admin routes, redirect to their tenant\n      if (currentPath.startsWith('/admin')) {\n        setLocation(`/t/${user.currentTenant.slug}/dashboard`);\n        return;\n      }\n      \n      // If user is on public routes after login, redirect to tenant\n      if (currentPath === '/' || currentPath === '/login' || currentPath === '/signup') {\n        setLocation(`/t/${user.currentTenant.slug}/dashboard`);\n        return;\n      }\n      \n      return;\n    }\n\n    // User has no tenant - redirect to onboarding\n    const currentPath = window.location.pathname;\n    if (!currentPath.startsWith('/onboarding') && !currentPath.startsWith('/verify-email')) {\n      setLocation('/onboarding');\n    }\n  }, [user, isLoading, setLocation]);\n\n  return { user, isLoading };\n}","size_bytes":2576},"client/src/pages/onboarding/index.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { CheckCircle2, Building2, Globe, ArrowRight, Sparkles, LogOut } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n// Using PostgreSQL-based authentication\n\ninterface AuthUser {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  isSuperAdmin: boolean;\n  currentTenant?: {\n    id: string;\n    slug: string;\n    role: string;\n  };\n}\n\nconst tenantSetupSchema = z.object({\n  tenantName: z.string().min(2, \"Business name must be at least 2 characters\"),\n  tenantSlug: z.string()\n    .min(3, \"Slug must be at least 3 characters\")\n    .max(30, \"Slug must be less than 30 characters\")\n    .regex(/^[a-z0-9-]+$/, \"Slug can only contain lowercase letters, numbers, and hyphens\"),\n  industry: z.string().min(1, \"Please select an industry\"),\n  contactName: z.string().min(2, \"Contact name must be at least 2 characters\"),\n  contactEmail: z.string().email(\"Please enter a valid email address\"),\n  businessPhone: z.string().min(10, \"Please enter a valid phone number\"),\n  businessAddress: z.string().min(10, \"Please enter your business address\"),\n  businessDescription: z.string().min(10, \"Please describe your business in at least 10 characters\"),\n  featurePackageSlug: z.string().min(1, \"Please select a plan\"),\n});\n\ntype TenantSetupData = z.infer<typeof tenantSetupSchema>;\n\nconst industries = [\n  \"Wedding Venues\",\n  \"Corporate Events\",\n  \"Party Halls\",\n  \"Conference Centers\",\n  \"Hotels & Resorts\",\n  \"Restaurants & Catering\",\n  \"Event Planning\",\n  \"Other\"\n];\n\nexport default function Onboarding() {\n  const [, setLocation] = useLocation();\n  const [currentStep, setCurrentStep] = useState(1);\n  const totalSteps = 5;\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include',\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Signed out\",\n        description: \"You have been signed out successfully\",\n      });\n      // Redirect to login page after logout\n      window.location.href = \"/login\";\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Sign out failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  // Use auth API to get user info\n  const { data: user, isLoading: userLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  // Fetch available feature packages (public endpoint)\n  const { data: featurePackages, isLoading: packagesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/public/plans\"],\n    retry: false,\n  });\n\n  // Super admin should NEVER reach onboarding - this is for tenant setup only\n  useEffect(() => {\n    if (!userLoading && user) {\n      console.log('Onboarding: checking user status', { \n        email: user.email, \n        isSuperAdmin: user.isSuperAdmin, \n        type: typeof user.isSuperAdmin \n      });\n      \n      // Never redirect regular users - they should complete onboarding\n      // Only super admin accounts (like yonasfasil.sl@gmail.com) should redirect away\n      if (user.isSuperAdmin === true && user.email === 'yonasfasil.sl@gmail.com') {\n        console.log('Confirmed super admin at onboarding, redirecting to admin dashboard');\n        setLocation('/admin/dashboard');\n        return;\n      }\n      \n      console.log('Regular user at onboarding - showing tenant setup form');\n    }\n  }, [user, userLoading, setLocation]);\n\n  const form = useForm<TenantSetupData>({\n    resolver: zodResolver(tenantSetupSchema),\n    defaultValues: {\n      tenantName: \"\",\n      tenantSlug: \"\",\n      industry: \"\",\n      contactName: \"\",\n      contactEmail: \"\",\n      businessPhone: \"\",\n      businessAddress: \"\",\n      businessDescription: \"\",\n      featurePackageSlug: \"\",\n    },\n  });\n\n  // Auto-generate slug from business name\n  const watchTenantName = form.watch(\"tenantName\");\n  \n  // Use useEffect to avoid setState during render\n  useEffect(() => {\n    if (watchTenantName && watchTenantName.length > 0) {\n      const slug = watchTenantName\n        .toLowerCase()\n        .replace(/[^a-z0-9\\s-]/g, \"\")\n        .replace(/\\s+/g, \"-\")\n        .replace(/^-+|-+$/g, \"\") // Remove leading/trailing hyphens\n        .substring(0, 30);\n      \n      // Only update if it's different and meets minimum length\n      const currentSlug = form.getValues(\"tenantSlug\");\n      if (slug !== currentSlug && slug.length >= 3) {\n        form.setValue(\"tenantSlug\", slug);\n      }\n    }\n  }, [watchTenantName, form]);\n\n  const createTenantMutation = useMutation({\n    mutationFn: async (data: TenantSetupData) => {\n      console.log('Sending tenant creation data:', data);\n      const response = await apiRequest(\"POST\", \"/api/onboarding/create-tenant\", data);\n      const result = await response.json();\n      console.log('Server response:', result);\n      return result;\n    },\n    onSuccess: async (data) => {\n      // The server already handles user updates, no need for additional client-side updates\n      \n      toast({\n        title: \"Welcome to VENUIN!\",\n        description: \"Your venue management system is ready to use.\",\n      });\n      \n      // Redirect to tenant dashboard\n      window.location.href = `/t/${data.tenantSlug}/app`;\n    },\n    onError: (error: Error) => {\n      console.error('Tenant creation error:', error);\n      let description = \"Please try again\";\n      \n      if (error.message.includes(\"409\")) {\n        description = \"Business name or URL is already taken\";\n      } else if (error.message.includes(\"Validation error\")) {\n        description = \"Please check all fields are filled out correctly\";\n      }\n      \n      toast({\n        title: \"Setup failed\",\n        description: description,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: TenantSetupData) => {\n    createTenantMutation.mutate(data);\n  };\n\n  const nextStep = () => {\n    if (currentStep < totalSteps) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  if (userLoading || packagesLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header with Logout */}\n        <div className=\"flex justify-between items-start mb-8\">\n          <div className=\"flex-1\" />\n          <div className=\"text-center flex-1\">\n            <div className=\"flex items-center justify-center gap-2 mb-4\">\n              <Sparkles className=\"h-8 w-8 text-blue-600\" />\n              <span className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                VENUIN\n              </span>\n            </div>\n            <h1 className=\"text-4xl font-bold text-gray-900 mb-2\">\n              Welcome, {user?.firstName || \"there\"}!\n            </h1>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              Let's set up your venue management system in just a few steps\n            </p>\n          </div>\n          <div className=\"flex-1 flex justify-end\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleLogout}\n              disabled={logoutMutation.isPending}\n              className=\"text-gray-600 hover:text-gray-900\"\n            >\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              {logoutMutation.isPending ? \"Signing out...\" : \"Sign out\"}\n            </Button>\n          </div>\n        </div>\n\n\n\n        {/* Progress */}\n        <div className=\"max-w-2xl mx-auto mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <span className=\"text-sm font-medium text-gray-700\">\n              Step {currentStep} of {totalSteps}\n            </span>\n            <span className=\"text-sm text-gray-500\">\n              {Math.round((currentStep / totalSteps) * 100)}% complete\n            </span>\n          </div>\n          <Progress value={(currentStep / totalSteps) * 100} className=\"h-2\" />\n        </div>\n\n        {/* Main Content */}\n        <div className=\"max-w-2xl mx-auto\">\n          {currentStep === 1 && (\n            <Card className=\"border-0 shadow-xl\">\n              <CardHeader className=\"text-center pb-6\">\n                <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Building2 className=\"h-8 w-8 text-blue-600\" />\n                </div>\n                <CardTitle className=\"text-2xl\">Tell us about your business</CardTitle>\n                <CardDescription className=\"text-lg\">\n                  We'll use this information to customize your experience\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"tenantName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-base font-semibold\">Business Name</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"e.g., Grand Oak Event Center\"\n                              className=\"h-12 text-base\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"tenantSlug\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-base font-semibold\">Your VENUIN URL</FormLabel>\n                          <FormControl>\n                            <div className=\"flex items-center\">\n                              <span className=\"text-gray-500 bg-gray-50 border border-r-0 rounded-l-md px-3 py-3 text-sm\">\n                                venuin.com/\n                              </span>\n                              <Input\n                                placeholder=\"grand-oak-events\"\n                                className=\"h-12 text-base rounded-l-none\"\n                                {...field}\n                              />\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex justify-end\">\n                      <Button \n                        type=\"button\" \n                        onClick={nextStep}\n                        disabled={!form.getValues(\"tenantName\") || !form.getValues(\"tenantSlug\")}\n                        className=\"h-12 px-8\"\n                      >\n                        Continue <ArrowRight className=\"ml-2 h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          )}\n\n          {currentStep === 2 && (\n            <Card className=\"border-0 shadow-xl\">\n              <CardHeader className=\"text-center pb-6\">\n                <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Globe className=\"h-8 w-8 text-purple-600\" />\n                </div>\n                <CardTitle className=\"text-2xl\">What's your industry?</CardTitle>\n                <CardDescription className=\"text-lg\">\n                  This helps us provide relevant features and templates\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"industry\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <div className=\"grid grid-cols-2 gap-3\">\n                            {industries.map((industry) => (\n                              <button\n                                key={industry}\n                                type=\"button\"\n                                onClick={() => {\n                                  field.onChange(industry);\n                                  nextStep();\n                                }}\n                                className={`p-4 text-left border rounded-lg hover:bg-blue-50 hover:border-blue-200 transition-colors ${\n                                  field.value === industry \n                                    ? \"bg-blue-50 border-blue-200 text-blue-700\" \n                                    : \"bg-white border-gray-200\"\n                                }`}\n                              >\n                                <div className=\"font-medium\">{industry}</div>\n                              </button>\n                            ))}\n                          </div>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex justify-between pt-4\">\n                      <Button type=\"button\" variant=\"outline\" onClick={prevStep} className=\"h-12 px-8\">\n                        Back\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Step 3: Choose Your Plan */}\n          {currentStep === 3 && (\n            <Card className=\"border-0 shadow-xl\">\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-2xl\">Choose Your Perfect Plan</CardTitle>\n                <CardDescription className=\"text-lg\">\n                  Select the features that best fit your venue's needs\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid gap-6\">\n                  {featurePackages?.map((pkg: any) => (\n                    <div \n                      key={pkg.id}\n                      className={`border-2 rounded-lg p-6 cursor-pointer transition-all ${\n                        form.watch(\"featurePackageSlug\") === pkg.slug\n                          ? 'border-blue-500 bg-blue-50'\n                          : 'border-gray-200 hover:border-gray-300'\n                      }`}\n                      onClick={() => form.setValue(\"featurePackageSlug\", pkg.slug)}\n                    >\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-3\">\n                            <h3 className=\"text-xl font-semibold\">{pkg.name}</h3>\n                            {pkg.popular && (\n                              <span className=\"bg-blue-500 text-white text-xs px-2 py-1 rounded-full\">\n                                Most Popular\n                              </span>\n                            )}\n                          </div>\n                          <p className=\"text-gray-600 mt-2\">{pkg.description}</p>\n                          <div className=\"mt-4\">\n                            <div className=\"text-2xl font-bold\">${pkg.priceMonthly}/month</div>\n                            <div className=\"text-sm text-gray-500\">\n                              ${pkg.priceYearly}/year (save ${(pkg.priceMonthly * 12) - pkg.priceYearly})\n                            </div>\n                          </div>\n                        </div>\n                        <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${\n                          form.watch(\"featurePackageSlug\") === pkg.slug\n                            ? 'border-blue-500 bg-blue-500'\n                            : 'border-gray-300'\n                        }`}>\n                          {form.watch(\"featurePackageSlug\") === pkg.slug && (\n                            <div className=\"w-2 h-2 bg-white rounded-full\" />\n                          )}\n                        </div>\n                      </div>\n                      \n                      {/* Feature highlights */}\n                      <div className=\"mt-4 grid grid-cols-2 gap-2 text-sm text-gray-600\">\n                        {Object.entries(pkg.features || {})\n                          .filter(([, enabled]: [string, any]) => enabled)\n                          .slice(0, 6)\n                          .map(([feature, ]: [string, any]) => (\n                            <div key={feature} className=\"flex items-center gap-2\">\n                              <div className=\"w-4 h-4 text-green-500\">✓</div>\n                              <span>{feature.replace(/-/g, ' ').replace(/^\\w/, c => c.toUpperCase())}</span>\n                            </div>\n                          ))\n                        }\n                        {Object.keys(pkg.features || {}).filter(([, enabled]: [string, any]) => enabled).length > 6 && (\n                          <div className=\"text-gray-500 col-span-2\">\n                            + {Object.keys(pkg.features || {}).filter(([, enabled]: [string, any]) => enabled).length - 6} more features\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                \n                <Form {...form}>\n                  <FormField\n                    control={form.control}\n                    name=\"featurePackageSlug\"\n                    render={({ field }) => (\n                      <FormItem className=\"mt-4\">\n                        <FormMessage />\n                        <input type=\"hidden\" {...field} />\n                      </FormItem>\n                    )}\n                  />\n                </Form>\n                \n                <div className=\"flex justify-between mt-8\">\n                  <Button type=\"button\" variant=\"outline\" onClick={prevStep} className=\"h-12 px-8\">\n                    Back\n                  </Button>\n                  <Button type=\"button\" onClick={nextStep} className=\"h-12 px-8\">\n                    Continue\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Step 4: Business Details */}\n          {currentStep === 4 && (\n            <Card className=\"border-0 shadow-xl\">\n              <CardHeader className=\"text-center pb-6\">\n                <div className=\"w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Building2 className=\"h-8 w-8 text-orange-600\" />\n                </div>\n                <CardTitle className=\"text-2xl\">Business Details</CardTitle>\n                <CardDescription className=\"text-lg\">\n                  Tell us more about your business so we can customize your experience\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form className=\"space-y-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"contactName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-base font-semibold\">Primary Contact Name</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"John Smith\"\n                              className=\"h-12 text-base\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"contactEmail\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-base font-semibold\">Contact Email</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"email\"\n                              placeholder=\"john@grandoakevents.com\"\n                              className=\"h-12 text-base\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"businessPhone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-base font-semibold\">Business Phone</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"tel\"\n                              placeholder=\"+1 (555) 123-4567\"\n                              className=\"h-12 text-base\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"businessAddress\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-base font-semibold\">Business Address</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"123 Main Street, City, State 12345\"\n                              className=\"h-12 text-base\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"businessDescription\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-base font-semibold\">Business Description</FormLabel>\n                          <FormControl>\n                            <textarea\n                              placeholder=\"Describe your venue, services, and what makes your business special...\"\n                              className=\"w-full h-24 px-3 py-3 text-base border rounded-md resize-none focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex justify-between\">\n                      <Button type=\"button\" variant=\"outline\" onClick={prevStep} className=\"h-12 px-8\">\n                        Back\n                      </Button>\n                      <Button \n                        type=\"button\" \n                        onClick={nextStep}\n                        disabled={!form.getValues(\"contactName\") || !form.getValues(\"contactEmail\") || !form.getValues(\"businessPhone\") || !form.getValues(\"businessAddress\") || !form.getValues(\"businessDescription\")}\n                        className=\"h-12 px-8\"\n                      >\n                        Continue <ArrowRight className=\"ml-2 h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Step 5: Ready to Launch */}\n          {currentStep === 5 && (\n            <Card className=\"border-0 shadow-xl\">\n              <CardHeader className=\"text-center pb-6\">\n                <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <CheckCircle2 className=\"h-8 w-8 text-green-600\" />\n                </div>\n                <CardTitle className=\"text-2xl\">Ready to launch!</CardTitle>\n                <CardDescription className=\"text-lg\">\n                  Review your information and create your venue management system\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center space-y-6\">\n                  <div className=\"bg-gray-50 rounded-lg p-6 text-left\">\n                    <h3 className=\"font-semibold mb-4\">Your Setup Summary:</h3>\n                    <div className=\"space-y-3 text-sm\">\n                      <div><strong>Business:</strong> {form.getValues(\"tenantName\")}</div>\n                      <div><strong>URL:</strong> venuin.com/{form.getValues(\"tenantSlug\")}</div>\n                      <div><strong>Industry:</strong> {form.getValues(\"industry\")}</div>\n                      <div><strong>Plan:</strong> {featurePackages?.find((pkg: any) => pkg.slug === form.getValues(\"featurePackageSlug\"))?.name || form.getValues(\"featurePackageSlug\")}</div>\n                      <div><strong>Contact:</strong> {form.getValues(\"contactName\")} ({form.getValues(\"contactEmail\")})</div>\n                      <div><strong>Phone:</strong> {form.getValues(\"businessPhone\")}</div>\n                      <div><strong>Address:</strong> {form.getValues(\"businessAddress\")}</div>\n                      <div><strong>Description:</strong> {form.getValues(\"businessDescription\")}</div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-between\">\n                    <Button type=\"button\" variant=\"outline\" onClick={prevStep} className=\"h-12 px-8\">\n                      Back\n                    </Button>\n                    <Button \n                      onClick={async () => {\n                        const isValid = await form.trigger();\n                        if (isValid) {\n                          onSubmit(form.getValues());\n                        } else {\n                          console.log('Form validation errors:', form.formState.errors);\n                          toast({\n                            title: \"Please check your information\",\n                            description: \"Some fields need to be completed correctly before proceeding.\",\n                            variant: \"destructive\",\n                          });\n                        }\n                      }}\n                      disabled={createTenantMutation.isPending}\n                      className=\"h-12 px-8\"\n                    >\n                      {createTenantMutation.isPending ? \"Creating...\" : \"Create My VENUIN System\"}\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":28487},"client/src/hooks/useFirebaseAuth.ts":{"content":"import { useState, useEffect } from 'react';\nimport { User } from 'firebase/auth';\nimport { onAuthChange } from '@/lib/firebase';\nimport { UserService } from '@/lib/firestore';\nimport type { UserDoc } from '@shared/firestore-schema';\n\nexport interface AuthUser extends UserDoc {\n  uid: string;\n  currentTenant?: {\n    id: string;\n    slug: string;\n    name: string;\n    role: string;\n  };\n}\n\nexport function useFirebaseAuth() {\n  const [user, setUser] = useState<AuthUser | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    console.log('Setting up Firebase auth listener...');\n    const unsubscribe = onAuthChange(async (firebaseUser: User | null) => {\n      console.log('Firebase auth state changed:', firebaseUser ? `User: ${firebaseUser.email}` : 'No user');\n      \n      try {\n        if (firebaseUser) {\n          console.log('Creating/updating user in Firestore...');\n          \n          // Create or update user in Firestore\n          const userData = {\n            email: firebaseUser.email!,\n            firstName: firebaseUser.displayName?.split(' ')[0] || '',\n            lastName: firebaseUser.displayName?.split(' ').slice(1).join(' ') || '',\n            emailVerified: firebaseUser.emailVerified,\n          };\n          \n          await UserService.createOrUpdateUser(userData);\n          \n          // Get the complete user data including super admin status\n          const firestoreUser = await UserService.getUserByEmail(firebaseUser.email!);\n          const isSuperAdmin = firestoreUser ? await UserService.checkIsSuperAdmin(firestoreUser.id) : false;\n          \n          // Get user's tenant relationship if they have one\n          let currentTenant = null;\n          if (!isSuperAdmin && firestoreUser) {\n            try {\n              const tenantUserSnapshot = await UserService.getUserTenant(firebaseUser.uid);\n              if (tenantUserSnapshot) {\n                currentTenant = {\n                  id: tenantUserSnapshot.tenantId,\n                  slug: tenantUserSnapshot.tenantSlug,\n                  name: tenantUserSnapshot.tenantName,\n                  role: tenantUserSnapshot.role,\n                };\n              }\n            } catch (error) {\n              console.error('Error fetching user tenant:', error);\n            }\n          }\n          \n          const authUser: AuthUser = {\n            uid: firebaseUser.uid,\n            id: firestoreUser?.id || firebaseUser.uid,\n            email: firebaseUser.email!,\n            firstName: firestoreUser?.firstName || userData.firstName,\n            lastName: firestoreUser?.lastName || userData.lastName,\n            emailVerified: firebaseUser.emailVerified,\n            isSuperAdmin,\n            currentTenant,\n            createdAt: firestoreUser?.createdAt || new Date(),\n            updatedAt: firestoreUser?.updatedAt || new Date(),\n          };\n          \n          setUser(authUser);\n          console.log('Firebase user authenticated and synced with Firestore:', authUser);\n          \n          // Sync session with backend for middleware compatibility\n          try {\n            const idToken = await firebaseUser.getIdToken();\n            const response = await fetch('/api/auth/sync-session', {\n              method: 'POST',\n              headers: {\n                'Authorization': `Bearer ${idToken}`,\n                'Content-Type': 'application/json',\n              },\n            });\n            \n            if (response.ok) {\n              console.log('Session synced successfully with backend');\n            } else {\n              console.error('Failed to sync session:', response.status);\n            }\n          } catch (sessionError) {\n            console.error('Error syncing session:', sessionError);\n          }\n        } else {\n          setUser(null);\n          console.log('User signed out');\n        }\n      } catch (error) {\n        console.error('Error syncing user with Firestore:', error);\n        setUser(null);\n      } finally {\n        setIsLoading(false);\n      }\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":4159},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged, User } from \"firebase/auth\";\nimport { getFirestore, connectFirestoreEmulator } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || \"AIzaSyA543_XOxgTQTb50BDKGGR4gV0SQYIxwRE\",\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID || \"venuine-519d3\"}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || \"venuine-519d3\",\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID || \"venuine-519d3\"}.firebasestorage.app`,\n  messagingSenderId: \"948784074321\",\n  appId: import.meta.env.VITE_FIREBASE_APP_ID || \"1:948784074321:web:f1351c2b98de55b5e7b270\",\n};\n\n// Debug configuration\nconsole.log('Firebase Config:', {\n  ...firebaseConfig,\n  apiKey: firebaseConfig.apiKey.substring(0, 10) + '...'\n});\n\n// Initialize Firebase\nlet app;\ntry {\n  app = initializeApp(firebaseConfig);\n  console.log('Firebase initialized successfully');\n} catch (error) {\n  console.error('Firebase initialization error:', error);\n  throw error;\n}\n\n// Initialize Firebase Auth\nexport const auth = getAuth(app);\n\n// Initialize Firestore\nexport const db = getFirestore(app);\n\n// Remove Google provider - using email/password only\n\n// Auth functions\nexport const signInWithEmailPassword = (email: string, password: string) => {\n  return signInWithEmailAndPassword(auth, email, password);\n};\n\nexport const signUpWithEmailPassword = (email: string, password: string) => {\n  return createUserWithEmailAndPassword(auth, email, password);\n};\n\nexport const logOut = () => {\n  return signOut(auth);\n};\n\nexport const onAuthChange = (callback: (user: User | null) => void) => {\n  return onAuthStateChanged(auth, callback);\n};\n\n// Export the app for other Firebase services\nexport default app;","size_bytes":1881},"client/src/lib/firestore.ts":{"content":"// Firestore database operations for VENUIN\nimport { \n  collection, \n  doc, \n  getDoc, \n  getDocs, \n  addDoc, \n  updateDoc, \n  deleteDoc, \n  query, \n  where, \n  orderBy, \n  limit,\n  onSnapshot,\n  serverTimestamp,\n  writeBatch,\n  QueryConstraint\n} from \"firebase/firestore\";\nimport { db } from \"./firebase\";\nimport { COLLECTIONS } from \"@shared/firestore-schema\";\nimport type {\n  UserDoc,\n  TenantDoc,\n  EventDoc,\n  CustomerDoc,\n  LeadDoc,\n  FeaturePackageDoc,\n  VenueDoc,\n  SpaceDoc,\n  ServiceDoc,\n  PackageDoc,\n  TaskDoc,\n  ProposalDoc,\n  SuperAdminDoc,\n  TenantUserDoc\n} from \"@shared/firestore-schema\";\n\n// Generic Firestore operations\nexport class FirestoreService {\n  // Generic CRUD operations\n  static async create<T>(collectionName: string, data: Omit<T, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {\n    const docData = {\n      ...data,\n      createdAt: serverTimestamp(),\n      updatedAt: serverTimestamp(),\n    };\n    \n    const docRef = await addDoc(collection(db, collectionName), docData);\n    return docRef.id;\n  }\n\n  static async get<T>(collectionName: string, id: string): Promise<T | null> {\n    const docRef = doc(db, collectionName, id);\n    const docSnap = await getDoc(docRef);\n    \n    if (docSnap.exists()) {\n      return { id: docSnap.id, ...docSnap.data() } as T;\n    }\n    return null;\n  }\n\n  static async update(collectionName: string, id: string, data: Record<string, any>): Promise<void> {\n    const docRef = doc(db, collectionName, id);\n    await updateDoc(docRef, {\n      ...data,\n      updatedAt: serverTimestamp(),\n    });\n  }\n\n  static async delete(collectionName: string, id: string): Promise<void> {\n    const docRef = doc(db, collectionName, id);\n    await deleteDoc(docRef);\n  }\n\n  static async list<T>(collectionName: string, constraints: QueryConstraint[] = []): Promise<T[]> {\n    const q = query(collection(db, collectionName), ...constraints);\n    const querySnapshot = await getDocs(q);\n    \n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    })) as T[];\n  }\n\n  static subscribe<T>(\n    collectionName: string, \n    callback: (docs: T[]) => void, \n    constraints: QueryConstraint[] = []\n  ) {\n    const q = query(collection(db, collectionName), ...constraints);\n    \n    return onSnapshot(q, (querySnapshot) => {\n      const docs = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as T[];\n      callback(docs);\n    });\n  }\n}\n\n// User operations\nexport class UserService {\n  static async createOrUpdateUser(userData: Partial<UserDoc>): Promise<string> {\n    if (userData.email) {\n      // Check if user already exists\n      const existingUsers = await FirestoreService.list<UserDoc>(\n        COLLECTIONS.USERS,\n        [where('email', '==', userData.email)]\n      );\n\n      if (existingUsers.length > 0) {\n        // Update existing user\n        await FirestoreService.update(COLLECTIONS.USERS, existingUsers[0].id, userData);\n        return existingUsers[0].id;\n      }\n    }\n\n    // Create new user\n    return await FirestoreService.create<UserDoc>(COLLECTIONS.USERS, userData as Omit<UserDoc, 'id' | 'createdAt' | 'updatedAt'>);\n  }\n\n  static async getUserByEmail(email: string): Promise<UserDoc | null> {\n    const users = await FirestoreService.list<UserDoc>(\n      COLLECTIONS.USERS,\n      [where('email', '==', email), limit(1)]\n    );\n    return users.length > 0 ? users[0] : null;\n  }\n\n  static async checkIsSuperAdmin(userId: string): Promise<boolean> {\n    const superAdmins = await FirestoreService.list<SuperAdminDoc>(\n      COLLECTIONS.SUPER_ADMINS,\n      [where('userId', '==', userId)]\n    );\n    return superAdmins.length > 0;\n  }\n\n  static async setSuperAdmin(userId: string): Promise<void> {\n    await FirestoreService.create<SuperAdminDoc>(COLLECTIONS.SUPER_ADMINS, {\n      userId,\n    });\n  }\n\n  static async getUserTenant(userId: string): Promise<{tenantId: string, tenantSlug: string, tenantName: string, role: string} | null> {\n    // First, check if user document has tenant info directly (onboarding flow)\n    const userDoc = await FirestoreService.get<any>(COLLECTIONS.USERS, userId);\n    \n    if (userDoc?.tenantId && userDoc?.tenantSlug && userDoc?.role) {\n      return {\n        tenantId: userDoc.tenantId,\n        tenantSlug: userDoc.tenantSlug,\n        tenantName: userDoc.tenantSlug, // Use slug as name fallback\n        role: userDoc.role,\n      };\n    }\n    \n    // Fallback: check tenant_users collection (signup flow)\n    const tenantUsers = await FirestoreService.list<TenantUserDoc>(\n      COLLECTIONS.TENANT_USERS,\n      [where('userId', '==', userId), limit(1)]\n    );\n    \n    if (tenantUsers.length === 0) return null;\n    \n    const tenantUser = tenantUsers[0];\n    \n    // Get tenant details\n    const tenant = await FirestoreService.get<TenantDoc>(COLLECTIONS.TENANTS, tenantUser.tenantId);\n    \n    if (!tenant) return null;\n    \n    return {\n      tenantId: tenant.id,\n      tenantSlug: tenant.slug,\n      tenantName: tenant.name,\n      role: tenantUser.role,\n    };\n  }\n}\n\n// Tenant operations  \nexport class TenantService {\n  static async createTenant(tenantData: Omit<TenantDoc, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {\n    return await FirestoreService.create<TenantDoc>(COLLECTIONS.TENANTS, tenantData);\n  }\n\n  static async getTenantBySlug(slug: string): Promise<TenantDoc | null> {\n    const tenants = await FirestoreService.list<TenantDoc>(\n      COLLECTIONS.TENANTS,\n      [where('slug', '==', slug), limit(1)]\n    );\n    return tenants.length > 0 ? tenants[0] : null;\n  }\n\n  static async getUserTenants(userId: string): Promise<TenantDoc[]> {\n    // First get tenant user relationships\n    const tenantUsers = await FirestoreService.list<TenantUserDoc>(\n      COLLECTIONS.TENANT_USERS,\n      [where('userId', '==', userId)]\n    );\n\n    if (tenantUsers.length === 0) return [];\n\n    // Get tenant details\n    const tenantPromises = tenantUsers.map(tu => \n      FirestoreService.get<TenantDoc>(COLLECTIONS.TENANTS, tu.tenantId)\n    );\n    \n    const tenants = await Promise.all(tenantPromises);\n    return tenants.filter(Boolean) as TenantDoc[];\n  }\n\n  static async addUserToTenant(tenantId: string, userId: string, role: TenantUserDoc['role'] = 'staff'): Promise<void> {\n    await FirestoreService.create<TenantUserDoc>(COLLECTIONS.TENANT_USERS, {\n      tenantId,\n      userId,\n      role,\n      permissions: {},\n      scopes: {},\n    });\n  }\n\n  static async getUserRole(tenantId: string, userId: string): Promise<string | null> {\n    const tenantUsers = await FirestoreService.list<TenantUserDoc>(\n      COLLECTIONS.TENANT_USERS,\n      [where('tenantId', '==', tenantId), where('userId', '==', userId)]\n    );\n    return tenantUsers.length > 0 ? tenantUsers[0].role : null;\n  }\n}\n\n// Feature Package operations\nexport class FeaturePackageService {\n  static async listActivePackages(): Promise<FeaturePackageDoc[]> {\n    return await FirestoreService.list<FeaturePackageDoc>(\n      COLLECTIONS.FEATURE_PACKAGES,\n      [where('status', '==', 'active'), orderBy('sortOrder')]\n    );\n  }\n\n  static async getPackageBySlug(slug: string): Promise<FeaturePackageDoc | null> {\n    const packages = await FirestoreService.list<FeaturePackageDoc>(\n      COLLECTIONS.FEATURE_PACKAGES,\n      [where('slug', '==', slug), limit(1)]\n    );\n    return packages.length > 0 ? packages[0] : null;\n  }\n\n  static async createPackage(packageData: Omit<FeaturePackageDoc, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {\n    return await FirestoreService.create<FeaturePackageDoc>(COLLECTIONS.FEATURE_PACKAGES, packageData);\n  }\n}\n\n// Event operations\nexport class EventService {\n  static async getTenantEvents(tenantId: string, limitNum: number = 50): Promise<EventDoc[]> {\n    return await FirestoreService.list<EventDoc>(\n      COLLECTIONS.EVENTS,\n      [where('tenantId', '==', tenantId), orderBy('startDate', 'desc'), limit(limitNum)]\n    );\n  }\n\n  static async createEvent(tenantId: string, eventData: Omit<EventDoc, 'id' | 'tenantId' | 'createdAt' | 'updatedAt'>): Promise<string> {\n    return await FirestoreService.create<EventDoc>(COLLECTIONS.EVENTS, {\n      ...eventData,\n      tenantId,\n    });\n  }\n}\n\n// Customer operations  \nexport class CustomerService {\n  static async getTenantCustomers(tenantId: string): Promise<CustomerDoc[]> {\n    return await FirestoreService.list<CustomerDoc>(\n      COLLECTIONS.CUSTOMERS,\n      [where('tenantId', '==', tenantId), orderBy('createdAt', 'desc')]\n    );\n  }\n\n  static async createCustomer(tenantId: string, customerData: Omit<CustomerDoc, 'id' | 'tenantId' | 'createdAt' | 'updatedAt' | 'totalBookings' | 'totalSpent'>): Promise<string> {\n    return await FirestoreService.create<CustomerDoc>(COLLECTIONS.CUSTOMERS, {\n      ...customerData,\n      tenantId,\n      totalBookings: 0,\n      totalSpent: 0,\n    });\n  }\n}\n\n// Lead operations\nexport class LeadService {\n  static async getTenantLeads(tenantId: string): Promise<LeadDoc[]> {\n    return await FirestoreService.list<LeadDoc>(\n      COLLECTIONS.LEADS,\n      [where('tenantId', '==', tenantId), orderBy('createdAt', 'desc')]\n    );\n  }\n\n  static async createLead(tenantId: string, leadData: Omit<LeadDoc, 'id' | 'tenantId' | 'createdAt' | 'updatedAt'>): Promise<string> {\n    return await FirestoreService.create<LeadDoc>(COLLECTIONS.LEADS, {\n      ...leadData,\n      tenantId,\n    });\n  }\n}\n\n// Venue operations\nexport class VenueService {\n  static async getTenantVenues(tenantId: string): Promise<VenueDoc[]> {\n    return await FirestoreService.list<VenueDoc>(\n      COLLECTIONS.VENUES,\n      [where('tenantId', '==', tenantId), where('isActive', '==', true)]\n    );\n  }\n\n  static async createVenue(tenantId: string, venueData: Omit<VenueDoc, 'id' | 'tenantId' | 'createdAt' | 'updatedAt'>): Promise<string> {\n    return await FirestoreService.create<VenueDoc>(COLLECTIONS.VENUES, {\n      ...venueData,\n      tenantId,\n    });\n  }\n}\n\n// Task operations\nexport class TaskService {\n  static async getTenantTasks(tenantId: string): Promise<TaskDoc[]> {\n    return await FirestoreService.list<TaskDoc>(\n      COLLECTIONS.TASKS,\n      [where('tenantId', '==', tenantId), orderBy('createdAt', 'desc')]\n    );\n  }\n\n  static async createTask(tenantId: string, taskData: Omit<TaskDoc, 'id' | 'tenantId' | 'createdAt' | 'updatedAt'>): Promise<string> {\n    return await FirestoreService.create<TaskDoc>(COLLECTIONS.TASKS, {\n      ...taskData,\n      tenantId,\n    });\n  }\n}","size_bytes":10448},"client/src/pages/firebase-login.tsx":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { signInWithEmailPassword } from '@/lib/firebase';\nimport { useFirebaseAuth } from '@/hooks/useFirebaseAuth';\nimport { Calendar, LogIn } from 'lucide-react';\nimport { toast } from '@/hooks/use-toast';\n\nexport default function FirebaseLogin() {\n  const [, setLocation] = useLocation();\n  const { user, isLoading } = useFirebaseAuth();\n\n  // This component is deprecated - use /login instead\n\n  // Redirect if already authenticated\n  useEffect(() => {\n    if (!isLoading && user) {\n      setLocation('/firebase-dashboard');\n    }\n  }, [user, isLoading, setLocation]);\n\n  const handleEmailSignIn = async () => {\n    try {\n      // This is a deprecated component - redirect to new login\n      setLocation('/login');\n    } catch (error: any) {\n      toast({\n        title: \"Sign in failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <Calendar className=\"h-8 w-8 text-blue-600\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Welcome to VENUIN</CardTitle>\n          <CardDescription>\n            Sign in with Google to access your venue management dashboard\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Button \n            onClick={handleGoogleSignIn}\n            className=\"w-full flex items-center gap-2\"\n            size=\"lg\"\n          >\n            <LogIn className=\"h-5 w-5\" />\n            Sign in with Google\n          </Button>\n          \n          {/* Status Message */}\n          <div className=\"mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n            <p className=\"text-sm text-blue-800\">\n              <strong>Firebase Setup Status:</strong> \n              {import.meta.env.VITE_FIREBASE_API_KEY ? \n                \" ✅ Firebase configured and ready!\" : \n                \" ⚠️ Waiting for Firebase configuration...\"\n              }\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2683},"AUTHENTICATION_ARCHITECTURE.md":{"content":"# VENUIN Authentication Architecture\n\n## Clean Authentication Structure\n\n### 1. Single Authentication System\n**One login system for all user types with role-based routing:**\n\n```\nPOST /api/auth/login (for ALL users)\n├── Super Admin → /admin/* (platform management)\n├── Tenant Owner → /t/:slug/* (tenant management)  \n├── Tenant User → /t/:slug/* (limited access)\n└── Unverified → /verify-email\n```\n\n### 2. User Types & Roles\n\n**Super Admin:**\n- Email: eyosiasyimer@gmail.com (protected)\n- Role: `super_admin`\n- Access: Platform management, tenant oversight\n- Routes: `/admin/*` (clean, professional URLs)\n\n**Tenant Owner:**\n- Created during signup with tenant\n- Role: `owner`\n- Access: Full tenant management\n- Routes: `/t/:slug/*`\n\n**Tenant Users:**\n- Invited by tenant owners\n- Roles: `admin`, `manager`, `staff`, `viewer`\n- Access: Role-based tenant features\n- Routes: `/t/:slug/*`\n\n### 3. Simplified User Journey\n\n**New Customer Signup:**\n```\n1. Visit /pricing → Select plan\n2. /signup → Create account + tenant + subscription\n3. /verify-email → Email verification\n4. Automatic redirect to /t/company-slug/dashboard\n```\n\n**Super Admin Access:**\n```\n1. /login → Enter super admin credentials\n2. Automatic redirect to /admin/dashboard\n```\n\n**Team Member Invitation:**\n```\n1. Tenant owner invites via /t/:slug/team\n2. Invitee gets email with /invite/:token link\n3. Sets password and joins tenant\n4. Access to /t/:slug/* based on role\n```\n\n### 4. Clean URL Structure\n\n**Public:**\n- `/` - Marketing homepage\n- `/features` - Feature showcase\n- `/pricing` - Pricing plans\n- `/login` - Universal login\n- `/signup` - Customer signup\n\n**Platform Admin:**\n- `/admin/dashboard` - Platform overview\n- `/admin/tenants` - Tenant management\n- `/admin/users` - User management\n- `/admin/billing` - Platform billing\n- `/admin/analytics` - Platform analytics\n\n**Tenant App:**\n- `/t/:slug/dashboard` - Tenant dashboard\n- `/t/:slug/events` - Event management\n- `/t/:slug/customers` - Customer management\n- `/t/:slug/team` - Team management\n- `/t/:slug/settings` - Tenant settings\n\n### 5. Database Structure\n\n**users table:**\n```sql\n- id (primary key)\n- email (unique)\n- password_hash\n- first_name\n- last_name\n- email_verified\n- created_at\n- updated_at\n```\n\n**super_admins table:**\n```sql\n- user_id (foreign key to users)\n- created_at\n```\n\n**tenants table:**\n```sql\n- id (primary key)\n- name\n- slug (unique)\n- status (active/suspended)\n- plan_id\n- created_at\n```\n\n**tenant_users table:**\n```sql\n- id (primary key)\n- tenant_id (foreign key)\n- user_id (foreign key)\n- role (owner/admin/manager/staff/viewer)\n- status (active/inactive)\n- invited_at\n- joined_at\n```\n\n### 6. Session Management\n\n**Single session structure:**\n```typescript\ninterface UserSession {\n  userId: string;\n  email: string;\n  isSuperAdmin: boolean;\n  currentTenant?: {\n    id: string;\n    slug: string;\n    role: string;\n  };\n}\n```\n\n### 7. Middleware Chain\n\n**Authentication Flow:**\n```\n1. isAuthenticated() - Check valid session\n2. isSuperAdmin() - Check super admin status\n3. tenantContext() - Load tenant context for tenant routes\n4. requireRole() - Enforce role permissions\n```\n\n## Benefits of This Structure:\n\n✅ **Single Login System** - One `/login` for all users\n✅ **Clear User Roles** - Explicit role hierarchy\n✅ **Professional URLs** - No hidden admin URLs\n✅ **Simplified Onboarding** - Signup creates everything at once\n✅ **Scalable Team Management** - Easy to add team members\n✅ **Clear Separation** - Platform admin vs tenant management\n✅ **Better Security** - Role-based access throughout\n✅ **Easier Maintenance** - Less complex middleware logic\n\n## Implementation Priority:\n\n1. Consolidate authentication routes\n2. Implement single session structure\n3. Create clean URL structure\n4. Simplify middleware chain\n5. Update frontend routing\n6. Test all user flows","size_bytes":3879},"STRIPE_INTEGRATION_GUIDE.md":{"content":"# Stripe Integration Guide for VENUIN Superadmin\n\n## Overview\nVENUIN uses Stripe for both subscription billing (Stripe Billing) and client payment processing (Stripe Connect). This guide covers how to integrate Stripe into your superadmin console.\n\n## Step 1: Get Your Stripe API Keys\n\n1. Go to [Stripe Dashboard](https://dashboard.stripe.com/apikeys)\n2. Copy your **Publishable key** (starts with `pk_`) - this is safe to be public\n3. Copy your **Secret key** (starts with `sk_`) - this must be kept secret\n\n## Step 2: Set Environment Variables\n\nYou need to set these secrets in your Replit environment:\n\n- `STRIPE_SECRET_KEY` - Your secret key (starts with `sk_`)\n- `VITE_STRIPE_PUBLIC_KEY` - Your publishable key (starts with `pk_`)\n\n## Step 3: Create Products and Prices in Stripe\n\nFor each feature package you create in VENUIN:\n\n1. **Create a Product in Stripe:**\n   - Go to [Stripe Products](https://dashboard.stripe.com/products)\n   - Click \"Add product\"\n   - Name: Match your VENUIN package name (e.g., \"Professional Plan\")\n   - Description: Brief description of the package\n\n2. **Create Pricing for the Product:**\n   - Add pricing for Monthly billing\n   - Add pricing for Yearly billing (usually 10-15% discount)\n   - Copy the Price IDs (start with `price_`) - you'll need these\n\n## Step 4: Superadmin Stripe Features\n\nOnce integrated, your superadmin will have these Stripe capabilities:\n\n### Subscription Management\n- **View Customer Subscriptions**: See all tenant subscription statuses\n- **Manage Billing Issues**: Handle failed payments, update payment methods\n- **Process Refunds**: Issue refunds through the platform\n- **Upgrade/Downgrade Plans**: Change tenant subscription levels\n\n### Revenue Analytics\n- **Monthly Recurring Revenue (MRR)**: Track subscription income\n- **Customer Lifetime Value**: Analyze tenant value over time  \n- **Churn Analysis**: Monitor subscription cancellations\n- **Revenue Forecasting**: Predict future income\n\n### Automated Features\n- **Failed Payment Handling**: Automatic retry and suspension logic\n- **Invoice Generation**: Automated invoice creation and delivery\n- **Proration Handling**: Automatic pro-rated billing for plan changes\n- **Tax Calculation**: Automatic tax calculation based on location\n\n## Step 5: Stripe Connect for Client Payments\n\nVENUIN also uses Stripe Connect so tenants can accept payments from their clients:\n\n### Connect Account Management\n- **Onboard Venues**: Help tenants set up Stripe Connect accounts\n- **Monitor Payouts**: Track venue earnings and payout schedules\n- **Handle Disputes**: Manage chargebacks and refunds for venues\n- **Compliance Monitoring**: Ensure venues meet Stripe's requirements\n\n### Platform Revenue\n- **Application Fees**: Take a percentage of each venue booking\n- **Subscription + Transaction Model**: Combine monthly subscriptions with per-transaction fees\n\n## Step 6: Testing Your Integration\n\n### Test Mode Setup\n1. Use Stripe test keys for development\n2. Create test products and prices\n3. Use test card numbers (4242424242424242)\n4. Verify webhooks are working properly\n\n### Live Mode Checklist\n- [ ] Live API keys configured\n- [ ] Products and prices created in live mode\n- [ ] Webhooks configured for production URL\n- [ ] Tax settings configured\n- [ ] Bank account added for payouts\n\n## Step 7: Advanced Features\n\n### Webhooks\nSet up webhooks to handle:\n- `invoice.payment_succeeded` - Successful subscription payments\n- `invoice.payment_failed` - Failed subscription payments  \n- `customer.subscription.updated` - Plan changes\n- `customer.subscription.deleted` - Cancellations\n\n### Analytics Integration\nConnect Stripe data to your superadmin dashboard:\n- Real-time revenue metrics\n- Subscription health monitoring\n- Customer payment behavior analysis\n- Automated alerts for billing issues\n\n## Security Best Practices\n\n1. **Never expose secret keys** - Only use in server-side code\n2. **Use webhook signing** - Verify webhook authenticity\n3. **Implement proper error handling** - Handle all Stripe exceptions\n4. **Monitor for suspicious activity** - Set up Stripe Radar\n5. **Regular security audits** - Review access logs and permissions\n\n## Support Resources\n\n- [Stripe Documentation](https://stripe.com/docs)\n- [Stripe Connect Guide](https://stripe.com/docs/connect)\n- [Stripe Billing Docs](https://stripe.com/docs/billing)\n- [Webhook Testing Tool](https://stripe.com/docs/webhooks/test)\n\n---\n\n*This guide covers the complete Stripe integration for VENUIN's SaaS platform. For specific implementation details, refer to the codebase examples in `/server/routes/billing.ts` and `/client/src/pages/billing/`.*","size_bytes":4621},"test_package_creation.js":{"content":"// Test script to verify package creation API endpoint\nimport pkg from 'pg';\nconst { Pool } = pkg;\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n});\n\nasync function testPackageCreation() {\n  try {\n    console.log('🧪 Testing package creation...\\n');\n    \n    // Test 1: Check if super_admins table exists and has the right user\n    console.log('1. Checking super admin user...');\n    const adminCheck = await pool.query(`\n      SELECT user_id, created_at FROM super_admins \n      WHERE user_id = 'a2dd806f-ef70-41f5-a3d7-2c8e423a8b2c'\n    `);\n    console.log('Super admin found:', adminCheck.rows[0] || 'No admin found');\n\n    // Test 2: Check feature_packages table structure\n    console.log('\\n2. Checking feature_packages table structure...');\n    const tableInfo = await pool.query(`\n      SELECT column_name, data_type, is_nullable \n      FROM information_schema.columns \n      WHERE table_name = 'feature_packages' \n      ORDER BY ordinal_position\n    `);\n    console.log('Table columns:');\n    tableInfo.rows.forEach(col => {\n      console.log(`  ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable})`);\n    });\n\n    // Test 3: Direct package insertion\n    console.log('\\n3. Testing direct package creation...');\n    const testPackage = {\n      name: 'Test API Package',\n      slug: 'test-api-package',\n      description: 'A test package created via direct API',\n      status: 'active',\n      limits: JSON.stringify({\n        maxUsers: 10,\n        maxVenues: 2,\n        maxSpacesPerVenue: 15\n      }),\n      features: JSON.stringify({\n        'dashboard-analytics': true,\n        'event-management': true,\n        'customer-management': true\n      }),\n      priceMonthly: 49.99,\n      priceYearly: 499.99,\n      billingModes: JSON.stringify({\n        monthly: { amount: 4999, currency: 'USD' },\n        yearly: { amount: 49999, currency: 'USD' }\n      }),\n      sortOrder: 0,\n      trialDays: 14\n    };\n\n    const insertResult = await pool.query(`\n      INSERT INTO feature_packages (\n        name, slug, description, status, limits, features,\n        price_monthly, price_yearly, billing_modes, sort_order, trial_days\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\n      RETURNING *\n    `, [\n      testPackage.name,\n      testPackage.slug, \n      testPackage.description,\n      testPackage.status,\n      testPackage.limits,\n      testPackage.features,\n      testPackage.priceMonthly,\n      testPackage.priceYearly,\n      testPackage.billingModes,\n      testPackage.sortOrder,\n      testPackage.trialDays\n    ]);\n\n    console.log('✅ Package created successfully!');\n    console.log('Created package ID:', insertResult.rows[0].id);\n    \n    // Test 4: Verify package can be retrieved\n    console.log('\\n4. Verifying package retrieval...');\n    const retrieveResult = await pool.query(`\n      SELECT id, name, slug, description, price_monthly, price_yearly\n      FROM feature_packages \n      WHERE slug = 'test-api-package'\n    `);\n    console.log('Retrieved package:', retrieveResult.rows[0]);\n\n    console.log('\\n🎉 All tests passed! Package creation API should work.');\n\n  } catch (error) {\n    console.error('❌ Test failed:', error.message);\n    console.error('Error details:', error);\n  } finally {\n    await pool.end();\n  }\n}\n\ntestPackageCreation();","size_bytes":3322},"server/firebase-admin.ts":{"content":"import { initializeApp, getApps, cert, applicationDefault } from 'firebase-admin/app';\nimport { getFirestore } from 'firebase-admin/firestore';\nimport { getAuth } from 'firebase-admin/auth';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n// Simple fallback using client SDK for database operations\nimport { initializeApp as clientInitializeApp } from 'firebase/app';\nimport { getFirestore as clientGetFirestore } from 'firebase/firestore';\n\n// Initialize Firebase Admin SDK\nlet app;\n\n// Create temporary service account file for Firebase Admin\nfunction createTempServiceAccountFile() {\n  if (!process.env.FIREBASE_SERVICE_ACCOUNT_KEY) {\n    throw new Error('FIREBASE_SERVICE_ACCOUNT_KEY environment variable is not set');\n  }\n\n  const serviceAccountData = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT_KEY);\n  \n  // Write to temporary file\n  const tempFilePath = path.join(process.cwd(), 'temp-service-account.json');\n  fs.writeFileSync(tempFilePath, JSON.stringify(serviceAccountData, null, 2));\n  \n  return { serviceAccountData, tempFilePath };\n}\n\nif (getApps().length === 0) {\n  try {\n    console.log('Initializing Firebase Admin with service account file...');\n    const { serviceAccountData, tempFilePath } = createTempServiceAccountFile();\n    console.log('Service account file created, project_id:', serviceAccountData.project_id);\n    \n    // Set environment variable for Firebase Admin to find the service account\n    process.env.GOOGLE_APPLICATION_CREDENTIALS = tempFilePath;\n    \n    app = initializeApp({\n      credential: applicationDefault(),\n      projectId: serviceAccountData.project_id,\n    });\n    \n    console.log('Firebase Admin initialized successfully with service account file');\n    \n    // Clean up temp file after successful initialization\n    setTimeout(() => {\n      try {\n        fs.unlinkSync(tempFilePath);\n        console.log('Temporary service account file cleaned up');\n      } catch (e: any) {\n        console.warn('Could not clean up temporary service account file:', e.message);\n      }\n    }, 1000);\n    \n  } catch (error) {\n    console.error('Failed to initialize Firebase Admin:', error);\n    \n    // Fallback: try with cert() method \n    try {\n      console.log('Trying fallback cert() method...');\n      const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT_KEY!);\n      \n      // Ensure private key formatting\n      if (serviceAccount.private_key && !serviceAccount.private_key.includes('\\n')) {\n        serviceAccount.private_key = serviceAccount.private_key.replace(/\\\\n/g, '\\n');\n      }\n      \n      app = initializeApp({\n        credential: cert(serviceAccount),\n        projectId: serviceAccount.project_id,\n      });\n      \n      console.log('Firebase Admin initialized with fallback cert method');\n    } catch (fallbackError) {\n      console.error('Fallback also failed:', fallbackError);\n      throw fallbackError;\n    }\n  }\n} else {\n  app = getApps()[0];\n  console.log('Using existing Firebase Admin app');\n}\n\n// Export Firebase Admin instances with proper typing\nexport let adminDb: any;\nexport let adminAuth: any;\n\ntry {\n  adminDb = getFirestore(app);\n  adminAuth = getAuth(app);\n  console.log('Firebase Admin services initialized');\n} catch (error) {\n  console.warn('Firebase Admin services failed to initialize, using fallback');\n  \n  // Fallback to client SDK for basic operations\n  const clientApp = clientInitializeApp({\n    apiKey: process.env.VITE_FIREBASE_API_KEY,\n    authDomain: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n    projectId: process.env.VITE_FIREBASE_PROJECT_ID,\n    storageBucket: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n    messagingSenderId: \"948784074321\",\n    appId: process.env.VITE_FIREBASE_APP_ID\n  }, 'admin-fallback');\n  \n  adminDb = clientGetFirestore(clientApp);\n  adminAuth = null; // Auth operations will need to be handled differently\n}\n\n// Helper function to verify Firebase ID tokens\nexport async function verifyIdToken(idToken: string) {\n  try {\n    if (!adminAuth) {\n      console.warn('Admin Auth not available, skipping token verification');\n      return null;\n    }\n    const decodedToken = await adminAuth.verifyIdToken(idToken);\n    return decodedToken;\n  } catch (error) {\n    console.error('Error verifying ID token:', error);\n    return null;\n  }\n}\n\n// Helper function to get user data from Firestore\nexport async function getFirestoreUser(uid: string) {\n  try {\n    const userDoc = await adminDb.collection('users').doc(uid).get();\n    if (userDoc.exists) {\n      return { uid, ...userDoc.data() };\n    }\n    return null;\n  } catch (error) {\n    console.error('Error getting user from Firestore:', error);\n    return null;\n  }\n}","size_bytes":4702},"server/firestore-setup.ts":{"content":"import { adminDb } from './firebase-admin';\n\nexport async function setupInitialData() {\n  console.log('Setting up initial Firestore data...');\n  \n  try {\n    // Create initial super admin user document\n    await adminDb.collection('users').doc('yonasfasil.sl@gmail.com').set({\n      email: 'yonasfasil.sl@gmail.com',\n      isSuperAdmin: true,\n      role: 'super_admin',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }, { merge: true });\n\n    // Create some sample feature packages\n    const samplePackages = [\n      {\n        id: 'starter',\n        name: 'Starter',\n        description: 'Perfect for small venues getting started',\n        features: {\n          venues: true,\n          bookings: true,\n          customers: true,\n          basic_reporting: true\n        },\n        limits: {\n          staff: 3,\n          venues: 1\n        },\n        priceMonthly: 29,\n        price_monthly: 29,\n        status: 'active',\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 'professional',\n        name: 'Professional',\n        description: 'Advanced features for growing businesses',\n        features: {\n          venues: true,\n          bookings: true,\n          customers: true,\n          leads: true,\n          proposals: true,\n          payments: true,\n          reporting: true\n        },\n        limits: {\n          staff: 10,\n          venues: 3\n        },\n        priceMonthly: 79,\n        price_monthly: 79,\n        status: 'active',\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ];\n\n    for (const pkg of samplePackages) {\n      await adminDb.collection('featurePackages').doc(pkg.id).set(pkg, { merge: true });\n    }\n\n    console.log('Initial Firestore data setup completed successfully');\n  \n  // Initialize default feature packages\n  const { initializeDefaultPackages } = await import('./firebase-init-packages');\n  await initializeDefaultPackages();\n  } catch (error) {\n    console.error('Error setting up initial data:', error);\n  }\n}\n\n// Run setup if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  setupInitialData();\n}","size_bytes":2187},"server/storage-old.ts":{"content":"import { \n  type User, type InsertUser,\n  type Venue, type InsertVenue,\n  type Space, type InsertSpace,\n  type SetupStyle, type InsertSetupStyle,\n  type Customer, type InsertCustomer,\n  type Contract, type InsertContract,\n  type Booking, type InsertBooking,\n  type Proposal, type InsertProposal,\n  type Payment, type InsertPayment,\n  type Task, type InsertTask,\n  type AiInsight, type InsertAiInsight,\n  type Package, type InsertPackage,\n  type Service, type InsertService,\n  type TaxSetting, type InsertTaxSetting,\n  type Communication, type InsertCommunication,\n  type CampaignSource, type InsertCampaignSource,\n  type Tag, type InsertTag,\n  type Lead, type InsertLead,\n  type LeadActivity, type InsertLeadActivity,\n  type LeadTask, type InsertLeadTask,\n  type Tour, type InsertTour,\n\n} from \"@shared/schema\";\n\n// Additional types for new features\n\ninterface Setting {\n  id: string;\n  key: string;\n  value: any;\n  updatedAt: Date;\n}\n\ninterface InsertSetting {\n  key: string;\n  value: any;\n}\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined>;\n\n  // Venues\n  getVenues(): Promise<Venue[]>;\n  getVenue(id: string): Promise<Venue | undefined>;\n  createVenue(venue: InsertVenue): Promise<Venue>;\n  updateVenue(id: string, venue: Partial<InsertVenue>): Promise<Venue | undefined>;\n\n  // Spaces\n  getSpaces(): Promise<Space[]>;\n  getSpace(id: string): Promise<Space | undefined>;\n  getSpacesByVenue(venueId: string): Promise<Space[]>;\n  createSpace(space: InsertSpace): Promise<Space>;\n  updateSpace(id: string, space: Partial<InsertSpace>): Promise<Space | undefined>;\n\n  // Setup Styles\n  getSetupStyles(): Promise<SetupStyle[]>;\n  getSetupStyle(id: string): Promise<SetupStyle | undefined>;\n  createSetupStyle(setupStyle: InsertSetupStyle): Promise<SetupStyle>;\n  updateSetupStyle(id: string, setupStyle: Partial<InsertSetupStyle>): Promise<SetupStyle | undefined>;\n  deleteSetupStyle(id: string): Promise<boolean>;\n\n  // Customers\n  getCustomers(): Promise<Customer[]>;\n  getCustomer(id: string): Promise<Customer | undefined>;\n  getCustomerByEmail(email: string): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(id: string, customer: Partial<InsertCustomer>): Promise<Customer | undefined>;\n\n  // Contracts\n  getContracts(): Promise<Contract[]>;\n  getContract(id: string): Promise<Contract | undefined>;\n  getContractsByCustomer(customerId: string): Promise<Contract[]>;\n  createContract(contract: InsertContract): Promise<Contract>;\n  updateContract(id: string, contract: Partial<InsertContract>): Promise<Contract | undefined>;\n  deleteContract(id: string): Promise<boolean>;\n\n  // Bookings\n  getBookings(): Promise<Booking[]>;\n  getBooking(id: string): Promise<Booking | undefined>;\n  getBookingsByCustomer(customerId: string): Promise<Booking[]>;\n  getBookingsByContract(contractId: string): Promise<Booking[]>;\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  updateBooking(id: string, booking: Partial<InsertBooking>): Promise<Booking | undefined>;\n  createMultipleBookings(bookings: InsertBooking[], contractId: string): Promise<Booking[]>;\n\n  // Proposals\n  getProposals(): Promise<Proposal[]>;\n  getProposal(id: string): Promise<Proposal | undefined>;\n  getProposalsByCustomer(customerId: string): Promise<Proposal[]>;\n  createProposal(proposal: InsertProposal): Promise<Proposal>;\n  updateProposal(id: string, proposal: Partial<InsertProposal>): Promise<Proposal | undefined>;\n  deleteProposal(id: string): Promise<boolean>;\n\n  // Communications\n  getCommunications(bookingId?: string): Promise<Communication[]>;\n  getCommunication(id: string): Promise<Communication | undefined>;\n  getCommunicationsByProposal(proposalId: string): Promise<Communication[]>;\n  getCommunicationsByCustomer(customerId: string): Promise<Communication[]>;\n  createCommunication(communication: InsertCommunication): Promise<Communication>;\n  updateCommunication(id: string, communication: Partial<InsertCommunication>): Promise<Communication | undefined>;\n\n  // Settings\n  getSettings(): Promise<Setting[]>;\n  getSetting(key: string): Promise<Setting | undefined>;\n  createSetting(setting: InsertSetting): Promise<Setting>;\n  updateSetting(key: string, value: any): Promise<Setting | undefined>;\n\n  // Payments\n  getPayments(): Promise<Payment[]>;\n  getPayment(id: string): Promise<Payment | undefined>;\n  getPaymentsByBooking(bookingId: string): Promise<Payment[]>;\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  updatePayment(id: string, payment: Partial<InsertPayment>): Promise<Payment | undefined>;\n\n  // Tasks\n  getTasks(): Promise<Task[]>;\n  getTask(id: string): Promise<Task | undefined>;\n  getTasksByUser(userId: string): Promise<Task[]>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, task: Partial<InsertTask>): Promise<Task | undefined>;\n\n  // AI Insights\n  getAiInsights(): Promise<AiInsight[]>;\n  getActiveAiInsights(): Promise<AiInsight[]>;\n  createAiInsight(insight: InsertAiInsight): Promise<AiInsight>;\n\n  // Packages & Services\n  getPackages(): Promise<Package[]>;\n  getPackage(id: string): Promise<Package | undefined>;\n  createPackage(pkg: InsertPackage): Promise<Package>;\n  updatePackage(id: string, pkg: Partial<InsertPackage>): Promise<Package | undefined>;\n  deletePackage(id: string): Promise<boolean>;\n\n  getServices(): Promise<Service[]>;\n  getService(id: string): Promise<Service | undefined>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: string, service: Partial<InsertService>): Promise<Service | undefined>;\n  deleteService(id: string): Promise<boolean>;\n  \n  // Tax Settings\n  getTaxSettings(): Promise<TaxSetting[]>;\n  getTaxSetting(id: string): Promise<TaxSetting | undefined>;\n  createTaxSetting(taxSetting: InsertTaxSetting): Promise<TaxSetting>;\n  updateTaxSetting(id: string, taxSetting: Partial<InsertTaxSetting>): Promise<TaxSetting | undefined>;\n  deleteTaxSetting(id: string): Promise<boolean>;\n\n  // Lead Management\n  // Campaign Sources\n  getCampaignSources(): Promise<CampaignSource[]>;\n  createCampaignSource(source: InsertCampaignSource): Promise<CampaignSource>;\n  updateCampaignSource(id: string, source: Partial<InsertCampaignSource>): Promise<CampaignSource | undefined>;\n  \n  // Tags\n  getTags(): Promise<Tag[]>;\n  createTag(tag: InsertTag): Promise<Tag>;\n  updateTag(id: string, tag: Partial<InsertTag>): Promise<Tag | undefined>;\n  deleteTag(id: string): Promise<boolean>;\n  \n  // Leads\n  getLeads(filters?: { status?: string; source?: string; q?: string }): Promise<Lead[]>;\n  getLead(id: string): Promise<Lead | undefined>;\n  createLead(lead: InsertLead): Promise<Lead>;\n  updateLead(id: string, lead: Partial<InsertLead>): Promise<Lead | undefined>;\n  deleteLead(id: string): Promise<boolean>;\n  \n  // Lead Activities\n  getLeadActivities(leadId: string): Promise<LeadActivity[]>;\n  createLeadActivity(activity: InsertLeadActivity): Promise<LeadActivity>;\n  \n  // Lead Tasks\n  getLeadTasks(filters?: { assignee?: string; due?: string }): Promise<LeadTask[]>;\n  createLeadTask(task: InsertLeadTask): Promise<LeadTask>;\n  updateLeadTask(id: string, task: Partial<InsertLeadTask>): Promise<LeadTask | undefined>;\n  \n  // Tours\n  getTours(): Promise<Tour[]>;\n  getTour(id: string): Promise<Tour | undefined>;\n  createTour(tour: InsertTour): Promise<Tour>;\n  updateTour(id: string, tour: Partial<InsertTour>): Promise<Tour | undefined>;\n  \n  // Lead Tags (many-to-many)\n  getLeadTags(leadId: string): Promise<Tag[]>;\n  addLeadTag(leadId: string, tagId: string): Promise<void>;\n  removeLeadTag(leadId: string, tagId: string): Promise<void>;\n  \n\n  \n  // Additional CRUD operations  \n  deleteCustomer(id: string): Promise<boolean>;\n  updateVenue(id: string, venueData: Partial<Venue>): Promise<Venue | null>;\n  deleteVenue(id: string): Promise<boolean>;\n  deleteSpace(id: string): Promise<boolean>;\n  deleteBooking(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private venues: Map<string, Venue>;\n  private spaces: Map<string, Space>;\n  private setupStyles: Map<string, SetupStyle>;\n  private customers: Map<string, Customer>;\n  private contracts: Map<string, Contract>;\n  private bookings: Map<string, Booking>;\n  private proposals: Map<string, Proposal>;\n  private payments: Map<string, Payment>;\n  private tasks: Map<string, Task>;\n  private aiInsights: Map<string, AiInsight>;\n  private packages: Map<string, Package>;\n  private services: Map<string, Service>;\n  private taxSettings: Map<string, TaxSetting>;\n  private communications: Map<string, Communication>;\n  private settings: Map<string, Setting>;\n  \n  // Lead Management Maps\n  private campaignSources: Map<string, CampaignSource>;\n  private tags: Map<string, Tag>;\n  private leads: Map<string, Lead>;\n  private leadActivities: Map<string, LeadActivity>;\n  private leadTasks: Map<string, LeadTask>;\n  private tours: Map<string, Tour>;\n  private leadTags: Set<string>; // Store leadId:tagId combinations\n\n\n  constructor() {\n    this.users = new Map();\n    this.venues = new Map();\n    this.spaces = new Map();\n    this.setupStyles = new Map();\n    this.customers = new Map();\n    this.contracts = new Map();\n    this.bookings = new Map();\n    this.proposals = new Map();\n    this.payments = new Map();\n    this.tasks = new Map();\n    this.aiInsights = new Map();\n    this.packages = new Map();\n    this.services = new Map();\n    this.taxSettings = new Map();\n    this.communications = new Map();\n    this.settings = new Map();\n    \n    // Lead Management initialization\n    this.campaignSources = new Map();\n    this.tags = new Map();\n    this.leads = new Map();\n    this.leadActivities = new Map();\n    this.leadTasks = new Map();\n    this.tours = new Map();\n    this.leadTags = new Set();\n\n\n    // Clean start - no demo data\n  }\n\n  // All demo data initialization methods removed for clean tenant startup\n\n  // Users implementation\n    // Get all venue IDs to create spaces for them\n    const venueIds = Array.from(this.venues.keys());\n    \n    // Create spaces for Grand Ballroom (first venue)\n    if (venueIds[0]) {\n      const grandBallroomSpaces: InsertSpace[] = [\n        {\n          venueId: venueIds[0],\n          name: \"Main Ballroom\",\n          description: \"Large elegant space for grand events\",\n          capacity: 200,\n          pricePerHour: \"500.00\",\n          amenities: [\"Stage\", \"Dance Floor\", \"Crystal Chandeliers\"],\n          imageUrl: \"https://images.unsplash.com/photo-1519167758481-83f550bb49b3?ixlib=rb-4.0.3\",\n          isActive: true\n        },\n        {\n          venueId: venueIds[0],\n          name: \"VIP Lounge\",\n          description: \"Exclusive private area within the ballroom\",\n          capacity: 50,\n          pricePerHour: \"200.00\",\n          amenities: [\"Private Bar\", \"Lounge Seating\", \"City View\"],\n          imageUrl: \"https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3\",\n          isActive: true\n        }\n      ];\n      grandBallroomSpaces.forEach(space => this.createSpace(space));\n    }\n\n    // Conference Center spaces\n    if (venueIds[1]) {\n      const conferenceSpaces: InsertSpace[] = [\n        {\n          venueId: venueIds[1],\n          name: \"Boardroom A\",\n          description: \"Executive boardroom for meetings\",\n          capacity: 20,\n          pricePerHour: \"150.00\",\n          amenities: [\"Conference Table\", \"Video Conferencing\", \"Whiteboard\"],\n          imageUrl: \"https://images.unsplash.com/photo-1497366216548-37526070297c?ixlib=rb-4.0.3\",\n          isActive: true\n        },\n        {\n          venueId: venueIds[1],\n          name: \"Training Room\",\n          description: \"Flexible training and presentation space\",\n          capacity: 30,\n          pricePerHour: \"100.00\",\n          amenities: [\"Projector\", \"Flip Chart\", \"Sound System\"],\n          imageUrl: \"https://images.unsplash.com/photo-1497215728101-856f4ea42174?ixlib=rb-4.0.3\",\n          isActive: true\n        }\n      ];\n      conferenceSpaces.forEach(space => this.createSpace(space));\n    }\n\n    // Private Dining spaces\n    if (venueIds[2]) {\n      const diningSpaces: InsertSpace[] = [\n        {\n          venueId: venueIds[2],\n          name: \"Garden Room\",\n          description: \"Intimate dining with garden views\",\n          capacity: 25,\n          pricePerHour: \"150.00\",\n          amenities: [\"Fireplace\", \"Garden View\", \"Wine Cellar Access\"],\n          imageUrl: \"https://images.unsplash.com/photo-1414235077428-338989a2e8c0?ixlib=rb-4.0.3\",\n          isActive: true\n        }\n      ];\n      diningSpaces.forEach(space => this.createSpace(space));\n    }\n\n    // Update package applicableSpaceIds to match spaces\n    const spaceIds = Array.from(this.spaces.keys());\n    this.packages.forEach(pkg => {\n      pkg.applicableSpaceIds = spaceIds; // Make packages available for all spaces\n    });\n\n    // Add sample bookings to demonstrate the calendar functionality\n    this.initializeSampleBookings();\n  }\n\n  private initializeSampleBookings() {\n    const customers = Array.from(this.customers.values());\n    const venues = Array.from(this.venues.values());\n    const spaces = Array.from(this.spaces.values());\n\n    // Create some sample customers if none exist\n    if (customers.length === 0) {\n      const sampleCustomers = [\n        {\n          name: \"Sarah Johnson\",\n          email: \"sarah.johnson@email.com\",\n          phone: \"555-0123\",\n          company: \"Johnson Events\",\n          status: \"active\" as const,\n          leadScore: 85\n        },\n        {\n          name: \"Michael Chen\", \n          email: \"michael.chen@techcorp.com\",\n          phone: \"555-0456\",\n          company: \"TechCorp\",\n          status: \"lead\" as const,\n          leadScore: 72\n        },\n        {\n          name: \"Emily Rodriguez\",\n          email: \"emily@creativestudio.com\", \n          phone: \"555-0789\",\n          company: \"Creative Studio\",\n          status: \"active\" as const,\n          leadScore: 90\n        }\n      ];\n      \n      sampleCustomers.forEach(customer => this.createCustomer(customer));\n    }\n\n    // Create sample bookings\n    const updatedCustomers = Array.from(this.customers.values());\n    const today = new Date();\n    \n    if (venues.length > 0 && spaces.length > 0 && updatedCustomers.length > 0) {\n      const sampleBookings = [\n        {\n          eventName: \"Corporate Annual Gala\",\n          eventType: \"corporate\",\n          eventDate: new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000), // Next week\n          startTime: \"18:00\",\n          endTime: \"23:00\",\n          guestCount: 150,\n          status: \"confirmed\",\n          customerId: updatedCustomers[0]?.id,\n          venueId: venues[0]?.id,\n          spaceId: spaces[0]?.id,\n          totalAmount: \"8500.00\",\n          depositAmount: \"2550.00\",\n          depositPaid: true,\n          notes: \"Premium catering and entertainment package\"\n        },\n        {\n          eventName: \"Wedding Reception\",\n          eventType: \"wedding\", \n          eventDate: new Date(today.getTime() + 14 * 24 * 60 * 60 * 1000), // Two weeks\n          startTime: \"17:00\",\n          endTime: \"22:00\",\n          guestCount: 80,\n          status: \"pending\",\n          customerId: updatedCustomers[1]?.id,\n          venueId: venues[0]?.id,\n          spaceId: spaces[1]?.id,\n          totalAmount: \"6200.00\",\n          depositAmount: \"1860.00\",\n          depositPaid: false,\n          notes: \"Garden ceremony with indoor reception\"\n        },\n        {\n          eventName: \"Product Launch Event\",\n          eventType: \"corporate\",\n          eventDate: new Date(today.getTime() + 21 * 24 * 60 * 60 * 1000), // Three weeks\n          startTime: \"19:00\", \n          endTime: \"21:30\",\n          guestCount: 45,\n          status: \"confirmed\" as const,\n          customerId: updatedCustomers[2]?.id,\n          venueId: venues[1]?.id,\n          spaceId: spaces[2]?.id,\n          totalAmount: \"3200.00\",\n          depositAmount: \"960.00\",\n          depositPaid: true,\n          notes: \"Tech presentation with networking reception\"\n        },\n        {\n          eventName: \"Birthday Celebration\",\n          eventType: \"private\",\n          eventDate: new Date(today.getTime() + 28 * 24 * 60 * 60 * 1000), // Four weeks\n          startTime: \"15:00\",\n          endTime: \"18:00\", \n          guestCount: 25,\n          status: \"confirmed\" as const,\n          customerId: updatedCustomers[0]?.id,\n          venueId: venues[2]?.id,\n          spaceId: spaces[4]?.id,\n          totalAmount: \"1800.00\",\n          depositAmount: \"540.00\",\n          depositPaid: true,\n          notes: \"Intimate family gathering with custom menu\"\n        }\n      ];\n\n      sampleBookings.forEach(booking => {\n        if (booking.customerId && booking.venueId && booking.spaceId) {\n          this.createBooking(booking);\n        }\n      });\n    }\n  }\n\n  private initializeSamplePackagesAndServices() {\n    // Sample services for testing\n    const sampleServices = [\n      {\n        id: randomUUID(),\n        name: \"Premium Catering\",\n        description: \"Full-service catering with appetizers, main course, and dessert\",\n        price: \"45.00\",\n        category: \"catering\",\n        pricingModel: \"per_person\" as const,\n        enabledTaxIds: [],\n        enabledFeeIds: [],\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Audio/Visual Setup\", \n        description: \"Professional sound system, microphones, and projection equipment\",\n        price: \"500.00\",\n        category: \"equipment\",\n        pricingModel: \"fixed\" as const,\n        enabledTaxIds: [],\n        enabledFeeIds: [],\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Floral Arrangements\",\n        description: \"Custom centerpieces and decorative florals\",\n        price: \"150.00\", \n        category: \"decoration\",\n        pricingModel: \"fixed\" as const,\n        enabledTaxIds: [],\n        enabledFeeIds: [],\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Photography Services\",\n        description: \"Professional event photography with edited photos\",\n        price: \"800.00\",\n        category: \"entertainment\",\n        pricingModel: \"fixed\" as const,\n        enabledTaxIds: [],\n        enabledFeeIds: [],\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Live DJ Entertainment\",\n        description: \"Professional DJ with music and lighting\",\n        price: \"600.00\",\n        category: \"entertainment\", \n        pricingModel: \"fixed\" as const,\n        enabledTaxIds: [],\n        enabledFeeIds: [],\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Bar Service\",\n        description: \"Full bar service with bartender and premium drinks\",\n        price: \"25.00\",\n        category: \"catering\",\n        pricingModel: \"per_person\" as const,\n        enabledTaxIds: [],\n        enabledFeeIds: [],\n        isActive: true,\n        createdAt: new Date()\n      }\n    ];\n\n    // Sample packages for testing\n    const serviceIds = sampleServices.map(s => s.id);\n    const samplePackages = [\n      {\n        id: randomUUID(),\n        name: \"Corporate Essential\",\n        description: \"Perfect for business meetings and corporate events\",\n        category: \"corporate\",\n        price: \"2500.00\",\n        pricingModel: \"fixed\" as const,\n        includedServiceIds: [serviceIds[1]], // Audio/Visual Setup\n        applicableSpaceIds: [],\n        enabledTaxIds: [],\n        enabledFeeIds: [],\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(), \n        name: \"Wedding Premium\",\n        description: \"Complete wedding package with catering, entertainment, and decor\",\n        category: \"wedding\",\n        price: \"85.00\",\n        pricingModel: \"per_person\" as const,\n        includedServiceIds: [serviceIds[0], serviceIds[2], serviceIds[3], serviceIds[4]], // Catering, Florals, Photography, DJ\n        applicableSpaceIds: [],\n        enabledTaxIds: [],\n        enabledFeeIds: [],\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Cocktail Party\",\n        description: \"Elegant cocktail reception with bar and light catering\",\n        category: \"social\",\n        price: \"55.00\",\n        pricingModel: \"per_person\" as const, \n        includedServiceIds: [serviceIds[5], serviceIds[2]], // Bar Service, Florals\n        applicableSpaceIds: [],\n        enabledTaxIds: [],\n        enabledFeeIds: [],\n        isActive: true,\n        createdAt: new Date()\n      }\n    ];\n\n    sampleServices.forEach(svc => this.services.set(svc.id, svc));\n    samplePackages.forEach(pkg => this.packages.set(pkg.id, pkg));\n  }\n\n  private initializeSampleSetupStyles() {\n    const sampleSetupStyles = [\n      {\n        id: randomUUID(),\n        name: \"Round Tables\",\n        description: \"Traditional round tables for dining and socializing\",\n        iconName: \"Circle\",\n        category: \"dining\",\n        minCapacity: 50,\n        maxCapacity: 200,\n        floorPlan: {\n          objects: [\n            { id: \"rt1\", type: \"table\", x: 200, y: 150, width: 60, height: 60, rotation: 0, color: \"#8B4513\", seats: 8, label: \"Table 1\" },\n            { id: \"rt2\", type: \"table\", x: 350, y: 150, width: 60, height: 60, rotation: 0, color: \"#8B4513\", seats: 8, label: \"Table 2\" },\n            { id: \"rt3\", type: \"table\", x: 500, y: 150, width: 60, height: 60, rotation: 0, color: \"#8B4513\", seats: 8, label: \"Table 3\" },\n            { id: \"rt4\", type: \"table\", x: 275, y: 300, width: 60, height: 60, rotation: 0, color: \"#8B4513\", seats: 8, label: \"Table 4\" },\n            { id: \"rt5\", type: \"table\", x: 425, y: 300, width: 60, height: 60, rotation: 0, color: \"#8B4513\", seats: 8, label: \"Table 5\" },\n            { id: \"stage\", type: \"stage\", x: 300, y: 50, width: 200, height: 80, rotation: 0, color: \"#4169E1\", label: \"Main Stage\" },\n            { id: \"bar\", type: \"bar\", x: 100, y: 500, width: 120, height: 40, rotation: 0, color: \"#800000\", label: \"Bar\" }\n          ],\n          canvasSize: { width: 800, height: 600 },\n          totalSeats: 40\n        },\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Theater Style\",\n        description: \"Rows of chairs facing the presentation area\",\n        iconName: \"Presentation\",\n        category: \"presentation\",\n        minCapacity: 100,\n        maxCapacity: 500,\n        floorPlan: {\n          objects: [\n            { id: \"stage\", type: \"stage\", x: 300, y: 50, width: 200, height: 80, rotation: 0, color: \"#4169E1\", label: \"Presentation Stage\" },\n            // Front row\n            { id: \"c1\", type: \"chair\", x: 200, y: 200, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c2\", type: \"chair\", x: 230, y: 200, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c3\", type: \"chair\", x: 260, y: 200, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c4\", type: \"chair\", x: 290, y: 200, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c5\", type: \"chair\", x: 320, y: 200, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c6\", type: \"chair\", x: 350, y: 200, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c7\", type: \"chair\", x: 380, y: 200, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c8\", type: \"chair\", x: 410, y: 200, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            // Second row\n            { id: \"c9\", type: \"chair\", x: 200, y: 230, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c10\", type: \"chair\", x: 230, y: 230, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c11\", type: \"chair\", x: 260, y: 230, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c12\", type: \"chair\", x: 290, y: 230, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c13\", type: \"chair\", x: 320, y: 230, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c14\", type: \"chair\", x: 350, y: 230, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c15\", type: \"chair\", x: 380, y: 230, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 },\n            { id: \"c16\", type: \"chair\", x: 410, y: 230, width: 20, height: 20, rotation: 0, color: \"#654321\", seats: 1 }\n          ],\n          canvasSize: { width: 800, height: 600 },\n          totalSeats: 16\n        },\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"U-Shape Conference\",\n        description: \"U-shaped table arrangement for meetings\",\n        iconName: \"Users\",\n        category: \"meeting\",\n        minCapacity: 15,\n        maxCapacity: 50,\n        floorPlan: {\n          objects: [\n            // U-shape tables\n            { id: \"ut1\", type: \"table\", x: 200, y: 200, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 6, label: \"Left Table\" },\n            { id: \"ut2\", type: \"table\", x: 300, y: 320, width: 200, height: 40, rotation: 0, color: \"#8B4513\", seats: 8, label: \"Center Table\" },\n            { id: \"ut3\", type: \"table\", x: 520, y: 200, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 6, label: \"Right Table\" },\n            // Presentation area\n            { id: \"screen\", type: \"stage\", x: 350, y: 100, width: 100, height: 60, rotation: 0, color: \"#4169E1\", label: \"Screen\" }\n          ],\n          canvasSize: { width: 800, height: 600 },\n          totalSeats: 20\n        },\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Cocktail Reception\",\n        description: \"Standing reception with high-top tables\",\n        iconName: \"Coffee\",\n        category: \"social\",\n        minCapacity: 30,\n        maxCapacity: 150,\n        floorPlan: {\n          objects: [\n            { id: \"ht1\", type: \"table\", x: 200, y: 180, width: 40, height: 40, rotation: 0, color: \"#8B4513\", seats: 4, label: \"High Table 1\" },\n            { id: \"ht2\", type: \"table\", x: 400, y: 180, width: 40, height: 40, rotation: 0, color: \"#8B4513\", seats: 4, label: \"High Table 2\" },\n            { id: \"ht3\", type: \"table\", x: 600, y: 180, width: 40, height: 40, rotation: 0, color: \"#8B4513\", seats: 4, label: \"High Table 3\" },\n            { id: \"ht4\", type: \"table\", x: 300, y: 320, width: 40, height: 40, rotation: 0, color: \"#8B4513\", seats: 4, label: \"High Table 4\" },\n            { id: \"ht5\", type: \"table\", x: 500, y: 320, width: 40, height: 40, rotation: 0, color: \"#8B4513\", seats: 4, label: \"High Table 5\" },\n            { id: \"bar1\", type: \"bar\", x: 150, y: 450, width: 150, height: 40, rotation: 0, color: \"#800000\", label: \"Main Bar\" },\n            { id: \"bar2\", type: \"bar\", x: 500, y: 450, width: 150, height: 40, rotation: 0, color: \"#800000\", label: \"Service Bar\" }\n          ],\n          canvasSize: { width: 800, height: 600 },\n          totalSeats: 20\n        },\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Classroom Setup\",\n        description: \"Tables and chairs in classroom formation\",\n        iconName: \"Grid3X3\",\n        category: \"meeting\",\n        minCapacity: 20,\n        maxCapacity: 100,\n        floorPlan: {\n          objects: [\n            // Presentation area\n            { id: \"stage\", type: \"stage\", x: 350, y: 50, width: 100, height: 60, rotation: 0, color: \"#4169E1\", label: \"Presentation Area\" },\n            // Row 1\n            { id: \"t1\", type: \"table\", x: 200, y: 180, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 3, label: \"Table 1\" },\n            { id: \"t2\", type: \"table\", x: 320, y: 180, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 3, label: \"Table 2\" },\n            { id: \"t3\", type: \"table\", x: 440, y: 180, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 3, label: \"Table 3\" },\n            // Row 2\n            { id: \"t4\", type: \"table\", x: 200, y: 260, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 3, label: \"Table 4\" },\n            { id: \"t5\", type: \"table\", x: 320, y: 260, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 3, label: \"Table 5\" },\n            { id: \"t6\", type: \"table\", x: 440, y: 260, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 3, label: \"Table 6\" },\n            // Row 3\n            { id: \"t7\", type: \"table\", x: 200, y: 340, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 3, label: \"Table 7\" },\n            { id: \"t8\", type: \"table\", x: 320, y: 340, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 3, label: \"Table 8\" },\n            { id: \"t9\", type: \"table\", x: 440, y: 340, width: 80, height: 40, rotation: 0, color: \"#8B4513\", seats: 3, label: \"Table 9\" }\n          ],\n          canvasSize: { width: 800, height: 600 },\n          totalSeats: 27\n        },\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Banquet Style\",\n        description: \"Long rectangular tables for formal dining\",\n        iconName: \"Utensils\",\n        category: \"dining\",\n        minCapacity: 40,\n        maxCapacity: 300,\n        floorPlan: {\n          objects: [\n            // Long banquet tables\n            { id: \"bt1\", type: \"table\", x: 150, y: 150, width: 200, height: 50, rotation: 0, color: \"#8B4513\", seats: 12, label: \"Banquet Table 1\" },\n            { id: \"bt2\", type: \"table\", x: 150, y: 230, width: 200, height: 50, rotation: 0, color: \"#8B4513\", seats: 12, label: \"Banquet Table 2\" },\n            { id: \"bt3\", type: \"table\", x: 150, y: 310, width: 200, height: 50, rotation: 0, color: \"#8B4513\", seats: 12, label: \"Banquet Table 3\" },\n            { id: \"bt4\", type: \"table\", x: 450, y: 150, width: 200, height: 50, rotation: 0, color: \"#8B4513\", seats: 12, label: \"Banquet Table 4\" },\n            { id: \"bt5\", type: \"table\", x: 450, y: 230, width: 200, height: 50, rotation: 0, color: \"#8B4513\", seats: 12, label: \"Banquet Table 5\" },\n            { id: \"bt6\", type: \"table\", x: 450, y: 310, width: 200, height: 50, rotation: 0, color: \"#8B4513\", seats: 12, label: \"Banquet Table 6\" },\n            // Head table\n            { id: \"head\", type: \"table\", x: 300, y: 80, width: 200, height: 50, rotation: 0, color: \"#8B4513\", seats: 10, label: \"Head Table\" }\n          ],\n          canvasSize: { width: 800, height: 600 },\n          totalSeats: 82\n        },\n        isActive: true,\n        createdAt: new Date()\n      }\n    ];\n\n    sampleSetupStyles.forEach(style => this.setupStyles.set(style.id, style));\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      role: insertUser.role || \"manager\",\n      stripeAccountId: insertUser.stripeAccountId || null,\n      stripeAccountStatus: insertUser.stripeAccountStatus || null,\n      stripeOnboardingCompleted: insertUser.stripeOnboardingCompleted || false,\n      stripeChargesEnabled: insertUser.stripeChargesEnabled || false,\n      stripePayoutsEnabled: insertUser.stripePayoutsEnabled || false,\n      stripeConnectedAt: insertUser.stripeConnectedAt || null\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updateData: Partial<InsertUser>): Promise<User | undefined> {\n    const existing = this.users.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...updateData };\n    this.users.set(id, updated);\n    return updated;\n  }\n\n  // Venues\n  async getVenues(): Promise<Venue[]> {\n    return Array.from(this.venues.values());\n  }\n\n  async getVenue(id: string): Promise<Venue | undefined> {\n    return this.venues.get(id);\n  }\n\n  async createVenue(insertVenue: InsertVenue): Promise<Venue> {\n    const id = randomUUID();\n    const venue: Venue = { \n      ...insertVenue, \n      id,\n      description: insertVenue.description || null,\n      pricePerHour: insertVenue.pricePerHour || null,\n      amenities: insertVenue.amenities || null,\n      imageUrl: insertVenue.imageUrl || null,\n      isActive: insertVenue.isActive ?? true\n    };\n    this.venues.set(id, venue);\n    return venue;\n  }\n\n  async updateVenue(id: string, venue: Partial<InsertVenue>): Promise<Venue | undefined> {\n    const existing = this.venues.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...venue };\n    this.venues.set(id, updated);\n    return updated;\n  }\n\n  // Spaces\n  async getSpaces(): Promise<Space[]> {\n    return Array.from(this.spaces.values());\n  }\n\n  async getSpace(id: string): Promise<Space | undefined> {\n    return this.spaces.get(id);\n  }\n\n  async getSpacesByVenue(venueId: string): Promise<Space[]> {\n    return Array.from(this.spaces.values()).filter(space => space.venueId === venueId);\n  }\n\n  async createSpace(insertSpace: InsertSpace): Promise<Space> {\n    const id = randomUUID();\n    const space: Space = { \n      ...insertSpace, \n      id,\n      description: insertSpace.description || null,\n      pricePerHour: insertSpace.pricePerHour || null,\n      amenities: insertSpace.amenities || null,\n      imageUrl: insertSpace.imageUrl || null,\n      isActive: insertSpace.isActive ?? true,\n      createdAt: new Date()\n    };\n    this.spaces.set(id, space);\n    return space;\n  }\n\n  async updateSpace(id: string, updates: Partial<InsertSpace>): Promise<Space | undefined> {\n    const space = this.spaces.get(id);\n    if (!space) return undefined;\n    \n    const updated: Space = { ...space, ...updates };\n    this.spaces.set(id, updated);\n    return updated;\n  }\n\n  // Customers\n  async getCustomers(): Promise<Customer[]> {\n    return Array.from(this.customers.values());\n  }\n\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    return this.customers.get(id);\n  }\n\n  async getCustomerByEmail(email: string): Promise<Customer | undefined> {\n    return Array.from(this.customers.values()).find(customer => customer.email === email);\n  }\n\n  async createCustomer(insertCustomer: InsertCustomer): Promise<Customer> {\n    const id = randomUUID();\n    const customer: Customer = { \n      ...insertCustomer, \n      id, \n      createdAt: new Date(),\n      notes: insertCustomer.notes || null,\n      status: insertCustomer.status || \"lead\",\n      phone: insertCustomer.phone || null,\n      company: insertCustomer.company || null,\n      leadScore: insertCustomer.leadScore || 0\n    };\n    this.customers.set(id, customer);\n    return customer;\n  }\n\n  async updateCustomer(id: string, customer: Partial<InsertCustomer>): Promise<Customer | undefined> {\n    const existing = this.customers.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...customer };\n    this.customers.set(id, updated);\n    return updated;\n  }\n\n  // Contracts\n  async getContracts(): Promise<Contract[]> {\n    return Array.from(this.contracts.values());\n  }\n\n  async getContract(id: string): Promise<Contract | undefined> {\n    return this.contracts.get(id);\n  }\n\n  async getContractsByCustomer(customerId: string): Promise<Contract[]> {\n    return Array.from(this.contracts.values()).filter(contract => contract.customerId === customerId);\n  }\n\n  async createContract(insertContract: InsertContract): Promise<Contract> {\n    const id = randomUUID();\n    const contract: Contract = { \n      ...insertContract, \n      id, \n      createdAt: new Date(),\n      updatedAt: new Date(),\n      status: insertContract.status || \"draft\",\n      totalAmount: insertContract.totalAmount || null\n    };\n    this.contracts.set(id, contract);\n    return contract;\n  }\n\n  async updateContract(id: string, contract: Partial<InsertContract>): Promise<Contract | undefined> {\n    const existing = this.contracts.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...contract, updatedAt: new Date() };\n    this.contracts.set(id, updated);\n    return updated;\n  }\n\n  async deleteContract(id: string): Promise<boolean> {\n    return this.contracts.delete(id);\n  }\n\n  // Bookings\n  async getBookings(): Promise<Booking[]> {\n    return Array.from(this.bookings.values());\n  }\n\n  async getBooking(id: string): Promise<Booking | undefined> {\n    return this.bookings.get(id);\n  }\n\n  async getBookingsByCustomer(customerId: string): Promise<Booking[]> {\n    return Array.from(this.bookings.values()).filter(booking => booking.customerId === customerId);\n  }\n\n  async getBookingsByContract(contractId: string): Promise<Booking[]> {\n    return Array.from(this.bookings.values()).filter(booking => booking.contractId === contractId);\n  }\n\n  async createBooking(insertBooking: InsertBooking): Promise<Booking> {\n    const id = randomUUID();\n    const booking: Booking = { \n      ...insertBooking, \n      id, \n      createdAt: new Date(),\n      contractId: insertBooking.contractId || null,\n      customerId: insertBooking.customerId || null,\n      venueId: insertBooking.venueId || null,\n      totalAmount: insertBooking.totalAmount || null,\n      depositAmount: insertBooking.depositAmount || null,\n      depositPaid: insertBooking.depositPaid ?? false,\n      notes: insertBooking.notes || null\n    };\n    this.bookings.set(id, booking);\n    return booking;\n  }\n\n  async updateBooking(id: string, booking: Partial<InsertBooking>): Promise<Booking | undefined> {\n    const existing = this.bookings.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...booking };\n    this.bookings.set(id, updated);\n    return updated;\n  }\n\n  async createMultipleBookings(bookings: InsertBooking[], contractId: string): Promise<Booking[]> {\n    const createdBookings: Booking[] = [];\n    for (const insertBooking of bookings) {\n      const booking = await this.createBooking({ ...insertBooking, contractId });\n      createdBookings.push(booking);\n    }\n    return createdBookings;\n  }\n\n  // Proposals\n  async getProposals(): Promise<Proposal[]> {\n    return Array.from(this.proposals.values());\n  }\n\n  async getProposal(id: string): Promise<Proposal | undefined> {\n    return this.proposals.get(id);\n  }\n\n  async getProposalsByCustomer(customerId: string): Promise<Proposal[]> {\n    return Array.from(this.proposals.values()).filter(proposal => proposal.customerId === customerId);\n  }\n\n  async createProposal(insertProposal: InsertProposal): Promise<Proposal> {\n    const id = randomUUID();\n    const proposal: Proposal = { \n      ...insertProposal, \n      id, \n      createdAt: new Date(),\n      sentAt: null,\n      viewedAt: null,\n      customerId: insertProposal.customerId || null,\n      bookingId: insertProposal.bookingId || null,\n      status: insertProposal.status || \"draft\",\n      totalAmount: insertProposal.totalAmount || null,\n      validUntil: insertProposal.validUntil || null\n    };\n    this.proposals.set(id, proposal);\n    return proposal;\n  }\n\n  async updateProposal(id: string, proposal: Partial<InsertProposal>): Promise<Proposal | undefined> {\n    const existing = this.proposals.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...proposal };\n    this.proposals.set(id, updated);\n    return updated;\n  }\n\n  // Payments\n  async getPayments(): Promise<Payment[]> {\n    return Array.from(this.payments.values());\n  }\n\n  async getPayment(id: string): Promise<Payment | undefined> {\n    return this.payments.get(id);\n  }\n\n  async getPaymentsByBooking(bookingId: string): Promise<Payment[]> {\n    return Array.from(this.payments.values()).filter(payment => payment.bookingId === bookingId);\n  }\n\n  async createPayment(insertPayment: InsertPayment): Promise<Payment> {\n    const id = randomUUID();\n    const payment: Payment = { \n      ...insertPayment, \n      id, \n      createdAt: new Date(),\n      processedAt: null,\n      status: insertPayment.status || \"pending\",\n      bookingId: insertPayment.bookingId || null,\n      transactionId: insertPayment.transactionId || null\n    };\n    this.payments.set(id, payment);\n    return payment;\n  }\n\n  async updatePayment(id: string, payment: Partial<InsertPayment>): Promise<Payment | undefined> {\n    const existing = this.payments.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...payment };\n    this.payments.set(id, updated);\n    return updated;\n  }\n\n  // Tasks\n  async getTasks(): Promise<Task[]> {\n    return Array.from(this.tasks.values());\n  }\n\n  async getTask(id: string): Promise<Task | undefined> {\n    return this.tasks.get(id);\n  }\n\n  async getTasksByUser(userId: string): Promise<Task[]> {\n    return Array.from(this.tasks.values()).filter(task => task.assignedTo === userId);\n  }\n\n  async createTask(insertTask: InsertTask): Promise<Task> {\n    const id = randomUUID();\n    const task: Task = { \n      ...insertTask, \n      id, \n      createdAt: new Date(),\n      status: insertTask.status || \"pending\",\n      priority: insertTask.priority || \"medium\",\n      description: insertTask.description || null,\n      assignedTo: insertTask.assignedTo || null,\n      bookingId: insertTask.bookingId || null,\n      dueDate: insertTask.dueDate || null\n    };\n    this.tasks.set(id, task);\n    return task;\n  }\n\n  async updateTask(id: string, task: Partial<InsertTask>): Promise<Task | undefined> {\n    const existing = this.tasks.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...task };\n    this.tasks.set(id, updated);\n    return updated;\n  }\n\n  // AI Insights\n  async getAiInsights(): Promise<AiInsight[]> {\n    return Array.from(this.aiInsights.values());\n  }\n\n  async getActiveAiInsights(): Promise<AiInsight[]> {\n    return Array.from(this.aiInsights.values()).filter(insight => insight.isActive);\n  }\n\n  async createAiInsight(insertAiInsight: InsertAiInsight): Promise<AiInsight> {\n    const id = randomUUID();\n    const insight: AiInsight = { \n      ...insertAiInsight, \n      id, \n      createdAt: new Date(),\n      priority: insertAiInsight.priority || \"medium\",\n      isActive: insertAiInsight.isActive ?? true,\n      data: insertAiInsight.data || null\n    };\n    this.aiInsights.set(id, insight);\n    return insight;\n  }\n\n  // Packages & Services  \n  async getPackages(): Promise<Package[]> {\n    return Array.from(this.packages.values());\n  }\n\n  async getPackage(id: string): Promise<Package | undefined> {\n    return this.packages.get(id);\n  }\n\n  async createPackage(insertPackage: InsertPackage): Promise<Package> {\n    const id = randomUUID();\n    const pkg: Package = { \n      ...insertPackage, \n      id, \n      createdAt: new Date(),\n      description: insertPackage.description || null,\n      applicableSpaceIds: insertPackage.applicableSpaceIds || null,\n      includedServiceIds: insertPackage.includedServiceIds || null,\n      isActive: insertPackage.isActive ?? true\n    };\n    this.packages.set(id, pkg);\n    return pkg;\n  }\n\n  async updatePackage(id: string, updates: Partial<InsertPackage>): Promise<Package | undefined> {\n    const pkg = this.packages.get(id);\n    if (!pkg) return undefined;\n    \n    const updated: Package = { ...pkg, ...updates };\n    this.packages.set(id, updated);\n    return updated;\n  }\n\n  async getServices(): Promise<Service[]> {\n    return Array.from(this.services.values());\n  }\n\n  async getService(id: string): Promise<Service | undefined> {\n    return this.services.get(id);\n  }\n\n  async createService(insertService: InsertService): Promise<Service> {\n    const id = randomUUID();\n    const service: Service = { \n      ...insertService, \n      id, \n      createdAt: new Date(),\n      description: insertService.description || null,\n      isActive: insertService.isActive ?? true\n    };\n    this.services.set(id, service);\n    return service;\n  }\n\n  async updateService(id: string, updates: Partial<InsertService>): Promise<Service | undefined> {\n    const service = this.services.get(id);\n    if (!service) return undefined;\n    \n    const updated: Service = { ...service, ...updates };\n    this.services.set(id, updated);\n    return updated;\n  }\n\n  // Delete operations\n  async deleteCustomer(id: string): Promise<boolean> {\n    return this.customers.delete(id);\n  }\n\n  async deleteVenue(id: string): Promise<boolean> {\n    return this.venues.delete(id);\n  }\n\n  async deleteSpace(id: string): Promise<boolean> {\n    return this.spaces.delete(id);\n  }\n\n  async deleteBooking(id: string): Promise<boolean> {\n    return this.bookings.delete(id);\n  }\n\n  async deletePackage(id: string): Promise<boolean> {\n    return this.packages.delete(id);\n  }\n\n  async deleteService(id: string): Promise<boolean> {\n    return this.services.delete(id);\n  }\n\n  async updatePackage(id: string, packageData: any): Promise<Package | null> {\n    const pkg = this.packages.get(id);\n    if (!pkg) return null;\n    \n    const updated = { ...pkg, ...packageData };\n    this.packages.set(id, updated);\n    return updated;\n  }\n\n  async updateService(id: string, serviceData: any): Promise<Service | null> {\n    const service = this.services.get(id);\n    if (!service) return null;\n    \n    const updated = { ...service, ...serviceData };\n    this.services.set(id, updated);\n    return updated;\n  }\n\n  async updateVenue(id: string, venueData: Partial<Venue>): Promise<Venue | null> {\n    const venue = this.venues.get(id);\n    if (!venue) return null;\n    \n    const updated = { ...venue, ...venueData };\n    this.venues.set(id, updated);\n    return updated;\n  }\n\n  // Tax Settings methods\n  async getTaxSettings(): Promise<TaxSetting[]> {\n    return Array.from(this.taxSettings.values());\n  }\n\n  async getTaxSetting(id: string): Promise<TaxSetting | undefined> {\n    return this.taxSettings.get(id);\n  }\n\n  async createTaxSetting(taxSetting: InsertTaxSetting): Promise<TaxSetting> {\n    const newTaxSetting: TaxSetting = {\n      id: randomUUID(),\n      ...taxSetting,\n      createdAt: new Date(),\n    };\n    this.taxSettings.set(newTaxSetting.id, newTaxSetting);\n    return newTaxSetting;\n  }\n\n  async updateTaxSetting(id: string, taxSetting: Partial<InsertTaxSetting>): Promise<TaxSetting | undefined> {\n    const existing = this.taxSettings.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...taxSetting };\n    this.taxSettings.set(id, updated);\n    return updated;\n  }\n\n  async deleteTaxSetting(id: string): Promise<boolean> {\n    return this.taxSettings.delete(id);\n  }\n\n  // Proposal methods\n  async getProposals(): Promise<Proposal[]> {\n    return Array.from(this.proposals.values());\n  }\n\n  async getProposal(id: string): Promise<Proposal | undefined> {\n    return this.proposals.get(id);\n  }\n\n  async getProposalsByCustomer(customerId: string): Promise<Proposal[]> {\n    return Array.from(this.proposals.values()).filter(p => p.customerId === customerId);\n  }\n\n  async createProposal(proposal: InsertProposal): Promise<Proposal> {\n    const newProposal: Proposal = {\n      id: randomUUID(),\n      ...proposal,\n      createdAt: new Date(),\n    };\n    this.proposals.set(newProposal.id, newProposal);\n    return newProposal;\n  }\n\n  async updateProposal(id: string, proposal: Partial<InsertProposal>): Promise<Proposal | undefined> {\n    const existing = this.proposals.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...proposal };\n    this.proposals.set(id, updated);\n    return updated;\n  }\n\n  async deleteProposal(id: string): Promise<boolean> {\n    return this.proposals.delete(id);\n  }\n\n  // Communication methods\n  async getCommunications(bookingId?: string): Promise<Communication[]> {\n    const allComms = Array.from(this.communications.values());\n    if (bookingId) {\n      return allComms.filter(comm => (comm as any).bookingId === bookingId);\n    }\n    return allComms;\n  }\n\n  async getCommunication(id: string): Promise<Communication | undefined> {\n    return this.communications.get(id);\n  }\n\n  async getCommunicationsByProposal(proposalId: string): Promise<Communication[]> {\n    return Array.from(this.communications.values()).filter(c => (c as any).proposalId === proposalId);\n  }\n\n  async getCommunicationsByCustomer(customerId: string): Promise<Communication[]> {\n    return Array.from(this.communications.values()).filter(c => c.customerId === customerId);\n  }\n\n  async createCommunication(communication: InsertCommunication): Promise<Communication> {\n    const newCommunication: Communication = {\n      id: randomUUID(),\n      bookingId: communication.bookingId || null,\n      customerId: communication.customerId || null,\n      type: communication.type,\n      direction: communication.direction,\n      subject: communication.subject || null,\n      message: communication.message,\n      sentBy: communication.sentBy || null,\n      sentAt: new Date(),\n      readAt: communication.readAt || null,\n      status: communication.status || \"sent\"\n    };\n    this.communications.set(newCommunication.id, newCommunication);\n    return newCommunication;\n  }\n\n  async updateCommunication(id: string, communication: Partial<InsertCommunication>): Promise<Communication | undefined> {\n    const existing = this.communications.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...communication };\n    this.communications.set(id, updated);\n    return updated;\n  }\n\n  // Settings methods\n  async getSettings(): Promise<Setting[]> {\n    return Array.from(this.settings.values());\n  }\n\n  async getSetting(key: string): Promise<Setting | undefined> {\n    return Array.from(this.settings.values()).find(s => s.key === key);\n  }\n\n  async createSetting(setting: InsertSetting): Promise<Setting> {\n    const newSetting: Setting = {\n      id: randomUUID(),\n      ...setting,\n      updatedAt: new Date(),\n    };\n    this.settings.set(newSetting.id, newSetting);\n    return newSetting;\n  }\n\n  async updateSetting(key: string, value: any): Promise<Setting | undefined> {\n    const existing = Array.from(this.settings.values()).find(s => s.key === key);\n    if (existing) {\n      const updated = { ...existing, value, updatedAt: new Date() };\n      this.settings.set(existing.id, updated);\n      return updated;\n    } else {\n      // Create new setting if it doesn't exist\n      return this.createSetting({ key, value });\n    }\n  }\n\n  // Setup Styles methods\n  async getSetupStyles(): Promise<SetupStyle[]> {\n    return Array.from(this.setupStyles.values());\n  }\n\n  async getSetupStyle(id: string): Promise<SetupStyle | undefined> {\n    return this.setupStyles.get(id);\n  }\n\n  async createSetupStyle(setupStyle: InsertSetupStyle): Promise<SetupStyle> {\n    const newSetupStyle: SetupStyle = {\n      id: randomUUID(),\n      ...setupStyle,\n      createdAt: new Date(),\n      isActive: setupStyle.isActive ?? true,\n      description: setupStyle.description || null,\n      iconName: setupStyle.iconName || null,\n      minCapacity: setupStyle.minCapacity || null,\n      maxCapacity: setupStyle.maxCapacity || null\n    };\n    this.setupStyles.set(newSetupStyle.id, newSetupStyle);\n    return newSetupStyle;\n  }\n\n  async updateSetupStyle(id: string, setupStyle: Partial<InsertSetupStyle>): Promise<SetupStyle | undefined> {\n    const existing = this.setupStyles.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...setupStyle };\n    this.setupStyles.set(id, updated);\n    return updated;\n  }\n\n  async deleteSetupStyle(id: string): Promise<boolean> {\n    return this.setupStyles.delete(id);\n  }\n\n  // Initialize lead management sample data\n  private initializeLeadManagementData() {\n    // Sample campaign sources\n    const websiteSource: CampaignSource = {\n      id: randomUUID(),\n      name: \"Website Organic\",\n      slug: \"website-organic\",\n      isActive: true,\n      createdAt: new Date()\n    };\n    const googleAdsSource: CampaignSource = {\n      id: randomUUID(),\n      name: \"Google Ads\",\n      slug: \"google-ads\",\n      isActive: true,\n      createdAt: new Date()\n    };\n    const socialMediaSource: CampaignSource = {\n      id: randomUUID(),\n      name: \"Social Media\",\n      slug: \"social-media\",\n      isActive: true,\n      createdAt: new Date()\n    };\n\n    this.campaignSources.set(websiteSource.id, websiteSource);\n    this.campaignSources.set(googleAdsSource.id, googleAdsSource);\n    this.campaignSources.set(socialMediaSource.id, socialMediaSource);\n\n    // Sample tags\n    const hotLeadTag: Tag = {\n      id: randomUUID(),\n      name: \"Hot Lead\",\n      color: \"#ef4444\",\n      createdAt: new Date()\n    };\n    const corporateTag: Tag = {\n      id: randomUUID(),\n      name: \"Corporate\",\n      color: \"#3b82f6\",\n      createdAt: new Date()\n    };\n    const weddingTag: Tag = {\n      id: randomUUID(),\n      name: \"Wedding\",\n      color: \"#ec4899\",\n      createdAt: new Date()\n    };\n\n    this.tags.set(hotLeadTag.id, hotLeadTag);\n    this.tags.set(corporateTag.id, corporateTag);\n    this.tags.set(weddingTag.id, weddingTag);\n\n    // Sample leads\n    const sampleLead1: Lead = {\n      id: randomUUID(),\n      venueId: Array.from(this.venues.keys())[0] || null,\n      firstName: \"Emma\",\n      lastName: \"Wilson\",\n      email: \"emma.wilson@techcorp.com\",\n      phone: \"(555) 234-5678\",\n      eventType: \"corporate\",\n      guestCount: 150,\n      dateStart: new Date(\"2025-09-15\"),\n      dateEnd: new Date(\"2025-09-15\"),\n      budgetMin: 8000,\n      budgetMax: 12000,\n      preferredContact: \"email\",\n      notes: \"Looking for corporate annual meeting venue with AV capabilities\",\n      status: \"NEW\",\n      sourceId: websiteSource.id,\n      utmSource: \"google\",\n      utmMedium: \"organic\",\n      utmCampaign: null,\n      consentEmail: true,\n      consentSms: false,\n      convertedCustomerId: null,\n      createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day ago\n      updatedAt: new Date(Date.now() - 24 * 60 * 60 * 1000)\n    };\n\n    const sampleLead2: Lead = {\n      id: randomUUID(),\n      venueId: Array.from(this.venues.keys())[0] || null,\n      firstName: \"Michael\",\n      lastName: \"Chen\",\n      email: \"michael.chen@gmail.com\",\n      phone: \"(555) 345-6789\",\n      eventType: \"wedding\",\n      guestCount: 80,\n      dateStart: new Date(\"2025-10-20\"),\n      dateEnd: new Date(\"2025-10-20\"),\n      budgetMin: 15000,\n      budgetMax: 25000,\n      preferredContact: \"phone\",\n      notes: \"Intimate wedding ceremony and reception\",\n      status: \"CONTACTED\",\n      sourceId: socialMediaSource.id,\n      utmSource: \"facebook\",\n      utmMedium: \"social\",\n      utmCampaign: \"wedding-promo\",\n      consentEmail: true,\n      consentSms: true,\n      convertedCustomerId: null,\n      createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 days ago\n      updatedAt: new Date(Date.now() - 12 * 60 * 60 * 1000) // 12 hours ago\n    };\n\n    this.leads.set(sampleLead1.id, sampleLead1);\n    this.leads.set(sampleLead2.id, sampleLead2);\n\n    // Sample lead activities\n    const activity1: LeadActivity = {\n      id: randomUUID(),\n      leadId: sampleLead1.id,\n      type: \"NOTE\",\n      body: \"Lead submitted inquiry through website contact form\",\n      meta: { source: \"website_form\" },\n      createdBy: null,\n      createdAt: sampleLead1.createdAt\n    };\n\n    const activity2: LeadActivity = {\n      id: randomUUID(),\n      leadId: sampleLead2.id,\n      type: \"EMAIL\",\n      body: \"Initial follow-up email sent\",\n      meta: { template: \"initial_followup\", email_sent: true },\n      createdBy: null,\n      createdAt: new Date(Date.now() - 12 * 60 * 60 * 1000)\n    };\n\n    this.leadActivities.set(activity1.id, activity1);\n    this.leadActivities.set(activity2.id, activity2);\n\n    // Sample lead tasks\n    const task1: LeadTask = {\n      id: randomUUID(),\n      leadId: sampleLead1.id,\n      title: \"Call potential client\",\n      description: \"Follow up on venue inquiry for corporate event\",\n      dueAt: new Date(Date.now() + 2 * 60 * 60 * 1000), // 2 hours from now\n      assignedTo: null,\n      status: \"OPEN\",\n      createdAt: new Date()\n    };\n\n    const task2: LeadTask = {\n      id: randomUUID(),\n      leadId: sampleLead2.id,\n      title: \"Send proposal\",\n      description: \"Prepare and send wedding package proposal\",\n      dueAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours from now\n      assignedTo: null,\n      status: \"OPEN\",\n      createdAt: new Date()\n    };\n\n    this.leadTasks.set(task1.id, task1);\n    this.leadTasks.set(task2.id, task2);\n\n    // Add some lead tags\n    this.leadTags.add(`${sampleLead1.id}:${corporateTag.id}`);\n    this.leadTags.add(`${sampleLead2.id}:${weddingTag.id}`);\n    this.leadTags.add(`${sampleLead2.id}:${hotLeadTag.id}`);\n  }\n\n  // Campaign Sources implementation\n  async getCampaignSources(): Promise<CampaignSource[]> {\n    return Array.from(this.campaignSources.values());\n  }\n\n  async createCampaignSource(source: InsertCampaignSource): Promise<CampaignSource> {\n    const newSource: CampaignSource = {\n      id: randomUUID(),\n      ...source,\n      createdAt: new Date(),\n    };\n    this.campaignSources.set(newSource.id, newSource);\n    return newSource;\n  }\n\n  async updateCampaignSource(id: string, source: Partial<InsertCampaignSource>): Promise<CampaignSource | undefined> {\n    const existing = this.campaignSources.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...source };\n    this.campaignSources.set(id, updated);\n    return updated;\n  }\n\n  // Tags implementation\n  async getTags(): Promise<Tag[]> {\n    return Array.from(this.tags.values());\n  }\n\n  async createTag(tag: InsertTag): Promise<Tag> {\n    const newTag: Tag = {\n      id: randomUUID(),\n      ...tag,\n      createdAt: new Date(),\n    };\n    this.tags.set(newTag.id, newTag);\n    return newTag;\n  }\n\n  async updateTag(id: string, tag: Partial<InsertTag>): Promise<Tag | undefined> {\n    const existing = this.tags.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...tag };\n    this.tags.set(id, updated);\n    return updated;\n  }\n\n  async deleteTag(id: string): Promise<boolean> {\n    // Remove all lead-tag associations for this tag\n    const toRemove = Array.from(this.leadTags).filter(combo => combo.endsWith(`:${id}`));\n    toRemove.forEach(combo => this.leadTags.delete(combo));\n    \n    return this.tags.delete(id);\n  }\n\n  // Leads implementation\n  async getLeads(filters?: { status?: string; source?: string; q?: string }): Promise<Lead[]> {\n    let leads = Array.from(this.leads.values());\n    \n    if (filters?.status) {\n      leads = leads.filter(lead => lead.status === filters.status);\n    }\n    \n    if (filters?.source) {\n      leads = leads.filter(lead => lead.sourceId === filters.source);\n    }\n    \n    if (filters?.q) {\n      const query = filters.q.toLowerCase();\n      leads = leads.filter(lead => \n        lead.firstName.toLowerCase().includes(query) ||\n        lead.lastName.toLowerCase().includes(query) ||\n        lead.email.toLowerCase().includes(query) ||\n        lead.eventType.toLowerCase().includes(query) ||\n        (lead.notes && lead.notes.toLowerCase().includes(query))\n      );\n    }\n    \n    return leads.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getLead(id: string): Promise<Lead | undefined> {\n    return this.leads.get(id);\n  }\n\n  async createLead(lead: InsertLead): Promise<Lead> {\n    const newLead: Lead = {\n      id: randomUUID(),\n      ...lead,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.leads.set(newLead.id, newLead);\n    return newLead;\n  }\n\n  async updateLead(id: string, lead: Partial<InsertLead>): Promise<Lead | undefined> {\n    const existing = this.leads.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...lead, updatedAt: new Date() };\n    this.leads.set(id, updated);\n    return updated;\n  }\n\n  async deleteLead(id: string): Promise<boolean> {\n    // Remove all activities, tasks, and tag associations for this lead\n    const activitiesToRemove = Array.from(this.leadActivities.values()).filter(a => a.leadId === id);\n    activitiesToRemove.forEach(activity => this.leadActivities.delete(activity.id));\n    \n    const tasksToRemove = Array.from(this.leadTasks.values()).filter(t => t.leadId === id);\n    tasksToRemove.forEach(task => this.leadTasks.delete(task.id));\n    \n    const tagsToRemove = Array.from(this.leadTags).filter(combo => combo.startsWith(`${id}:`));\n    tagsToRemove.forEach(combo => this.leadTags.delete(combo));\n    \n    return this.leads.delete(id);\n  }\n\n  // Lead Activities implementation\n  async getLeadActivities(leadId: string): Promise<LeadActivity[]> {\n    return Array.from(this.leadActivities.values())\n      .filter(activity => activity.leadId === leadId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createLeadActivity(activity: InsertLeadActivity): Promise<LeadActivity> {\n    const newActivity: LeadActivity = {\n      id: randomUUID(),\n      ...activity,\n      createdAt: new Date(),\n    };\n    this.leadActivities.set(newActivity.id, newActivity);\n    return newActivity;\n  }\n\n  // Lead Tasks implementation\n  async getLeadTasks(filters?: { assignee?: string; due?: string }): Promise<LeadTask[]> {\n    let tasks = Array.from(this.leadTasks.values());\n    \n    if (filters?.assignee) {\n      tasks = tasks.filter(task => task.assignedTo === filters.assignee);\n    }\n    \n    if (filters?.due) {\n      const dueDate = new Date(filters.due);\n      tasks = tasks.filter(task => \n        task.dueAt && task.dueAt.toDateString() === dueDate.toDateString()\n      );\n    }\n    \n    return tasks.sort((a, b) => {\n      if (!a.dueAt && !b.dueAt) return 0;\n      if (!a.dueAt) return 1;\n      if (!b.dueAt) return -1;\n      return a.dueAt.getTime() - b.dueAt.getTime();\n    });\n  }\n\n  async createLeadTask(task: InsertLeadTask): Promise<LeadTask> {\n    const newTask: LeadTask = {\n      id: randomUUID(),\n      ...task,\n      createdAt: new Date(),\n    };\n    this.leadTasks.set(newTask.id, newTask);\n    return newTask;\n  }\n\n  async updateLeadTask(id: string, task: Partial<InsertLeadTask>): Promise<LeadTask | undefined> {\n    const existing = this.leadTasks.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...task };\n    this.leadTasks.set(id, updated);\n    return updated;\n  }\n\n  // Tours implementation\n  async getTours(): Promise<Tour[]> {\n    return Array.from(this.tours.values()).sort((a, b) => a.scheduledAt.getTime() - b.scheduledAt.getTime());\n  }\n\n  async getTour(id: string): Promise<Tour | undefined> {\n    return this.tours.get(id);\n  }\n\n  async createTour(tour: InsertTour): Promise<Tour> {\n    const newTour: Tour = {\n      id: randomUUID(),\n      ...tour,\n      createdAt: new Date(),\n    };\n    this.tours.set(newTour.id, newTour);\n    return newTour;\n  }\n\n  async updateTour(id: string, tour: Partial<InsertTour>): Promise<Tour | undefined> {\n    const existing = this.tours.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...tour };\n    this.tours.set(id, updated);\n    return updated;\n  }\n\n  // Lead Tags (many-to-many) implementation\n  async getLeadTags(leadId: string): Promise<Tag[]> {\n    const tagIds = Array.from(this.leadTags)\n      .filter(combo => combo.startsWith(`${leadId}:`))\n      .map(combo => combo.split(':')[1]);\n    \n    return tagIds.map(tagId => this.tags.get(tagId)).filter(Boolean) as Tag[];\n  }\n\n  async addLeadTag(leadId: string, tagId: string): Promise<void> {\n    this.leadTags.add(`${leadId}:${tagId}`);\n  }\n\n  async removeLeadTag(leadId: string, tagId: string): Promise<void> {\n    this.leadTags.delete(`${leadId}:${tagId}`);\n  }\n\n\n}\n\nexport const storage = new MemStorage();\n","size_bytes":64408},"server/middleware/firebase-auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { verifyIdToken, getFirestoreUser } from '../firebase-admin';\n\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    uid: string;\n    email: string;\n    isSuperAdmin?: boolean;\n    [key: string]: any;\n  };\n}\n\nexport async function authenticateFirebase(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  try {\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n\n    const idToken = authHeader.split('Bearer ')[1];\n    const decodedToken = await verifyIdToken(idToken);\n    \n    if (!decodedToken) {\n      return res.status(401).json({ message: 'Invalid token' });\n    }\n\n    // Get additional user data from Firestore\n    const firestoreUser = await getFirestoreUser(decodedToken.uid);\n    \n    req.user = {\n      uid: decodedToken.uid,\n      email: decodedToken.email || '',\n      ...firestoreUser\n    };\n\n    next();\n  } catch (error) {\n    console.error('Authentication error:', error);\n    return res.status(401).json({ message: 'Authentication failed' });\n  }\n}\n\nexport function requireSuperAdmin(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  if (!req.user) {\n    return res.status(401).json({ message: 'Authentication required' });\n  }\n\n  // Check if user is super admin - for now, we'll check if they're the designated super admin\n  if (req.user.email !== 'yonasfasil.sl@gmail.com') {\n    return res.status(403).json({ message: 'Super admin access required' });\n  }\n\n  next();\n}\n\nexport function requireAuthenticated(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  if (!req.user) {\n    return res.status(401).json({ message: 'Authentication required' });\n  }\n  next();\n}","size_bytes":1852},"server/middleware/permissions.ts":{"content":"import type { Request, Response, NextFunction } from 'express';\nimport { TenantRequest } from './tenantContext';\n\n// Granular permission definitions (following ChatGPT's suggestion)\nexport interface TenantPermissions {\n  // Events & Bookings\n  'events:view'?: boolean;\n  'events:create'?: boolean;\n  'events:edit'?: boolean;\n  'events:cancel'?: boolean;\n  \n  // Proposals\n  'proposals:view'?: boolean;\n  'proposals:create'?: boolean;\n  'proposals:send'?: boolean;\n  'proposals:edit'?: boolean;\n  \n  // Customers & Leads\n  'customers:view'?: boolean;\n  'customers:create'?: boolean;\n  'customers:edit'?: boolean;\n  \n  // Payments\n  'payments:view'?: boolean;\n  'payments:record'?: boolean;\n  'payments:refund'?: boolean;\n  \n  // Venues & Spaces\n  'venues:view'?: boolean;\n  'venues:manage'?: boolean;\n  'spaces:view'?: boolean;\n  'spaces:manage'?: boolean;\n  \n  // Reports & Analytics\n  'reports:view'?: boolean;\n  \n  // Communications\n  'communications:send_email'?: boolean;\n  'communications:send_sms'?: boolean;\n  \n  // AI Features\n  'ai:use'?: boolean;\n  \n  // Settings & Administration\n  'settings:manage'?: boolean;\n  'team:manage'?: boolean;\n  'billing:manage'?: boolean;\n}\n\n// Permission presets for quick role setup\nexport const PERMISSION_PRESETS: Record<string, TenantPermissions> = {\n  owner: {\n    'events:view': true, 'events:create': true, 'events:edit': true, 'events:cancel': true,\n    'proposals:view': true, 'proposals:create': true, 'proposals:send': true, 'proposals:edit': true,\n    'customers:view': true, 'customers:create': true, 'customers:edit': true,\n    'payments:view': true, 'payments:record': true, 'payments:refund': true,\n    'venues:view': true, 'venues:manage': true, 'spaces:view': true, 'spaces:manage': true,\n    'reports:view': true,\n    'communications:send_email': true, 'communications:send_sms': true,\n    'ai:use': true,\n    'settings:manage': true, 'team:manage': true, 'billing:manage': true,\n  },\n  \n  admin: {\n    'events:view': true, 'events:create': true, 'events:edit': true, 'events:cancel': true,\n    'proposals:view': true, 'proposals:create': true, 'proposals:send': true, 'proposals:edit': true,\n    'customers:view': true, 'customers:create': true, 'customers:edit': true,\n    'payments:view': true, 'payments:record': true,\n    'venues:view': true, 'venues:manage': true, 'spaces:view': true, 'spaces:manage': true,\n    'reports:view': true,\n    'communications:send_email': true, 'communications:send_sms': true,\n    'ai:use': true,\n    'settings:manage': true, 'team:manage': true,\n  },\n  \n  manager: {\n    'events:view': true, 'events:create': true, 'events:edit': true,\n    'proposals:view': true, 'proposals:create': true, 'proposals:send': true,\n    'customers:view': true, 'customers:create': true, 'customers:edit': true,\n    'payments:view': true, 'payments:record': true,\n    'venues:view': true, 'spaces:view': true,\n    'reports:view': true,\n    'communications:send_email': true,\n    'ai:use': true,\n  },\n  \n  staff: {\n    'events:view': true, 'events:create': true,\n    'proposals:view': true, 'proposals:create': true,\n    'customers:view': true, 'customers:create': true,\n    'payments:view': true,\n    'venues:view': true, 'spaces:view': true,\n    'ai:use': true,\n  },\n  \n  viewer: {\n    'events:view': true,\n    'proposals:view': true,\n    'customers:view': true,\n    'payments:view': true,\n    'venues:view': true, 'spaces:view': true,\n    'reports:view': true,\n  },\n};\n\n// Permission guard middleware\nexport const requirePermission = (permission: keyof TenantPermissions) => {\n  return (req: TenantRequest, res: Response, next: NextFunction) => {\n    // Skip for super admin routes\n    if (req.path.startsWith('/api/superadmin')) {\n      return next();\n    }\n\n    // Check if user has tenant context\n    if (!req.tenantId || !req.userRole) {\n      return res.status(403).json({ \n        message: 'Tenant access required',\n        requiredPermission: permission \n      });\n    }\n\n    // Owner and admin roles have all permissions by default\n    if (req.userRole === 'owner') {\n      return next();\n    }\n\n    // Check specific permission\n    const userPermissions = (req as any).userPermissions || {};\n    if (!userPermissions[permission]) {\n      return res.status(403).json({ \n        message: 'Insufficient permissions',\n        requiredPermission: permission,\n        currentRole: req.userRole \n      });\n    }\n\n    next();\n  };\n};\n\n// Plan enforcement middleware (following ChatGPT's suggestion)\nexport const planEnforcer = (feature: string, limitType: string) => {\n  return async (req: TenantRequest, res: Response, next: NextFunction) => {\n    try {\n      // Skip for super admin routes\n      if (req.path.startsWith('/api/superadmin')) {\n        return next();\n      }\n\n      if (!req.tenant) {\n        return res.status(403).json({ message: 'No tenant context' });\n      }\n\n      // TODO: Check tenant's feature package limits\n      // For now, allow all operations\n      next();\n    } catch (error) {\n      console.error('Plan enforcement error:', error);\n      res.status(500).json({ message: 'Plan validation failed' });\n    }\n  };\n};\n\n// Status gate middleware (following ChatGPT's suggestion)\nexport const statusGate = (req: TenantRequest, res: Response, next: NextFunction) => {\n  // Skip for super admin routes\n  if (req.path.startsWith('/api/superadmin')) {\n    return next();\n  }\n\n  if (!req.tenant) {\n    return res.status(403).json({ message: 'No tenant context' });\n  }\n\n  const status = req.tenant.status;\n  const isBillingRoute = req.path.includes('/billing') || req.path.includes('/payment');\n\n  switch (status) {\n    case 'active':\n      // Full access\n      return next();\n      \n    case 'past_due':\n      // Read-only except billing\n      if (req.method !== 'GET' && !isBillingRoute) {\n        return res.status(402).json({ \n          message: 'Account past due - read-only mode',\n          hint: 'Please update your payment method to restore full access'\n        });\n      }\n      return next();\n      \n    case 'canceled':\n    case 'suspended':\n      // Billing-only access\n      if (!isBillingRoute) {\n        return res.status(402).json({ \n          message: 'Account suspended',\n          hint: 'Please contact support or reactivate your subscription'\n        });\n      }\n      return next();\n      \n    default:\n      return res.status(403).json({ message: 'Invalid account status' });\n  }\n};","size_bytes":6404},"server/middleware/session.ts":{"content":"import session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport { pool } from \"../db\";\n\nconst PgSession = connectPgSimple(session);\n\nexport const sessionMiddleware = session({\n  store: new PgSession({\n    pool: pool,\n    tableName: 'sessions',\n    createTableIfMissing: false,\n  }),\n  secret: process.env.SESSION_SECRET || 'your-session-secret-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n  },\n});","size_bytes":581},"server/routes/dashboard.ts":{"content":"import type { Express } from \"express\";\nimport { storage } from \"../storage\";\nimport { aiService } from \"../services/ai\";\n\nexport function registerDashboardRoutes(app: Express) {\n  // Optimized dashboard data endpoint - replaces multiple API calls with one\n  app.get('/api/dashboard/overview', async (req: any, res) => {\n    try {\n      // Fetch all essential dashboard data in parallel\n      const [\n        venues,\n        bookings,\n        customers,\n        leads,\n        payments,\n        insights,\n        settings\n      ] = await Promise.all([\n        storage.getVenues(),\n        storage.getBookings(),\n        storage.getCustomers(),\n        storage.getLeads(),\n        storage.getPayments(),\n        storage.getAiInsights(),\n        storage.getSettings()\n      ]);\n\n      // Calculate key metrics\n      const now = new Date();\n      const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n\n      const thisMonthBookings = bookings.filter(b => \n        b.createdAt && new Date(b.createdAt) >= thisMonth\n      );\n      const lastMonthBookings = bookings.filter(b => \n        b.createdAt && new Date(b.createdAt) >= lastMonth && \n        new Date(b.createdAt) < thisMonth\n      );\n\n      const totalRevenue = thisMonthBookings.reduce((sum, b) => \n        sum + Number(b.totalAmount || 0), 0\n      );\n      const lastMonthRevenue = lastMonthBookings.reduce((sum, b) => \n        sum + Number(b.totalAmount || 0), 0\n      );\n\n      const upcomingBookings = bookings.filter(b => \n        b.eventDate && new Date(b.eventDate) > now\n      ).slice(0, 5);\n\n      const activeLeads = leads.filter(l => \n        l.status === 'new' || l.status === 'contacted' || l.status === 'qualified'\n      ).slice(0, 5);\n\n      const recentPayments = payments\n        .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime())\n        .slice(0, 5);\n\n      // Calendar events for the next 30 days\n      const calendarEvents = bookings\n        .filter(b => b.eventDate && new Date(b.eventDate) >= now)\n        .slice(0, 20)\n        .map(booking => ({\n          id: booking.id,\n          title: `${booking.customerName} - ${booking.eventType || 'Event'}`,\n          start: booking.eventDate,\n          end: booking.endDate || booking.eventDate,\n          venue: venues.find(v => v.id === booking.venueId)?.name || 'Unknown Venue',\n          status: booking.status,\n          guestCount: booking.guestCount\n        }));\n\n      // Business settings for company info\n      const businessSettings = settings.find(s => s.key === 'business')?.value || {\n        companyName: 'Venuine Events',\n        address: '',\n        phone: '',\n        email: ''\n      };\n\n      const response = {\n        // Core metrics\n        metrics: {\n          totalBookings: bookings.length,\n          thisMonthBookings: thisMonthBookings.length,\n          revenue: totalRevenue,\n          revenueGrowth: lastMonthRevenue > 0 ? \n            ((totalRevenue - lastMonthRevenue) / lastMonthRevenue * 100) : 0,\n          activeLeads: activeLeads.length,\n          totalVenues: venues.length,\n          totalCustomers: customers.length\n        },\n\n        // Dashboard widgets data\n        upcomingBookings: upcomingBookings.map(b => ({\n          id: b.id,\n          customerName: b.customerName,\n          eventType: b.eventType,\n          eventDate: b.eventDate,\n          venue: venues.find(v => v.id === b.venueId)?.name || 'Unknown',\n          status: b.status,\n          totalAmount: b.totalAmount\n        })),\n\n        activeLeads: activeLeads.map(l => ({\n          id: l.id,\n          firstName: l.firstName,\n          lastName: l.lastName,\n          eventType: l.eventType,\n          guestCount: l.guestCount,\n          status: l.status,\n          source: l.sourceId,\n          createdAt: l.createdAt\n        })),\n\n        recentPayments: recentPayments.map(p => ({\n          id: p.id,\n          amount: p.amount,\n          method: p.method,\n          status: p.status,\n          createdAt: p.createdAt,\n          bookingId: p.bookingId\n        })),\n\n        // Calendar data\n        calendar: {\n          mode: 'events',\n          data: calendarEvents\n        },\n\n        // AI insights\n        insights: insights.filter(i => i.isActive).slice(0, 3),\n\n        // Business info\n        business: businessSettings,\n\n        // Venue utilization\n        venues: venues.map(v => ({\n          id: v.id,\n          name: v.name,\n          bookingsThisMonth: thisMonthBookings.filter(b => b.venueId === v.id).length,\n          capacity: v.capacity,\n          revenueThisMonth: thisMonthBookings\n            .filter(b => b.venueId === v.id)\n            .reduce((sum, b) => sum + Number(b.totalAmount || 0), 0)\n        }))\n      };\n\n      res.json(response);\n    } catch (error) {\n      console.error('Dashboard overview error:', error);\n      res.status(500).json({ message: 'Failed to load dashboard data' });\n    }\n  });\n\n  // Quick stats endpoint for real-time updates\n  app.get('/api/dashboard/quick-stats', async (req: any, res) => {\n    try {\n      const [bookings, leads, payments] = await Promise.all([\n        storage.getBookings(),\n        storage.getLeads(),\n        storage.getPayments()\n      ]);\n\n      const now = new Date();\n      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n      const thisWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n\n      const todayBookings = bookings.filter(b => \n        b.createdAt && new Date(b.createdAt) >= today\n      );\n\n      const weeklyRevenue = payments\n        .filter(p => p.createdAt && new Date(p.createdAt) >= thisWeek)\n        .reduce((sum, p) => sum + Number(p.amount || 0), 0);\n\n      const hotLeads = leads.filter(l => l.status === 'hot' || l.status === 'qualified');\n\n      res.json({\n        todayBookings: todayBookings.length,\n        weeklyRevenue,\n        hotLeads: hotLeads.length,\n        pendingTasks: 0 // Add task counting when implemented\n      });\n    } catch (error) {\n      console.error('Quick stats error:', error);\n      res.status(500).json({ message: 'Failed to load quick stats' });\n    }\n  });\n}","size_bytes":6190},"server/routes/dev.ts":{"content":"import type { Express } from \"express\";\nimport { db } from \"../db\";\nimport { users } from \"@shared/schema\";\nimport { sql } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\n\nexport function registerDevRoutes(app: Express) {\n  // GET /api/dev/make-superadmin - Create superadmin user for development\n  app.get('/api/dev/make-superadmin', async (req, res) => {\n    try {\n      if (process.env.NODE_ENV === 'production') {\n        return res.status(403).json({ message: 'Not available in production' });\n      }\n\n      // Check if superadmin already exists\n      const result = await db.execute(sql`\n        SELECT * FROM users WHERE role = ${'superadmin'} LIMIT 1\n      `);\n      const existingSuperadmin = result.rows[0];\n\n      if (existingSuperadmin) {\n        return res.json({ \n          message: 'Superadmin already exists',\n          email: existingSuperadmin.email,\n          accessUrl: '/superadmin'\n        });\n      }\n\n      // Create superadmin user using direct SQL\n      const hashedPassword = await bcrypt.hash('admin123', 12);\n      \n      const result2 = await db.execute(sql`\n        INSERT INTO users (email, password, first_name, last_name, role, email_verified)\n        VALUES (${'admin@venuin.com'}, ${hashedPassword}, ${'Super'}, ${'Admin'}, ${'superadmin'}, ${true})\n        RETURNING *\n      `);\n      const superadmin = result2.rows[0];\n\n      res.json({\n        message: 'Superadmin created successfully',\n        email: 'admin@venuin.com',\n        password: 'admin123',\n        accessUrl: '/superadmin',\n        instructions: 'Login with the credentials above, then navigate to /superadmin'\n      });\n    } catch (error) {\n      console.error('Error creating superadmin:', error);\n      res.status(500).json({ message: 'Error creating superadmin' });\n    }\n  });\n}","size_bytes":1789},"server/services/ai.ts":{"content":"// Unified AI Service - Using Gemini as the primary AI provider\n// This consolidates all AI functionality to reduce complexity and improve maintainability\n\nimport { GoogleGenAI } from \"@google/genai\";\nimport type { \n  Lead, \n  Booking, \n  Customer, \n  Venue,\n  AiInsight \n} from \"@shared/schema\";\n\n// Initialize Gemini client\nconst genAI = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nexport interface VoiceTranscriptionResult {\n  text: string;\n  confidence: number;\n}\n\nexport interface LeadScoringResult {\n  score: number; // 0-100\n  reasons: string[];\n  priority: \"low\" | \"medium\" | \"high\";\n  nextActions: string[];\n}\n\nexport interface EmailReplyResult {\n  subject: string;\n  body: string;\n  tone: \"professional\" | \"friendly\" | \"formal\";\n}\n\nexport interface BookingInsight {\n  type: \"revenue_opportunity\" | \"scheduling_conflict\" | \"capacity_warning\" | \"recommendation\";\n  message: string;\n  priority: \"low\" | \"medium\" | \"high\";\n  actionRequired: boolean;\n  suggestedActions?: string[];\n}\n\nexport class AIService {\n  // Voice-to-text transcription for booking capture\n  async transcribeVoice(audioData: Buffer): Promise<VoiceTranscriptionResult> {\n    try {\n      // In a real implementation, you'd use Google Speech-to-Text API\n      // For now, return a mock response to prevent breaking the system\n      return {\n        text: \"I'd like to book the main ballroom for a wedding on December 15th for 150 guests\",\n        confidence: 0.95\n      };\n    } catch (error) {\n      console.error(\"Voice transcription error:\", error);\n      throw new Error(\"Failed to transcribe voice input\");\n    }\n  }\n\n  // Smart lead scoring based on multiple factors\n  async scoreLeads(leads: Lead[]): Promise<Map<string, LeadScoringResult>> {\n    const results = new Map<string, LeadScoringResult>();\n    \n    for (const lead of leads) {\n      try {\n        // Use fallback scoring for now to avoid API issues\n        results.set(lead.id, this.fallbackLeadScoring(lead));\n      } catch (error) {\n        console.error(`Error scoring lead ${lead.id}:`, error);\n        // Fallback scoring based on simple heuristics\n        results.set(lead.id, this.fallbackLeadScoring(lead));\n      }\n    }\n    \n    return results;\n  }\n\n  // Generate AI-powered email replies\n  async generateEmailReply(\n    customerEmail: string,\n    context: {\n      customerName?: string;\n      eventType?: string;\n      previousMessages?: string[];\n      venueInfo?: Venue;\n    }\n  ): Promise<EmailReplyResult> {\n    try {\n      // Use fallback for now to avoid API complexity\n      return this.fallbackEmailReply(context);\n    } catch (error) {\n      console.error(\"Error generating email reply:\", error);\n      return this.fallbackEmailReply(context);\n    }\n  }\n\n  // Generate booking insights and recommendations\n  async generateBookingInsights(\n    bookings: Booking[],\n    venues: Venue[],\n    customers: Customer[]\n  ): Promise<BookingInsight[]> {\n    try {\n      const insights: BookingInsight[] = [];\n      \n      // Analyze booking patterns\n      const upcomingBookings = bookings.filter(b => \n        b.eventDate && new Date(b.eventDate) > new Date() && \n        new Date(b.eventDate) <= new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)\n      );\n      \n      // Revenue opportunities\n      if (upcomingBookings.length > 0) {\n        const totalRevenue = upcomingBookings.reduce((sum, b) => sum + Number(b.totalAmount || 0), 0);\n        insights.push({\n          type: \"revenue_opportunity\",\n          message: `You have ${upcomingBookings.length} bookings in the next 30 days worth $${totalRevenue.toLocaleString()}`,\n          priority: \"medium\",\n          actionRequired: false\n        });\n      }\n      \n      // Capacity warnings\n      const venueBookingCounts = new Map<string, number>();\n      upcomingBookings.forEach(booking => {\n        if (booking.venueId) {\n          const count = venueBookingCounts.get(booking.venueId) || 0;\n          venueBookingCounts.set(booking.venueId, count + 1);\n        }\n      });\n      \n      venueBookingCounts.forEach((count, venueId) => {\n        const venue = venues.find(v => v.id === venueId);\n        if (venue && count > 15) { // More than 15 bookings per month\n          insights.push({\n            type: \"capacity_warning\",\n            message: `${venue.name} is heavily booked this month (${count} events). Consider premium pricing.`,\n            priority: \"high\",\n            actionRequired: true,\n            suggestedActions: [\"Review pricing strategy\", \"Consider venue expansion\"]\n          });\n        }\n      });\n      \n      return insights;\n    } catch (error) {\n      console.error(\"Error generating booking insights:\", error);\n      return [];\n    }\n  }\n\n  // Fallback methods for when AI services fail\n  private fallbackLeadScoring(lead: Lead): LeadScoringResult {\n    let score = 50; // Base score\n    const reasons: string[] = [];\n    \n    // Use available lead fields from the schema\n    // Budget factor (if available in notes or other fields)\n    if (lead.notes && lead.notes.toLowerCase().includes('budget')) {\n      score += 10;\n      reasons.push(\"Budget mentioned in notes\");\n    }\n    \n    // Contact urgency\n    if (lead.status === 'hot') {\n      score += 25;\n      reasons.push(\"Hot lead status\");\n    } else if (lead.status === 'warm') {\n      score += 15;\n      reasons.push(\"Warm lead status\");\n    }\n    \n    // Guest count\n    if (lead.guestCount && lead.guestCount > 100) {\n      score += 15;\n      reasons.push(\"Large event with high revenue potential\");\n    }\n    \n    const priority = score >= 80 ? \"high\" : score >= 60 ? \"medium\" : \"low\";\n    \n    return {\n      score: Math.min(100, score),\n      reasons,\n      priority,\n      nextActions: [\"Contact within 24 hours\", \"Send venue information\", \"Schedule site visit\"]\n    };\n  }\n\n  private fallbackEmailReply(context: any): EmailReplyResult {\n    return {\n      subject: `Re: Venue Inquiry - ${context.eventType || 'Event'}`,\n      body: `Dear ${context.customerName || 'valued customer'},\n\nThank you for your interest in our venue for your upcoming ${context.eventType || 'event'}. We would be delighted to help make your special day memorable.\n\nOur team would love to discuss your vision and show you how our space can accommodate your needs. We offer competitive pricing and exceptional service to ensure your event is perfect.\n\nWould you be available for a brief call or site visit to discuss your requirements in detail?\n\nLooking forward to hearing from you soon.\n\nBest regards,\nThe Venue Team`,\n      tone: \"professional\"\n    };\n  }\n}\n\n// Export singleton instance\nexport const aiService = new AIService();","size_bytes":6630},"server/services/auditService.ts":{"content":"import { db } from '../db';\nimport { auditLogs, type InsertAuditLog } from '@shared/schema';\nimport { eq, desc, and } from 'drizzle-orm';\n\nexport class AuditService {\n  static async log(data: {\n    tenantId: string;\n    userId: string;\n    action: string;\n    entityType: string;\n    entityId?: string;\n    changes?: Record<string, any>;\n    metadata?: Record<string, any>;\n  }) {\n    try {\n      const auditData: InsertAuditLog = {\n        tenantId: data.tenantId,\n        userId: data.userId,\n        action: data.action,\n        entityType: data.entityType,\n        entityId: data.entityId,\n        changes: data.changes,\n        metadata: data.metadata,\n      };\n\n      await db.insert(auditLogs).values(auditData);\n    } catch (error) {\n      console.error('Audit logging error:', error);\n      // Don't throw error to avoid breaking main functionality\n    }\n  }\n\n  static async logCreate(tenantId: string, userId: string, entityType: string, entityId: string, data: any) {\n    await this.log({\n      tenantId,\n      userId,\n      action: 'CREATE',\n      entityType,\n      entityId,\n      changes: { created: data },\n    });\n  }\n\n  static async logUpdate(tenantId: string, userId: string, entityType: string, entityId: string, oldData: any, newData: any) {\n    await this.log({\n      tenantId,\n      userId,\n      action: 'UPDATE',\n      entityType,\n      entityId,\n      changes: { before: oldData, after: newData },\n    });\n  }\n\n  static async logDelete(tenantId: string, userId: string, entityType: string, entityId: string, data: any) {\n    await this.log({\n      tenantId,\n      userId,\n      action: 'DELETE',\n      entityType,\n      entityId,\n      changes: { deleted: data },\n    });\n  }\n\n  static async getAuditLogs(tenantId: string, options: {\n    entityType?: string;\n    entityId?: string;\n    userId?: string;\n    action?: string;\n    limit?: number;\n    offset?: number;\n  } = {}) {\n    const { entityType, entityId, userId, action, limit = 50, offset = 0 } = options;\n\n    let conditions = [eq(auditLogs.tenantId, tenantId)];\n\n    if (entityType) {\n      conditions.push(eq(auditLogs.entityType, entityType));\n    }\n    if (entityId) {\n      conditions.push(eq(auditLogs.entityId, entityId));\n    }\n    if (userId) {\n      conditions.push(eq(auditLogs.userId, userId));\n    }\n    if (action) {\n      conditions.push(eq(auditLogs.action, action));\n    }\n\n    return await db\n      .select()\n      .from(auditLogs)\n      .where(conditions.length === 1 ? conditions[0] : and(...conditions))\n      .orderBy(desc(auditLogs.createdAt))\n      .limit(limit)\n      .offset(offset);\n  }\n}","size_bytes":2598},"server/storage/firestore.ts":{"content":"import { serverFirebaseOps } from '../firebase-client';\nimport { randomUUID } from 'crypto';\n\n// Firestore-based storage implementation\nexport class FirestoreStorage {\n  \n  // Feature Packages\n  async getFeaturePackages() {\n    return await serverFirebaseOps.getFeaturePackages();\n  }\n\n  async getFeaturePackage(id: string) {\n    return await serverFirebaseOps.getFeaturePackage(id);\n  }\n\n  async createFeaturePackage(data: any) {\n    return await serverFirebaseOps.createFeaturePackage(data);\n  }\n\n  async updateFeaturePackage(id: string, data: any) {\n    return await serverFirebaseOps.updateFeaturePackage(id, data);\n  }\n\n  async deleteFeaturePackage(id: string) {\n    return await serverFirebaseOps.deleteFeaturePackage(id);\n  }\n\n  // Tenants\n  async getTenants(searchTerm?: string, statusFilter?: string) {\n    // Using serverFirebaseOps would require implementing these methods, \n    // for now return empty array until we extend serverFirebaseOps\n    return [];\n  }\n\n  async getTenant(id: string) {\n    return null; // Temporary until we extend serverFirebaseOps\n  }\n\n  async createTenant(data: any) {\n    // Temporary implementation - return dummy data until we extend serverFirebaseOps\n    return null;\n  }\n\n  // Users\n  async getUsers() {\n    return await serverFirebaseOps.getUsers();\n  }\n\n  async deleteUser(uid: string) {\n    return await serverFirebaseOps.deleteUser(uid);\n  }\n\n  // Analytics\n  async getAnalytics() {\n    return await serverFirebaseOps.getAnalytics();\n  }\n}\n\nexport const firestoreStorage = new FirestoreStorage();","size_bytes":1545},"client/src/components/AdminAuthGuard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { useEffect, ReactNode } from 'react';\n\ninterface AdminAuthGuardProps {\n  children: ReactNode;\n}\n\nexport function AdminAuthGuard({ children }: AdminAuthGuardProps) {\n  const [, setLocation] = useLocation();\n  \n  const { data: user, isLoading, error } = useQuery({\n    queryKey: ['/api/auth/me'],\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (isLoading) return;\n\n    // Not authenticated - redirect to login\n    if (!user || error) {\n      setLocation('/login');\n      return;\n    }\n\n    // Not super admin - redirect to home or tenant dashboard\n    if (!(user as any).isSuperAdmin) {\n      if ((user as any).currentTenant) {\n        setLocation(`/t/${(user as any).currentTenant.slug}/dashboard`);\n      } else {\n        setLocation('/');\n      }\n      return;\n    }\n  }, [user, isLoading, error, setLocation]);\n\n  // Show loading while checking auth\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  // Don't render anything while redirecting\n  if (!user || !(user as any).isSuperAdmin) {\n    return null;\n  }\n\n  // User is authenticated and is super admin\n  return <>{children}</>;\n}","size_bytes":1373},"client/src/components/DevTools.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Settings, User, Shield } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function DevTools() {\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleMakeSuperadmin = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/dev/make-superadmin');\n      const data = await response.json();\n      \n      toast({\n        title: \"Success\",\n        description: `Superadmin access ready! ${data.instructions || 'Navigate to /superadmin'}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create superadmin access\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Only show in development\n  if (process.env.NODE_ENV === 'production') {\n    return null;\n  }\n\n  return (\n    <div className=\"fixed bottom-4 right-4 z-50\">\n      <Dialog>\n        <DialogTrigger asChild>\n          <Button size=\"sm\" variant=\"outline\" className=\"bg-background/80 backdrop-blur-sm\">\n            <Settings className=\"h-4 w-4 mr-1\" />\n            Dev Tools\n          </Button>\n        </DialogTrigger>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Settings className=\"h-5 w-5\" />\n              Development Tools\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <h4 className=\"text-sm font-medium flex items-center gap-2\">\n                <Shield className=\"h-4 w-4\" />\n                Super Admin Access\n              </h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Create superadmin credentials to access the platform management console at /superadmin\n              </p>\n              <Button \n                onClick={handleMakeSuperadmin}\n                disabled={loading}\n                className=\"w-full\"\n              >\n                <User className=\"h-4 w-4 mr-2\" />\n                {loading ? 'Creating...' : 'Make Me Superadmin'}\n              </Button>\n            </div>\n            \n            <div className=\"border-t pt-4\">\n              <p className=\"text-xs text-muted-foreground\">\n                Development tools are only available in development mode\n              </p>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":2741},"client/src/components/SimpleDevAuth.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { toast } from \"@/hooks/use-toast\";\n\ninterface SimpleDevAuthProps {\n  onAuthenticated: (userId: string) => void;\n}\n\nexport function SimpleDevAuth({ onAuthenticated }: SimpleDevAuthProps) {\n  const [userId, setUserId] = useState(\"dev-user-123\");\n\n  const handleAuth = () => {\n    if (userId.trim()) {\n      // Store in localStorage for dev mode\n      localStorage.setItem('devUserId', userId);\n      onAuthenticated(userId);\n      toast({ \n        title: \"Development Authentication\", \n        description: `Authenticated as user: ${userId}` \n      });\n    }\n  };\n\n  if (import.meta.env.MODE !== 'development') {\n    return null;\n  }\n\n  return (\n    <Card className=\"w-96 mx-auto mt-20\">\n      <CardHeader>\n        <CardTitle>Development Authentication</CardTitle>\n        <CardDescription>\n          Enter a user ID for development testing\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Input\n          value={userId}\n          onChange={(e) => setUserId(e.target.value)}\n          placeholder=\"Enter user ID\"\n        />\n        <Button onClick={handleAuth} className=\"w-full\">\n          Login as Dev User\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":1449},"client/src/components/taxes-and-fees-settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Plus, Trash2, Edit, CreditCard, DollarSign, Percent } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { TaxSetting, InsertTaxSetting } from \"@shared/schema\";\n\ninterface TaxFeeFormData {\n  name: string;\n  type: \"tax\" | \"fee\" | \"service_charge\";\n  calculation: \"percentage\" | \"fixed\";\n  value: string;\n  applyTo: \"packages\" | \"services\" | \"both\" | \"total\";\n  description: string;\n  isActive: boolean;\n  isTaxable: boolean;\n  applicableTaxIds: string[];\n}\n\nconst defaultTaxFeeForm: TaxFeeFormData = {\n  name: \"\",\n  type: \"tax\",\n  calculation: \"percentage\",\n  value: \"\",\n  applyTo: \"both\",\n  description: \"\",\n  isActive: true,\n  isTaxable: false,\n  applicableTaxIds: []\n};\n\nexport function TaxesAndFeesSettings() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingItem, setEditingItem] = useState<TaxSetting | null>(null);\n  const [formData, setFormData] = useState<TaxFeeFormData>(defaultTaxFeeForm);\n\n  // Fetch taxes and fees\n  const { data: taxesAndFees = [], isLoading } = useQuery({\n    queryKey: [\"/api/tax-settings\"],\n  });\n\n  // Get available taxes for selection\n  const availableTaxes = taxesAndFees.filter((item: TaxSetting) => item.type === 'tax' && item.isActive);\n\n  // Create tax/fee mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertTaxSetting) => {\n      return apiRequest(\"POST\", `/api/tax-settings`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tax-settings\"] });\n      setIsAddDialogOpen(false);\n      setFormData(defaultTaxFeeForm);\n      toast({\n        title: \"Success\",\n        description: `${formData.type} created successfully`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: `Failed to create ${formData.type}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update tax/fee mutation\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertTaxSetting> }) => {\n      return apiRequest(\"PATCH\", `/api/tax-settings/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tax-settings\"] });\n      setEditingItem(null);\n      setFormData(defaultTaxFeeForm);\n      toast({\n        title: \"Success\",\n        description: `${formData.type} updated successfully`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: `Failed to update ${formData.type}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete tax/fee mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/tax-settings/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tax-settings\"] });\n      toast({\n        title: \"Success\",\n        description: \"Item deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = () => {\n    if (!formData.name || !formData.value) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const data: InsertTaxSetting = {\n      name: formData.name,\n      type: formData.type,\n      calculation: formData.calculation,\n      value: formData.value,\n      applyTo: formData.applyTo,\n      description: formData.description || null,\n      isActive: formData.isActive,\n      isTaxable: formData.isTaxable,\n      applicableTaxIds: formData.applicableTaxIds,\n    };\n\n    if (editingItem) {\n      updateMutation.mutate({ id: editingItem.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (item: TaxSetting) => {\n    setEditingItem(item);\n    setFormData({\n      name: item.name,\n      type: item.type as \"tax\" | \"fee\" | \"service_charge\",\n      calculation: item.calculation as \"percentage\" | \"fixed\",\n      value: item.value,\n      applyTo: item.applyTo as \"packages\" | \"services\" | \"both\" | \"total\",\n      description: item.description || \"\",\n      isActive: item.isActive || true,\n      isTaxable: item.isTaxable || false,\n      applicableTaxIds: item.applicableTaxIds || [],\n    });\n    setIsAddDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this item?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const resetForm = () => {\n    setFormData(defaultTaxFeeForm);\n    setEditingItem(null);\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"tax\":\n        return <Percent className=\"w-4 h-4\" />;\n      case \"fee\":\n        return <DollarSign className=\"w-4 h-4\" />;\n      case \"service_charge\":\n        return <CreditCard className=\"w-4 h-4\" />;\n      default:\n        return <Percent className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case \"tax\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"fee\":\n        return \"bg-green-100 text-green-800\";\n      case \"service_charge\":\n        return \"bg-purple-100 text-purple-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <CreditCard className=\"w-5 h-5 text-emerald-600\" />\n            Taxes and Fees Configuration\n          </CardTitle>\n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button onClick={resetForm} className=\"bg-emerald-600 hover:bg-emerald-700\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Tax/Fee\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingItem ? \"Edit\" : \"Add\"} Tax/Fee\n                </DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">Name *</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                    placeholder=\"Sales Tax, Service Fee, etc.\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"type\">Type</Label>\n                    <Select value={formData.type} onValueChange={(value: \"tax\" | \"fee\" | \"service_charge\") => setFormData({ ...formData, type: value })}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"tax\">Tax</SelectItem>\n                        <SelectItem value=\"fee\">Fee</SelectItem>\n                        <SelectItem value=\"service_charge\">Service Charge</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"calculation\">Calculation</Label>\n                    <Select value={formData.calculation} onValueChange={(value: \"percentage\" | \"fixed\") => setFormData({ ...formData, calculation: value })}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"percentage\">Percentage</SelectItem>\n                        <SelectItem value=\"fixed\">Fixed Amount</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"value\">Value *</Label>\n                  <Input\n                    id=\"value\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.value}\n                    onChange={(e) => setFormData({ ...formData, value: e.target.value })}\n                    placeholder={formData.calculation === \"percentage\" ? \"8.5\" : \"25.00\"}\n                  />\n                  <p className=\"text-xs text-slate-500\">\n                    {formData.calculation === \"percentage\" ? \"Enter percentage (e.g., 8.5 for 8.5%)\" : \"Enter fixed amount in dollars\"}\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"applyTo\">Apply To</Label>\n                  <Select value={formData.applyTo} onValueChange={(value: \"packages\" | \"services\" | \"both\" | \"total\") => setFormData({ ...formData, applyTo: value })}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"packages\">Packages Only</SelectItem>\n                      <SelectItem value=\"services\">Services Only</SelectItem>\n                      <SelectItem value=\"both\">Packages & Services</SelectItem>\n                      <SelectItem value=\"total\">Event Total</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Input\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                    placeholder=\"Optional description\"\n                  />\n                </div>\n\n                {(formData.type === \"fee\" || formData.type === \"service_charge\") && (\n                  <>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-1\">\n                        <Label className=\"text-base font-medium\">Subject to Tax</Label>\n                        <p className=\"text-xs text-slate-500\">Whether this {formData.type.replace(\"_\", \" \")} is taxable</p>\n                      </div>\n                      <Switch\n                        checked={formData.isTaxable}\n                        onCheckedChange={(checked) => setFormData({ ...formData, isTaxable: checked, applicableTaxIds: checked ? formData.applicableTaxIds : [] })}\n                      />\n                    </div>\n\n                    {formData.isTaxable && availableTaxes.length > 0 && (\n                      <div className=\"space-y-2\">\n                        <Label>Applicable Taxes</Label>\n                        <p className=\"text-xs text-slate-500\">Select which taxes apply to this {formData.type.replace(\"_\", \" \")}</p>\n                        <div className=\"space-y-2 max-h-32 overflow-y-auto border rounded-md p-2\">\n                          {availableTaxes.map((tax: TaxSetting) => (\n                            <div key={tax.id} className=\"flex items-center space-x-2\">\n                              <input\n                                type=\"checkbox\"\n                                id={`tax-${tax.id}`}\n                                checked={formData.applicableTaxIds.includes(tax.id)}\n                                onChange={(e) => {\n                                  const isChecked = e.target.checked;\n                                  setFormData({\n                                    ...formData,\n                                    applicableTaxIds: isChecked\n                                      ? [...formData.applicableTaxIds, tax.id]\n                                      : formData.applicableTaxIds.filter(id => id !== tax.id)\n                                  });\n                                }}\n                                className=\"rounded border-gray-300\"\n                              />\n                              <label htmlFor={`tax-${tax.id}`} className=\"text-sm flex-1 cursor-pointer\">\n                                {tax.name} ({tax.value}% {tax.applyTo})\n                              </label>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {formData.isTaxable && availableTaxes.length === 0 && (\n                      <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-md\">\n                        <p className=\"text-sm text-yellow-800\">\n                          No active taxes found. You need to create at least one tax before marking fees as taxable.\n                        </p>\n                      </div>\n                    )}\n                  </>\n                )}\n\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-base font-medium\">Active</Label>\n                  <Switch\n                    checked={formData.isActive}\n                    onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n                  />\n                </div>\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setIsAddDialogOpen(false);\n                      resetForm();\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={handleSubmit}\n                    disabled={createMutation.isPending || updateMutation.isPending}\n                    className=\"bg-emerald-600 hover:bg-emerald-700\"\n                  >\n                    {editingItem ? \"Update\" : \"Create\"}\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {isLoading ? (\n          <div className=\"text-center py-8\">Loading taxes and fees...</div>\n        ) : taxesAndFees.length === 0 ? (\n          <div className=\"text-center py-8 text-slate-500\">\n            <CreditCard className=\"w-12 h-12 mx-auto text-slate-300 mb-4\" />\n            <p className=\"text-lg font-medium mb-2\">No taxes or fees configured</p>\n            <p className=\"text-sm\">Add your first tax or fee to get started</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {taxesAndFees.map((item: TaxSetting) => (\n              <div key={item.id} className=\"border rounded-lg p-4 hover:bg-slate-50 transition-colors\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className={`p-2 rounded-full ${getTypeColor(item.type)}`}>\n                      {getTypeIcon(item.type)}\n                    </div>\n                    <div>\n                      <div className=\"flex items-center gap-2\">\n                        <h3 className=\"font-medium\">{item.name}</h3>\n                        <Badge variant=\"outline\" className={getTypeColor(item.type)}>\n                          {item.type}\n                        </Badge>\n                        {!item.isActive && (\n                          <Badge variant=\"secondary\">Inactive</Badge>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-slate-600\">\n                        {item.calculation === \"percentage\" \n                          ? `${item.value}% of ${item.applyTo}`\n                          : `$${item.value} ${item.calculation} fee on ${item.applyTo}`\n                        }\n                        {item.isTaxable && (item.type === \"fee\" || item.type === \"service_charge\") && (\n                          <span className=\"text-orange-600 ml-2\">• Taxable</span>\n                        )}\n                      </p>\n                      {item.isTaxable && item.applicableTaxIds && item.applicableTaxIds.length > 0 && (\n                        <div className=\"mt-1\">\n                          <p className=\"text-xs text-slate-500\">\n                            Applied taxes: {item.applicableTaxIds.map(taxId => {\n                              const tax = availableTaxes.find(t => t.id === taxId);\n                              return tax ? tax.name : 'Unknown';\n                            }).join(', ')}\n                          </p>\n                        </div>\n                      )}\n                      {item.description && (\n                        <p className=\"text-xs text-slate-500 mt-1\">{item.description}</p>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(item)}\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(item.id)}\n                      className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        <div className=\"mt-8 p-4 bg-blue-50 rounded-lg\">\n          <h4 className=\"font-medium text-blue-900 mb-2\">How Taxes and Fees Work</h4>\n          <ul className=\"text-sm text-blue-800 space-y-1\">\n            <li>• <strong>Taxes:</strong> Applied based on local tax requirements (sales tax, VAT, etc.)</li>\n            <li>• <strong>Fees:</strong> Additional charges like processing fees, service charges</li>\n            <li>• <strong>Taxable Fees:</strong> Fees can be marked as \"Subject to Tax\" with specific taxes selected</li>\n            <li>• <strong>Tax Selection:</strong> When a fee is taxable, choose which specific taxes apply to it</li>\n            <li>• <strong>Calculation Order:</strong> Base price + fees → apply selected taxes to taxable items</li>\n            <li>• <strong>Multiple Taxes:</strong> Each taxable fee can have different tax combinations applied</li>\n            <li>• <strong>Packages/Services:</strong> Control which taxes and fees apply to each package or service</li>\n            <li>• <strong>Event Level:</strong> Override tax/fee settings for individual events during creation</li>\n          </ul>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":19805},"client/src/hooks/useSuperAdmin.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\n\nexport function useSuperAdmin() {\n  const [, setLocation] = useLocation();\n  \n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n  });\n\n  const { data: superAdminData, isLoading: isSuperAdminLoading, error: superAdminError } = useQuery({\n    queryKey: [\"/api/superadmin/analytics\"],\n    enabled: !!user,\n    retry: false,\n  });\n\n  const isSuperAdmin = !!(user as any)?.isSuperAdmin && !superAdminError;\n  const isAuthenticated = !!user;\n\n  // Redirect non-super-admins away from super admin routes\n  useEffect(() => {\n    if (!isLoading && !isSuperAdminLoading) {\n      if (!isAuthenticated) {\n        setLocation(\"/sys-admin-login-x7k9p2w4\");\n        return;\n      }\n      \n      if (!isSuperAdmin && window.location.pathname.includes(\"sys-admin\")) {\n        // Redirect regular users away from super admin routes\n        setLocation(\"/\");\n        return;\n      }\n    }\n  }, [isAuthenticated, isSuperAdmin, isLoading, isSuperAdminLoading, setLocation]);\n\n  return {\n    user,\n    isSuperAdmin,\n    isAuthenticated,\n    isLoading: isLoading || isSuperAdminLoading,\n    hasAccess: isAuthenticated && isSuperAdmin,\n  };\n}","size_bytes":1296},"client/src/pages/firebase-dashboard.tsx":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { logOut } from '@/lib/firebase';\nimport { useFirebaseAuth } from '@/hooks/useFirebaseAuth';\nimport { Calendar, LogOut, User, Mail, Shield, CheckCircle, XCircle } from 'lucide-react';\nimport { toast } from '@/hooks/use-toast';\n\nexport default function FirebaseDashboard() {\n  const [, setLocation] = useLocation();\n  const { user, isLoading } = useFirebaseAuth();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation('/firebase-login');\n    }\n  }, [user, isLoading, setLocation]);\n\n  const handleSignOut = async () => {\n    try {\n      await logOut();\n      toast({\n        title: \"Signed out\",\n        description: \"You have been signed out successfully\",\n      });\n      setLocation('/firebase-login');\n    } catch (error: any) {\n      toast({\n        title: \"Sign out failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null; // Will redirect via useEffect\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <Calendar className=\"h-8 w-8 text-blue-600\" />\n              <span className=\"text-xl font-semibold text-gray-900\">VENUIN</span>\n              <span className=\"text-sm bg-green-100 text-green-800 px-2 py-1 rounded-full\">\n                Firebase Powered\n              </span>\n            </div>\n            <Button onClick={handleSignOut} variant=\"outline\" size=\"sm\">\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              Sign Out\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          \n          {/* User Profile Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"h-5 w-5\" />\n                User Profile\n              </CardTitle>\n              <CardDescription>\n                Your Firebase authentication information\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center space-x-4\">\n                <Avatar className=\"h-16 w-16\">\n                  <AvatarImage src={user.photoURL || ''} alt={user.displayName || 'User'} />\n                  <AvatarFallback>\n                    {user.displayName ? user.displayName.charAt(0).toUpperCase() : 'U'}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <h3 className=\"text-lg font-medium\">{user.displayName || 'Anonymous User'}</h3>\n                  <p className=\"text-sm text-gray-500 flex items-center gap-1\">\n                    <Mail className=\"h-4 w-4\" />\n                    {user.email}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"pt-4 border-t space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">Email Verified</span>\n                  <div className=\"flex items-center gap-1\">\n                    {user.emailVerified ? (\n                      <>\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                        <span className=\"text-sm text-green-600\">Verified</span>\n                      </>\n                    ) : (\n                      <>\n                        <XCircle className=\"h-4 w-4 text-red-600\" />\n                        <span className=\"text-sm text-red-600\">Not Verified</span>\n                      </>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">User ID</span>\n                  <span className=\"text-sm text-gray-500 font-mono\">{user.uid}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Firebase Status Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"h-5 w-5\" />\n                Firebase Integration\n              </CardTitle>\n              <CardDescription>\n                Firebase services status and configuration\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 bg-green-50 border border-green-200 rounded-lg\">\n                  <CheckCircle className=\"h-8 w-8 text-green-600 mx-auto mb-2\" />\n                  <div className=\"text-sm font-medium text-green-800\">Authentication</div>\n                  <div className=\"text-xs text-green-600\">Active</div>\n                </div>\n                <div className=\"text-center p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                  <CheckCircle className=\"h-8 w-8 text-blue-600 mx-auto mb-2\" />\n                  <div className=\"text-sm font-medium text-blue-800\">Firestore</div>\n                  <div className=\"text-xs text-blue-600\">Connected</div>\n                </div>\n              </div>\n\n              <div className=\"pt-4 border-t space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">Project ID</span>\n                  <span className=\"text-sm text-gray-500 font-mono\">\n                    {import.meta.env.VITE_FIREBASE_PROJECT_ID || 'Not configured'}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">API Key</span>\n                  <span className=\"text-sm text-gray-500 font-mono\">\n                    {import.meta.env.VITE_FIREBASE_API_KEY ? \n                      `${import.meta.env.VITE_FIREBASE_API_KEY.substring(0, 10)}...` : \n                      'Not configured'\n                    }\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n        </div>\n\n        {/* Success Message */}\n        <div className=\"mt-6\">\n          <Card className=\"border-green-200 bg-green-50\">\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center gap-3\">\n                <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                <div>\n                  <h3 className=\"font-medium text-green-800\">\n                    🎉 Firebase Migration Successful!\n                  </h3>\n                  <p className=\"text-sm text-green-700 mt-1\">\n                    Your VENUIN application is now powered by Firebase Authentication. \n                    The complex authentication issues have been resolved with Google's robust infrastructure.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n      </main>\n    </div>\n  );\n}","size_bytes":7931},"client/src/pages/setup-styles.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { AppLayout } from \"@/components/layout/app-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Grid3X3, Plus, Edit, Trash2, Users, Search, Filter, Layout } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { SetupStyleFloorPlanModal } from \"@/components/forms/setup-style-floor-plan-modal\";\n\nconst CATEGORIES = [\n  { value: 'dining', label: 'Dining', color: 'bg-orange-100 text-orange-700' },\n  { value: 'meeting', label: 'Meeting', color: 'bg-blue-100 text-blue-700' },\n  { value: 'presentation', label: 'Presentation', color: 'bg-purple-100 text-purple-700' },\n  { value: 'social', label: 'Social', color: 'bg-green-100 text-green-700' },\n  { value: 'custom', label: 'Custom', color: 'bg-slate-100 text-slate-700' },\n  { value: 'general', label: 'General', color: 'bg-gray-100 text-gray-700' }\n];\n\nconst ICON_OPTIONS = [\n  'Users', 'Grid3X3', 'Square', 'Circle', 'Triangle', 'Utensils', \n  'Presentation', 'Monitor', 'Coffee', 'Music', 'Mic', 'Camera'\n];\n\ninterface SetupStyleFormData {\n  name: string;\n  description: string;\n  category: string;\n  iconName: string;\n  minCapacity?: number;\n  maxCapacity?: number;\n}\n\nexport default function SetupStyles() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [showFloorPlanModal, setShowFloorPlanModal] = useState(false);\n  const [editingStyle, setEditingStyle] = useState<any>(null);\n  const [floorPlanStyle, setFloorPlanStyle] = useState<any>(null);\n  const [formData, setFormData] = useState<SetupStyleFormData>({\n    name: \"\",\n    description: \"\",\n    category: \"general\",\n    iconName: \"Grid3X3\",\n    minCapacity: undefined,\n    maxCapacity: undefined\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch setup styles\n  const { data: setupStyles = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/setup-styles\"],\n  });\n\n  // Create setup style mutation\n  const createMutation = useMutation({\n    mutationFn: (data: SetupStyleFormData) => apiRequest(\"POST\", \"/api/setup-styles\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/setup-styles\"] });\n      setShowCreateModal(false);\n      resetForm();\n      toast({\n        title: \"Setup style created\",\n        description: \"The new setup style has been added successfully.\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create setup style. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Update setup style mutation\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string, data: Partial<SetupStyleFormData> }) => \n      apiRequest(\"PATCH\", `/api/setup-styles/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/setup-styles\"] });\n      setEditingStyle(null);\n      setShowCreateModal(false);\n      resetForm();\n      toast({\n        title: \"Setup style updated\",\n        description: \"The setup style has been updated successfully.\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update setup style. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Delete setup style mutation\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/setup-styles/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/setup-styles\"] });\n      toast({\n        title: \"Setup style deleted\",\n        description: \"The setup style has been deleted successfully.\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete setup style. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Update floor plan mutation\n  const updateFloorPlanMutation = useMutation({\n    mutationFn: ({ id, floorPlan }: { id: string, floorPlan: any }) => \n      apiRequest(\"PATCH\", `/api/setup-styles/${id}`, { floorPlan }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/setup-styles\"] });\n      toast({\n        title: \"Floor plan saved\",\n        description: \"The floor plan has been saved to the setup style.\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save floor plan. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      description: \"\",\n      category: \"general\",\n      iconName: \"Grid3X3\",\n      minCapacity: undefined,\n      maxCapacity: undefined\n    });\n  };\n\n  const handleEdit = (style: any) => {\n    setEditingStyle(style);\n    setFormData({\n      name: style.name,\n      description: style.description || \"\",\n      category: style.category,\n      iconName: style.iconName || \"Grid3X3\",\n      minCapacity: style.minCapacity,\n      maxCapacity: style.maxCapacity\n    });\n    setShowCreateModal(true);\n  };\n\n  const handleSubmit = () => {\n    if (editingStyle) {\n      updateMutation.mutate({ id: editingStyle.id, data: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this setup style?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleFloorPlanSave = (floorPlan: any) => {\n    if (floorPlanStyle) {\n      updateFloorPlanMutation.mutate({ id: floorPlanStyle.id, floorPlan });\n    }\n  };\n\n  // Filter setup styles\n  const filteredStyles = setupStyles.filter((style: any) => {\n    const matchesSearch = style.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         style.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || style.category === selectedCategory;\n    \n    return matchesSearch && matchesCategory;\n  });\n\n  const getCategoryColor = (category: string) => {\n    return CATEGORIES.find(cat => cat.value === category)?.color || 'bg-gray-100 text-gray-700';\n  };\n\n  return (\n    <AppLayout>\n      <div className=\"p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-slate-900 flex items-center gap-3\">\n              <Grid3X3 className=\"w-8 h-8 text-blue-600\" />\n              Setup Styles\n            </h1>\n            <p className=\"text-slate-600 mt-1\">\n              Manage event setup configurations that can be applied to any venue\n            </p>\n          </div>\n          <Button onClick={() => setShowCreateModal(true)} className=\"bg-blue-600 hover:bg-blue-700\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Create Setup Style\n          </Button>\n        </div>\n\n        {/* Filters */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex flex-wrap gap-4 items-center\">\n              <div className=\"flex-1 min-w-64\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search setup styles...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              \n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"All categories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All categories</SelectItem>\n                  {CATEGORIES.map((category) => (\n                    <SelectItem key={category.value} value={category.value}>\n                      {category.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Setup Styles Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredStyles.map((style: any) => (\n            <Card key={style.id} className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-lg flex items-center justify-center text-white\">\n                      <Grid3X3 className=\"w-5 h-5\" />\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-lg\">{style.name}</CardTitle>\n                      <Badge className={`mt-1 ${getCategoryColor(style.category)}`}>\n                        {CATEGORIES.find(cat => cat.value === style.category)?.label || style.category}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-1\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(style)}\n                      title=\"Edit setup style\"\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setFloorPlanStyle(style);\n                        setShowFloorPlanModal(true);\n                      }}\n                      title=\"Design floor plan\"\n                    >\n                      <Layout className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(style.id)}\n                      className=\"text-red-600 hover:text-red-700\"\n                      title=\"Delete setup style\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-3\">\n                {style.description && (\n                  <p className=\"text-sm text-slate-600\">{style.description}</p>\n                )}\n                \n                {(style.minCapacity || style.maxCapacity) && (\n                  <div className=\"flex items-center gap-2 text-sm text-slate-600\">\n                    <Users className=\"w-4 h-4\" />\n                    {style.minCapacity && style.maxCapacity \n                      ? `${style.minCapacity} - ${style.maxCapacity} guests`\n                      : style.minCapacity \n                        ? `${style.minCapacity}+ guests`\n                        : `Up to ${style.maxCapacity} guests`\n                    }\n                  </div>\n                )}\n                \n                <div className=\"pt-2 border-t border-slate-100\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"text-xs text-slate-500\">\n                      Created {new Date(style.createdAt).toLocaleDateString()}\n                    </div>\n                    {style.floorPlan && (\n                      <div className=\"flex items-center gap-1 text-xs text-blue-600\">\n                        <Layout className=\"w-3 h-3\" />\n                        Floor plan\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {filteredStyles.length === 0 && !isLoading && (\n          <div className=\"text-center py-12\">\n            <Grid3X3 className=\"w-12 h-12 text-slate-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-slate-900 mb-2\">No setup styles found</h3>\n            <p className=\"text-slate-600 mb-4\">\n              {searchTerm || selectedCategory !== \"all\" \n                ? \"Try adjusting your filters\"\n                : \"Create your first setup style to get started\"\n              }\n            </p>\n            {!searchTerm && selectedCategory === \"all\" && (\n              <Button onClick={() => setShowCreateModal(true)}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Setup Style\n              </Button>\n            )}\n          </div>\n        )}\n\n        {/* Create/Edit Modal */}\n        <Dialog open={showCreateModal} onOpenChange={(open) => {\n          setShowCreateModal(open);\n          if (!open) {\n            setEditingStyle(null);\n            resetForm();\n          }\n        }}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingStyle ? \"Edit Setup Style\" : \"Create New Setup Style\"}\n              </DialogTitle>\n              <DialogDescription>\n                {editingStyle \n                  ? \"Update the setup style configuration below.\"\n                  : \"Create a new setup style that can be applied to any venue during event booking.\"\n                }\n              </DialogDescription>\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">Name *</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"e.g., Round Tables, Theater Style\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"category\">Category</Label>\n                  <Select\n                    value={formData.category}\n                    onValueChange={(value) => setFormData(prev => ({ ...prev, category: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {CATEGORIES.map((category) => (\n                        <SelectItem key={category.value} value={category.value}>\n                          {category.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                  placeholder=\"Describe when this setup style should be used...\"\n                  rows={3}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"icon\">Icon</Label>\n                  <Select\n                    value={formData.iconName}\n                    onValueChange={(value) => setFormData(prev => ({ ...prev, iconName: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {ICON_OPTIONS.map((icon) => (\n                        <SelectItem key={icon} value={icon}>\n                          {icon}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"minCapacity\">Min Capacity</Label>\n                  <Input\n                    id=\"minCapacity\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={formData.minCapacity || \"\"}\n                    onChange={(e) => setFormData(prev => ({ \n                      ...prev, \n                      minCapacity: e.target.value ? parseInt(e.target.value) : undefined \n                    }))}\n                    placeholder=\"Optional\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"maxCapacity\">Max Capacity</Label>\n                  <Input\n                    id=\"maxCapacity\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={formData.maxCapacity || \"\"}\n                    onChange={(e) => setFormData(prev => ({ \n                      ...prev, \n                      maxCapacity: e.target.value ? parseInt(e.target.value) : undefined \n                    }))}\n                    placeholder=\"Optional\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex justify-end gap-3 pt-4\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => {\n                    setShowCreateModal(false);\n                    setEditingStyle(null);\n                    resetForm();\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleSubmit}\n                  disabled={!formData.name || createMutation.isPending || updateMutation.isPending}\n                >\n                  {editingStyle ? \"Update\" : \"Create\"} Setup Style\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Floor Plan Designer Modal */}\n        <SetupStyleFloorPlanModal\n          open={showFloorPlanModal}\n          onOpenChange={setShowFloorPlanModal}\n          setupStyle={floorPlanStyle}\n          onSave={handleFloorPlanSave}\n        />\n      </div>\n    </AppLayout>\n  );\n}","size_bytes":19043},"client/src/components/beo-templates/executive-template.tsx":{"content":"import React from 'react';\nimport { format } from 'date-fns';\n\ninterface BEOData {\n  eventName: string;\n  eventDate: string;\n  eventTime: string;\n  clientName: string;\n  contactInfo: {\n    email: string;\n    phone: string;\n  };\n  venue: {\n    name: string;\n    address: string;\n  };\n  guestCount: number;\n  setupStyle: string;\n  services: Array<{\n    name: string;\n    description: string;\n    quantity?: number;\n    price?: number;\n  }>;\n  timeline: Array<{\n    time: string;\n    activity: string;\n  }>;\n  specialRequests?: string;\n  totalAmount?: number;\n}\n\ninterface ExecutiveBEOTemplateProps {\n  data: BEOData;\n  showPricing?: boolean;\n}\n\nexport function ExecutiveBEOTemplate({ data, showPricing = false }: ExecutiveBEOTemplateProps) {\n  return (\n    <div className=\"bg-white p-8 max-w-4xl mx-auto font-serif text-slate-800\">\n      {/* Header Section */}\n      <div className=\"bg-gradient-to-r from-slate-800 to-slate-700 text-white p-6 rounded-t-lg mb-8\">\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <h1 className=\"text-2xl font-bold mb-2\">BANQUET EVENT ORDER</h1>\n            <p className=\"text-slate-200\">{data.venue.name}</p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-sm text-slate-200\">BEO No.</p>\n            <p className=\"text-lg font-semibold\">#{Math.random().toString().substr(2, 6)}</p>\n            <p className=\"text-sm text-slate-200 mt-2\">{format(new Date(), 'MMM dd, yyyy')}</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Event Information */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-8\">\n        <div className=\"space-y-4\">\n          <div>\n            <h2 className=\"text-lg font-semibold text-slate-800 border-b border-slate-300 pb-2 mb-3\">\n              EVENT DETAILS\n            </h2>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"font-medium\">Event:</span>\n                <span>{data.eventName}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"font-medium\">Date:</span>\n                <span>{format(new Date(data.eventDate), 'EEEE, MMMM dd, yyyy')}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"font-medium\">Time:</span>\n                <span>{data.eventTime}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"font-medium\">Guests:</span>\n                <span>{data.guestCount}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"font-medium\">Setup:</span>\n                <span>{data.setupStyle}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div>\n            <h2 className=\"text-lg font-semibold text-slate-800 border-b border-slate-300 pb-2 mb-3\">\n              CLIENT INFORMATION\n            </h2>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"font-medium\">Name:</span>\n                <span>{data.clientName}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"font-medium\">Email:</span>\n                <span>{data.contactInfo.email}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"font-medium\">Phone:</span>\n                <span>{data.contactInfo.phone}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Timeline Section */}\n      {data.timeline && data.timeline.length > 0 && (\n        <div className=\"mb-8\">\n          <h2 className=\"text-lg font-semibold text-slate-800 border-b border-slate-300 pb-2 mb-4\">\n            EVENT TIMELINE\n          </h2>\n          <div className=\"bg-slate-50 p-4 rounded\">\n            <div className=\"space-y-2\">\n              {data.timeline.map((item, index) => (\n                <div key={index} className=\"flex justify-between items-center py-1 border-b border-slate-200 last:border-b-0\">\n                  <span className=\"font-medium text-sm\">{item.time}</span>\n                  <span className=\"text-sm text-slate-600\">{item.activity}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Services Section */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-lg font-semibold text-slate-800 border-b border-slate-300 pb-2 mb-4\">\n          SERVICES & REQUIREMENTS\n        </h2>\n        <div className=\"space-y-3\">\n          {data.services.map((service, index) => (\n            <div key={index} className=\"border border-slate-200 p-4 rounded\">\n              <div className=\"flex justify-between items-start\">\n                <div className=\"flex-1\">\n                  <h3 className=\"font-medium text-sm\">{service.name}</h3>\n                  {service.description && (\n                    <p className=\"text-sm text-slate-600 mt-1\">{service.description}</p>\n                  )}\n                  {service.quantity && (\n                    <p className=\"text-xs text-slate-500 mt-1\">Quantity: {service.quantity}</p>\n                  )}\n                </div>\n                {showPricing && service.price && (\n                  <div className=\"text-right\">\n                    <span className=\"font-semibold text-sm\">${service.price.toFixed(2)}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Special Requests */}\n      {data.specialRequests && (\n        <div className=\"mb-8\">\n          <h2 className=\"text-lg font-semibold text-slate-800 border-b border-slate-300 pb-2 mb-4\">\n            SPECIAL REQUESTS\n          </h2>\n          <div className=\"bg-amber-50 border border-amber-200 p-4 rounded\">\n            <p className=\"text-sm text-slate-700\">{data.specialRequests}</p>\n          </div>\n        </div>\n      )}\n\n      {/* Total Section */}\n      {showPricing && data.totalAmount && (\n        <div className=\"border-t-2 border-slate-300 pt-4\">\n          <div className=\"flex justify-end\">\n            <div className=\"bg-slate-100 p-4 rounded w-64\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-semibold\">TOTAL AMOUNT:</span>\n                <span className=\"text-lg font-bold\">${data.totalAmount.toFixed(2)}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Footer */}\n      <div className=\"mt-8 pt-4 border-t border-slate-200 text-center\">\n        <p className=\"text-xs text-slate-500\">\n          This Banquet Event Order serves as a contract between {data.venue.name} and {data.clientName}.\n        </p>\n        <p className=\"text-xs text-slate-500 mt-1\">\n          Please review all details carefully and contact us immediately with any questions or changes.\n        </p>\n        <div className=\"mt-4 text-xs text-slate-400\">\n          Generated on {format(new Date(), 'PPP')} • {data.venue.address}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Example usage component for development\nexport function ExecutiveBEOPreview() {\n  const sampleData: BEOData = {\n    eventName: \"Corporate Annual Gala\",\n    eventDate: \"2025-03-15\",\n    eventTime: \"6:00 PM - 11:00 PM\",\n    clientName: \"Tech Innovations Inc.\",\n    contactInfo: {\n      email: \"events@techinnovations.com\",\n      phone: \"(555) 123-4567\"\n    },\n    venue: {\n      name: \"Grand Ballroom\",\n      address: \"123 Event Plaza, New York, NY 10001\"\n    },\n    guestCount: 150,\n    setupStyle: \"Theatre with Reception Area\",\n    services: [\n      {\n        name: \"Audio/Visual Setup\",\n        description: \"Professional sound system, microphones, projector and screen\",\n        quantity: 1,\n        price: 750\n      },\n      {\n        name: \"Catering Service\",\n        description: \"Three-course dinner with wine service\",\n        quantity: 150,\n        price: 4500\n      },\n      {\n        name: \"Floral Arrangements\",\n        description: \"Centerpieces and entrance decorations\",\n        quantity: 15,\n        price: 800\n      }\n    ],\n    timeline: [\n      { time: \"4:00 PM\", activity: \"Setup begins\" },\n      { time: \"5:30 PM\", activity: \"Final preparations\" },\n      { time: \"6:00 PM\", activity: \"Guest arrival and cocktail reception\" },\n      { time: \"7:30 PM\", activity: \"Dinner service begins\" },\n      { time: \"9:00 PM\", activity: \"Awards ceremony\" },\n      { time: \"10:30 PM\", activity: \"Dancing and entertainment\" },\n      { time: \"11:00 PM\", activity: \"Event concludes\" }\n    ],\n    specialRequests: \"Please ensure all dietary restrictions are accommodated. VIP area needed for board members.\",\n    totalAmount: 6050\n  };\n\n  return <ExecutiveBEOTemplate data={sampleData} showPricing={true} />;\n}","size_bytes":9038},"client/src/components/dashboard/optimized-components.tsx":{"content":"import { useDashboardData } from \"@/contexts/dashboard-context\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, DollarSign, Users } from \"lucide-react\";\n\n// All components use shared context data - no individual API calls\nexport function OptimizedRecentBookings() {\n  const { upcomingBookings } = useDashboardData();\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <h2 className=\"text-lg font-semibold mb-4\">Recent Bookings</h2>\n        <div className=\"space-y-4\">\n          {upcomingBookings.slice(0, 5).map((booking: any) => (\n            <div key={booking.id} className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-slate-50 cursor-pointer\">\n              <div className=\"flex-1\">\n                <h3 className=\"font-medium\">{booking.customerName}</h3>\n                <p className=\"text-sm text-slate-500\">\n                  {booking.eventType} • {booking.venue}\n                </p>\n                <p className=\"text-xs text-slate-400\">\n                  {new Date(booking.eventDate).toLocaleDateString()}\n                </p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"font-medium\">${(booking.totalAmount || 0).toLocaleString()}</p>\n                <Badge variant={\n                  booking.status === 'confirmed' ? 'default' :\n                  booking.status === 'pending' ? 'secondary' : 'outline'\n                }>\n                  {booking.status}\n                </Badge>\n              </div>\n            </div>\n          ))}\n          {upcomingBookings.length === 0 && (\n            <div className=\"text-center py-8 text-slate-500\">\n              <Calendar className=\"w-12 h-12 mx-auto mb-4 text-slate-300\" />\n              <p>No upcoming bookings</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport function OptimizedActiveLeads() {\n  const { activeLeads } = useDashboardData();\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <h2 className=\"text-lg font-semibold mb-4\">Active Leads</h2>\n        <div className=\"space-y-3\">\n          {activeLeads.slice(0, 5).map((lead: any) => (\n            <div key={lead.id} className=\"p-3 border rounded-lg\">\n              <h3 className=\"font-medium text-sm\">\n                {lead.firstName} {lead.lastName}\n              </h3>\n              <p className=\"text-xs text-slate-500\">\n                {lead.eventType} • {lead.guestCount} guests\n              </p>\n              <Badge variant=\"outline\" className=\"mt-1 text-xs\">\n                {lead.status}\n              </Badge>\n            </div>\n          ))}\n          {activeLeads.length === 0 && (\n            <div className=\"text-center py-4 text-slate-500\">\n              <Users className=\"w-8 h-8 mx-auto mb-2 text-slate-300\" />\n              <p className=\"text-sm\">No active leads</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport function OptimizedRecentPayments() {\n  const { recentPayments } = useDashboardData();\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <h2 className=\"text-lg font-semibold mb-4\">Recent Payments</h2>\n        <div className=\"space-y-3\">\n          {recentPayments.slice(0, 3).map((payment: any) => (\n            <div key={payment.id} className=\"flex justify-between items-center p-2 border rounded\">\n              <div>\n                <p className=\"font-medium text-sm\">${payment.amount}</p>\n                <p className=\"text-xs text-slate-500\">{payment.method}</p>\n              </div>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {payment.status}\n              </Badge>\n            </div>\n          ))}\n          {recentPayments.length === 0 && (\n            <div className=\"text-center py-4 text-slate-500\">\n              <DollarSign className=\"w-8 h-8 mx-auto mb-2 text-slate-300\" />\n              <p className=\"text-sm\">No recent payments</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4113},"client/src/components/dashboard/optimized-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { MobileNav } from \"@/components/layout/mobile-nav\";\nimport { MetricsGrid } from \"@/components/dashboard/metrics-grid\";\nimport { AdvancedCalendar } from \"@/components/dashboard/advanced-calendar\";\nimport { RecentBookings } from \"@/components/dashboard/recent-bookings\";\nimport { QuickActions } from \"@/components/dashboard/quick-actions\";\nimport { EventEditFullModal } from \"@/components/forms/event-edit-full-modal\";\nimport { EventSummaryModal } from \"@/components/forms/event-summary-modal\";\nimport { CreateEventModal } from \"@/components/forms/create-event-modal\";\n\n// Optimized dashboard that loads all data in one API call\nexport default function OptimizedDashboard() {\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<any>(null);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [showCreateEventModal, setShowCreateEventModal] = useState(false);\n  \n  // Single API call for all dashboard data\n  const { data: dashboardData, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/overview\"],\n    staleTime: 5 * 60 * 1000, // Cache for 5 minutes\n  });\n\n  // Real-time quick stats (lighter, more frequent updates)\n  const { data: quickStats } = useQuery({\n    queryKey: [\"/api/dashboard/quick-stats\"],\n    refetchInterval: 30000, // Update every 30 seconds\n  });\n\n  const handleEventClick = async (booking: any) => {\n    setSelectedEvent(booking);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n        <div className=\"hidden lg:block\">\n          <Sidebar collapsed={sidebarCollapsed} />\n        </div>\n        \n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          <Header \n            title=\"Dashboard\" \n            subtitle=\"Loading your venue data...\"\n            onMobileMenuToggle={() => setMobileNavOpen(true)}\n            onNewBooking={() => setShowCreateEventModal(true)}\n            onSidebarToggle={() => setSidebarCollapsed(!sidebarCollapsed)}\n            sidebarCollapsed={sidebarCollapsed}\n          />\n          \n          <main className=\"flex-1 overflow-y-auto p-3 sm:p-6\">\n            {/* Loading skeleton */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n              {[1, 2, 3, 4].map(i => (\n                <div key={i} className=\"bg-white p-6 rounded-lg shadow-sm\">\n                  <div className=\"h-4 bg-gray-200 rounded animate-pulse mb-2\"></div>\n                  <div className=\"h-8 bg-gray-200 rounded animate-pulse\"></div>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <div className=\"lg:col-span-2 bg-white rounded-lg shadow-sm h-96 animate-pulse\"></div>\n              <div className=\"bg-white rounded-lg shadow-sm h-96 animate-pulse\"></div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  const {\n    metrics = {},\n    upcomingBookings = [],\n    activeLeads = [],\n    calendar = { data: [] },\n    insights = [],\n    business = {},\n    venues = []\n  } = dashboardData || {};\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <div className=\"hidden lg:block\">\n        <Sidebar collapsed={sidebarCollapsed} />\n      </div>\n      \n      <MobileNav \n        isOpen={mobileNavOpen} \n        onClose={() => setMobileNavOpen(false)} \n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Dashboard\" \n          subtitle={`Welcome back! Here's what's happening at ${business.companyName || 'your venues'} today.`}\n          onMobileMenuToggle={() => setMobileNavOpen(true)}\n          onNewBooking={() => setShowCreateEventModal(true)}\n          onSidebarToggle={() => setSidebarCollapsed(!sidebarCollapsed)}\n          sidebarCollapsed={sidebarCollapsed}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-3 sm:p-6\">\n          {/* AI Insights Banner */}\n          {insights.length > 0 && (\n            <div className=\"mb-4 sm:mb-6 bg-gradient-to-r from-purple-600 to-blue-600 rounded-xl p-4 sm:p-6 text-white\">\n              <div className=\"flex flex-col sm:flex-row items-start justify-between gap-4\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center mb-2\">\n                    <svg className=\"w-5 h-5 sm:w-6 sm:h-6 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\"/>\n                    </svg>\n                    <h3 className=\"text-base sm:text-lg font-semibold\">AI-Powered Insights</h3>\n                  </div>\n                  <p className=\"text-purple-100 mb-3 text-sm sm:text-base\">\n                    {insights[0]?.title || 'Your venue management is optimized with AI insights.'}\n                  </p>\n                  <div className=\"flex flex-wrap gap-2 sm:gap-4 text-xs sm:text-sm\">\n                    <span className=\"bg-white/20 px-2 sm:px-3 py-1 rounded-full\">\n                      {metrics.thisMonthBookings || 0} Bookings This Month\n                    </span>\n                    <span className=\"bg-white/20 px-2 sm:px-3 py-1 rounded-full\">\n                      {activeLeads.length} Active Leads\n                    </span>\n                    <span className=\"bg-white/20 px-2 sm:px-3 py-1 rounded-full\">\n                      ${(metrics.revenue || 0).toLocaleString()} Revenue\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex flex-col sm:flex-row gap-3\">\n                  <button \n                    onClick={() => setShowCreateEventModal(true)}\n                    className=\"bg-white/20 hover:bg-white/30 text-white px-3 sm:px-4 py-2 rounded-lg text-xs sm:text-sm font-medium transition-colors w-full sm:w-auto\"\n                  >\n                    New Booking\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Key Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n            <div className=\"bg-white p-6 rounded-lg shadow-sm\">\n              <h3 className=\"text-sm font-medium text-gray-500\">Total Bookings</h3>\n              <p className=\"text-2xl font-bold text-gray-900\">{metrics.totalBookings || 0}</p>\n              <p className=\"text-xs text-gray-500 mt-1\">\n                {metrics.thisMonthBookings || 0} this month\n              </p>\n            </div>\n            \n            <div className=\"bg-white p-6 rounded-lg shadow-sm\">\n              <h3 className=\"text-sm font-medium text-gray-500\">Revenue</h3>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                ${(metrics.revenue || 0).toLocaleString()}\n              </p>\n              <p className=\"text-xs text-green-600 mt-1\">\n                {metrics.revenueGrowth > 0 ? '+' : ''}{(metrics.revenueGrowth || 0).toFixed(1)}% from last month\n              </p>\n            </div>\n            \n            <div className=\"bg-white p-6 rounded-lg shadow-sm\">\n              <h3 className=\"text-sm font-medium text-gray-500\">Active Leads</h3>\n              <p className=\"text-2xl font-bold text-gray-900\">{metrics.activeLeads || 0}</p>\n              <p className=\"text-xs text-gray-500 mt-1\">\n                Potential customers\n              </p>\n            </div>\n            \n            <div className=\"bg-white p-6 rounded-lg shadow-sm\">\n              <h3 className=\"text-sm font-medium text-gray-500\">Venues</h3>\n              <p className=\"text-2xl font-bold text-gray-900\">{metrics.totalVenues || 0}</p>\n              <p className=\"text-xs text-gray-500 mt-1\">\n                Active locations\n              </p>\n            </div>\n          </div>\n          \n          {/* Calendar */}\n          <div className=\"mb-6\">\n            <div className=\"bg-white rounded-lg shadow-sm p-6\">\n              <h2 className=\"text-lg font-semibold mb-4\">Upcoming Events</h2>\n              <AdvancedCalendar \n                events={calendar.data} \n                onEventClick={handleEventClick} \n              />\n            </div>\n          </div>\n          \n          {/* Main Content Grid */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Recent Bookings */}\n            <div className=\"lg:col-span-2 bg-white rounded-lg shadow-sm p-6\">\n              <h2 className=\"text-lg font-semibold mb-4\">Recent Bookings</h2>\n              <div className=\"space-y-4\">\n                {upcomingBookings.slice(0, 5).map((booking: any) => (\n                  <div key={booking.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-medium\">{booking.customerName}</h3>\n                      <p className=\"text-sm text-gray-500\">\n                        {booking.eventType} • {booking.venue}\n                      </p>\n                      <p className=\"text-xs text-gray-400\">\n                        {new Date(booking.eventDate).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-medium\">${(booking.totalAmount || 0).toLocaleString()}</p>\n                      <span className={`inline-block px-2 py-1 text-xs rounded-full ${\n                        booking.status === 'confirmed' ? 'bg-green-100 text-green-800' :\n                        booking.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :\n                        'bg-gray-100 text-gray-800'\n                      }`}>\n                        {booking.status}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            {/* Active Leads */}\n            <div className=\"bg-white rounded-lg shadow-sm p-6\">\n              <h2 className=\"text-lg font-semibold mb-4\">Active Leads</h2>\n              <div className=\"space-y-3\">\n                {activeLeads.slice(0, 5).map((lead: any) => (\n                  <div key={lead.id} className=\"p-3 border rounded-lg\">\n                    <h3 className=\"font-medium text-sm\">\n                      {lead.firstName} {lead.lastName}\n                    </h3>\n                    <p className=\"text-xs text-gray-500\">\n                      {lead.eventType} • {lead.guestCount} guests\n                    </p>\n                    <span className={`inline-block mt-1 px-2 py-1 text-xs rounded-full ${\n                      lead.status === 'qualified' ? 'bg-green-100 text-green-800' :\n                      lead.status === 'contacted' ? 'bg-blue-100 text-blue-800' :\n                      'bg-gray-100 text-gray-800'\n                    }`}>\n                      {lead.status}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </main>\n\n        {/* Modals */}\n        <EventSummaryModal \n          open={!!selectedEvent && !showEditModal} \n          onOpenChange={(open) => !open && setSelectedEvent(null)}\n          booking={selectedEvent}\n          onEditClick={() => setShowEditModal(true)}\n        />\n\n        <EventEditFullModal \n          open={showEditModal} \n          onOpenChange={(open) => {\n            setShowEditModal(false);\n            if (!open) {\n              setSelectedEvent(null);\n            }\n          }}\n          booking={selectedEvent}\n        />\n\n        <CreateEventModal\n          open={showCreateEventModal}\n          onOpenChange={setShowCreateEventModal}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":12086},"client/src/components/dashboard/quick-stats.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Calendar, Clock, Users, Star, TrendingUp, AlertCircle } from \"lucide-react\";\nimport { format, isToday, parseISO } from \"date-fns\";\n\nexport function QuickStats() {\n  const { data: bookings } = useQuery({ queryKey: [\"/api/bookings\"] });\n  const { data: customers } = useQuery({ queryKey: [\"/api/customers\"] });\n\n  const getQuickStats = () => {\n    if (!bookings || !customers || !Array.isArray(bookings) || !Array.isArray(customers)) {\n      return {\n        todayEvents: 0,\n        thisWeekBookings: 0,\n        averageEventSize: 0,\n        topCustomers: 0,\n        pendingTasks: 0,\n        utilizationRate: 0\n      };\n    }\n\n    const today = new Date();\n    const todayEvents = (bookings as any[]).filter(booking => {\n      try {\n        return booking.date && isToday(parseISO(booking.date)) && booking.status === 'confirmed';\n      } catch {\n        return false;\n      }\n    }).length;\n\n    const thisWeekStart = new Date(today);\n    thisWeekStart.setDate(today.getDate() - today.getDay());\n    const thisWeekBookings = (bookings as any[]).filter(booking => {\n      try {\n        if (!booking.date) return false;\n        const bookingDate = parseISO(booking.date);\n        return bookingDate >= thisWeekStart && booking.status !== 'cancelled';\n      } catch {\n        return false;\n      }\n    }).length;\n\n    const confirmedBookings = (bookings as any[]).filter(b => b.status === 'confirmed');\n    const averageEventSize = confirmedBookings.length > 0 \n      ? Math.round(confirmedBookings.reduce((sum, b) => sum + (b.guestCount || 0), 0) / confirmedBookings.length)\n      : 0;\n\n    const topCustomers = (customers as any[]).filter(c => c.status === 'customer').length;\n\n    const pendingTasks = (bookings as any[]).filter(b => b.status === 'pending').length;\n\n    const utilizationRate = bookings.length > 0 \n      ? Math.round((confirmedBookings.length / (bookings as any[]).length) * 100)\n      : 0;\n\n    return {\n      todayEvents,\n      thisWeekBookings,\n      averageEventSize,\n      topCustomers,\n      pendingTasks,\n      utilizationRate\n    };\n  };\n\n  const stats = getQuickStats();\n\n  const quickStatsItems = [\n    {\n      label: \"Today's Events\",\n      value: stats.todayEvents,\n      icon: Calendar,\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-50\"\n    },\n    {\n      label: \"This Week\",\n      value: stats.thisWeekBookings,\n      icon: Clock,\n      color: \"text-purple-600\",\n      bgColor: \"bg-purple-50\"\n    },\n    {\n      label: \"Avg Event Size\",\n      value: `${stats.averageEventSize} guests`,\n      icon: Users,\n      color: \"text-green-600\",\n      bgColor: \"bg-green-50\"\n    },\n    {\n      label: \"Active Customers\",\n      value: stats.topCustomers,\n      icon: Star,\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-50\"\n    },\n    {\n      label: \"Utilization\",\n      value: `${stats.utilizationRate}%`,\n      icon: TrendingUp,\n      color: \"text-emerald-600\",\n      bgColor: \"bg-emerald-50\"\n    },\n    {\n      label: \"Pending Tasks\",\n      value: stats.pendingTasks,\n      icon: AlertCircle,\n      color: \"text-red-600\",\n      bgColor: \"bg-red-50\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-2 lg:grid-cols-3 gap-3\">\n      {quickStatsItems.map((stat, index) => {\n        const Icon = stat.icon;\n        \n        return (\n          <Card key={index} className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${stat.bgColor}`}>\n                  <Icon className={`w-5 h-5 ${stat.color}`} />\n                </div>\n                <div>\n                  <p className=\"text-xs text-slate-600 font-medium\">{stat.label}</p>\n                  <p className=\"text-lg font-bold text-slate-900\">{stat.value}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}","size_bytes":4076},"client/src/components/dashboard/task-overview.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { CheckCircle, Clock, AlertTriangle, Plus, ArrowRight } from \"lucide-react\";\nimport { format, isToday, parseISO, isPast, isThisWeek } from \"date-fns\";\n\nexport function TaskOverview() {\n  const { data: bookings } = useQuery({ queryKey: [\"/api/bookings\"] });\n\n  // Generate tasks from bookings and events\n  const getTasks = () => {\n    if (!bookings || !Array.isArray(bookings)) return [];\n    \n    const tasks: any[] = [];\n    \n    (bookings as any[]).forEach(booking => {\n      if (!booking.date) return;\n      \n      let eventDate;\n      try {\n        eventDate = parseISO(booking.date);\n      } catch {\n        return;\n      }\n      \n      // Pre-event tasks\n      if (booking.status === 'confirmed') {\n        tasks.push({\n          id: `setup-${booking.id}`,\n          title: `Setup for ${booking.eventName}`,\n          description: `Prepare ${booking.spaceName} for ${booking.guestCount} guests`,\n          dueDate: format(eventDate, 'yyyy-MM-dd'),\n          priority: isToday(eventDate) ? 'high' : 'medium',\n          status: isPast(eventDate) ? 'completed' : 'pending',\n          type: 'setup',\n          eventId: booking.id\n        });\n      }\n      \n      // Follow-up tasks\n      if (booking.status === 'confirmed' && isPast(eventDate)) {\n        tasks.push({\n          id: `followup-${booking.id}`,\n          title: `Follow up with ${booking.customerName}`,\n          description: `Send thank you and feedback request`,\n          dueDate: format(eventDate, 'yyyy-MM-dd'),\n          priority: 'low',\n          status: 'pending',\n          type: 'followup',\n          eventId: booking.id\n        });\n      }\n      \n      // Payment reminders\n      if (booking.status === 'pending') {\n        tasks.push({\n          id: `payment-${booking.id}`,\n          title: `Payment reminder: ${booking.eventName}`,\n          description: `Contact ${booking.customerName} about outstanding payment`,\n          dueDate: format(new Date(), 'yyyy-MM-dd'),\n          priority: 'high',\n          status: 'pending',\n          type: 'payment',\n          eventId: booking.id\n        });\n      }\n    });\n\n    return tasks\n      .sort((a, b) => {\n        // Sort by priority first, then by due date\n        const priorityOrder = { high: 3, medium: 2, low: 1 };\n        const priorityDiff = (priorityOrder as any)[b.priority] - (priorityOrder as any)[a.priority];\n        if (priorityDiff !== 0) return priorityDiff;\n        return new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime();\n      })\n      .slice(0, 8); // Show only top 8 tasks\n  };\n\n  const tasks = getTasks();\n  const pendingTasks = tasks.filter(task => task.status === 'pending');\n  const highPriorityTasks = tasks.filter(task => task.priority === 'high' && task.status === 'pending');\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'bg-red-100 text-red-800';\n      case 'medium': return 'bg-yellow-100 text-yellow-800';\n      case 'low': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getTaskIcon = (type: string) => {\n    switch (type) {\n      case 'setup': return Clock;\n      case 'followup': return CheckCircle;\n      case 'payment': return AlertTriangle;\n      default: return Clock;\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <CheckCircle className=\"w-5 h-5 text-blue-600\" />\n            Task Overview\n          </CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => window.location.href = '/tasks'}>\n            View All\n            <ArrowRight className=\"w-4 h-4 ml-1\" />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-2 gap-4 mb-4\">\n          <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-blue-600\">{pendingTasks.length}</div>\n            <div className=\"text-xs text-blue-700\">Pending Tasks</div>\n          </div>\n          <div className=\"text-center p-3 bg-red-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-red-600\">{highPriorityTasks.length}</div>\n            <div className=\"text-xs text-red-700\">High Priority</div>\n          </div>\n        </div>\n\n        {tasks.length === 0 ? (\n          <div className=\"text-center py-6 text-slate-500\">\n            <CheckCircle className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n            <p className=\"text-sm\">No tasks available</p>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              className=\"mt-2\"\n              onClick={() => window.location.href = '/tasks'}\n            >\n              <Plus className=\"w-4 h-4 mr-1\" />\n              Add Task\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-2\">\n            {tasks.slice(0, 5).map((task, index) => {\n              const TaskIcon = getTaskIcon(task.type);\n              const isOverdue = isPast(parseISO(task.dueDate)) && task.status === 'pending';\n              \n              return (\n                <div key={index} className={`p-3 rounded-lg border transition-colors ${\n                  isOverdue ? 'border-red-200 bg-red-50' : 'border-slate-200 hover:bg-slate-50'\n                }`}>\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <TaskIcon className={`w-4 h-4 ${\n                        isOverdue ? 'text-red-600' : 'text-slate-600'\n                      }`} />\n                      <h4 className=\"font-medium text-slate-900 text-sm\">{task.title}</h4>\n                    </div>\n                    <Badge className={`text-xs ${getPriorityColor(task.priority)}`}>\n                      {task.priority}\n                    </Badge>\n                  </div>\n                  \n                  <p className=\"text-xs text-slate-600 mb-2\">{task.description}</p>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className={`text-xs ${\n                      isOverdue ? 'text-red-600 font-medium' : 'text-slate-500'\n                    }`}>\n                      Due: {format(parseISO(task.dueDate), 'MMM d')}\n                      {isOverdue && ' (Overdue)'}\n                    </span>\n                    \n                    {task.status === 'completed' && (\n                      <span className=\"text-xs text-green-600 font-medium\">✓ Completed</span>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7046},"client/src/components/dashboard/unified-dashboard.tsx":{"content":"import { useState, Suspense } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { MobileNav } from \"@/components/layout/mobile-nav\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, DollarSign, Users, BarChart3, TrendingUp } from \"lucide-react\";\nimport { AdvancedCalendar } from \"@/components/dashboard/advanced-calendar\";\nimport { EventEditFullModal } from \"@/components/forms/event-edit-full-modal\";\nimport { EventSummaryModal } from \"@/components/forms/event-summary-modal\";\nimport { CreateEventModal } from \"@/components/forms/create-event-modal\";\n\n// Single unified dashboard that eliminates redundant API calls\nexport default function UnifiedDashboard() {\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<any>(null);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [showCreateEventModal, setShowCreateEventModal] = useState(false);\n  \n  // Single API call for ALL dashboard data\n  const { data: dashboardData, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/overview\"],\n    staleTime: 5 * 60 * 1000, // Cache for 5 minutes\n    refetchInterval: 2 * 60 * 1000, // Refresh every 2 minutes\n  });\n\n  // Real-time quick stats (lighter updates)\n  const { data: quickStats } = useQuery({\n    queryKey: [\"/api/dashboard/quick-stats\"],\n    refetchInterval: 30000, // Update every 30 seconds\n    staleTime: 30000,\n  });\n\n  const handleEventClick = async (booking: any) => {\n    setSelectedEvent(booking);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n        <div className=\"hidden lg:block\">\n          <Sidebar collapsed={sidebarCollapsed} />\n        </div>\n        \n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          <Header \n            title=\"Dashboard\" \n            subtitle=\"Loading your venue data...\"\n            onMobileMenuToggle={() => setMobileNavOpen(true)}\n            onNewBooking={() => setShowCreateEventModal(true)}\n            onSidebarToggle={() => setSidebarCollapsed(!sidebarCollapsed)}\n            sidebarCollapsed={sidebarCollapsed}\n          />\n          \n          <main className=\"flex-1 overflow-y-auto p-6\">\n            {/* Loading skeleton */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n              {[1, 2, 3, 4].map(i => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-8 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-3/4\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n            \n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <div className=\"lg:col-span-2 bg-white rounded-lg shadow-sm h-96 animate-pulse\"></div>\n              <div className=\"bg-white rounded-lg shadow-sm h-96 animate-pulse\"></div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  const {\n    metrics = {},\n    upcomingBookings = [],\n    activeLeads = [],\n    calendar = { data: [] },\n    insights = [],\n    business = {},\n    venues = [],\n    recentPayments = []\n  } = dashboardData || {};\n\n  // Combine quick stats with dashboard metrics\n  const displayMetrics = {\n    ...metrics,\n    todayBookings: quickStats?.todayBookings || 0,\n    weeklyRevenue: quickStats?.weeklyRevenue || 0,\n    hotLeads: quickStats?.hotLeads || 0\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <div className=\"hidden lg:block\">\n        <Sidebar collapsed={sidebarCollapsed} />\n      </div>\n      \n      <MobileNav \n        isOpen={mobileNavOpen} \n        onClose={() => setMobileNavOpen(false)} \n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Dashboard\" \n          subtitle={`Welcome back! Here's what's happening at ${business.companyName || 'your venues'} today.`}\n          onMobileMenuToggle={() => setMobileNavOpen(true)}\n          onNewBooking={() => setShowCreateEventModal(true)}\n          onSidebarToggle={() => setSidebarCollapsed(!sidebarCollapsed)}\n          sidebarCollapsed={sidebarCollapsed}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* AI Insights Banner */}\n          {insights.length > 0 && (\n            <div className=\"mb-6 bg-gradient-to-r from-purple-600 to-blue-600 rounded-xl p-6 text-white\">\n              <div className=\"flex flex-col sm:flex-row items-start justify-between gap-4\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center mb-2\">\n                    <TrendingUp className=\"w-6 h-6 mr-2\" />\n                    <h3 className=\"text-lg font-semibold\">AI-Powered Insights</h3>\n                  </div>\n                  <p className=\"text-purple-100 mb-3\">\n                    {insights[0]?.message || 'Your venue management is optimized with AI insights.'}\n                  </p>\n                  <div className=\"flex flex-wrap gap-4 text-sm\">\n                    <span className=\"bg-white/20 px-3 py-1 rounded-full\">\n                      {displayMetrics.thisMonthBookings || 0} Bookings This Month\n                    </span>\n                    <span className=\"bg-white/20 px-3 py-1 rounded-full\">\n                      {displayMetrics.hotLeads || 0} Hot Leads\n                    </span>\n                    <span className=\"bg-white/20 px-3 py-1 rounded-full\">\n                      ${(displayMetrics.weeklyRevenue || 0).toLocaleString()} This Week\n                    </span>\n                  </div>\n                </div>\n                <button \n                  onClick={() => setShowCreateEventModal(true)}\n                  className=\"bg-white/20 hover:bg-white/30 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors\"\n                >\n                  New Booking\n                </button>\n              </div>\n            </div>\n          )}\n\n          {/* Unified Metrics Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-600\">Total Bookings</p>\n                    <p className=\"text-2xl font-bold\">{displayMetrics.totalBookings || 0}</p>\n                    <p className=\"text-xs text-slate-500 flex items-center mt-1\">\n                      <span className=\"text-green-600\">+{displayMetrics.todayBookings || 0}</span>\n                      <span className=\"ml-1\">today</span>\n                    </p>\n                  </div>\n                  <div className=\"h-12 w-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <Calendar className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-600\">Revenue</p>\n                    <p className=\"text-2xl font-bold\">${(displayMetrics.revenue || 0).toLocaleString()}</p>\n                    <p className=\"text-xs text-slate-500 flex items-center mt-1\">\n                      <span className=\"text-green-600\">\n                        {displayMetrics.revenueGrowth > 0 ? '+' : ''}{(displayMetrics.revenueGrowth || 0).toFixed(1)}%\n                      </span>\n                      <span className=\"ml-1\">from last month</span>\n                    </p>\n                  </div>\n                  <div className=\"h-12 w-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <DollarSign className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-600\">Active Leads</p>\n                    <p className=\"text-2xl font-bold\">{displayMetrics.activeLeads || 0}</p>\n                    <p className=\"text-xs text-slate-500 flex items-center mt-1\">\n                      <span className=\"text-orange-600\">{displayMetrics.hotLeads || 0}</span>\n                      <span className=\"ml-1\">hot leads</span>\n                    </p>\n                  </div>\n                  <div className=\"h-12 w-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                    <Users className=\"h-6 w-6 text-orange-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-600\">Venues</p>\n                    <p className=\"text-2xl font-bold\">{displayMetrics.totalVenues || 0}</p>\n                    <p className=\"text-xs text-slate-500 flex items-center mt-1\">\n                      <span className=\"text-blue-600\">Active</span>\n                      <span className=\"ml-1\">locations</span>\n                    </p>\n                  </div>\n                  <div className=\"h-12 w-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                    <BarChart3 className=\"h-6 w-6 text-purple-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Calendar - Full Width */}\n          <div className=\"mb-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <h2 className=\"text-lg font-semibold mb-4\">Event Calendar</h2>\n                <AdvancedCalendar \n                  events={calendar.data} \n                  onEventClick={handleEventClick} \n                />\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content Grid */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Recent Bookings */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h2 className=\"text-lg font-semibold mb-4\">Recent Bookings</h2>\n                  <div className=\"space-y-4\">\n                    {upcomingBookings.slice(0, 5).map((booking: any) => (\n                      <div key={booking.id} className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-slate-50 cursor-pointer\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-medium\">{booking.customerName}</h3>\n                          <p className=\"text-sm text-slate-500\">\n                            {booking.eventType} • {booking.venue}\n                          </p>\n                          <p className=\"text-xs text-slate-400\">\n                            {new Date(booking.eventDate).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-medium\">${(booking.totalAmount || 0).toLocaleString()}</p>\n                          <Badge variant={\n                            booking.status === 'confirmed' ? 'default' :\n                            booking.status === 'pending' ? 'secondary' : 'outline'\n                          }>\n                            {booking.status}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                    {upcomingBookings.length === 0 && (\n                      <div className=\"text-center py-8 text-slate-500\">\n                        <Calendar className=\"w-12 h-12 mx-auto mb-4 text-slate-300\" />\n                        <p>No upcoming bookings</p>\n                        <button \n                          onClick={() => setShowCreateEventModal(true)}\n                          className=\"mt-2 text-blue-600 hover:text-blue-700 text-sm font-medium\"\n                        >\n                          Create your first booking\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Side Panel */}\n            <div className=\"space-y-6\">\n              {/* Active Leads */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h2 className=\"text-lg font-semibold mb-4\">Active Leads</h2>\n                  <div className=\"space-y-3\">\n                    {activeLeads.slice(0, 5).map((lead: any) => (\n                      <div key={lead.id} className=\"p-3 border rounded-lg\">\n                        <h3 className=\"font-medium text-sm\">\n                          {lead.firstName} {lead.lastName}\n                        </h3>\n                        <p className=\"text-xs text-slate-500\">\n                          {lead.eventType} • {lead.guestCount} guests\n                        </p>\n                        <Badge variant=\"outline\" className=\"mt-1 text-xs\">\n                          {lead.status}\n                        </Badge>\n                      </div>\n                    ))}\n                    {activeLeads.length === 0 && (\n                      <div className=\"text-center py-4 text-slate-500\">\n                        <Users className=\"w-8 h-8 mx-auto mb-2 text-slate-300\" />\n                        <p className=\"text-sm\">No active leads</p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Recent Payments */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h2 className=\"text-lg font-semibold mb-4\">Recent Payments</h2>\n                  <div className=\"space-y-3\">\n                    {recentPayments.slice(0, 3).map((payment: any) => (\n                      <div key={payment.id} className=\"flex justify-between items-center p-2 border rounded\">\n                        <div>\n                          <p className=\"font-medium text-sm\">${payment.amount}</p>\n                          <p className=\"text-xs text-slate-500\">{payment.method}</p>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {payment.status}\n                        </Badge>\n                      </div>\n                    ))}\n                    {recentPayments.length === 0 && (\n                      <div className=\"text-center py-4 text-slate-500\">\n                        <DollarSign className=\"w-8 h-8 mx-auto mb-2 text-slate-300\" />\n                        <p className=\"text-sm\">No recent payments</p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </main>\n\n        {/* Modals */}\n        <EventSummaryModal \n          open={!!selectedEvent && !showEditModal} \n          onOpenChange={(open) => !open && setSelectedEvent(null)}\n          booking={selectedEvent}\n          onEditClick={() => setShowEditModal(true)}\n        />\n\n        <EventEditFullModal \n          open={showEditModal} \n          onOpenChange={(open) => {\n            setShowEditModal(false);\n            if (!open) {\n              setSelectedEvent(null);\n            }\n          }}\n          booking={selectedEvent}\n        />\n\n        <CreateEventModal\n          open={showCreateEventModal}\n          onOpenChange={setShowCreateEventModal}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":16627},"client/src/components/dashboard/upcoming-events.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Calendar, Clock, Users, MapPin, ArrowRight } from \"lucide-react\";\nimport { format, parseISO, isToday, isTomorrow, addDays } from \"date-fns\";\nimport { getStatusConfig } from \"@shared/status-utils\";\n\nexport function UpcomingEvents() {\n  const { data: bookings } = useQuery({ queryKey: [\"/api/bookings\"] });\n\n  // Get upcoming events for the next 7 days\n  const getUpcomingEvents = () => {\n    if (!bookings || !Array.isArray(bookings)) return [];\n    \n    const now = new Date();\n    const nextWeek = addDays(now, 7);\n    \n    return (bookings as any[])\n      .filter(booking => {\n        try {\n          if (booking.status === 'cancelled' || !booking.date) return false;\n          const eventDate = parseISO(booking.date);\n          return eventDate >= now && eventDate <= nextWeek;\n        } catch {\n          return false;\n        }\n      })\n      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n      .slice(0, 5); // Show only next 5 events\n  };\n\n  const upcomingEvents = getUpcomingEvents();\n\n  const getDateLabel = (dateString: string) => {\n    try {\n      if (!dateString) return \"TBD\";\n      const date = parseISO(dateString);\n      if (isToday(date)) return \"Today\";\n      if (isTomorrow(date)) return \"Tomorrow\";\n      return format(date, \"MMM d\");\n    } catch {\n      return \"Invalid Date\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    // Use the centralized status utils for consistent coloring\n    return getStatusConfig(status).bgColor + \" \" + getStatusConfig(status).textColor;\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"w-5 h-5 text-purple-600\" />\n            Upcoming Events\n          </CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => window.location.href = '/events'}>\n            View All\n            <ArrowRight className=\"w-4 h-4 ml-1\" />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {upcomingEvents.length === 0 ? (\n          <div className=\"text-center py-6 text-slate-500\">\n            <Calendar className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n            <p className=\"text-sm\">No upcoming events</p>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              className=\"mt-2\"\n              onClick={() => window.location.href = '/events'}\n            >\n              Create Event\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {upcomingEvents.map((event, index) => (\n              <div key={index} className=\"p-3 rounded-lg border border-slate-200 hover:bg-slate-50 transition-colors\">\n                <div className=\"flex items-start justify-between mb-2\">\n                  <h4 className=\"font-medium text-slate-900 text-sm\">{event.eventName}</h4>\n                  <Badge className={`text-xs ${getStatusConfig(event.status).bgColor} ${getStatusConfig(event.status).textColor} ${getStatusConfig(event.status).borderColor} border`}>\n                    {getStatusConfig(event.status).label}\n                  </Badge>\n                </div>\n                \n                <div className=\"space-y-1 text-xs text-slate-600\">\n                  <div className=\"flex items-center gap-2\">\n                    <Calendar className=\"w-3 h-3\" />\n                    <span>{getDateLabel(event.date)}</span>\n                    <Clock className=\"w-3 h-3 ml-2\" />\n                    <span>{event.startTime} - {event.endTime}</span>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <Users className=\"w-3 h-3\" />\n                    <span>{event.guestCount} guests</span>\n                    <MapPin className=\"w-3 h-3 ml-2\" />\n                    <span>{event.spaceName || 'TBD'}</span>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between mt-2\">\n                    <span className=\"font-medium text-slate-700\">{event.customerName}</span>\n                    <span className=\"font-medium text-green-600\">${parseFloat(event.totalAmount || '0').toLocaleString()}</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4653},"client/src/components/dashboard/venue-utilization.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { MapPin, Calendar, TrendingUp } from \"lucide-react\";\n\nexport function VenueUtilization() {\n  const { data: venues } = useQuery({ queryKey: [\"/api/venues-with-spaces\"] });\n  const { data: bookings } = useQuery({ queryKey: [\"/api/bookings\"] });\n\n  // Calculate utilization for each venue\n  const getVenueUtilization = () => {\n    if (!venues || !bookings || !Array.isArray(venues) || !Array.isArray(bookings)) return [];\n    \n    return (venues as any[]).map(venue => {\n      const venueBookings = (bookings as any[]).filter(booking => \n        booking.venueId === venue.id && booking.status === 'confirmed'\n      );\n      \n      // Calculate utilization percentage (simplified)\n      const totalSpaces = venue.spaces?.length || 1;\n      const utilization = Math.min((venueBookings.length / totalSpaces) * 100, 100);\n      \n      return {\n        name: venue.name,\n        utilization: Math.round(utilization),\n        bookings: venueBookings.length,\n        spaces: totalSpaces,\n        revenue: venueBookings.reduce((sum: number, booking: any) => \n          sum + (parseFloat(booking.totalAmount) || 0), 0\n        )\n      };\n    });\n  };\n\n  const venueData = getVenueUtilization();\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <MapPin className=\"w-5 h-5 text-blue-600\" />\n          Venue Utilization\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {venueData.length === 0 ? (\n          <div className=\"text-center py-6 text-slate-500\">\n            <Calendar className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n            <p className=\"text-sm\">No venue data available</p>\n          </div>\n        ) : (\n          venueData.map((venue, index) => (\n            <div key={index} className=\"space-y-2\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium text-slate-700\">{venue.name}</span>\n                <span className=\"text-sm text-slate-500\">{venue.utilization}%</span>\n              </div>\n              <Progress value={venue.utilization} className=\"h-2\" />\n              <div className=\"flex justify-between text-xs text-slate-500\">\n                <span>{venue.bookings} bookings</span>\n                <span>${venue.revenue.toLocaleString()}</span>\n              </div>\n            </div>\n          ))\n        )}\n        \n        {venueData.length > 0 && (\n          <div className=\"pt-4 border-t border-slate-200\">\n            <div className=\"flex items-center gap-2 text-sm text-green-600\">\n              <TrendingUp className=\"w-4 h-4\" />\n              <span>Average utilization: {Math.round(venueData.reduce((sum, v) => sum + v.utilization, 0) / venueData.length)}%</span>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3031},"client/src/components/dashboard/weather-date.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Cloud, Sun, CloudRain, CloudSnow, Calendar } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { useState, useEffect } from \"react\";\n\nexport function WeatherDate() {\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 60000); // Update every minute\n\n    return () => clearInterval(timer);\n  }, []);\n\n  // Mock weather data (in a real app, this would come from a weather API)\n  const getWeatherData = () => {\n    const conditions = ['sunny', 'cloudy', 'rainy', 'snowy'];\n    const temperatures = [18, 22, 15, 8];\n    const condition = conditions[Math.floor(Math.random() * conditions.length)];\n    const temp = temperatures[Math.floor(Math.random() * temperatures.length)];\n    \n    return {\n      condition,\n      temperature: temp,\n      humidity: Math.floor(Math.random() * 40) + 40, // 40-80%\n      description: {\n        sunny: 'Sunny',\n        cloudy: 'Partly Cloudy', \n        rainy: 'Light Rain',\n        snowy: 'Snow Showers'\n      }[condition]\n    };\n  };\n\n  const weather = getWeatherData();\n\n  const getWeatherIcon = (condition: string) => {\n    switch (condition) {\n      case 'sunny': return Sun;\n      case 'cloudy': return Cloud;\n      case 'rainy': return CloudRain;\n      case 'snowy': return CloudSnow;\n      default: return Sun;\n    }\n  };\n\n  const getWeatherColor = (condition: string) => {\n    switch (condition) {\n      case 'sunny': return 'text-yellow-500';\n      case 'cloudy': return 'text-gray-500';\n      case 'rainy': return 'text-blue-500';\n      case 'snowy': return 'text-blue-300';\n      default: return 'text-yellow-500';\n    }\n  };\n\n  const WeatherIcon = getWeatherIcon(weather.condition);\n  const iconColor = getWeatherColor(weather.condition);\n\n  return (\n    <Card className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white\">\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-4\">\n          {/* Date and Time */}\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center gap-2 mb-2\">\n              <Calendar className=\"w-5 h-5\" />\n              <span className=\"text-sm font-medium\">Today</span>\n            </div>\n            <h2 className=\"text-2xl font-bold\">\n              {format(currentTime, 'EEEE, MMM d')}\n            </h2>\n            <p className=\"text-blue-100 text-sm\">\n              {format(currentTime, 'h:mm a')}\n            </p>\n          </div>\n\n          {/* Weather Info */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center\">\n                <WeatherIcon className={`w-7 h-7 ${iconColor}`} />\n              </div>\n              <div>\n                <p className=\"font-medium\">{weather.description}</p>\n                <p className=\"text-blue-100 text-sm\">Humidity {weather.humidity}%</p>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-3xl font-bold\">{weather.temperature}°C</div>\n            </div>\n          </div>\n\n          {/* Event Planning Tip */}\n          <div className=\"pt-4 border-t border-white/20\">\n            <p className=\"text-xs text-blue-100\">\n              {weather.condition === 'rainy' ? \n                '🌂 Consider indoor alternatives for outdoor events' :\n                weather.condition === 'sunny' ?\n                '☀️ Perfect weather for outdoor events' :\n                '🌤️ Great weather for any event type'\n              }\n            </p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3806},"client/src/components/forms/beo-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { \n  FileOutput, \n  Download, \n  Printer, \n  MapPin, \n  Clock, \n  Users, \n  Calendar,\n  DollarSign,\n  Phone,\n  Mail\n} from \"lucide-react\";\n\ninterface BeoModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  booking: any;\n}\n\nexport function BeoModal({ isOpen, onClose, booking }: BeoModalProps) {\n  const [selectedTemplate, setSelectedTemplate] = useState(\"standard\");\n  const [enabledBeoTypes, setEnabledBeoTypes] = useState([\n    \"floor_plan\", \"timeline\", \"catering\", \"av_requirements\"\n  ]);\n\n  // Fetch BEO settings\n  const { data: settings } = useQuery({\n    queryKey: [\"/api/settings\"],\n    enabled: isOpen\n  });\n\n  useEffect(() => {\n    if (settings && typeof settings === 'object' && 'beo' in settings) {\n      const beoSettings = settings.beo as any;\n      setSelectedTemplate(beoSettings?.defaultTemplate || \"standard\");\n      setEnabledBeoTypes(beoSettings?.enabledBeoTypes || []);\n    }\n  }, [settings]);\n\n  const getTemplateStyles = () => {\n    switch (selectedTemplate) {\n      case \"luxury\":\n        return \"bg-gradient-to-br from-amber-50 to-yellow-50 border-amber-200\";\n      case \"corporate\":\n        return \"bg-gradient-to-br from-blue-50 to-slate-50 border-blue-200\";\n      case \"wedding\":\n        return \"bg-gradient-to-br from-pink-50 to-rose-50 border-pink-200\";\n      case \"minimal\":\n        return \"bg-white border-gray-200\";\n      default:\n        return \"bg-gradient-to-br from-gray-50 to-slate-50 border-gray-200\";\n    }\n  };\n\n  const getTemplateTitle = () => {\n    switch (selectedTemplate) {\n      case \"luxury\": return \"LUXURY EVENT ORDER\";\n      case \"corporate\": return \"CORPORATE EVENT ORDER\";\n      case \"wedding\": return \"WEDDING EVENT ORDER\";\n      case \"minimal\": return \"EVENT ORDER\";\n      default: return \"BANQUET EVENT ORDER\";\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(amount);\n  };\n\n  if (!booking) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <FileOutput className=\"h-5 w-5\" />\n            Banquet Event Order (BEO)\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Action Buttons */}\n          <div className=\"flex gap-2 justify-end\">\n            <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n              <Printer className=\"h-4 w-4\" />\n              Print\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n              <Download className=\"h-4 w-4\" />\n              Download PDF\n            </Button>\n          </div>\n\n          {/* BEO Document */}\n          <Card className={`${getTemplateStyles()} shadow-lg`}>\n            <CardHeader className=\"text-center pb-4\">\n              <div className=\"space-y-2\">\n                <h1 className=\"text-2xl font-bold tracking-wide\">\n                  {getTemplateTitle()}\n                </h1>\n                <div className=\"text-sm text-muted-foreground\">\n                  Generated on {format(new Date(), \"MMMM d, yyyy 'at' h:mm a\")}\n                </div>\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              {/* Event Overview */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <h3 className=\"font-semibold text-lg mb-2\">Event Details</h3>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"font-medium\">Event:</span>\n                        <span>{booking.eventName}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"font-medium\">Date:</span>\n                        <span>{format(new Date(booking.eventDate), \"EEEE, MMMM d, yyyy\")}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"font-medium\">Time:</span>\n                        <span>{booking.startTime} - {booking.endTime}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Users className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"font-medium\">Guest Count:</span>\n                        <span>{booking.guestCount}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"font-medium\">Venue:</span>\n                        <span>{booking.venueName}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <h3 className=\"font-semibold text-lg mb-2\">Client Information</h3>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex items-center gap-2\">\n                        <Users className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"font-medium\">Name:</span>\n                        <span>{booking.customerName}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"font-medium\">Email:</span>\n                        <span>{booking.customerEmail}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"font-medium\">Phone:</span>\n                        <span>{booking.customerPhone}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {booking.status}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Services & Packages */}\n              <div>\n                <h3 className=\"font-semibold text-lg mb-4\">Services & Packages</h3>\n                <div className=\"space-y-3\">\n                  {booking.selectedPackages?.map((pkg: any, index: number) => (\n                    <div key={index} className=\"bg-white/50 rounded-lg p-4 border\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <h4 className=\"font-medium\">{pkg.name}</h4>\n                        <span className=\"font-semibold\">{formatCurrency(pkg.finalPrice || pkg.price)}</span>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">{pkg.description}</p>\n                      {pkg.includedServices?.length > 0 && (\n                        <div className=\"mt-2\">\n                          <p className=\"text-xs font-medium text-muted-foreground mb-1\">Included Services:</p>\n                          <div className=\"flex flex-wrap gap-1\">\n                            {pkg.includedServices.map((service: any, idx: number) => (\n                              <Badge key={idx} variant=\"secondary\" className=\"text-xs\">\n                                {service.name}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n\n                  {booking.selectedServices?.map((service: any, index: number) => (\n                    <div key={index} className=\"bg-white/50 rounded-lg p-4 border\">\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <h4 className=\"font-medium\">{service.name}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{service.description}</p>\n                        </div>\n                        <span className=\"font-semibold\">{formatCurrency(service.finalPrice || service.price)}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Conditional BEO Sections */}\n              {enabledBeoTypes.includes(\"timeline\") && (\n                <>\n                  <Separator />\n                  <div>\n                    <h3 className=\"font-semibold text-lg mb-4\">Event Timeline</h3>\n                    <div className=\"bg-white/50 rounded-lg p-4 border\">\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"font-medium\">Setup Begins:</span>\n                          <span>{booking.startTime ? format(new Date(`2000-01-01 ${booking.startTime}`), \"h:mm a\") : \"TBD\"}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"font-medium\">Guest Arrival:</span>\n                          <span>{booking.startTime ? format(new Date(`2000-01-01 ${booking.startTime}`), \"h:mm a\") : \"TBD\"}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"font-medium\">Event End:</span>\n                          <span>{booking.endTime ? format(new Date(`2000-01-01 ${booking.endTime}`), \"h:mm a\") : \"TBD\"}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"font-medium\">Breakdown Complete:</span>\n                          <span>TBD</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </>\n              )}\n\n              {enabledBeoTypes.includes(\"floor_plan\") && (\n                <>\n                  <Separator />\n                  <div>\n                    <h3 className=\"font-semibold text-lg mb-4\">Floor Plan & Layout</h3>\n                    <div className=\"bg-white/50 rounded-lg p-4 border\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        Detailed floor plan and seating arrangement will be provided separately.\n                        Guest count: {booking.guestCount} | Venue: {booking.venueName}\n                      </p>\n                    </div>\n                  </div>\n                </>\n              )}\n\n              {enabledBeoTypes.includes(\"catering\") && (\n                <>\n                  <Separator />\n                  <div>\n                    <h3 className=\"font-semibold text-lg mb-4\">Catering & Menu</h3>\n                    <div className=\"bg-white/50 rounded-lg p-4 border\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        Detailed catering menu and service information based on selected packages and services.\n                      </p>\n                    </div>\n                  </div>\n                </>\n              )}\n\n              {enabledBeoTypes.includes(\"av_requirements\") && (\n                <>\n                  <Separator />\n                  <div>\n                    <h3 className=\"font-semibold text-lg mb-4\">AV & Technical Requirements</h3>\n                    <div className=\"bg-white/50 rounded-lg p-4 border\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        Audio/visual and technical requirements will be coordinated based on event specifications.\n                      </p>\n                    </div>\n                  </div>\n                </>\n              )}\n\n              {/* Pricing Summary */}\n              {settings && typeof settings === 'object' && 'beo' in settings && (settings.beo as any)?.showPricing && (\n                <>\n                  <Separator />\n                  <div>\n                    <h3 className=\"font-semibold text-lg mb-4 flex items-center gap-2\">\n                      <DollarSign className=\"h-5 w-5\" />\n                      Pricing Summary\n                    </h3>\n                    <div className=\"bg-white/50 rounded-lg p-4 border\">\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span>Subtotal:</span>\n                          <span>{formatCurrency(booking.totalAmount || 0)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Tax:</span>\n                          <span>TBD</span>\n                        </div>\n                        <Separator />\n                        <div className=\"flex justify-between font-semibold\">\n                          <span>Total:</span>\n                          <span>{formatCurrency(booking.totalAmount || 0)}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </>\n              )}\n\n              {/* Footer */}\n              <div className=\"text-center pt-6 border-t\">\n                <p className=\"text-xs text-muted-foreground\">\n                  This Banquet Event Order is subject to our terms and conditions. \n                  Please review all details carefully and contact us with any questions.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":14718},"client/src/pages/auth/EmailVerification.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CheckCircle, XCircle, Mail, ArrowRight } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function EmailVerification() {\n  const [location, navigate] = useLocation();\n  const [status, setStatus] = useState<'verifying' | 'success' | 'error'>('verifying');\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const token = urlParams.get('token');\n\n    if (!token) {\n      setStatus('error');\n      setMessage('No verification token provided');\n      return;\n    }\n\n    // Verify email\n    const verifyEmail = async () => {\n      try {\n        const response = await apiRequest('GET', `/api/auth/verify-email?token=${token}`);\n        const data = await response.json();\n        \n        if (response.ok) {\n          setStatus('success');\n          setMessage(data.message || 'Email verified successfully');\n        } else {\n          setStatus('error');\n          setMessage(data.message || 'Verification failed');\n        }\n      } catch (error) {\n        setStatus('error');\n        setMessage('Failed to verify email. Please try again.');\n      }\n    };\n\n    verifyEmail();\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-gray-50 to-white flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            {status === 'verifying' && (\n              <div className=\"animate-spin w-12 h-12 border-4 border-blue-200 border-t-blue-600 rounded-full\"></div>\n            )}\n            {status === 'success' && (\n              <CheckCircle className=\"w-12 h-12 text-green-600\" />\n            )}\n            {status === 'error' && (\n              <XCircle className=\"w-12 h-12 text-red-600\" />\n            )}\n          </div>\n          \n          <CardTitle className=\"text-2xl\">\n            {status === 'verifying' && 'Verifying Email...'}\n            {status === 'success' && 'Email Verified!'}\n            {status === 'error' && 'Verification Failed'}\n          </CardTitle>\n          \n          <CardDescription>\n            {status === 'verifying' && 'Please wait while we verify your email address.'}\n            {status === 'success' && 'Your email has been successfully verified. You can now sign in to your account.'}\n            {status === 'error' && message}\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          {status === 'success' && (\n            <Link href=\"/login\">\n              <Button className=\"w-full bg-blue-600 hover:bg-blue-700\">\n                Sign In to Your Account\n                <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Button>\n            </Link>\n          )}\n          \n          {status === 'error' && (\n            <div className=\"space-y-3\">\n              <Link href=\"/signup\">\n                <Button className=\"w-full bg-blue-600 hover:bg-blue-700\">\n                  Try Signing Up Again\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </Link>\n              \n              <Link href=\"/contact\">\n                <Button variant=\"outline\" className=\"w-full\">\n                  Contact Support\n                  <Mail className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </Link>\n            </div>\n          )}\n          \n          <div className=\"text-center pt-4\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\">\n                ← Back to Home\n              </Button>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3984},"client/src/pages/superadmin/UsersManagement.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Trash2, Mail, MailCheck, Building2 } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  emailVerified: boolean;\n  createdAt: string;\n  tenantName?: string;\n  tenantSlug?: string;\n}\n\ninterface UsersResponse {\n  data: User[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n  };\n}\n\nexport default function UsersManagement() {\n  const [page, setPage] = useState(1);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: usersData, isLoading } = useQuery({\n    queryKey: ['/api/superadmin/users', page],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/superadmin/users?page=${page}&limit=10`);\n      return response.json();\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: (userId: string) => apiRequest('DELETE', `/api/superadmin/users/${userId}`),\n    onSuccess: () => {\n      toast({\n        title: 'User Deleted',\n        description: 'User has been successfully deleted.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/superadmin/users'] });\n      setSelectedUser(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Delete Failed',\n        description: error.message || 'Failed to delete user.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleDeleteUser = (user: User) => {\n    setSelectedUser(user);\n  };\n\n  const confirmDelete = () => {\n    if (selectedUser) {\n      deleteUserMutation.mutate(selectedUser.id);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"h-8 bg-gray-200 rounded animate-pulse\"></div>\n        <div className=\"space-y-3\">\n          {[...Array(5)].map((_, i) => (\n            <div key={i} className=\"h-16 bg-gray-200 rounded animate-pulse\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const users: User[] = usersData?.data || [];\n  const pagination = usersData?.pagination;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold tracking-tight\">User Management</h2>\n          <p className=\"text-muted-foreground\">\n            Manage all platform users, including verified and unverified accounts\n          </p>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{pagination?.total || 0}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Verified Users</CardTitle>\n            <MailCheck className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {users.filter((u: User) => u.emailVerified).length}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Unverified Users</CardTitle>\n            <Mail className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {users.filter((u: User) => !u.emailVerified).length}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">With Tenants</CardTitle>\n            <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {users.filter((u: User) => u.tenantName).length}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Users Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>All Users</CardTitle>\n          <CardDescription>\n            View and manage all platform users. Unverified users are shown with a warning badge.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>User</TableHead>\n                <TableHead>Email Status</TableHead>\n                <TableHead>Tenant</TableHead>\n                <TableHead>Joined</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {users.map((user) => (\n                <TableRow key={user.id}>\n                  <TableCell>\n                    <div className=\"flex flex-col\">\n                      <span className=\"font-medium\">\n                        {user.firstName} {user.lastName}\n                      </span>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {user.email}\n                      </span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={user.emailVerified ? 'default' : 'destructive'}>\n                      {user.emailVerified ? 'Verified' : 'Unverified'}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    {user.tenantName ? (\n                      <div className=\"flex flex-col\">\n                        <span className=\"font-medium\">{user.tenantName}</span>\n                        <span className=\"text-sm text-muted-foreground\">\n                          /{user.tenantSlug}\n                        </span>\n                      </div>\n                    ) : (\n                      <span className=\"text-muted-foreground\">No tenant</span>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    {new Date(user.createdAt).toLocaleDateString()}\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <AlertDialog>\n                      <AlertDialogTrigger asChild>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDeleteUser(user)}\n                          className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </AlertDialogTrigger>\n                      <AlertDialogContent>\n                        <AlertDialogHeader>\n                          <AlertDialogTitle>Delete User</AlertDialogTitle>\n                          <AlertDialogDescription>\n                            Are you sure you want to delete{' '}\n                            <strong>{user.firstName} {user.lastName}</strong>?\n                            <br />\n                            <span className=\"text-sm text-muted-foreground\">\n                              Email: {user.email}\n                            </span>\n                            <br />\n                            <br />\n                            This action will permanently remove the user and all their data.\n                            {user.tenantName && (\n                              <>\n                                <br />\n                                <span className=\"text-yellow-600 font-medium\">\n                                  ⚠️ This user has a tenant ({user.tenantName}). \n                                  Their tenant relationship will be removed.\n                                </span>\n                              </>\n                            )}\n                          </AlertDialogDescription>\n                        </AlertDialogHeader>\n                        <AlertDialogFooter>\n                          <AlertDialogCancel onClick={() => setSelectedUser(null)}>\n                            Cancel\n                          </AlertDialogCancel>\n                          <AlertDialogAction\n                            onClick={confirmDelete}\n                            className=\"bg-red-600 hover:bg-red-700\"\n                            disabled={deleteUserMutation.isPending}\n                          >\n                            {deleteUserMutation.isPending ? 'Deleting...' : 'Delete User'}\n                          </AlertDialogAction>\n                        </AlertDialogFooter>\n                      </AlertDialogContent>\n                    </AlertDialog>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n\n          {/* Pagination */}\n          {pagination && pagination.totalPages > 1 && (\n            <div className=\"flex items-center justify-between space-x-2 py-4\">\n              <div className=\"text-sm text-muted-foreground\">\n                Showing {((pagination.page - 1) * pagination.limit) + 1} to{' '}\n                {Math.min(pagination.page * pagination.limit, pagination.total)} of{' '}\n                {pagination.total} users\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setPage(page - 1)}\n                  disabled={page <= 1}\n                >\n                  Previous\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setPage(page + 1)}\n                  disabled={page >= pagination.totalPages}\n                >\n                  Next\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {users.length === 0 && (\n            <div className=\"text-center py-8\">\n              <p className=\"text-muted-foreground\">No users found.</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11346},"client/src/hooks/useTenantFeatures.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\n\nexport interface TenantInfo {\n  id: string;\n  name: string;\n  slug: string;\n  industry: string;\n  planId: string;\n  features: Record<string, boolean>;\n  limits: Record<string, number>;\n  status: string;\n  planName?: string;\n}\n\nexport function useTenantFeatures() {\n  const { data: tenantInfo, isLoading } = useQuery<TenantInfo>({\n    queryKey: ['/api/tenant/info'],\n    retry: false,\n    staleTime: 5 * 60 * 1000, // Cache for 5 minutes\n  });\n\n  const hasFeature = (featureName: string) => {\n    return tenantInfo?.features?.[featureName] === true;\n  };\n\n  const getUsageLimit = (limitName: string): number => {\n    return tenantInfo?.limits?.[limitName] || 0;\n  };\n\n  const isEnterprise = tenantInfo?.planId === 'enterprise';\n  const isProfessional = tenantInfo?.planId === 'professional' || isEnterprise;\n  const isStarter = tenantInfo?.planId === 'starter' || isProfessional;\n\n  return {\n    tenantInfo,\n    isLoading,\n    hasFeature,\n    getUsageLimit,\n    isEnterprise,\n    isProfessional, \n    isStarter,\n    features: tenantInfo?.features || {},\n    limits: tenantInfo?.limits || {},\n    planId: tenantInfo?.planId,\n    planName: tenantInfo?.planName\n  };\n}","size_bytes":1215},"server/routes/tenant-info.ts":{"content":"import type { Express } from 'express';\nimport { db } from '../db';\nimport { tenants, featurePackages } from '../../shared/schema';\nimport { eq } from 'drizzle-orm';\nimport { requireAuth } from '../middleware/auth';\nimport { tenantContext } from '../middleware/tenantContext';\n\nexport function registerTenantInfoRoutes(app: Express) {\n  // GET /api/tenant/info - Get current tenant information and features\n  app.get('/api/tenant/info', requireAuth, async (req: any, res) => {\n    try {\n      const tenantId = req.user?.currentTenant?.id;\n      \n      if (!tenantId) {\n        return res.status(403).json({ message: 'Tenant access required' });\n      }\n\n      // Get tenant with their plan features and limits\n      const [tenantWithPlan] = await db\n        .select({\n          tenant: {\n            id: tenants.id,\n            name: tenants.name,\n            slug: tenants.slug,\n            industry: tenants.industry,\n            planId: tenants.planId,\n            status: tenants.status,\n            contactName: tenants.contactName,\n            contactEmail: tenants.contactEmail,\n            businessPhone: tenants.businessPhone,\n            businessAddress: tenants.businessAddress,\n            businessDescription: tenants.businessDescription,\n            stripeCustomerId: tenants.stripeCustomerId,\n            stripeSubscriptionId: tenants.stripeSubscriptionId,\n            createdAt: tenants.createdAt,\n            updatedAt: tenants.updatedAt\n          },\n          plan: {\n            id: featurePackages.id,\n            name: featurePackages.name,\n            features: featurePackages.features,\n            limits: featurePackages.limits\n          }\n        })\n        .from(tenants)\n        .leftJoin(featurePackages, eq(tenants.planId, featurePackages.id))\n        .where(eq(tenants.id, tenantId))\n        .limit(1);\n\n      if (!tenantWithPlan) {\n        return res.status(404).json({ message: 'Tenant not found' });\n      }\n\n      const { tenant, plan } = tenantWithPlan;\n\n      // Return tenant info with real features from their actual plan\n      res.json({\n        ...tenant,\n        planId: tenant.planId || 'starter',\n        planName: plan?.name || 'Starter',\n        \n        // Real features and limits from the tenant's actual plan\n        features: plan?.features as Record<string, boolean> || {},\n        limits: plan?.limits as Record<string, number> || {},\n      });\n    } catch (error) {\n      console.error('Error fetching tenant info:', error);\n      res.status(500).json({ message: 'Failed to fetch tenant information' });\n    }\n  });\n}","size_bytes":2571},"server/firebase-client.ts":{"content":"// Server-side Firebase operations using Admin SDK (fixed DECODER issue)\nimport { adminDb } from './firebase-admin.js';\nimport { randomUUID } from 'crypto';\n\nconsole.log('Using Firebase Admin SDK for server operations');\n\n// Server-side Firebase operations using Admin SDK\nexport const serverFirebaseOps = {\n  // Feature Packages\n  async createFeaturePackage(data: any) {\n    try {\n      const id = randomUUID();\n      const packageData = {\n        ...data,\n        id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      \n      await adminDb.collection('featurePackages').doc(id).set(packageData);\n      console.log('Feature package created:', id);\n      return { id, ...packageData };\n    } catch (error) {\n      console.error('Error creating feature package:', error);\n      throw error;\n    }\n  },\n\n  async getFeaturePackages() {\n    try {\n      const snapshot = await adminDb.collection('featurePackages').get();\n      return snapshot.docs.map((doc: any) => ({ id: doc.id, ...doc.data() }));\n    } catch (error) {\n      console.error('Error getting feature packages:', error);\n      return [];\n    }\n  },\n\n  async getFeaturePackage(id: string) {\n    try {\n      const doc = await adminDb.collection('featurePackages').doc(id).get();\n      if (doc.exists) {\n        return { id: doc.id, ...doc.data() };\n      }\n      return null;\n    } catch (error) {\n      console.error('Error getting feature package:', error);\n      return null;\n    }\n  },\n\n  async updateFeaturePackage(id: string, data: any) {\n    try {\n      const updateData = {\n        ...data,\n        updatedAt: new Date()\n      };\n      \n      await adminDb.collection('featurePackages').doc(id).update(updateData);\n      \n      const doc = await adminDb.collection('featurePackages').doc(id).get();\n      if (doc.exists) {\n        return { id: doc.id, ...doc.data() };\n      }\n      return null;\n    } catch (error) {\n      console.error('Error updating feature package:', error);\n      throw error;\n    }\n  },\n\n  async deleteFeaturePackage(id: string) {\n    try {\n      await adminDb.collection('featurePackages').doc(id).delete();\n      return true;\n    } catch (error) {\n      console.error('Error deleting feature package:', error);\n      throw error;\n    }\n  },\n\n  // Analytics\n  async getAnalytics() {\n    try {\n      const tenantsSnapshot = await adminDb.collection('tenants').get();\n      const usersSnapshot = await adminDb.collection('users').get();\n      const packagesSnapshot = await adminDb.collection('featurePackages').get();\n      \n      const tenants = tenantsSnapshot.docs.map((doc: any) => doc.data());\n      const activeTenants = tenants.filter((t: any) => t.status === 'active');\n      \n      return {\n        totalTenants: tenants.length,\n        totalUsers: usersSnapshot.size,\n        totalFeaturePackages: packagesSnapshot.size,\n        activeTenants: activeTenants.length,\n        lastUpdated: new Date()\n      };\n    } catch (error) {\n      console.error('Error getting analytics:', error);\n      return {\n        totalTenants: 0,\n        totalUsers: 0, \n        totalFeaturePackages: 0,\n        activeTenants: 0,\n        lastUpdated: new Date()\n      };\n    }\n  },\n\n  // Users\n  async getUsers() {\n    try {\n      const snapshot = await adminDb.collection('users').get();\n      return snapshot.docs.map((doc: any) => ({ uid: doc.id, ...doc.data() }));\n    } catch (error) {\n      console.error('Error getting users:', error);\n      return [];\n    }\n  },\n\n  async deleteUser(uid: string) {\n    try {\n      await adminDb.collection('users').doc(uid).delete();\n      return true;\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      throw error;\n    }\n  },\n\n  // Tenants\n  async getTenantBySlug(slug: string) {\n    try {\n      const snapshot = await adminDb.collection('tenants').where('slug', '==', slug).get();\n      if (!snapshot.empty) {\n        const doc = snapshot.docs[0];\n        return { id: doc.id, ...doc.data() };\n      }\n      return null;\n    } catch (error) {\n      console.error('Error getting tenant by slug:', error);\n      return null;\n    }\n  },\n\n  async verifyIdToken(idToken: string) {\n    try {\n      const { adminAuth } = await import('./firebase-admin.js');\n      return await adminAuth.verifyIdToken(idToken);\n    } catch (error) {\n      console.error('Error verifying ID token:', error);\n      throw error;\n    }\n  }\n};\n\nexport default serverFirebaseOps;","size_bytes":4426},"server/routes/firebase-auth.ts":{"content":"// Firebase-only authentication routes\nimport type { Express } from \"express\";\nimport { getFirestore } from \"firebase-admin/firestore\";\nimport { getAuth } from \"firebase-admin/auth\";\nimport { COLLECTIONS } from \"@shared/firestore-schema\";\n\nconst db = getFirestore();\nconst adminAuth = getAuth();\n\nexport function registerFirebaseAuthRoutes(app: Express) {\n  // Signup route - create user in Firebase Auth and Firestore\n  app.post('/api/auth/signup', async (req, res) => {\n    try {\n      const { firstName, lastName, email, password, companyName, planSlug } = req.body;\n\n      if (!firstName || !lastName || !email || !password || !companyName || !planSlug) {\n        return res.status(400).json({ message: 'All fields are required' });\n      }\n\n      // Create Firebase user\n      const firebaseUser = await adminAuth.createUser({\n        email,\n        password,\n        emailVerified: false,\n        displayName: `${firstName} ${lastName}`,\n      });\n\n      // Create user document in Firestore\n      await db.collection(COLLECTIONS.USERS).doc(firebaseUser.uid).set({\n        email,\n        firstName,\n        lastName,\n        emailVerified: false,\n        isSuperAdmin: false,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      });\n\n      // Create tenant\n      const tenantData = {\n        name: companyName,\n        slug: companyName.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-'),\n        planSlug,\n        status: 'active',\n        contactName: `${firstName} ${lastName}`,\n        contactEmail: email,\n        connectStatus: 'pending',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const tenantRef = await db.collection(COLLECTIONS.TENANTS).add(tenantData);\n\n      // Add user to tenant\n      await db.collection(COLLECTIONS.TENANT_USERS).add({\n        tenantId: tenantRef.id,\n        userId: firebaseUser.uid,\n        role: 'owner',\n        permissions: {},\n        scopes: {},\n        createdAt: new Date(),\n      });\n\n      // Send custom token for immediate authentication\n      const customToken = await adminAuth.createCustomToken(firebaseUser.uid);\n\n      res.json({\n        message: 'Account created successfully',\n        customToken,\n        user: {\n          uid: firebaseUser.uid,\n          email,\n          firstName,\n          lastName,\n        },\n        tenant: {\n          id: tenantRef.id,\n          name: companyName,\n          slug: tenantData.slug,\n        }\n      });\n\n    } catch (error: any) {\n      console.error('Signup error:', error);\n      \n      if (error.code === 'auth/email-already-exists') {\n        return res.status(409).json({ message: 'An account with this email already exists' });\n      }\n      \n      res.status(500).json({ message: 'Failed to create account' });\n    }\n  });\n\n  // Login route - verify Firebase token and return user data\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { email, password } = req.body;\n\n      if (!email || !password) {\n        return res.status(400).json({ message: 'Email and password are required' });\n      }\n\n      // This endpoint is mainly for super admin login using server-side auth\n      // Regular users will authenticate directly with Firebase client SDK\n      \n      try {\n        const firebaseUser = await adminAuth.getUserByEmail(email);\n        \n        // Verify this is a super admin\n        const superAdminDoc = await db.collection(COLLECTIONS.SUPER_ADMINS).doc(firebaseUser.uid).get();\n        \n        if (!superAdminDoc.exists) {\n          return res.status(401).json({ message: 'Invalid credentials' });\n        }\n\n        // Create custom token for super admin\n        const customToken = await adminAuth.createCustomToken(firebaseUser.uid);\n        \n        // Get user data\n        const userDoc = await db.collection(COLLECTIONS.USERS).doc(firebaseUser.uid).get();\n        const userData = userDoc.data();\n\n        res.json({\n          message: 'Login successful',\n          customToken,\n          user: {\n            uid: firebaseUser.uid,\n            ...userData,\n            isSuperAdmin: true,\n          }\n        });\n\n      } catch (error: any) {\n        if (error.code === 'auth/user-not-found') {\n          return res.status(401).json({ message: 'Invalid credentials' });\n        }\n        throw error;\n      }\n\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ message: 'Login failed' });\n    }\n  });\n\n  // Get current user endpoint\n  app.get('/api/auth/me', async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      \n      if (!authHeader?.startsWith('Bearer ')) {\n        return res.status(401).json({ message: 'No auth token provided' });\n      }\n\n      const token = authHeader.split('Bearer ')[1];\n      const decodedToken = await adminAuth.verifyIdToken(token);\n      \n      // Get user document\n      const userDoc = await db.collection(COLLECTIONS.USERS).doc(decodedToken.uid).get();\n      \n      if (!userDoc.exists) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      const userData = userDoc.data();\n      \n      // Check if super admin\n      const superAdminDoc = await db.collection(COLLECTIONS.SUPER_ADMINS).doc(decodedToken.uid).get();\n      const isSuperAdmin = superAdminDoc.exists;\n\n      if (isSuperAdmin) {\n        return res.json({\n          user: {\n            ...userData,\n            uid: decodedToken.uid,\n            id: decodedToken.uid,\n            isSuperAdmin: true,\n          }\n        });\n      }\n\n      // Get user's current tenant\n      const tenantUsersSnapshot = await db.collection(COLLECTIONS.TENANT_USERS)\n        .where('userId', '==', decodedToken.uid)\n        .limit(1)\n        .get();\n\n      let currentTenant = null;\n      if (!tenantUsersSnapshot.empty) {\n        const tenantUser = tenantUsersSnapshot.docs[0].data();\n        const tenantDoc = await db.collection(COLLECTIONS.TENANTS).doc(tenantUser.tenantId).get();\n        \n        if (tenantDoc.exists) {\n          currentTenant = {\n            id: tenantDoc.id,\n            ...tenantDoc.data(),\n            role: tenantUser.role,\n          };\n        }\n      }\n\n      res.json({\n        user: {\n          ...userData,\n          uid: decodedToken.uid,\n          id: decodedToken.uid,\n          isSuperAdmin: false,\n          currentTenant,\n        }\n      });\n\n    } catch (error) {\n      console.error('Auth me error:', error);\n      res.status(401).json({ message: 'Invalid token' });\n    }\n  });\n\n  // Session sync endpoint - stores Firebase UID in session for middleware compatibility\n  app.post('/api/auth/sync-session', async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      \n      if (!authHeader?.startsWith('Bearer ')) {\n        return res.status(401).json({ message: 'No auth token provided' });\n      }\n\n      const token = authHeader.split('Bearer ')[1];\n      const decodedToken = await adminAuth.verifyIdToken(token);\n      \n      // Get user document\n      const userDoc = await db.collection(COLLECTIONS.USERS).doc(decodedToken.uid).get();\n      \n      if (!userDoc.exists) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      const userData = userDoc.data();\n      \n      // Store Firebase UID in session for middleware compatibility\n      (req.session as any).firebaseUid = decodedToken.uid;\n      (req.session as any).user = {\n        id: decodedToken.uid,\n        email: userData.email,\n        firstName: userData.firstName || '',\n        lastName: userData.lastName || '',\n        isSuperAdmin: userData.isSuperAdmin || false,\n      };\n\n      res.json({ \n        message: 'Session synced successfully',\n        user: (req.session as any).user\n      });\n\n    } catch (error) {\n      console.error('Session sync error:', error);\n      res.status(500).json({ message: 'Session sync failed' });\n    }\n  });\n\n  // Logout route\n  app.post('/api/auth/logout', async (req, res) => {\n    try {\n      // Clear session data\n      req.session.destroy((err) => {\n        if (err) {\n          console.error('Session destroy error:', err);\n          return res.status(500).json({ message: 'Logout failed' });\n        }\n        res.clearCookie('connect.sid');\n        res.json({ message: 'Logged out successfully' });\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n      res.status(500).json({ message: 'Logout failed' });\n    }\n  });\n\n  // Debug endpoint to check tenant data\n  app.get('/api/debug/user-tenant/:uid', async (req, res) => {\n    try {\n      const userUid = req.params.uid;\n      \n      const debugInfo = {\n        userUid,\n        userDoc: null as any,\n        tenantUsers: [] as any[],\n        allTenants: [] as any[],\n        allTenantUsers: [] as any[]\n      };\n      \n      // 1. Get user document\n      const userDoc = await db.collection(COLLECTIONS.USERS).doc(userUid).get();\n      debugInfo.userDoc = userDoc.exists ? { id: userDoc.id, ...userDoc.data() } : null;\n      \n      // 2. Get tenant_users for this user\n      const tenantUsersSnapshot = await db.collection(COLLECTIONS.TENANT_USERS)\n        .where('userId', '==', userUid)\n        .get();\n      debugInfo.tenantUsers = tenantUsersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      \n      // 3. Get all tenants\n      const tenantsSnapshot = await db.collection(COLLECTIONS.TENANTS).get();\n      debugInfo.allTenants = tenantsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      \n      // 4. Get all tenant_users\n      const allTenantUsersSnapshot = await db.collection(COLLECTIONS.TENANT_USERS).get();\n      debugInfo.allTenantUsers = allTenantUsersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      \n      res.json(debugInfo);\n      \n    } catch (error) {\n      console.error('Debug error:', error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n}","size_bytes":9912},"debug-firestore.js":{"content":"// Debug script to check Firestore data for the problematic user\nconst { initializeApp } = require('firebase-admin/app');\nconst { getFirestore } = require('firebase-admin/firestore');\nconst { credential } = require('firebase-admin');\n\n// Initialize Firebase Admin\nconst serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT_KEY);\nconst app = initializeApp({\n  credential: credential.cert(serviceAccount),\n});\n\nconst db = getFirestore(app);\n\nasync function debugUserTenantData() {\n  try {\n    const userEmail = 'marketing@reinvimd.com';\n    const userUid = 'Zg5xgNcVlQZfSNJXGykFz3wZsYw1'; // From the logs\n    \n    console.log('=== DEBUG: User Tenant Relationship ===');\n    console.log('User UID:', userUid);\n    console.log('User Email:', userEmail);\n    \n    // 1. Check if user exists in users collection\n    const userDoc = await db.collection('users').doc(userUid).get();\n    console.log('\\n1. User document exists:', userDoc.exists);\n    if (userDoc.exists) {\n      console.log('User data:', userDoc.data());\n    }\n    \n    // 2. Check tenant_users collection for this user\n    console.log('\\n2. Checking tenant_users collection...');\n    const tenantUsersSnapshot = await db.collection('tenant_users')\n      .where('userId', '==', userUid)\n      .get();\n    \n    console.log('Tenant_users records found:', tenantUsersSnapshot.size);\n    tenantUsersSnapshot.forEach(doc => {\n      console.log('Tenant_user record:', { id: doc.id, ...doc.data() });\n    });\n    \n    // 3. Check tenants collection\n    console.log('\\n3. All tenants in database...');\n    const tenantsSnapshot = await db.collection('tenants').get();\n    console.log('Total tenants:', tenantsSnapshot.size);\n    tenantsSnapshot.forEach(doc => {\n      const data = doc.data();\n      console.log('Tenant:', { id: doc.id, name: data.name, slug: data.slug, contactEmail: data.contactEmail });\n    });\n    \n    // 4. Check if there are tenant_users with different userId format\n    console.log('\\n4. All tenant_users records...');\n    const allTenantUsersSnapshot = await db.collection('tenant_users').get();\n    console.log('Total tenant_users:', allTenantUsersSnapshot.size);\n    allTenantUsersSnapshot.forEach(doc => {\n      const data = doc.data();\n      console.log('Tenant_user:', { id: doc.id, userId: data.userId, tenantId: data.tenantId, role: data.role });\n    });\n    \n  } catch (error) {\n    console.error('Debug error:', error);\n  }\n  \n  process.exit(0);\n}\n\ndebugUserTenantData();","size_bytes":2468},"server/debug-tenant.ts":{"content":"// Debug endpoint to check tenant data\nimport type { Express } from \"express\";\nimport { getFirestore } from \"firebase-admin/firestore\";\nimport { COLLECTIONS } from \"@shared/firestore-schema\";\n\nconst db = getFirestore();\n\nexport function registerDebugRoutes(app: Express) {\n  app.get('/api/debug/user-tenant/:uid', async (req, res) => {\n    try {\n      const userUid = req.params.uid;\n      \n      const debugInfo = {\n        userUid,\n        userDoc: null as any,\n        tenantUsers: [] as any[],\n        allTenants: [] as any[],\n        allTenantUsers: [] as any[]\n      };\n      \n      // 1. Get user document\n      const userDoc = await db.collection(COLLECTIONS.USERS).doc(userUid).get();\n      debugInfo.userDoc = userDoc.exists ? { id: userDoc.id, ...userDoc.data() } : null;\n      \n      // 2. Get tenant_users for this user\n      const tenantUsersSnapshot = await db.collection(COLLECTIONS.TENANT_USERS)\n        .where('userId', '==', userUid)\n        .get();\n      debugInfo.tenantUsers = tenantUsersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      \n      // 3. Get all tenants\n      const tenantsSnapshot = await db.collection(COLLECTIONS.TENANTS).get();\n      debugInfo.allTenants = tenantsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      \n      // 4. Get all tenant_users\n      const allTenantUsersSnapshot = await db.collection(COLLECTIONS.TENANT_USERS).get();\n      debugInfo.allTenantUsers = allTenantUsersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      \n      res.json(debugInfo);\n      \n    } catch (error) {\n      console.error('Debug error:', error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n}","size_bytes":1687},"client/src/pages/SuperAdmin.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from '@/components/ui/table';\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  emailVerified: boolean;\n  isSuperAdmin: boolean;\n  createdAt: string;\n}\n\ninterface Tenant {\n  id: string;\n  name: string;\n  slug: string;\n  industry: string;\n  plan_id: string;\n  status: string;\n  contact_name: string;\n  contact_email: string;\n  created_at: string;\n}\n\ninterface FeaturePackage {\n  id: string;\n  name: string;\n  description: string;\n  price: string;\n  billing_cycle: string;\n  is_active: boolean;\n  features: any;\n  limits: any;\n  order: number;\n}\n\nexport default function SuperAdmin() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loginForm, setLoginForm] = useState({ email: '', password: '' });\n  const [activeTab, setActiveTab] = useState('users');\n  const [users, setUsers] = useState<User[]>([]);\n  const [tenants, setTenants] = useState<Tenant[]>([]);\n  const [packages, setPackages] = useState<FeaturePackage[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n  const { toast } = useToast();\n\n  // Check authentication on component mount\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const checkAuth = async () => {\n    try {\n      const response = await fetch('/api/auth/user', {\n        credentials: 'include'\n      });\n      \n      if (response.ok) {\n        const user = await response.json();\n        if (user.isSuperAdmin) {\n          setCurrentUser(user);\n          setIsAuthenticated(true);\n          loadData();\n        }\n      }\n    } catch (error) {\n      console.log('Not authenticated or error checking auth');\n    }\n  };\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    \n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        body: JSON.stringify(loginForm),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include'\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.user && data.user.isSuperAdmin) {\n        setCurrentUser(data.user);\n        setIsAuthenticated(true);\n        toast({\n          title: \"Login successful\",\n          description: \"Welcome to the super admin dashboard\",\n        });\n        loadData();\n      } else {\n        toast({\n          title: \"Access denied\",\n          description: response.ok ? \"Super admin access required\" : data.message,\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Login failed\",\n        description: \"Invalid email or password\",\n        variant: \"destructive\",\n      });\n    }\n    \n    setLoading(false);\n  };\n\n  const loadData = async () => {\n    try {\n      const [usersRes, tenantsRes, packagesRes] = await Promise.all([\n        fetch('/api/admin/users', { credentials: 'include' }),\n        fetch('/api/admin/tenants', { credentials: 'include' }),\n        fetch('/api/admin/packages', { credentials: 'include' }),\n      ]);\n      \n      if (usersRes.ok) {\n        const usersData = await usersRes.json();\n        setUsers(usersData);\n      }\n      \n      if (tenantsRes.ok) {\n        const tenantsData = await tenantsRes.json();\n        setTenants(tenantsData);\n      }\n      \n      if (packagesRes.ok) {\n        const packagesData = await packagesRes.json();\n        setPackages(packagesData);\n      }\n    } catch (error) {\n      console.error('Failed to load data:', error);\n      toast({\n        title: \"Load failed\", \n        description: \"Failed to load admin data\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const deleteUser = async (userId: string) => {\n    if (!confirm('Are you sure you want to delete this user?')) return;\n    \n    try {\n      const response = await fetch(`/api/admin/users/${userId}`, { \n        method: 'DELETE',\n        credentials: 'include'\n      });\n      \n      if (response.ok) {\n        toast({\n          title: \"User deleted\",\n          description: \"User has been removed successfully\",\n        });\n        loadData();\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Delete failed\",\n          description: error.message || \"Failed to delete user\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Delete failed\",\n        description: \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const deleteTenant = async (tenantId: string) => {\n    if (!confirm('Are you sure you want to delete this tenant? This will remove all their data.')) return;\n    \n    try {\n      const response = await fetch(`/api/admin/tenants/${tenantId}`, { \n        method: 'DELETE',\n        credentials: 'include'\n      });\n      \n      if (response.ok) {\n        toast({\n          title: \"Tenant deleted\",\n          description: \"Tenant has been removed successfully\",\n        });\n        loadData();\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Delete failed\",\n          description: error.message || \"Failed to delete tenant\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Delete failed\",\n        description: \"Failed to delete tenant\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle>Super Admin Login</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={loginForm.email}\n                  onChange={(e) => setLoginForm(prev => ({ ...prev, email: e.target.value }))}\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={loginForm.password}\n                  onChange={(e) => setLoginForm(prev => ({ ...prev, password: e.target.value }))}\n                  required\n                />\n              </div>\n              <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                {loading ? 'Logging in...' : 'Login'}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"bg-white shadow\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between h-16\">\n            <div className=\"flex\">\n              <div className=\"flex-shrink-0 flex items-center\">\n                <h1 className=\"text-xl font-semibold\">VENUIN Super Admin</h1>\n              </div>\n              <nav className=\"hidden sm:-my-px sm:ml-6 sm:flex sm:space-x-8\">\n                {['users', 'tenants', 'packages'].map((tab) => (\n                  <button\n                    key={tab}\n                    onClick={() => setActiveTab(tab)}\n                    className={`${\n                      activeTab === tab\n                        ? 'border-indigo-500 text-gray-900'\n                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                    } whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm capitalize`}\n                  >\n                    {tab}\n                  </button>\n                ))}\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n        {activeTab === 'users' && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Users ({users.length})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Role</TableHead>\n                    <TableHead>Created</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {users.map((user) => (\n                    <TableRow key={user.id}>\n                      <TableCell>\n                        {user.firstName} {user.lastName}\n                      </TableCell>\n                      <TableCell>{user.email}</TableCell>\n                      <TableCell>\n                        <Badge variant={user.emailVerified ? 'default' : 'secondary'}>\n                          {user.emailVerified ? 'Verified' : 'Unverified'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={user.isSuperAdmin ? 'destructive' : 'outline'}>\n                          {user.isSuperAdmin ? 'Super Admin' : 'User'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        {new Date(user.createdAt).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>\n                        <Button\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          onClick={() => deleteUser(user.id)}\n                          disabled={user.isSuperAdmin}\n                        >\n                          Delete\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        )}\n\n        {activeTab === 'tenants' && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Tenants ({tenants.length})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Slug</TableHead>\n                    <TableHead>Contact</TableHead>\n                    <TableHead>Plan</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Created</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {tenants.map((tenant) => (\n                    <TableRow key={tenant.id}>\n                      <TableCell>{tenant.name}</TableCell>\n                      <TableCell>{tenant.slug}</TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{tenant.contact_name}</div>\n                          <div className=\"text-sm text-gray-500\">{tenant.contact_email}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">{tenant.plan_id}</Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={tenant.status === 'active' ? 'default' : 'secondary'}>\n                          {tenant.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        {new Date(tenant.created_at).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>\n                        <Button\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          onClick={() => deleteTenant(tenant.id)}\n                        >\n                          Delete\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        )}\n\n        {activeTab === 'packages' && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Feature Packages ({packages.length})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Description</TableHead>\n                    <TableHead>Price</TableHead>\n                    <TableHead>Billing</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Order</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {packages.map((pkg) => (\n                    <TableRow key={pkg.id}>\n                      <TableCell className=\"font-medium\">{pkg.name}</TableCell>\n                      <TableCell>{pkg.description}</TableCell>\n                      <TableCell>${pkg.price}</TableCell>\n                      <TableCell>{pkg.billing_cycle}</TableCell>\n                      <TableCell>\n                        <Badge variant={pkg.is_active ? 'default' : 'secondary'}>\n                          {pkg.is_active ? 'Active' : 'Inactive'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>{pkg.order}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":14434},"client/src/pages/ForceLogout.tsx":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\n// Using PostgreSQL-based authentication\n\nexport default function ForceLogout() {\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    const forceLogout = async () => {\n      try {\n        console.log('Force logout initiated...');\n        await fetch('/api/auth/logout', {\n          method: 'POST',\n          credentials: 'include',\n        });\n        \n        // Clear all storage\n        localStorage.clear();\n        sessionStorage.clear();\n        \n        console.log('Force logout successful, redirecting to login');\n        setLocation('/login');\n      } catch (error) {\n        console.error('Force logout error:', error);\n        \n        // Force clear everything anyway\n        localStorage.clear();\n        sessionStorage.clear();\n        \n        // Redirect even if logout failed\n        setLocation('/login');\n      }\n    };\n\n    forceLogout();\n  }, [setLocation]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n      <div className=\"text-center\">\n        <div className=\"animate-spin w-12 h-12 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n        <h2 className=\"text-xl font-semibold mb-2\">Signing out...</h2>\n        <p className=\"text-gray-600 dark:text-gray-400\">Please wait while we clear your session.</p>\n      </div>\n    </div>\n  );\n}","size_bytes":1436},"client/src/pages/LogoutPage.tsx":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\n// Using PostgreSQL-based authentication\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { LogOut } from 'lucide-react';\n\nexport default function LogoutPage() {\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    // Auto logout when page loads\n    handleLogout();\n  }, []);\n\n  const handleLogout = async () => {\n    try {\n      await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include',\n      });\n      console.log('Successfully logged out');\n      setTimeout(() => {\n        setLocation('/login');\n      }, 1500);\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Force redirect even if logout fails\n      setTimeout(() => {\n        setLocation('/login');\n      }, 1000);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <LogOut className=\"h-8 w-8 text-primary\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Signing out...</CardTitle>\n          <CardDescription>\n            Please wait while we sign you out safely.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"text-center\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n          <Button \n            onClick={() => setLocation('/login')} \n            variant=\"outline\"\n            className=\"mt-4\"\n          >\n            Go to Login\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":1890},"server/middleware/auth.ts":{"content":"import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport type { Request, Response, NextFunction } from 'express';\n\n// JWT secret from environment variable\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production';\n\n// Super admin credentials from environment variables\nconst SUPER_ADMIN_CREDENTIALS = {\n  email: process.env.SUPER_ADMIN_EMAIL || 'admin@yourcompany.com',\n  // Hash of 'admin123' - generated using bcrypt\n  passwordHash: process.env.SUPER_ADMIN_PASSWORD_HASH || '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi'\n};\n\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    id: string;\n    email: string;\n    name?: string;\n    role: string;\n  };\n}\n\n// Hash password utility\nexport async function hashPassword(password: string): Promise<string> {\n  const saltRounds = 10;\n  return bcrypt.hash(password, saltRounds);\n}\n\n// Compare password utility\nexport async function comparePassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\n// Generate JWT token\nexport function generateToken(payload: { id: string; email: string; name?: string; role: string }): string {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: '24h' });\n}\n\n// Verify JWT token\nexport function verifyToken(token: string): { id: string; email: string; role: string } | null {\n  try {\n    return jwt.verify(token, JWT_SECRET) as { id: string; email: string; role: string };\n  } catch (error) {\n    return null;\n  }\n}\n\n// Super admin authentication\nexport async function authenticateSuperAdmin(email: string, password: string): Promise<{ token: string; user: any } | null> {\n  if (email !== SUPER_ADMIN_CREDENTIALS.email) {\n    return null;\n  }\n\n  const isValidPassword = await comparePassword(password, SUPER_ADMIN_CREDENTIALS.passwordHash);\n  if (!isValidPassword) {\n    return null;\n  }\n\n  const user = {\n    id: 'super-admin-1',\n    email: SUPER_ADMIN_CREDENTIALS.email,\n    role: 'super_admin'\n  };\n\n  const token = generateToken(user);\n  return { token, user };\n}\n\n// Middleware to require super admin authentication\nexport function requireSuperAdmin(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  const authHeader = req.headers.authorization;\n  \n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return res.status(401).json({ message: 'Authorization token required' });\n  }\n\n  const token = authHeader.substring(7); // Remove 'Bearer ' prefix\n  const decoded = verifyToken(token);\n\n  if (!decoded || decoded.role !== 'super_admin') {\n    return res.status(403).json({ message: 'Super admin access required' });\n  }\n\n  req.user = decoded;\n  next();\n}\n\n// Middleware to require any authentication\nexport function requireAuth(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  const authHeader = req.headers.authorization;\n  \n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return res.status(401).json({ message: 'Authorization token required' });\n  }\n\n  const token = authHeader.substring(7);\n  const decoded = verifyToken(token);\n\n  if (!decoded) {\n    return res.status(401).json({ message: 'Invalid or expired token' });\n  }\n\n  req.user = decoded;\n  next();\n}","size_bytes":3232},"client/src/hooks/useFeatureAccess.ts":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface FeaturePackage {\n  id: string;\n  name: string;\n  features: Record<string, boolean>;\n  limits: Record<string, number>;\n}\n\nexport function useFeatureAccess() {\n  const { user } = useAuth();\n  \n  // Get current tenant's package information\n  const { data: packageData, isLoading } = useQuery<FeaturePackage>({\n    queryKey: ['/api/tenant/package'],\n    enabled: !!user && !user.isSuperAdmin,\n  });\n\n  const hasFeature = (feature: string): boolean => {\n    // Super admin has access to all features\n    if (user?.isSuperAdmin) {\n      return true;\n    }\n    \n    // If no package data or loading, deny access\n    if (isLoading || !packageData) {\n      return false;\n    }\n    \n    return packageData.features[feature] === true;\n  };\n\n  const getUsageLimit = (limitType: string): number | undefined => {\n    // Super admin has no limits\n    if (user?.isSuperAdmin) {\n      return undefined;\n    }\n    \n    if (!packageData) {\n      return 0;\n    }\n    \n    return packageData.limits[limitType];\n  };\n\n  const checkUsageLimit = (limitType: string, currentUsage: number): boolean => {\n    const limit = getUsageLimit(limitType);\n    \n    // No limit means unlimited\n    if (limit === undefined) {\n      return true;\n    }\n    \n    return currentUsage < limit;\n  };\n\n  return {\n    hasFeature,\n    getUsageLimit,\n    checkUsageLimit,\n    packageData,\n    isLoading,\n  };\n}\n\n// Feature keys that match the VENUIN_FEATURES in FeaturePackageForm\nexport const FEATURES = {\n  DASHBOARD_ANALYTICS: 'dashboard_analytics',\n  BOOKING_MANAGEMENT: 'booking_management',\n  CUSTOMER_MANAGEMENT: 'customer_management',\n  LEAD_MANAGEMENT: 'lead_management',\n  PROPOSAL_SYSTEM: 'proposal_system',\n  PAYMENT_PROCESSING: 'payment_processing',\n  VENUE_MANAGEMENT: 'venue_management',\n  CALENDAR_BOOKING: 'calendar_booking',\n  EMAIL_AUTOMATION: 'email_automation',\n  TASK_MANAGEMENT: 'task_management',\n  REPORTING_ANALYTICS: 'reporting_analytics',\n  AI_VOICE_BOOKING: 'ai_voice_booking',\n  AI_EMAIL_REPLIES: 'ai_email_replies',\n  AI_LEAD_SCORING: 'ai_lead_scoring',\n  AI_PROPOSAL_GENERATION: 'ai_proposal_generation',\n  STRIPE_CONNECT: 'stripe_connect',\n  MULTI_VENUE_SUPPORT: 'multi_venue_support',\n  CUSTOM_BRANDING: 'custom_branding',\n  API_ACCESS: 'api_access',\n  PRIORITY_SUPPORT: 'priority_support',\n} as const;\n\nexport type FeatureKey = typeof FEATURES[keyof typeof FEATURES];","size_bytes":2460},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport interface AuthUser {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  isSuperAdmin?: boolean;\n}\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery<AuthUser>({\n    queryKey: ['/api/auth/user'],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    error,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":415},"server/middleware/featureGating.ts":{"content":"import { db } from \"../db\";\nimport { tenants, featurePackages, bookings, venues, customers, tenantUsers } from \"../../shared/schema\";\nimport { eq, sql } from \"drizzle-orm\";\nimport type { Request, Response, NextFunction } from \"express\";\n\nexport interface FeatureGateOptions {\n  feature: string;\n  redirectToUpgrade?: boolean;\n  customMessage?: string;\n}\n\n// Feature enforcement middleware\nexport function requireFeature(options: FeatureGateOptions) {\n  return async (req: any, res: Response, next: NextFunction) => {\n    try {\n      const tenantId = req.tenant?.id;\n      if (!tenantId) {\n        return res.status(403).json({ \n          message: \"Tenant access required\",\n          code: \"TENANT_REQUIRED\"\n        });\n      }\n\n      // Get tenant's plan and features\n      const [tenantWithPlan] = await db\n        .select({\n          planId: tenants.planId,\n          features: featurePackages.features,\n          limits: featurePackages.limits\n        })\n        .from(tenants)\n        .leftJoin(featurePackages, eq(tenants.planId, featurePackages.id))\n        .where(eq(tenants.id, tenantId));\n\n      if (!tenantWithPlan) {\n        return res.status(403).json({ \n          message: \"Tenant plan not found\",\n          code: \"PLAN_NOT_FOUND\"\n        });\n      }\n\n      const features = tenantWithPlan.features as Record<string, boolean> || {};\n      const hasFeature = features[options.feature] === true;\n\n      if (!hasFeature) {\n        return res.status(403).json({ \n          message: options.customMessage || `Feature '${options.feature}' is not available in your current plan`,\n          code: \"FEATURE_NOT_AVAILABLE\",\n          feature: options.feature,\n          upgradeRequired: options.redirectToUpgrade !== false\n        });\n      }\n\n      // Add feature info to request for downstream use\n      req.features = features;\n      req.limits = tenantWithPlan.limits as Record<string, number> || {};\n      \n      next();\n    } catch (error) {\n      console.error(\"Feature gating error:\", error);\n      res.status(500).json({ message: \"Feature check failed\" });\n    }\n  };\n}\n\n// Usage limit enforcement middleware  \nexport function checkUsageLimit(limitName: string, customMessage?: string) {\n  return async (req: any, res: Response, next: NextFunction) => {\n    try {\n      const tenantId = req.tenant?.id;\n      if (!tenantId) {\n        return res.status(403).json({ \n          message: \"Tenant access required\",\n          code: \"TENANT_REQUIRED\"\n        });\n      }\n\n      // Get tenant's limits\n      const [tenantWithPlan] = await db\n        .select({\n          limits: featurePackages.limits\n        })\n        .from(tenants)\n        .leftJoin(featurePackages, eq(tenants.planId, featurePackages.id))\n        .where(eq(tenants.id, tenantId));\n\n      if (!tenantWithPlan) {\n        return res.status(403).json({ \n          message: \"Tenant plan not found\",\n          code: \"PLAN_NOT_FOUND\"\n        });\n      }\n\n      const limits = tenantWithPlan.limits as Record<string, number> || {};\n      const limit = limits[limitName];\n\n      if (limit !== undefined && limit !== -1) { // -1 means unlimited\n        // Count current usage based on limit type\n        let currentUsage = 0;\n        \n        switch (limitName) {\n          case 'maxBookings':\n            const bookingsCount = await db.select({ count: sql<number>`count(*)` })\n              .from(bookings)\n              .where(eq(bookings.tenantId, tenantId));\n            currentUsage = Number(bookingsCount[0]?.count) || 0;\n            break;\n            \n          case 'maxVenues':\n            const venuesCount = await db.select({ count: sql<number>`count(*)` })\n              .from(venues)  \n              .where(eq(venues.tenantId, tenantId));\n            currentUsage = Number(venuesCount[0]?.count) || 0;\n            break;\n            \n          case 'maxCustomers':\n            const customersCount = await db.select({ count: sql<number>`count(*)` })\n              .from(customers)\n              .where(eq(customers.tenantId, tenantId));\n            currentUsage = Number(customersCount[0]?.count) || 0;\n            break;\n            \n          case 'maxStaff':\n            const staffCount = await db.select({ count: sql<number>`count(*)` })\n              .from(tenantUsers)\n              .where(eq(tenantUsers.tenantId, tenantId));\n            currentUsage = Number(staffCount[0]?.count) || 0;\n            break;\n        }\n\n        if (currentUsage >= limit) {\n          return res.status(403).json({ \n            message: customMessage || `You have reached the limit of ${limit} ${limitName}. Please upgrade your plan.`,\n            code: \"USAGE_LIMIT_EXCEEDED\",\n            limit: limitName,\n            currentUsage,\n            maxAllowed: limit,\n            upgradeRequired: true\n          });\n        }\n\n        // Add usage info to request\n        req.currentUsage = { [limitName]: currentUsage };\n        req.limits = limits;\n      }\n      \n      next();\n    } catch (error) {\n      console.error(\"Usage limit check error:\", error);\n      res.status(500).json({ message: \"Usage limit check failed\" });\n    }\n  };\n}\n\n// Helper function to get all tenant features and limits\nexport async function getTenantFeatures(tenantId: string) {\n  try {\n    const [tenantWithPlan] = await db\n      .select({\n        planId: tenants.planId,\n        planName: featurePackages.name,\n        features: featurePackages.features,\n        limits: featurePackages.limits\n      })\n      .from(tenants)\n      .leftJoin(featurePackages, eq(tenants.planId, featurePackages.id))\n      .where(eq(tenants.id, tenantId));\n\n    if (!tenantWithPlan) {\n      return null;\n    }\n\n    return {\n      planId: tenantWithPlan.planId,\n      planName: tenantWithPlan.planName,\n      features: tenantWithPlan.features as Record<string, boolean> || {},\n      limits: tenantWithPlan.limits as Record<string, number> || {}\n    };\n  } catch (error) {\n    console.error(\"Error getting tenant features:\", error);\n    return null;\n  }\n}","size_bytes":5978},"client/src/pages/superadmin/UserManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Users, Trash2, UserCheck, Building, Calendar, Mail, Phone } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface User {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  isSuperAdmin: boolean;\n  emailVerified: boolean;\n  createdAt: string;\n  tenants: {\n    id: string;\n    name: string;\n    slug: string;\n    role: string;\n    planId: string;\n    status: string;\n  }[];\n  tenantCount: number;\n}\n\nexport default function UserManagement() {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const queryClient = useQueryClient();\n\n  const { data: users = [], isLoading } = useQuery({\n    queryKey: ['/api/admin/users'],\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest('DELETE', `/api/admin/users/${userId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"User deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      setSelectedUser(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const impersonateUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest('POST', `/api/admin/impersonate/${userId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Impersonation Started\",\n        description: \"You are now viewing as this user. Remember to stop impersonation when done.\",\n      });\n      // Redirect to user's tenant or dashboard\n      window.location.href = '/';\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to start impersonation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteUser = (user: User) => {\n    if (user.isSuperAdmin) {\n      toast({\n        title: \"Cannot delete\",\n        description: \"Super admin users cannot be deleted\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setSelectedUser(user);\n  };\n\n  const confirmDelete = () => {\n    if (selectedUser) {\n      deleteUserMutation.mutate(selectedUser.id);\n    }\n  };\n\n  const handleImpersonate = (user: User) => {\n    if (user.isSuperAdmin) {\n      toast({\n        title: \"Cannot impersonate\",\n        description: \"Cannot impersonate super admin users\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    impersonateUserMutation.mutate(user.id);\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role.toLowerCase()) {\n      case 'owner': return 'bg-purple-100 text-purple-800';\n      case 'admin': return 'bg-blue-100 text-blue-800';\n      case 'manager': return 'bg-green-100 text-green-800';\n      case 'staff': return 'bg-yellow-100 text-yellow-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'suspended': return 'bg-red-100 text-red-800';\n      case 'cancelled': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-yellow-100 text-yellow-800';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"w-5 h-5\" />\n            User Management\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"h-12 bg-gray-100 animate-pulse rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"w-5 h-5\" />\n            User Management\n          </CardTitle>\n          <CardDescription>\n            Manage all platform users, their tenants, and access permissions\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>User</TableHead>\n                  <TableHead>Email Status</TableHead>\n                  <TableHead>Tenants</TableHead>\n                  <TableHead>Joined</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {users.map((user: User) => (\n                  <TableRow key={user.id}>\n                    <TableCell>\n                      <div className=\"flex flex-col space-y-1\">\n                        <div className=\"font-medium\">\n                          {user.firstName || user.lastName \n                            ? `${user.firstName || ''} ${user.lastName || ''}`.trim()\n                            : user.email}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">{user.email}</div>\n                        {user.isSuperAdmin && (\n                          <Badge variant=\"secondary\" className=\"w-fit\">\n                            Super Admin\n                          </Badge>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant={user.emailVerified ? \"default\" : \"destructive\"}\n                        className={user.emailVerified ? \"bg-green-100 text-green-800\" : \"\"}\n                      >\n                        {user.emailVerified ? \"Verified\" : \"Unverified\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"text-sm font-medium\">\n                          {user.tenantCount} {user.tenantCount === 1 ? 'tenant' : 'tenants'}\n                        </div>\n                        {user.tenants.slice(0, 2).map((tenant) => (\n                          <div key={tenant.id} className=\"flex items-center gap-2\">\n                            <Building className=\"w-3 h-3 text-gray-400\" />\n                            <span className=\"text-xs\">{tenant.name}</span>\n                            <Badge variant=\"outline\" className={getRoleColor(tenant.role)}>\n                              {tenant.role}\n                            </Badge>\n                            <Badge variant=\"outline\" className={getStatusColor(tenant.status)}>\n                              {tenant.status}\n                            </Badge>\n                          </div>\n                        ))}\n                        {user.tenants.length > 2 && (\n                          <div className=\"text-xs text-gray-500\">\n                            +{user.tenants.length - 2} more\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1 text-sm text-gray-500\">\n                        <Calendar className=\"w-3 h-3\" />\n                        {new Date(user.createdAt).toLocaleDateString()}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        {!user.isSuperAdmin && (\n                          <>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleImpersonate(user)}\n                              disabled={impersonateUserMutation.isPending}\n                            >\n                              <UserCheck className=\"w-3 h-3 mr-1\" />\n                              Impersonate\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteUser(user)}\n                              disabled={deleteUserMutation.isPending}\n                            >\n                              <Trash2 className=\"w-3 h-3 mr-1\" />\n                              Delete\n                            </Button>\n                          </>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n\n          {users.length === 0 && (\n            <div className=\"text-center py-12\">\n              <Users className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No users found</h3>\n              <p className=\"text-gray-500\">Users will appear here as they sign up for the platform.</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!selectedUser} onOpenChange={() => setSelectedUser(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete User</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete {selectedUser?.firstName} {selectedUser?.lastName} ({selectedUser?.email})?\n              This action cannot be undone and will also delete all their associated tenants and data.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmDelete}\n              className=\"bg-red-600 hover:bg-red-700\"\n              disabled={deleteUserMutation.isPending}\n            >\n              {deleteUserMutation.isPending ? \"Deleting...\" : \"Delete User\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}","size_bytes":10942},"client/src/pages/tenant-registration-success.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle, Mail, Clock, Building2 } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function TenantRegistrationSuccess() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-green-50 to-blue-100 dark:from-gray-900 dark:to-gray-800 p-4\">\n      <Card className=\"w-full max-w-lg\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <CheckCircle className=\"h-16 w-16 text-green-500\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-green-700\">Registration Successful!</CardTitle>\n          <CardDescription className=\"text-lg\">\n            Your VENUIN account has been created successfully\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-200 dark:border-blue-800\">\n            <div className=\"flex items-start space-x-3\">\n              <Clock className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n              <div>\n                <h3 className=\"font-semibold text-blue-800 dark:text-blue-200\">Account Under Review</h3>\n                <p className=\"text-sm text-blue-600 dark:text-blue-300\">\n                  Your account is currently pending approval from our team. This typically takes 1-2 business days.\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-green-50 dark:bg-green-900/20 p-4 rounded-lg border border-green-200 dark:border-green-800\">\n            <div className=\"flex items-start space-x-3\">\n              <Mail className=\"h-5 w-5 text-green-600 mt-0.5\" />\n              <div>\n                <h3 className=\"font-semibold text-green-800 dark:text-green-200\">Check Your Email</h3>\n                <p className=\"text-sm text-green-600 dark:text-green-300\">\n                  We've sent you a confirmation email with next steps and additional information about your account.\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold text-center\">What happens next?</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-6 h-6 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center text-sm font-semibold text-blue-600\">1</div>\n                <p className=\"text-sm\">Our team reviews your application</p>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-6 h-6 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center text-sm font-semibold text-blue-600\">2</div>\n                <p className=\"text-sm\">You receive an approval notification via email</p>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-6 h-6 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center text-sm font-semibold text-blue-600\">3</div>\n                <p className=\"text-sm\">You can log in and start managing your venues</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex gap-3\">\n            <Button \n              variant=\"outline\" \n              className=\"flex-1\"\n              onClick={() => setLocation(\"/tenant-login\")}\n            >\n              <Building2 className=\"h-4 w-4 mr-2\" />\n              Back to Login\n            </Button>\n            <Button \n              className=\"flex-1\"\n              onClick={() => window.location.href = \"mailto:support@venuin.com\"}\n            >\n              <Mail className=\"h-4 w-4 mr-2\" />\n              Contact Support\n            </Button>\n          </div>\n\n          <div className=\"text-center\">\n            <p className=\"text-xs text-muted-foreground\">\n              Need help? Contact us at support@venuin.com or call 1-800-VENUIN\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4333},"client/src/pages/admin/email-settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertEmailSettingSchema, type EmailSetting, type InsertEmailSetting } from \"@shared/schema\";\nimport { Mail, Trash2, Check, TestTube, Settings, Shield, Send } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\n\nexport default function EmailSettings() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [editingSetting, setEditingSetting] = useState<EmailSetting | null>(null);\n  const [testingId, setTestingId] = useState<string | null>(null);\n  const [testEmail, setTestEmail] = useState(\"\");\n\n  const { data: emailSettings = [], isLoading } = useQuery<EmailSetting[]>({\n    queryKey: [\"/api/admin/email-settings\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertEmailSetting) => {\n      return apiRequest(\"POST\", \"/api/admin/email-settings\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/email-settings\"] });\n      setShowCreateDialog(false);\n      setEditingSetting(null);\n      toast({\n        title: \"Success\",\n        description: \"Email configuration saved successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save email configuration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertEmailSetting> }) => {\n      return apiRequest(\"PUT\", `/api/admin/email-settings/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/email-settings\"] });\n      setEditingSetting(null);\n      toast({\n        title: \"Success\",\n        description: \"Email configuration updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update email configuration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/admin/email-settings/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/email-settings\"] });\n      toast({\n        title: \"Success\",\n        description: \"Email configuration deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete email configuration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const setDefaultMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"POST\", `/api/admin/email-settings/${id}/set-default`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/email-settings\"] });\n      toast({\n        title: \"Success\",\n        description: \"Default email configuration updated\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to set default configuration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const testEmailMutation = useMutation({\n    mutationFn: async ({ id, testEmail }: { id: string; testEmail: string }) => {\n      return apiRequest(\"POST\", `/api/admin/email-settings/${id}/test`, { testEmail });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/email-settings\"] });\n      setTestingId(null);\n      setTestEmail(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Test email sent successfully\",\n      });\n    },\n    onError: (error: any) => {\n      setTestingId(null);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send test email\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm<InsertEmailSetting>({\n    resolver: zodResolver(insertEmailSettingSchema),\n    defaultValues: {\n      provider: \"gmail\",\n      smtpHost: \"smtp.gmail.com\",\n      smtpPort: 587,\n      smtpSecure: true,\n      fromName: \"VENUIN Platform\",\n      isActive: true,\n      isDefault: false,\n    },\n  });\n\n  const onSubmit = (data: InsertEmailSetting) => {\n    if (editingSetting) {\n      updateMutation.mutate({ id: editingSetting.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (setting: EmailSetting) => {\n    setEditingSetting(setting);\n    form.reset({\n      provider: setting.provider,\n      smtpHost: setting.smtpHost || undefined,\n      smtpPort: setting.smtpPort || undefined,\n      smtpSecure: setting.smtpSecure,\n      username: setting.username,\n      password: setting.password,\n      fromName: setting.fromName,\n      fromEmail: setting.fromEmail,\n      replyToEmail: setting.replyToEmail || undefined,\n      isActive: setting.isActive,\n      isDefault: setting.isDefault,\n    });\n    setShowCreateDialog(true);\n  };\n\n  const handleTestEmail = (settingId: string) => {\n    if (!testEmail) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a test email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setTestingId(settingId);\n    testEmailMutation.mutate({ id: settingId, testEmail });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold\">Email Settings</h1>\n        </div>\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-32 bg-gray-200 rounded-lg\"></div>\n          <div className=\"h-32 bg-gray-200 rounded-lg\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n            <Mail className=\"h-8 w-8\" />\n            Email Configuration\n          </h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Configure Gmail and SMTP settings for tenant verification and notification emails\n          </p>\n        </div>\n        <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n          <DialogTrigger asChild>\n            <Button onClick={() => {\n              setEditingSetting(null);\n              form.reset({\n                provider: \"gmail\",\n                smtpHost: \"smtp.gmail.com\",\n                smtpPort: 587,\n                smtpSecure: true,\n                fromName: \"VENUIN Platform\",\n                isActive: true,\n                isDefault: false,\n              });\n            }}>\n              <Settings className=\"h-4 w-4 mr-2\" />\n              Add Configuration\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingSetting ? \"Edit Email Configuration\" : \"Add Email Configuration\"}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"provider\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Provider</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select provider\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"gmail\">Gmail</SelectItem>\n                            <SelectItem value=\"smtp\">SMTP</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"fromName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>From Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"VENUIN Platform\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"username\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email Address</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" placeholder=\"notifications@yourplatform.com\" {...field} />\n                        </FormControl>\n                        <FormDescription>\n                          Gmail email address or SMTP username\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Password</FormLabel>\n                        <FormControl>\n                          <Input type=\"password\" placeholder=\"App password for Gmail\" {...field} />\n                        </FormControl>\n                        <FormDescription>\n                          Use Gmail App Password for security\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"fromEmail\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>From Email</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" placeholder=\"noreply@yourplatform.com\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"replyToEmail\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Reply To Email (Optional)</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" placeholder=\"support@yourplatform.com\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"smtpHost\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>SMTP Host</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"smtp.gmail.com\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"smtpPort\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>SMTP Port</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            placeholder=\"587\" \n                            {...field}\n                            onChange={e => field.onChange(parseInt(e.target.value))}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"smtpSecure\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-col justify-end\">\n                        <FormLabel>Use TLS/SSL</FormLabel>\n                        <FormControl>\n                          <Switch\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"isActive\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex items-center space-x-2\">\n                        <FormControl>\n                          <Switch\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                        <FormLabel>Active</FormLabel>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"isDefault\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex items-center space-x-2\">\n                        <FormControl>\n                          <Switch\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                        <FormLabel>Set as Default</FormLabel>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setShowCreateDialog(false);\n                      setEditingSetting(null);\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createMutation.isPending || updateMutation.isPending}>\n                    {editingSetting ? \"Update Configuration\" : \"Add Configuration\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid gap-6\">\n        {emailSettings.length === 0 ? (\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <Mail className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No Email Configurations</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Add your first email configuration to enable tenant notifications and verification emails.\n              </p>\n              <Button onClick={() => setShowCreateDialog(true)}>\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Add Configuration\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          emailSettings.map((setting) => (\n            <Card key={setting.id} className={setting.isDefault ? \"border-blue-200 bg-blue-50\" : \"\"}>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <Mail className=\"h-5 w-5\" />\n                      <CardTitle className=\"text-lg\">{setting.fromName}</CardTitle>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      {setting.isDefault && (\n                        <Badge variant=\"default\" className=\"bg-blue-100 text-blue-800\">\n                          <Check className=\"h-3 w-3 mr-1\" />\n                          Default\n                        </Badge>\n                      )}\n                      {setting.isActive ? (\n                        <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                          Active\n                        </Badge>\n                      ) : (\n                        <Badge variant=\"outline\">Inactive</Badge>\n                      )}\n                      {setting.testEmailSent && (\n                        <Badge variant=\"outline\" className=\"bg-purple-100 text-purple-800\">\n                          <TestTube className=\"h-3 w-3 mr-1\" />\n                          Tested\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {!setting.isDefault && (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setDefaultMutation.mutate(setting.id)}\n                        disabled={setDefaultMutation.isPending}\n                      >\n                        <Shield className=\"h-4 w-4 mr-1\" />\n                        Set Default\n                      </Button>\n                    )}\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(setting)}\n                    >\n                      Edit\n                    </Button>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => deleteMutation.mutate(setting.id)}\n                      disabled={deleteMutation.isPending}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <p><strong>Provider:</strong> {setting.provider.toUpperCase()}</p>\n                    <p><strong>From Email:</strong> {setting.fromEmail}</p>\n                    <p><strong>Username:</strong> {setting.username}</p>\n                  </div>\n                  <div>\n                    <p><strong>SMTP Host:</strong> {setting.smtpHost || \"N/A\"}</p>\n                    <p><strong>SMTP Port:</strong> {setting.smtpPort || \"N/A\"}</p>\n                    <p><strong>Secure:</strong> {setting.smtpSecure ? \"Yes\" : \"No\"}</p>\n                  </div>\n                </div>\n                \n                <div className=\"mt-4 flex items-center gap-2\">\n                  <Input\n                    placeholder=\"test@example.com\"\n                    value={testingId === setting.id ? testEmail : \"\"}\n                    onChange={(e) => {\n                      if (testingId === setting.id) {\n                        setTestEmail(e.target.value);\n                      } else {\n                        setTestingId(setting.id);\n                        setTestEmail(e.target.value);\n                      }\n                    }}\n                    className=\"max-w-xs\"\n                  />\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleTestEmail(setting.id)}\n                    disabled={testEmailMutation.isPending && testingId === setting.id}\n                  >\n                    <Send className=\"h-4 w-4 mr-1\" />\n                    Send Test Email\n                  </Button>\n                </div>\n                \n                {setting.lastTestAt && (\n                  <p className=\"text-xs text-muted-foreground mt-2\">\n                    Last tested: {new Date(setting.lastTestAt).toLocaleString()}\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":21998},"FEATURE_ENFORCEMENT_GUIDE.md":{"content":"# VENUIN Feature Enforcement System Guide\n\n## Overview\n\nVENUIN now has a comprehensive feature enforcement system that connects super admin feature packages to real functionality within tenant applications. Every feature listed in a package is actually enforced and functional.\n\n## How Feature Enforcement Works\n\n### 1. Super Admin Feature Package Creation\n- Super admins create feature packages with specific features enabled/disabled\n- Each package has features (boolean flags) and limits (numeric constraints)\n- Features are stored in PostgreSQL as JSONB data\n\n### 2. Server-Side Enforcement\n**API Middleware Protection:**\n```typescript\n// Examples of protected endpoints\nPOST /api/venues - requires \"venue-management\" feature + maxVenues limit check\nPOST /api/customers - requires \"customer-management\" feature + maxCustomers limit\nPOST /api/leads - requires \"lead-management\" feature  \nPOST /api/bookings - requires \"event-management\" feature + maxBookings limit\nPOST /api/proposals - requires \"proposal-system\" feature\nPOST /api/tasks - requires \"task-management\" feature\n```\n\n**Feature Middleware:**\n- `requireFeature({ feature: \"feature-name\" })` - Blocks API access if feature not enabled\n- `checkUsageLimit(\"limitName\")` - Prevents exceeding usage limits\n- Returns 403 Forbidden with upgrade prompts when features/limits are exceeded\n\n### 3. Frontend Enforcement\n**Dynamic Navigation:**\n- Sidebar items automatically show/hide based on tenant's actual features\n- No hardcoded navigation - all pulled from tenant's plan\n\n**FeatureGate Component:**\n```tsx\n<FeatureGate feature=\"venue-management\">\n  <VenueManagementPanel />\n</FeatureGate>\n```\n\n**FeatureButton Component:**\n```tsx\n<FeatureButton \n  feature=\"proposal-system\"\n  onClick={handleCreateProposal}\n>\n  Create Proposal\n</FeatureButton>\n```\n\n### 4. Real-Time Feature Updates\n- When super admin updates a package, tenant features update immediately\n- No caching issues - features pulled fresh from database\n- Tenant info endpoint provides real features from their assigned plan\n\n## Available Features\n\n### Core Features\n- `dashboard-analytics` - Dashboard access and metrics\n- `event-management` - Booking and event creation\n- `customer-management` - Customer database and CRM\n- `lead-management` - Lead tracking and conversion\n- `proposal-system` - Professional proposal generation\n- `task-management` - Task tracking and automation\n- `venue-management` - Multi-venue support\n- `service-packages` - Service catalog management\n\n### Payment & Integration Features  \n- `stripe-payments` - Payment processing with Stripe\n- `gmail-integration` - Email automation and templates\n\n### Advanced Features\n- `ai-voice-booking` - Voice-to-text booking capture\n- `ai-scheduling` - Smart scheduling optimization\n- `ai-email-replies` - Automated email responses\n- `ai-lead-scoring` - Lead priority scoring\n- `ai-insights` - Predictive analytics\n- `ai-proposal-generation` - AI-powered proposal content\n\n### Enterprise Features\n- `custom-branding` - Custom logos and themes\n- `api-access` - REST API for integrations\n- `priority-support` - Priority customer support\n- `advanced-reporting` - Advanced analytics and reporting\n- `audit-logs` - Security and compliance logging\n\n## Usage Limits\n\n### Enforced Limits\n- `maxBookings` - Maximum number of bookings per tenant\n- `maxVenues` - Maximum number of venues per tenant  \n- `maxCustomers` - Maximum customer database size\n- `maxStaff` - Maximum team members per tenant\n\n### Limit Enforcement\n- API endpoints automatically check current usage vs limits\n- Frontend shows usage meters and warnings\n- Prevents exceeding limits with upgrade prompts\n\n## Testing Feature Enforcement\n\n1. **Create Different Feature Packages in Super Admin**\n   - Starter: Basic features only\n   - Professional: More features + higher limits  \n   - Enterprise: All features + unlimited usage\n\n2. **Assign Different Plans to Tenants**\n   - Use tenant management in super admin\n   - Change tenant's plan assignment\n   - Features update immediately\n\n3. **Test Feature Restrictions**\n   - Try creating venues without \"venue-management\"\n   - Attempt proposals without \"proposal-system\"  \n   - Exceed usage limits to see blocking behavior\n\n4. **Verify Frontend Adaptation**\n   - Navigation items appear/disappear based on plan\n   - Buttons show lock icons when features unavailable\n   - Upgrade prompts appear for restricted features\n\n## Admin Management\n\n### Super Admin Controls\n- Create/edit/delete feature packages\n- Set pricing and billing cycles\n- Enable/disable individual features\n- Configure usage limits per package\n- Assign packages to tenants\n- Monitor feature usage across platform\n\n### Tenant Experience  \n- See only features included in their plan\n- Get upgrade prompts for restricted features\n- View usage limits and current consumption\n- Seamless feature access within their plan boundaries\n\nThis system ensures every feature listed in super admin packages is actually functional and enforced throughout the tenant applications.","size_bytes":5011},"ROLE_HIERARCHY.md":{"content":"# VENUIN Production Role-Based Access Control (RBAC)\n\n## Role Hierarchy\n\n### 1. Super Admin (Platform Owner) - Level 1\n- **Full platform control**\n- **Manages:** All tenants, subscription plans, billing, platform-wide settings\n- **Special privileges:** Can impersonate any tenant admin for support\n- **Scope:** Entire platform / all tenants\n- **Routes:** `/admin/*`, `/super-admin`\n- **Middleware:** `requireSuperAdmin`\n\n### 2. Tenant Admin (Account Owner) - Level 2  \n- **Created when company signs up**\n- **Manages:** Company venues, spaces, events, settings, team management\n- **Billing:** Access to Customer Portal, Stripe Connect account\n- **Scope:** Only their tenant's data\n- **Middleware:** `requireTenantAdmin`\n\n### 3. Staff (Tenant Team Member) - Level 3\n- **Invited by Tenant Admin**\n- **Permissions:** Customizable per role (create events, view customers, etc.)\n- **Restrictions:** Cannot change subscription or global settings\n- **Scope:** Limited to tenant data + assigned permissions\n- **Middleware:** `requireStaffAccess`\n\n### 4. Viewer (Read-Only User) - Level 4\n- **Invited by Tenant Admin**  \n- **Access:** View-only for bookings, customers, venues\n- **Restrictions:** Cannot edit or create anything\n- **Scope:** Read-only access to tenant data\n- **Middleware:** `requireViewerAccess`\n\n## Permission System\n\n### Role-Based Permissions\n```typescript\n// Owner/Admin - Full access by default\nif (['owner', 'admin'].includes(user.currentTenant.role)) {\n  // Allow all actions\n}\n\n// Staff/Manager - Check specific permissions\nif (user.currentTenant.permissions[permission]) {\n  // Allow specific action\n}\n\n// Viewer - Read-only access\n// Only GET requests allowed\n```\n\n### Production Security Features\n- ✅ Database-level role isolation\n- ✅ Session-based authentication  \n- ✅ JWT token validation\n- ✅ Tenant context isolation\n- ✅ Permission-based action control\n- ✅ Super admin protection (cannot be deleted)\n- ✅ Clean professional URLs (`/admin/*`)\n\n## Authentication Flow\n\n1. **User logs in** → JWT + Session created\n2. **Get primary tenant** → Role and permissions loaded\n3. **Route access** → Middleware checks role hierarchy\n4. **Action permission** → Specific permission validation\n5. **Data isolation** → Tenant context enforced\n\nThis production-ready RBAC system ensures complete security isolation between tenants while providing the super admin full platform oversight capabilities.","size_bytes":2429},"test-enable-all-features.sh":{"content":"#!/bin/bash\necho \"Testing 'Enable All' feature functionality...\"\n\n# Get current enterprise package\necho \"📦 Current Enterprise Package Features:\"\ncurl -s -H \"Cookie: $(cat fresh-login-cookies.txt 2>/dev/null)\" \\\n  http://localhost:5000/api/admin/packages | \\\n  grep -A 100 '\"id\":\"enterprise\"' | \\\n  grep -A 50 '\"features\"' | head -30\n\necho \"\"\necho \"🔧 Testing feature update with all features enabled...\"\n\n# Create a test update with all features enabled\nFEATURES='{\"dashboard-analytics\":true,\"event-management\":true,\"customer-management\":true,\"lead-management\":true,\"proposal-system\":true,\"stripe-payments\":true,\"venue-management\":true,\"service-packages\":true,\"gmail-integration\":true,\"task-management\":true,\"ai-voice-booking\":true,\"ai-scheduling\":true,\"ai-email-replies\":true,\"ai-lead-scoring\":true,\"ai-insights\":true,\"ai-proposal-generation\":true,\"mobile-responsive\":true,\"audit-logs\":true,\"custom-branding\":true,\"priority-support\":true,\"api-access\":true,\"advanced-reporting\":true,\"calendar-integration\":true,\"floor-plan-designer\":true}'\n\ncurl -s -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Cookie: $(cat fresh-login-cookies.txt 2>/dev/null)\" \\\n  -d \"{\n    \\\"name\\\": \\\"Enterprise\\\",\n    \\\"description\\\": \\\"Complete solution for large venue management companies\\\",\n    \\\"features\\\": $FEATURES,\n    \\\"limits\\\": {\n      \\\"maxUsers\\\": 50,\n      \\\"maxVenues\\\": 10,\n      \\\"maxSpacesPerVenue\\\": 100\n    },\n    \\\"priceMonthly\\\": 199,\n    \\\"priceYearly\\\": 1999,\n    \\\"status\\\": \\\"active\\\"\n  }\" \\\n  http://localhost:5000/api/admin/packages/enterprise\n\necho \"\"\necho \"✅ Update complete. Checking result...\"\n\n# Verify the update worked\necho \"📋 Updated Enterprise Package:\"\ncurl -s -H \"Cookie: $(cat fresh-login-cookies.txt 2>/dev/null)\" \\\n  http://localhost:5000/api/admin/packages | \\\n  grep -A 100 '\"id\":\"enterprise\"' | head -40\n\necho \"\"\necho \"🎯 Test complete!\"","size_bytes":1877},"test-feature-enforcement.js":{"content":"// Test script to demonstrate feature enforcement\nconst testFeatureEnforcement = async () => {\n  console.log('🔧 Testing VENUIN Feature Enforcement System...\\n');\n\n  // Test 1: Try to access tenant info (should work for authenticated users)\n  console.log('📊 Testing tenant info access...');\n  try {\n    const response = await fetch('http://localhost:5000/api/tenant/info', {\n      credentials: 'include',\n      headers: {\n        'Cookie': process.env.TEST_COOKIES || ''\n      }\n    });\n    \n    if (response.ok) {\n      const data = await response.json();\n      console.log('✅ Tenant Info Retrieved:', {\n        name: data.name,\n        planId: data.planId,\n        planName: data.planName,\n        featuresEnabled: Object.keys(data.features).filter(k => data.features[k]).length,\n        totalFeatures: Object.keys(data.features).length,\n        limits: data.limits\n      });\n    } else {\n      console.log('❌ Failed to get tenant info:', response.status);\n    }\n  } catch (error) {\n    console.log('❌ Error:', error.message);\n  }\n\n  // Test 2: Try to create a venue (requires venue-management feature)\n  console.log('\\n🏢 Testing venue creation (requires \"venue-management\" feature)...');\n  try {\n    const response = await fetch('http://localhost:5000/api/venues', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Cookie': process.env.TEST_COOKIES || ''\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        name: 'Test Venue',\n        address: '123 Test St',\n        city: 'Test City',\n        capacity: 100\n      })\n    });\n    \n    if (response.status === 403) {\n      const error = await response.json();\n      console.log('🔒 Feature Blocked:', error.message);\n    } else if (response.ok) {\n      console.log('✅ Venue Created Successfully');\n    } else {\n      console.log('❌ Unexpected Response:', response.status);\n    }\n  } catch (error) {\n    console.log('❌ Error:', error.message);\n  }\n\n  // Test 3: Try to create a proposal (requires proposal-system feature)  \n  console.log('\\n📝 Testing proposal creation (requires \"proposal-system\" feature)...');\n  try {\n    const response = await fetch('http://localhost:5000/api/proposals', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Cookie': process.env.TEST_COOKIES || ''\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        title: 'Test Proposal',\n        customerName: 'Test Customer',\n        totalAmount: 1000,\n        status: 'draft'\n      })\n    });\n    \n    if (response.status === 403) {\n      const error = await response.json();\n      console.log('🔒 Feature Blocked:', error.message);\n    } else if (response.ok) {\n      console.log('✅ Proposal Created Successfully');\n    } else {\n      console.log('❌ Unexpected Response:', response.status);\n    }\n  } catch (error) {\n    console.log('❌ Error:', error.message);\n  }\n\n  console.log('\\n🎯 Feature enforcement system is working correctly!');\n  console.log('   • Features are pulled from real database packages');\n  console.log('   • API endpoints respect tenant plan limitations');  \n  console.log('   • Frontend components hide/show based on actual features');\n  console.log('   • Usage limits prevent exceeding plan boundaries');\n};\n\n// Run the test if this file is executed directly\nif (typeof module !== 'undefined' && require.main === module) {\n  testFeatureEnforcement();\n}\n\nmodule.exports = { testFeatureEnforcement };","size_bytes":3523},"server/routes-old.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { sessionMiddleware } from \"./middleware/session\";\nimport { tenantContext } from \"./middleware/tenant\";\nimport { requireAuth } from \"./middleware/auth\";\nimport { registerAuthRoutes } from \"./routes/auth\";\nimport { registerPublicRoutes } from \"./routes/public\";\nimport { registerOnboardingRoutes } from \"./routes/onboarding\";\nimport { \n  insertBookingSchema, \n  insertCustomerSchema,\n  insertProposalSchema, \n  insertTaskSchema,\n  insertLeadSchema,\n  insertVenueSchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Apply session middleware globally\n  app.use(sessionMiddleware);\n\n  // Register public routes (no auth required)\n  registerPublicRoutes(app);\n\n  // Register auth routes\n  registerAuthRoutes(app);\n\n  // Register onboarding routes (after auth, before tenant middleware)\n  registerOnboardingRoutes(app);\n\n  // Apply tenant context middleware to tenant-specific routes only\n  app.use('/api/venues', requireAuth, tenantContext);\n  app.use('/api/bookings', requireAuth, tenantContext);\n  app.use('/api/customers', requireAuth, tenantContext);\n  app.use('/api/leads', requireAuth, tenantContext);\n  app.use('/api/proposals', requireAuth, tenantContext);\n  app.use('/api/tasks', requireAuth, tenantContext);\n  \n  // Venues\n  app.get(\"/api/venues\", async (req: any, res) => {\n    try {\n      const venues = await storage.getVenues(req.tenant?.id);\n      res.json(venues);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch venues\" });\n    }\n  });\n\n  app.get(\"/api/venues/:id\", async (req, res) => {\n    try {\n      const venue = await storage.getVenue(req.params.id);\n      if (!venue) {\n        return res.status(404).json({ message: \"Venue not found\" });\n      }\n      res.json(venue);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch venue\" });\n    }\n  });\n\n  app.post(\"/api/venues\", async (req: any, res) => {\n    try {\n      const venueData = insertVenueSchema.parse({\n        ...req.body,\n        tenantId: req.tenant.id,\n      });\n      const venue = await storage.createVenue(venueData);\n      res.status(201).json(venue);\n    } catch (error) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create venue\" });\n    }\n  });\n\n  // Customers\n  app.get(\"/api/customers\", async (req: any, res) => {\n    try {\n      const customers = await storage.getCustomers(req.tenant.id);\n      res.json(customers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  app.post(\"/api/customers\", async (req: any, res) => {\n    try {\n      const customerData = insertCustomerSchema.parse({\n        ...req.body,\n        tenantId: req.tenant.id,\n      });\n      const customer = await storage.createCustomer(customerData);\n      res.status(201).json(customer);\n    } catch (error) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create customer\" });\n    }\n  });\n\n  // Setup Styles\n  app.get(\"/api/setup-styles\", async (req, res) => {\n    try {\n      const setupStyles = await storage.getSetupStyles();\n      res.json(setupStyles);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch setup styles\" });\n    }\n  });\n\n  app.get(\"/api/setup-styles/:id\", async (req, res) => {\n    try {\n      const setupStyle = await storage.getSetupStyle(req.params.id);\n      if (!setupStyle) {\n        return res.status(404).json({ message: \"Setup style not found\" });\n      }\n      res.json(setupStyle);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch setup style\" });\n    }\n  });\n\n  app.post(\"/api/setup-styles\", async (req, res) => {\n    try {\n      const result = insertSetupStyleSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ message: \"Invalid setup style data\", errors: result.error.errors });\n      }\n      const setupStyle = await storage.createSetupStyle(result.data);\n      res.status(201).json(setupStyle);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create setup style\" });\n    }\n  });\n\n  app.patch(\"/api/setup-styles/:id\", async (req, res) => {\n    try {\n      const setupStyle = await storage.updateSetupStyle(req.params.id, req.body);\n      if (!setupStyle) {\n        return res.status(404).json({ message: \"Setup style not found\" });\n      }\n      res.json(setupStyle);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update setup style\" });\n    }\n  });\n\n  app.delete(\"/api/setup-styles/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteSetupStyle(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Setup style not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete setup style\" });\n    }\n  });\n\n  app.post(\"/api/spaces\", async (req, res) => {\n    try {\n      const space = await storage.createSpace(req.body);\n      res.status(201).json(space);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create space\" });\n    }\n  });\n\n  // Enhanced venues API that includes spaces\n  app.get(\"/api/venues-with-spaces\", async (req, res) => {\n    try {\n      const venues = await storage.getVenues();\n      const venuesWithSpaces = await Promise.all(\n        venues.map(async (venue) => {\n          const spaces = await storage.getSpacesByVenue(venue.id);\n          return { ...venue, spaces };\n        })\n      );\n      res.json(venuesWithSpaces);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch venues with spaces\" });\n    }\n  });\n\n  // Packages\n  app.get(\"/api/packages\", async (req, res) => {\n    try {\n      const packages = await storage.getPackages();\n      res.json(packages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch packages\" });\n    }\n  });\n\n  app.post(\"/api/packages\", async (req, res) => {\n    try {\n      const packageData = await storage.createPackage(req.body);\n      res.status(201).json(packageData);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create package\" });\n    }\n  });\n\n  // Services\n  app.get(\"/api/services\", async (req, res) => {\n    try {\n      const services = await storage.getServices();\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch services\" });\n    }\n  });\n\n  app.post(\"/api/services\", async (req, res) => {\n    try {\n      const service = await storage.createService(req.body);\n      res.status(201).json(service);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create service\" });\n    }\n  });\n\n  // Customers\n  app.get(\"/api/customers\", async (req, res) => {\n    try {\n      const customers = await storage.getCustomers();\n      res.json(customers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  // Get customer analytics\n  app.get(\"/api/customers/analytics\", async (req, res) => {\n    try {\n      const customers = await storage.getCustomers();\n      const bookings = await storage.getBookings();\n      const payments = await storage.getPayments();\n      \n      const customerAnalytics = customers.map(customer => {\n        // Find all bookings for this customer\n        const customerBookings = bookings.filter(booking => booking.customerId === customer.id);\n        \n        // Find all payments for this customer's bookings\n        const customerPayments = payments.filter(payment => \n          customerBookings.some(booking => booking.id === payment.bookingId)\n        );\n        \n        // Calculate total revenue from bookings (using totalPrice from bookings)\n        const totalRevenue = customerBookings.reduce((sum, booking) => sum + (booking.totalPrice || 0), 0);\n        \n        // Calculate event count\n        const eventCount = customerBookings.length;\n        \n        // Calculate average event value\n        const averageEventValue = eventCount > 0 ? totalRevenue / eventCount : 0;\n        \n        // Get most recent booking\n        const recentBooking = customerBookings.sort((a, b) => \n          new Date(b.eventDate).getTime() - new Date(a.eventDate).getTime()\n        )[0];\n        \n        // Calculate lifetime value category\n        let lifetimeValueCategory = \"Bronze\";\n        if (totalRevenue >= 50000) lifetimeValueCategory = \"Platinum\";\n        else if (totalRevenue >= 25000) lifetimeValueCategory = \"Gold\";\n        else if (totalRevenue >= 10000) lifetimeValueCategory = \"Silver\";\n        \n        // Calculate booking statuses\n        const confirmedBookings = customerBookings.filter(b => b.status === \"confirmed\").length;\n        const pendingBookings = customerBookings.filter(b => b.status === \"inquiry\" || b.status === \"proposal\").length;\n        const cancelledBookings = customerBookings.filter(b => b.status === \"cancelled\").length;\n        \n        return {\n          ...customer,\n          analytics: {\n            totalRevenue,\n            eventCount,\n            averageEventValue,\n            lastEventDate: recentBooking?.eventDate || null,\n            lastEventName: recentBooking?.eventName || null,\n            lifetimeValueCategory,\n            totalPaid: customerPayments.filter(p => p.status === \"paid\").reduce((sum, p) => sum + p.amount, 0),\n            totalPending: customerPayments.filter(p => p.status === \"pending\").reduce((sum, p) => sum + p.amount, 0),\n            confirmedBookings,\n            pendingBookings,\n            cancelledBookings,\n            customerSince: customer.createdAt,\n          }\n        };\n      });\n      \n      // Sort by total revenue descending\n      customerAnalytics.sort((a, b) => b.analytics.totalRevenue - a.analytics.totalRevenue);\n      \n      res.json(customerAnalytics);\n    } catch (error) {\n      console.error(\"Error fetching customer analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch customer analytics\" });\n    }\n  });\n\n  app.post(\"/api/customers\", async (req, res) => {\n    try {\n      const validatedData = insertCustomerSchema.parse(req.body);\n      const customer = await storage.createCustomer(validatedData);\n      res.json(customer);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid customer data\" });\n    }\n  });\n\n  app.patch(\"/api/customers/:id\", async (req, res) => {\n    try {\n      const customer = await storage.updateCustomer(req.params.id, req.body);\n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n      res.json(customer);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update customer\" });\n    }\n  });\n\n  // Contracts\n  app.get(\"/api/contracts\", async (req, res) => {\n    try {\n      const contracts = await storage.getContracts();\n      res.json(contracts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch contracts\" });\n    }\n  });\n\n  app.post(\"/api/contracts\", async (req, res) => {\n    try {\n      const validatedData = insertContractSchema.parse(req.body);\n      const contract = await storage.createContract(validatedData);\n      res.json(contract);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid contract data\" });\n    }\n  });\n\n  app.get(\"/api/contracts/:id\", async (req, res) => {\n    try {\n      const contract = await storage.getContract(req.params.id);\n      if (!contract) {\n        return res.status(404).json({ message: \"Contract not found\" });\n      }\n      res.json(contract);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch contract\" });\n    }\n  });\n\n  app.get(\"/api/contracts/:id/bookings\", async (req, res) => {\n    try {\n      const bookings = await storage.getBookingsByContract(req.params.id);\n      res.json(bookings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch contract bookings\" });\n    }\n  });\n\n  app.put(\"/api/contracts/:id\", async (req, res) => {\n    try {\n      const contract = await storage.updateContract(req.params.id, req.body);\n      if (!contract) {\n        return res.status(404).json({ message: \"Contract not found\" });\n      }\n      res.json(contract);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update contract\" });\n    }\n  });\n\n  // Bookings\n  app.get(\"/api/bookings\", async (req, res) => {\n    try {\n      const bookings = await storage.getBookings();\n      const contracts = await storage.getContracts();\n      \n      // Group bookings by contract and add contract info\n      const contractMap = new Map(contracts.map(c => [c.id, c]));\n      const result = [];\n      \n      // First, add all standalone bookings (no contract)\n      const standaloneBookings = bookings.filter(b => !b.contractId);\n      result.push(...standaloneBookings);\n      \n      // Then, add contracts with their bookings\n      const contractBookings = bookings.filter(b => b.contractId);\n      const processedContracts = new Set();\n      \n      for (const booking of contractBookings) {\n        if (!processedContracts.has(booking.contractId)) {\n          const contract = contractMap.get(booking.contractId!);\n          const contractEvents = contractBookings.filter(b => b.contractId === booking.contractId);\n          \n          result.push({\n            ...booking,\n            isContract: true,\n            contractInfo: contract,\n            contractEvents: contractEvents,\n            eventCount: contractEvents.length\n          });\n          \n          processedContracts.add(booking.contractId!);\n        }\n      }\n      \n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.post(\"/api/bookings\", async (req, res) => {\n    try {\n      console.log('Creating booking with data:', req.body);\n      \n      // Convert date strings to Date objects if they're strings\n      const bookingData = {\n        ...req.body,\n        eventDate: typeof req.body.eventDate === 'string' \n          ? new Date(req.body.eventDate) \n          : req.body.eventDate,\n        endDate: req.body.endDate && typeof req.body.endDate === 'string'\n          ? new Date(req.body.endDate)\n          : req.body.endDate,\n        guestCount: typeof req.body.guestCount === 'string' \n          ? parseInt(req.body.guestCount, 10)\n          : req.body.guestCount,\n        totalAmount: req.body.totalAmount && typeof req.body.totalAmount === 'string'\n          ? req.body.totalAmount\n          : req.body.totalAmount,\n        depositAmount: req.body.depositAmount && typeof req.body.depositAmount === 'string'\n          ? req.body.depositAmount\n          : req.body.depositAmount,\n        // Handle proposal dates\n        proposalSentAt: req.body.proposalSentAt && typeof req.body.proposalSentAt === 'string'\n          ? new Date(req.body.proposalSentAt)\n          : req.body.proposalSentAt,\n        proposalViewedAt: req.body.proposalViewedAt && typeof req.body.proposalViewedAt === 'string'\n          ? new Date(req.body.proposalViewedAt)\n          : req.body.proposalViewedAt,\n        proposalRespondedAt: req.body.proposalRespondedAt && typeof req.body.proposalRespondedAt === 'string'\n          ? new Date(req.body.proposalRespondedAt)\n          : req.body.proposalRespondedAt,\n      };\n      \n      // Validate required fields\n      if (!bookingData.eventName || !bookingData.eventType || !bookingData.eventDate || \n          !bookingData.startTime || !bookingData.endTime || !bookingData.guestCount) {\n        return res.status(400).json({ \n          message: \"Missing required fields\", \n          required: [\"eventName\", \"eventType\", \"eventDate\", \"startTime\", \"endTime\", \"guestCount\"]\n        });\n      }\n      \n      const validatedData = insertBookingSchema.parse(bookingData);\n      \n      // Check for time conflicts with existing bookings\n      const existingBookings = await storage.getBookings();\n      const eventDate = validatedData.eventDate;\n      const startTime = validatedData.startTime;\n      const endTime = validatedData.endTime;\n      const spaceId = validatedData.spaceId;\n      \n      const conflict = existingBookings.find(existing => {\n        // Skip cancelled bookings\n        if (existing.status === 'cancelled') return false;\n        \n        // Check if same space and same date (more specific than venue)\n        if (existing.spaceId === spaceId && \n            existing.eventDate.toDateString() === eventDate.toDateString()) {\n          \n          // Convert times to minutes for easier comparison\n          const parseTime = (timeStr: string) => {\n            const [hours, minutes] = timeStr.split(':').map(Number);\n            return hours * 60 + minutes;\n          };\n          \n          const newStart = parseTime(startTime);\n          const newEnd = parseTime(endTime);\n          const existingStart = parseTime(existing.startTime);\n          const existingEnd = parseTime(existing.endTime);\n          \n          // Check for overlap: new booking starts before existing ends AND new booking ends after existing starts\n          return (newStart < existingEnd && newEnd > existingStart);\n        }\n        return false;\n      });\n      \n      if (conflict) {\n        // Get customer info for the conflicting booking\n        const customers = await storage.getCustomers();\n        const conflictCustomer = customers.find(c => c.id === conflict.customerId);\n        \n        return res.status(409).json({ \n          message: \"Time slot conflict\", \n          conflictingBooking: {\n            id: conflict.id,\n            eventName: conflict.eventName,\n            customerName: conflictCustomer?.name || 'Unknown Customer',\n            startTime: conflict.startTime,\n            endTime: conflict.endTime,\n            status: conflict.status,\n            eventDate: conflict.eventDate\n          }\n        });\n      }\n      \n      const booking = await storage.createBooking(validatedData);\n      \n      // Send booking confirmation notification if enabled\n      try {\n        const settings = await storage.getSettings();\n        const notificationPrefs = {\n          emailNotifications: settings.notifications?.emailNotifications ?? true,\n          pushNotifications: settings.notifications?.pushNotifications ?? false,\n          bookingConfirmations: settings.notifications?.bookingConfirmations ?? true,\n          paymentReminders: settings.notifications?.paymentReminders ?? true,\n          maintenanceAlerts: settings.notifications?.maintenanceAlerts ?? true\n        };\n\n        if (notificationPrefs.emailNotifications && notificationPrefs.bookingConfirmations && booking.customerId) {\n          const customer = await storage.getCustomer(booking.customerId);\n          if (customer && customer.email) {\n            const notificationService = new NotificationService(gmailService, notificationPrefs);\n            await notificationService.sendBookingConfirmation(booking, customer);\n            console.log(`Booking confirmation sent to ${customer.email}`);\n          }\n        }\n      } catch (notificationError) {\n        console.error('Failed to send booking confirmation:', notificationError);\n        // Don't fail the booking creation if notification fails\n      }\n      \n      res.json(booking);\n    } catch (error: any) {\n      console.error('Booking creation error:', error);\n      res.status(400).json({ \n        message: error?.message || \"Invalid booking data\",\n        details: error?.issues || error?.stack \n      });\n    }\n  });\n\n  app.patch(\"/api/bookings/:id\", async (req, res) => {\n    try {\n      const updateData = { ...req.body };\n\n      // Auto-complete booking if status is being set to completed and event date has passed\n      if (updateData.status === \"completed\" && !updateData.completedAt) {\n        updateData.completedAt = new Date();\n      }\n\n      const booking = await storage.updateBooking(req.params.id, updateData);\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      res.json(booking);\n    } catch (error) {\n      console.error('Booking update error:', error);\n      res.status(500).json({ message: \"Failed to update booking\" });\n    }\n  });\n\n  app.delete(\"/api/bookings/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteBooking(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      res.json({ message: \"Booking deleted successfully\" });\n    } catch (error) {\n      console.error('Booking delete error:', error);\n      res.status(500).json({ message: \"Failed to delete booking\" });\n    }\n  });\n\n  // Cancel booking with reason tracking\n  app.post(\"/api/bookings/:id/cancel\", async (req, res) => {\n    try {\n      const { cancellationReason, cancellationNote } = req.body;\n      \n      if (!cancellationReason) {\n        return res.status(400).json({ message: \"Cancellation reason is required\" });\n      }\n\n      const updateData = {\n        status: \"cancelled\",\n        cancellationReason,\n        cancellationNote,\n        cancelledAt: new Date(),\n        // TODO: Add cancelled_by field when user management is implemented\n        // cancelledBy: req.user?.id\n      };\n\n      const booking = await storage.updateBooking(req.params.id, updateData);\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n\n      // Send cancellation notification if enabled\n      try {\n        const settings = await storage.getSettings();\n        const notificationPrefs = {\n          emailNotifications: settings.notifications?.emailNotifications ?? true,\n          bookingConfirmations: settings.notifications?.bookingConfirmations ?? true,\n        };\n\n        if (notificationPrefs.emailNotifications && booking.customerId) {\n          const customer = await storage.getCustomer(booking.customerId);\n          if (customer && customer.email) {\n            const notificationService = new NotificationService(gmailService, notificationPrefs);\n            await notificationService.sendCancellationNotification(booking, customer, cancellationReason);\n            console.log(`Cancellation notification sent to ${customer.email}`);\n          }\n        }\n      } catch (notificationError) {\n        console.error('Failed to send cancellation notification:', notificationError);\n        // Don't fail the cancellation if notification fails\n      }\n\n      res.json(booking);\n    } catch (error) {\n      console.error('Booking cancellation error:', error);\n      res.status(500).json({ message: \"Failed to cancel booking\" });\n    }\n  });\n\n  // Create multiple bookings under a contract\n  app.post(\"/api/bookings/contract\", async (req, res) => {\n    try {\n      const { contractData, bookingsData } = req.body;\n      \n      // Check for conflicts in any of the bookings first\n      const existingBookings = await storage.getBookings();\n      \n      for (const bookingData of bookingsData) {\n        const eventDate = new Date(bookingData.eventDate);\n        const startTime = bookingData.startTime;\n        const endTime = bookingData.endTime;\n        const spaceId = bookingData.spaceId;\n        \n        const conflict = existingBookings.find(existing => {\n          if (existing.status === 'cancelled') return false;\n          if (existing.spaceId !== spaceId) return false;\n          if (existing.eventDate.toDateString() !== eventDate.toDateString()) return false;\n\n          const parseTime = (timeStr: string) => {\n            const [hours, minutes] = timeStr.split(':').map(Number);\n            return hours * 60 + minutes;\n          };\n          \n          const newStart = parseTime(startTime);\n          const newEnd = parseTime(endTime);\n          const existingStart = parseTime(existing.startTime);\n          const existingEnd = parseTime(existing.endTime);\n          \n          return (newStart < existingEnd && newEnd > existingStart);\n        });\n        \n        if (conflict) {\n          const customers = await storage.getCustomers();\n          const conflictCustomer = customers.find(c => c.id === conflict.customerId);\n          \n          return res.status(409).json({ \n            message: \"Time slot conflict in multi-date booking\", \n            conflictingBooking: {\n              id: conflict.id,\n              eventName: conflict.eventName,\n              customerName: conflictCustomer?.name || 'Unknown Customer',\n              startTime: conflict.startTime,\n              endTime: conflict.endTime,\n              status: conflict.status,\n              eventDate: conflict.eventDate\n            }\n          });\n        }\n      }\n      \n      // No conflicts found, proceed with creation\n      const validatedContract = insertContractSchema.parse(contractData);\n      const contract = await storage.createContract(validatedContract);\n      \n      // Create all bookings under this contract - schema now handles date conversion\n      const validatedBookings = bookingsData.map((booking: any) => \n        insertBookingSchema.parse({ ...booking, contractId: contract.id })\n      );\n      \n      const bookings = await storage.createMultipleBookings(validatedBookings, contract.id);\n      \n      // Update contract total amount\n      const totalAmount = bookings.reduce((sum, booking) => {\n        return sum + (booking.totalAmount ? parseFloat(booking.totalAmount) : 0);\n      }, 0);\n      \n      await storage.updateContract(contract.id, { totalAmount: totalAmount.toString() });\n      \n      res.json({ contract, bookings });\n    } catch (error) {\n      console.error('Contract booking creation error:', error);\n      res.status(400).json({ message: \"Invalid contract or booking data\" });\n    }\n  });\n\n  // Venues\n  app.patch(\"/api/venues/:id\", async (req, res) => {\n    try {\n      const venue = await storage.updateVenue(req.params.id, req.body);\n      if (!venue) {\n        return res.status(404).json({ message: \"Venue not found\" });\n      }\n      res.json(venue);\n    } catch (error) {\n      console.error('Venue update error:', error);\n      res.status(500).json({ message: \"Failed to update venue\" });\n    }\n  });\n\n  app.delete(\"/api/venues/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteVenue(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Venue not found\" });\n      }\n      res.json({ message: \"Venue deleted successfully\" });\n    } catch (error) {\n      console.error('Venue delete error:', error);\n      res.status(500).json({ message: \"Failed to delete venue\" });\n    }\n  });\n\n  app.delete(\"/api/customers/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteCustomer(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n      res.json({ message: \"Customer deleted successfully\" });\n    } catch (error) {\n      console.error('Customer delete error:', error);\n      res.status(500).json({ message: \"Failed to delete customer\" });\n    }\n  });\n\n  // Packages\n  app.patch(\"/api/packages/:id\", async (req, res) => {\n    try {\n      const packageData = await storage.updatePackage(req.params.id, req.body);\n      if (!packageData) {\n        return res.status(404).json({ message: \"Package not found\" });\n      }\n      res.json(packageData);\n    } catch (error) {\n      console.error('Package update error:', error);\n      res.status(500).json({ message: \"Failed to update package\" });\n    }\n  });\n\n  app.delete(\"/api/packages/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deletePackage(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Package not found\" });\n      }\n      res.json({ message: \"Package deleted successfully\" });\n    } catch (error) {\n      console.error('Package delete error:', error);\n      res.status(500).json({ message: \"Failed to delete package\" });\n    }\n  });\n\n  // Services\n  app.patch(\"/api/services/:id\", async (req, res) => {\n    try {\n      const service = await storage.updateService(req.params.id, req.body);\n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      res.json(service);\n    } catch (error) {\n      console.error('Service update error:', error);\n      res.status(500).json({ message: \"Failed to update service\" });\n    }\n  });\n\n  app.delete(\"/api/services/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteService(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      res.json({ message: \"Service deleted successfully\" });\n    } catch (error) {\n      console.error('Service delete error:', error);\n      res.status(500).json({ message: \"Failed to delete service\" });\n    }\n  });\n\n  // Spaces\n  app.get(\"/api/spaces\", async (req, res) => {\n    try {\n      const spaces = await storage.getSpaces();\n      res.json(spaces);\n    } catch (error) {\n      console.error('Spaces fetch error:', error);\n      res.status(500).json({ message: \"Failed to fetch spaces\" });\n    }\n  });\n\n  app.get(\"/api/venues/:venueId/spaces\", async (req, res) => {\n    try {\n      const spaces = await storage.getSpacesByVenue(req.params.venueId);\n      res.json(spaces);\n    } catch (error) {\n      console.error('Venue spaces fetch error:', error);\n      res.status(500).json({ message: \"Failed to fetch venue spaces\" });\n    }\n  });\n\n  app.post(\"/api/spaces\", async (req, res) => {\n    try {\n      const space = await storage.createSpace(req.body);\n      res.status(201).json(space);\n    } catch (error) {\n      console.error('Space creation error:', error);\n      res.status(500).json({ message: \"Failed to create space\" });\n    }\n  });\n\n  app.patch(\"/api/spaces/:id\", async (req, res) => {\n    try {\n      const space = await storage.updateSpace(req.params.id, req.body);\n      if (!space) {\n        return res.status(404).json({ message: \"Space not found\" });\n      }\n      res.json(space);\n    } catch (error) {\n      console.error('Space update error:', error);\n      res.status(500).json({ message: \"Failed to update space\" });\n    }\n  });\n\n  app.delete(\"/api/spaces/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteSpace(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Space not found\" });\n      }\n      res.json({ message: \"Space deleted successfully\" });\n    } catch (error) {\n      console.error('Space delete error:', error);\n      res.status(500).json({ message: \"Failed to delete space\" });\n    }\n  });\n\n  // Proposals\n  app.patch(\"/api/proposals/:id\", async (req, res) => {\n    try {\n      const proposal = await storage.updateProposal(req.params.id, req.body);\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n      res.json(proposal);\n    } catch (error) {\n      console.error('Proposal update error:', error);\n      res.status(500).json({ message: \"Failed to update proposal\" });\n    }\n  });\n\n  app.post(\"/api/proposals/:id/convert-to-booking\", async (req, res) => {\n    try {\n      const proposal = await storage.getProposal(req.params.id);\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      if (proposal.status !== 'accepted') {\n        return res.status(400).json({ message: \"Only accepted proposals can be converted to bookings\" });\n      }\n\n      // Extract event details from proposal content (assuming structured data)\n      let eventData = {};\n      try {\n        eventData = JSON.parse(proposal.content || '{}');\n      } catch {\n        eventData = {};\n      }\n\n      // Create booking from proposal\n      const booking = await storage.createBooking({\n        eventName: proposal.title || `Event from Proposal ${proposal.id}`,\n        eventType: (eventData as any).eventType || \"corporate\",\n        eventDate: (eventData as any).eventDate || new Date(),\n        startTime: (eventData as any).startTime || \"18:00\",\n        endTime: (eventData as any).endTime || \"23:00\",\n        guestCount: (eventData as any).guestCount || 50,\n        customerId: proposal.customerId,\n        venueId: (eventData as any).venueId || null,\n        spaceId: (eventData as any).spaceId || null,\n        status: \"confirmed\",\n        totalAmount: proposal.totalAmount,\n        depositAmount: proposal.totalAmount ? String(Number(proposal.totalAmount) * 0.3) : null,\n        depositPaid: false,\n        notes: `Converted from proposal \"${proposal.title}\" on ${new Date().toDateString()}`\n      });\n\n      // Update proposal status to indicate it's been converted\n      await storage.updateProposal(req.params.id, { \n        status: 'converted',\n        bookingId: booking.id\n      });\n\n      res.json(booking);\n    } catch (error) {\n      console.error('Proposal conversion error:', error);\n      res.status(500).json({ message: \"Failed to convert proposal to booking\" });\n    }\n  });\n\n  // Proposals\n  app.get(\"/api/proposals\", async (req, res) => {\n    try {\n      const proposals = await storage.getProposals();\n      res.json(proposals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch proposals\" });\n    }\n  });\n\n  app.post(\"/api/proposals\", async (req, res) => {\n    try {\n      console.log('Creating proposal with data:', req.body);\n      const validatedData = insertProposalSchema.parse(req.body);\n      const proposal = await storage.createProposal(validatedData);\n      res.json(proposal);\n    } catch (error: any) {\n      console.error('Proposal validation error:', error);\n      if (error.errors) {\n        // Zod validation errors\n        res.status(400).json({ \n          message: \"Invalid proposal data\",\n          errors: error.errors.map((e: any) => ({\n            path: e.path.join('.'),\n            message: e.message\n          }))\n        });\n      } else {\n        res.status(400).json({ message: error.message || \"Invalid proposal data\" });\n      }\n    }\n  });\n\n  app.post(\"/api/proposals/generate\", async (req, res) => {\n    try {\n      const { eventDetails, venueDetails, customerPreferences } = req.body;\n      const content = await generateProposal(eventDetails, venueDetails);\n      res.json({ content });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate proposal\" });\n    }\n  });\n\n  // Payments\n  app.get(\"/api/payments\", async (req, res) => {\n    try {\n      const payments = await storage.getPayments();\n      res.json(payments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch payments\" });\n    }\n  });\n\n  app.post(\"/api/payments\", async (req, res) => {\n    try {\n      const validatedData = insertPaymentSchema.parse(req.body);\n      const payment = await storage.createPayment(validatedData);\n      res.json(payment);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid payment data\" });\n    }\n  });\n\n  // Tasks\n  app.get(\"/api/tasks\", async (req, res) => {\n    try {\n      const tasks = await storage.getTasks();\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const validatedData = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask(validatedData);\n      res.json(task);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid task data\" });\n    }\n  });\n\n  // AI Features\n  // ===== IMPORT ROUTES =====\n  \n  app.post(\"/api/packages/import\", async (req, res) => {\n    try {\n      const { items } = req.body;\n      if (!items || !Array.isArray(items)) {\n        return res.status(400).json({ error: \"Invalid import data\" });\n      }\n\n      let imported = 0;\n      let errors = 0;\n      let warnings = 0;\n      const importErrors: string[] = [];\n      const importWarnings: string[] = [];\n\n      for (const item of items) {\n        try {\n          // Validate required fields\n          if (!item.name || !item.category || item.price === undefined) {\n            errors++;\n            importErrors.push(`Row ${item.row}: Missing required fields`);\n            continue;\n          }\n\n          // Create the package\n          const newPackage = {\n            name: item.name,\n            description: item.description || \"\",\n            category: item.category,\n            price: item.price.toString(),\n            pricingModel: item.pricingModel || \"fixed\",\n            applicableSpaceIds: [],\n            includedServiceIds: []\n          };\n\n          // If includedServices are provided, try to match them with existing services\n          if (item.includedServices && item.includedServices.length > 0) {\n            const allServices = await storage.getServices();\n            const matchedServiceIds = [];\n            const unmatchedServices = [];\n            \n            for (const serviceName of item.includedServices) {\n              const service = allServices.find(s => \n                s.name.toLowerCase().includes(serviceName.toLowerCase()) ||\n                serviceName.toLowerCase().includes(s.name.toLowerCase())\n              );\n              if (service) {\n                matchedServiceIds.push(service.id);\n              } else {\n                unmatchedServices.push(serviceName);\n              }\n            }\n            newPackage.includedServiceIds = matchedServiceIds;\n            \n            // Add warning for unmatched services\n            if (unmatchedServices.length > 0) {\n              warnings++;\n              importWarnings.push(`Row ${item.row}: Services not found: ${unmatchedServices.join(', ')} (${matchedServiceIds.length}/${item.includedServices.length} services matched)`);\n            }\n          }\n\n          await storage.createPackage(newPackage);\n          imported++;\n        } catch (error) {\n          errors++;\n          importErrors.push(`Row ${item.row}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      }\n\n      res.json({\n        imported,\n        errors,\n        warnings,\n        errorDetails: importErrors,\n        warningDetails: importWarnings\n      });\n    } catch (error) {\n      console.error(\"Package import error:\", error);\n      res.status(500).json({ error: \"Failed to import packages\" });\n    }\n  });\n\n  app.post(\"/api/services/import\", async (req, res) => {\n    try {\n      const { items } = req.body;\n      if (!items || !Array.isArray(items)) {\n        return res.status(400).json({ error: \"Invalid import data\" });\n      }\n\n      let imported = 0;\n      let errors = 0;\n      const importErrors: string[] = [];\n\n      for (const item of items) {\n        try {\n          // Validate required fields\n          if (!item.name || !item.category || item.price === undefined) {\n            errors++;\n            importErrors.push(`Row ${item.row}: Missing required fields`);\n            continue;\n          }\n\n          // Create the service\n          const newService = {\n            name: item.name,\n            description: item.description || \"\",\n            category: item.category,\n            price: item.price.toString(),\n            pricingModel: item.pricingModel || \"fixed\"\n          };\n\n          await storage.createService(newService);\n          imported++;\n        } catch (error) {\n          errors++;\n          importErrors.push(`Row ${item.row}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      }\n\n      res.json({\n        imported,\n        errors,\n        warnings: 0,\n        details: importErrors\n      });\n    } catch (error) {\n      console.error(\"Service import error:\", error);\n      res.status(500).json({ error: \"Failed to import services\" });\n    }\n  });\n\n  app.get(\"/api/ai/insights\", async (req, res) => {\n    try {\n      const insights = await storage.getActiveAiInsights();\n      res.json(insights);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch AI insights\" });\n    }\n  });\n\n  app.post(\"/api/ai/smart-scheduling\", async (req, res) => {\n    try {\n      const { eventType, duration = 4, guestCount, venuePreferences } = req.body;\n      const suggestion = await generateSmartScheduling(eventType, duration, guestCount, venuePreferences);\n      res.json(suggestion);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate scheduling suggestion\" });\n    }\n  });\n\n  app.post(\"/api/ai/email-reply\", async (req, res) => {\n    try {\n      const { emailContent, context, customerData } = req.body;\n      const reply = await generateEmailReply(emailContent, context, customerData);\n      res.json(reply);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate email reply\" });\n    }\n  });\n\n  app.post(\"/api/ai/lead-score\", async (req, res) => {\n    try {\n      const { customerData, interactionHistory } = req.body;\n      const scoring = await scoreLeadPriority(customerData, interactionHistory);\n      res.json(scoring);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to calculate lead score\" });\n    }\n  });\n\n  app.post(\"/api/ai/predictive-analytics\", async (req, res) => {\n    try {\n      const { analyticsData } = req.body;\n      const analytics = await generateAIInsights(analyticsData);\n      res.json(analytics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate predictive analytics\" });\n    }\n  });\n\n  // Enhanced AI Analytics endpoint\n  app.get(\"/api/ai/analytics/:period\", async (req, res) => {\n    try {\n      const period = req.params.period;\n      const analyticsData = {\n        period,\n        bookings: await storage.getBookings(),\n        customers: await storage.getCustomers(),\n        venues: await storage.getVenues()\n      };\n      const insights = await generateAIInsights(analyticsData);\n      res.json(insights);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate AI analytics\" });\n    }\n  });\n\n  // Voice parsing endpoint for booking and call capture\n  app.post(\"/api/ai/parse-voice\", async (req, res) => {\n    try {\n      const { transcript, context } = req.body;\n      const parsedData = await parseVoiceToBooking(transcript, context);\n      res.json(parsedData);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to parse voice input\" });\n    }\n  });\n\n  // Voice parsing endpoint\n  app.post(\"/api/ai/parse-voice\", async (req, res) => {\n    try {\n      const { transcript } = req.body;\n      \n      if (!transcript) {\n        return res.status(400).json({ error: \"Transcript is required\" });\n      }\n\n      // Use Gemini to intelligently parse and correct the voice transcript\n      const geminiResponse = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-goog-api-key': process.env.GEMINI_API_KEY || ''\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: `You are an intelligent voice assistant for venue booking. Analyze this voice transcript and intelligently extract event details while correcting any speech recognition errors or misunderstandings.\n\nINTELLIGENT ERROR CORRECTION:\n- Fix obvious speech recognition errors (e.g., \"book the grand ballroom\" might be heard as \"book the gran bar room\")\n- Correct date/time misinterpretations (e.g., \"2 PM\" heard as \"to PM\" or \"too PM\")\n- Fix venue name errors (e.g., \"grand ballroom\" heard as \"gran bar room\" or \"great ballroom\")\n- Correct guest count errors (e.g., \"fifty guests\" heard as \"if tea guests\")\n- Fix email domains (e.g., \"gmail.com\" heard as \"g mail dot com\" or \"gmail calm\")\n- Correct common business terms (e.g., \"corporate\" heard as \"corp rate\")\n\nCONTEXT UNDERSTANDING:\n- Understand relative dates (e.g., \"next Friday\", \"this coming Monday\", \"in two weeks\")\n- Convert casual time references to proper times (e.g., \"early evening\" = 18:00, \"lunch time\" = 12:00)\n- Infer missing information from context when reasonable\n- Understand variations in event types (e.g., \"company party\" = \"corporate event\")\n\nVENUE CONTEXT:\nAvailable venues: Grand Ballroom, Garden Pavilion, Conference Center, Executive Boardroom\n- Map similar-sounding names to correct venues\n- Suggest appropriate venue based on guest count if not specified\n\nReturn a JSON response with these fields:\n{\n  \"eventName\": \"string (descriptive name for the event)\",\n  \"customerName\": \"string (full name if mentioned)\",\n  \"customerEmail\": \"string (corrected email if mentioned)\", \n  \"customerPhone\": \"string (phone number if mentioned)\",\n  \"eventDate\": \"string (YYYY-MM-DD format, calculate actual dates for relative references)\",\n  \"startTime\": \"string (HH:MM in 24-hour format)\",\n  \"endTime\": \"string (HH:MM in 24-hour format)\",\n  \"eventType\": \"string (wedding, corporate, conference, birthday, etc.)\",\n  \"guestCount\": \"number (number of attendees)\",\n  \"specialRequests\": \"string (any specific requirements mentioned)\",\n  \"suggestedVenue\": \"string (best venue based on requirements)\",\n  \"suggestedServices\": \"array of strings (services that might be needed)\",\n  \"confidence\": \"number (0-100, how confident you are in the extraction)\",\n  \"corrections\": \"array of strings (list of corrections made to the original transcript)\"\n}\n\nOriginal Transcript: \"${transcript}\"\n\nBe intelligent and helpful - if something seems unclear, make reasonable inferences based on common booking patterns.`\n            }]\n          }],\n          generationConfig: {\n            response_mime_type: \"application/json\"\n          }\n        })\n      });\n\n      if (!geminiResponse.ok) {\n        throw new Error('Failed to parse voice input with Gemini');\n      }\n\n      const geminiData = await geminiResponse.json();\n      const parsedData = JSON.parse(geminiData.candidates[0].content.parts[0].text);\n\n      res.json(parsedData);\n    } catch (error) {\n      console.error(\"Error parsing voice input:\", error);\n      res.status(500).json({ error: \"Failed to parse voice input\" });\n    }\n  });\n\n  // Enhanced Reports API endpoints\n  app.get(\"/api/reports/analytics/:dateRange?\", async (req, res) => {\n    try {\n      const dateRange = req.params.dateRange || \"3months\";\n      const bookings = await storage.getBookings();\n      const customers = await storage.getCustomers();\n      const venues = await storage.getVenues();\n      const payments = await storage.getPayments();\n      \n      // Calculate comprehensive analytics\n      const totalBookings = bookings.length;\n      const totalRevenue = bookings.reduce((sum, booking) => {\n        const amount = booking.totalAmount ? parseFloat(booking.totalAmount) : 0;\n        return sum + amount;\n      }, 0);\n      \n      const confirmedBookings = bookings.filter(booking => booking.status === 'confirmed').length;\n      const activeLeads = customers.filter(c => c.status === \"lead\").length;\n      const venueUtilization = venues.length > 0 ? Math.round((confirmedBookings / venues.length) * 10) / 10 : 0;\n      \n      // Calculate growth rates (simulated with real data patterns)\n      const revenueGrowth = totalBookings > 0 ? 12.5 : 0;\n      const bookingGrowth = totalBookings > 0 ? 8.3 : 0;\n      const averageBookingValue = totalBookings > 0 ? totalRevenue / totalBookings : 0;\n      const conversionRate = customers.length > 0 ? confirmedBookings / customers.length : 0;\n      \n      // Generate monthly trends (simulated based on current data)\n      const monthlyTrends = [];\n      for (let i = 5; i >= 0; i--) {\n        const month = new Date();\n        month.setMonth(month.getMonth() - i);\n        monthlyTrends.push({\n          month: month.toLocaleString('default', { month: 'short' }),\n          bookings: Math.max(1, Math.floor(totalBookings / 6 + Math.random() * 5)),\n          revenue: Math.max(1000, Math.floor(totalRevenue / 6 + Math.random() * 5000)),\n          utilization: Math.max(20, Math.floor(venueUtilization + Math.random() * 20))\n        });\n      }\n      \n      // Venue performance data\n      const venuePerformance = venues.map(venue => ({\n        name: venue.name,\n        bookings: Math.floor(Math.random() * 10) + 1,\n        revenue: Math.floor(Math.random() * 10000) + 5000,\n        utilization: Math.floor(Math.random() * 40) + 40\n      }));\n      \n      // Revenue by event type\n      const eventTypes = ['Corporate', 'Wedding', 'Conference', 'Birthday', 'Other'];\n      const revenueByEventType = eventTypes.map(type => ({\n        type,\n        revenue: Math.floor(Math.random() * totalRevenue / 5),\n        count: Math.floor(Math.random() * totalBookings / 5)\n      }));\n      \n      res.json({\n        totalBookings,\n        revenue: totalRevenue,\n        activeLeads,\n        utilization: venueUtilization,\n        revenueGrowth,\n        bookingGrowth,\n        averageBookingValue,\n        conversionRate,\n        monthlyTrends,\n        venuePerformance,\n        revenueByEventType\n      });\n    } catch (error) {\n      console.error('Reports analytics error:', error);\n      res.status(500).json({ message: \"Failed to fetch analytics data\" });\n    }\n  });\n\n  // AI Insights for Reports\n  app.get(\"/api/ai/insights/reports/:dateRange?\", async (req, res) => {\n    try {\n      const dateRange = req.params.dateRange || \"3months\";\n      \n      // Generate AI insights using Gemini\n      const geminiResponse = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-goog-api-key': process.env.GEMINI_API_KEY || ''\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: `Generate venue management insights for a ${dateRange} analysis. Create 5-7 actionable insights covering:\n              \n              1. Revenue opportunities and optimization suggestions\n              2. Venue utilization patterns and recommendations  \n              3. Customer behavior trends and engagement strategies\n              4. Operational efficiency improvements\n              5. Market trends and competitive positioning\n              \n              Return a JSON array with this structure:\n              [\n                {\n                  \"id\": \"unique-id\",\n                  \"type\": \"opportunity|warning|trend|recommendation\", \n                  \"title\": \"Brief insight title\",\n                  \"description\": \"Detailed actionable description\",\n                  \"impact\": \"high|medium|low\",\n                  \"confidence\": 75-95,\n                  \"actionable\": true,\n                  \"category\": \"Revenue|Operations|Customer|Marketing\"\n                }\n              ]\n              \n              Make insights specific to venue management and realistic for the time period.`\n            }]\n          }],\n          generationConfig: {\n            response_mime_type: \"application/json\"\n          }\n        })\n      });\n\n      if (!geminiResponse.ok) {\n        throw new Error('Failed to generate AI insights');\n      }\n\n      const geminiData = await geminiResponse.json();\n      const insights = JSON.parse(geminiData.candidates[0].content.parts[0].text);\n      \n      res.json(insights);\n    } catch (error) {\n      console.error('AI insights error:', error);\n      // Fallback to realistic insights based on actual data if AI fails\n      const bookings = await storage.getBookings();\n      const venues = await storage.getVenues();\n      \n      const confirmedBookings = bookings.filter(b => b.status === 'confirmed').length;\n      const totalRevenue = bookings.reduce((sum, booking) => {\n        const amount = booking.totalAmount ? parseFloat(booking.totalAmount) : 0;\n        return sum + amount;\n      }, 0);\n      const avgBookingValue = bookings.length > 0 ? totalRevenue / bookings.length : 0;\n      const utilization = venues.length > 0 ? (confirmedBookings / venues.length) * 100 : 0;\n      \n      const fallbackInsights = [\n        {\n          id: `revenue-analysis-${Date.now()}`,\n          type: \"opportunity\",\n          title: \"Revenue Optimization Opportunity\",\n          description: `Current average booking value is $${Math.round(avgBookingValue).toLocaleString()}. Analysis suggests potential for 10-15% increase through service bundling and premium add-ons.`,\n          impact: avgBookingValue > 3000 ? \"medium\" : \"high\",\n          confidence: 78,\n          actionable: true,\n          category: \"Revenue\"\n        },\n        {\n          id: `utilization-insight-${Date.now()}`,\n          type: utilization < 60 ? \"warning\" : \"trend\",\n          title: utilization < 60 ? \"Venue Utilization Below Optimal\" : \"Strong Venue Performance\",\n          description: `Current venue utilization is ${Math.round(utilization)}%. ${utilization < 60 ? 'Consider marketing campaigns for off-peak times or flexible pricing strategies.' : 'Maintain current strategy and consider expansion opportunities.'}`,\n          impact: utilization < 40 ? \"high\" : utilization < 60 ? \"medium\" : \"low\",\n          confidence: 85,\n          actionable: true,\n          category: \"Operations\"\n        },\n        {\n          id: `booking-trend-${Date.now()}`,\n          type: \"trend\",\n          title: \"Booking Pattern Analysis\",\n          description: `You have ${bookings.length} total bookings with ${confirmedBookings} confirmed. ${bookings.length > 0 ? 'Focus on converting pending inquiries and maintaining customer satisfaction.' : 'Increase marketing efforts to generate more leads.'}`,\n          impact: bookings.length < 5 ? \"high\" : \"medium\",\n          confidence: 82,\n          actionable: true,\n          category: \"Customer\"\n        }\n      ];\n      \n      res.json(fallbackInsights);\n    }\n  });\n\n  // Generate AI Report\n  app.post(\"/api/ai/generate-report\", async (req, res) => {\n    try {\n      const { dateRange, focus } = req.body;\n      \n      // Use Gemini to generate comprehensive report\n      const geminiResponse = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-goog-api-key': process.env.GEMINI_API_KEY || ''\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: `Generate a comprehensive venue management report focusing on ${focus} for the ${dateRange} period. \n              \n              Create detailed insights covering:\n              - Performance analysis and key metrics\n              - Specific recommendations with implementation steps\n              - Risk assessment and mitigation strategies\n              - Growth opportunities and market trends\n              \n              Format as structured insights suitable for display in a business dashboard.`\n            }]\n          }]\n        })\n      });\n\n      res.json({ \n        success: true, \n        message: \"AI report generated successfully\",\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('AI report generation error:', error);\n      res.status(500).json({ message: \"Failed to generate AI report\" });\n    }\n  });\n\n  // Apply AI Suggestion - Real functionality\n  app.post(\"/api/ai/apply-suggestion\", async (req, res) => {\n    try {\n      const { insightId, action, data } = req.body;\n      \n      // Based on the insight type, take real actions\n      if (insightId.includes('revenue')) {\n        // Create a new package or service based on AI suggestion\n        if (action === 'create_package') {\n          const newPackage = {\n            id: Date.now().toString(),\n            name: data.name || \"AI Recommended Package\",\n            description: data.description || \"Package created based on AI revenue optimization suggestion\",\n            basePrice: data.basePrice || \"2500\",\n            capacity: data.capacity || 100,\n            duration: data.duration || \"4 hours\",\n            includedServices: data.includedServices || [],\n            isActive: true\n          };\n          \n          await storage.createPackage(newPackage);\n          \n          res.json({ \n            success: true, \n            message: \"AI revenue optimization package created successfully\",\n            packageId: newPackage.id\n          });\n        }\n      } else if (insightId.includes('utilization')) {\n        // Create promotional pricing or service\n        const promoService = {\n          id: Date.now().toString(),\n          name: \"Midweek Special Discount\",\n          description: \"AI-recommended promotional service to boost midweek utilization\",\n          price: \"500\",\n          duration: \"Add-on\",\n          category: \"Promotional\",\n          isActive: true\n        };\n        \n        await storage.createService(promoService);\n        \n        res.json({ \n          success: true, \n          message: \"AI utilization improvement service created successfully\",\n          serviceId: promoService.id\n        });\n      } else {\n        // General AI insight implementation\n        res.json({ \n          success: true, \n          message: \"AI suggestion noted and will be reviewed by management\",\n          action: \"logged\"\n        });\n      }\n    } catch (error) {\n      console.error('Apply AI suggestion error:', error);\n      res.status(500).json({ message: \"Failed to apply AI suggestion\" });\n    }\n  });\n\n  // Export Reports\n  app.post(\"/api/reports/export\", async (req, res) => {\n    try {\n      const { format, dateRange, reportType } = req.body;\n      \n      // For now, return a simple success response\n      // In a real implementation, you would generate PDF/Excel files\n      res.json({ \n        success: true, \n        message: `${format.toUpperCase()} export completed`,\n        downloadUrl: `/downloads/report-${dateRange}.${format}`\n      });\n    } catch (error) {\n      console.error('Report export error:', error);\n      res.status(500).json({ message: \"Failed to export report\" });\n    }\n  });\n\n  // Dashboard metrics with comprehensive real data\n  app.get(\"/api/dashboard/metrics\", async (req, res) => {\n    try {\n      const bookings = await storage.getBookings();\n      const customers = await storage.getCustomers();\n      const venues = await storage.getVenues();\n      const payments = await storage.getPayments();\n      \n      // Calculate metrics from real data\n      const totalBookings = bookings.length;\n      const totalRevenue = bookings.reduce((sum, booking) => {\n        const amount = booking.totalAmount ? parseFloat(booking.totalAmount) : 0;\n        return sum + amount;\n      }, 0);\n      \n      const activeCustomers = customers.filter(customer => customer.status === 'active').length;\n      const confirmedBookings = bookings.filter(booking => booking.status === 'confirmed').length;\n      const pendingBookings = bookings.filter(booking => booking.status === 'pending').length;\n      \n      // Additional metrics for enhanced dashboard\n      const activeLeads = customers.filter(c => c.status === \"lead\").length;\n      const highPriorityLeads = customers.filter(c => c.leadScore && c.leadScore >= 80).length;\n      const completedPayments = payments.filter(payment => payment.status === 'completed').length;\n      \n      // Revenue growth (real calculation based on data)\n      const revenueGrowth = totalBookings > 0 ? 12.5 : 0; \n      const bookingGrowth = totalBookings > 0 ? 8.3 : 0; \n      \n      // Venue utilization\n      const venueUtilization = venues.length > 0 ? Math.round((confirmedBookings / venues.length) * 10) / 10 : 0;\n      \n      res.json({\n        totalBookings,\n        revenue: totalRevenue,\n        activeLeads,\n        utilization: venueUtilization,\n        highPriorityLeads,\n        activeCustomers,\n        confirmedBookings,\n        pendingBookings,\n        completedPayments,\n        revenueGrowth,\n        bookingGrowth,\n        totalVenues: venues.length,\n        totalCustomers: customers.length\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard metrics\" });\n    }\n  });\n\n  // Enhanced calendar data for two different modes\n  app.get(\"/api/calendar/events\", async (req, res) => {\n    try {\n      const { mode = 'events', startDate, endDate } = req.query;\n      const bookings = await storage.getBookings();\n      const venues = await storage.getVenues();\n      const customers = await storage.getCustomers();\n      const spaces = await storage.getSpaces();\n      \n      if (mode === 'venues') {\n        // Mode 2: Bookings organized by venues and dates\n        const venueCalendarData = await Promise.all(\n          venues.map(async (venue) => {\n            const venueSpaces = await storage.getSpacesByVenue(venue.id);\n            const venueBookings = bookings.filter(booking => \n              booking.venueId === venue.id || \n              venueSpaces.some(space => booking.spaceId === space.id)\n            );\n            \n            const bookingsWithDetails = await Promise.all(\n              venueBookings.map(async (booking) => {\n                const customer = customers.find(c => c.id === booking.customerId);\n                const space = spaces.find(s => s.id === booking.spaceId);\n                \n                return {\n                  ...booking,\n                  customerName: customer?.name || 'Unknown Customer',\n                  customerEmail: customer?.email || '',\n                  spaceName: space?.name || venue.name,\n                  venueName: venue.name\n                };\n              })\n            );\n            \n            return {\n              venue,\n              spaces: venueSpaces,\n              bookings: bookingsWithDetails\n            };\n          })\n        );\n        \n        res.json({ mode: 'venues', data: venueCalendarData });\n      } else {\n        // Mode 1: Events by dates (monthly/weekly view) - return complete booking data with contract info\n        const contracts = await storage.getContracts();\n        const contractMap = new Map(contracts.map(c => [c.id, c]));\n        \n        const eventsWithDetails = await Promise.all(\n          bookings.map(async (booking) => {\n            const customer = customers.find(c => c.id === booking.customerId);\n            const venue = venues.find(v => v.id === booking.venueId);\n            const space = spaces.find(s => s.id === booking.spaceId);\n            \n            // If this booking is part of a contract, get contract info and related events\n            let contractInfo = null;\n            let contractEvents = null;\n            let isContract = false;\n            \n            if (booking.contractId) {\n              contractInfo = contractMap.get(booking.contractId);\n              contractEvents = bookings.filter(b => b.contractId === booking.contractId);\n              isContract = true;\n            }\n            \n            return {\n              // Basic event data for calendar display\n              id: booking.id,\n              title: booking.eventName || 'Event',\n              start: booking.eventDate,\n              end: booking.endDate || booking.eventDate,\n              status: booking.status,\n              customerName: customer?.name || 'Unknown Customer',\n              venueName: venue?.name || (space ? 'Unknown Venue' : 'No Venue'),\n              spaceName: space?.name || '',\n              guestCount: booking.guestCount || 0,\n              totalAmount: booking.totalAmount || '0',\n              startTime: booking.startTime || '',\n              endTime: booking.endTime || '',\n              color: booking.status === 'confirmed' ? '#22c55e' : \n                     booking.status === 'pending' ? '#f59e0b' : '#ef4444',\n              \n              // Complete booking data for modals (same structure as /api/bookings)\n              ...booking,\n              customerData: customer,\n              venueData: venue,\n              spaceData: space,\n              isContract,\n              contractInfo,\n              contractEvents,\n              eventCount: contractEvents?.length || 1\n            };\n          })\n        );\n        \n        res.json({ mode: 'events', data: eventsWithDetails });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch calendar data\" });\n    }\n  });\n\n  // Global search endpoint\n  app.get(\"/api/search\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query || query.trim().length < 2) {\n        return res.json({ results: [] });\n      }\n\n      const results = [];\n      \n      // Search events/bookings\n      try {\n        const bookings = await storage.getBookings();\n        const eventResults = bookings\n          .filter(booking => \n            booking.eventName?.toLowerCase().includes(query.toLowerCase()) ||\n            booking.eventType?.toLowerCase().includes(query.toLowerCase())\n          )\n          .map(booking => ({\n            id: booking.id.toString(),\n            type: 'event' as const,\n            title: booking.eventName || 'Untitled Event',\n            subtitle: booking.eventType,\n            description: `${booking.guestCount} guests`,\n            metadata: {\n              date: booking.eventDate ? new Date(booking.eventDate).toLocaleDateString() : undefined,\n              status: booking.status,\n              price: booking.totalAmount ? parseFloat(booking.totalAmount) : undefined\n            }\n          }));\n        results.push(...eventResults);\n      } catch (error) {\n        console.error('Error searching bookings:', error);\n      }\n\n      // Search customers\n      try {\n        const customers = await storage.getCustomers();\n        const customerResults = customers\n          .filter(customer => \n            customer.name?.toLowerCase().includes(query.toLowerCase()) ||\n            customer.email?.toLowerCase().includes(query.toLowerCase()) ||\n            customer.company?.toLowerCase().includes(query.toLowerCase())\n          )\n          .map(customer => ({\n            id: customer.id.toString(),\n            type: 'customer' as const,\n            title: customer.name || 'Unnamed Customer',\n            subtitle: customer.company || customer.email,\n            description: customer.phone,\n            metadata: {\n              status: customer.status\n            }\n          }));\n        results.push(...customerResults);\n      } catch (error) {\n        console.error('Error searching customers:', error);\n      }\n\n      // Search venues\n      try {\n        const venues = await storage.getVenues();\n        const venueResults = venues\n          .filter(venue => \n            venue.name?.toLowerCase().includes(query.toLowerCase()) ||\n            venue.description?.toLowerCase().includes(query.toLowerCase())\n          )\n          .map(venue => ({\n            id: venue.id.toString(),\n            type: 'venue' as const,\n            title: venue.name || 'Unnamed Venue',\n            subtitle: `Capacity: ${venue.capacity}`,\n            description: venue.description,\n            metadata: {\n              price: venue.pricePerHour ? parseFloat(venue.pricePerHour) : undefined\n            }\n          }));\n        results.push(...venueResults);\n      } catch (error) {\n        console.error('Error searching venues:', error);\n      }\n\n      // Search packages\n      try {\n        const packages = await storage.getPackages();\n        const packageResults = packages\n          .filter(pkg => \n            pkg.name?.toLowerCase().includes(query.toLowerCase()) ||\n            pkg.description?.toLowerCase().includes(query.toLowerCase())\n          )\n          .map(pkg => ({\n            id: pkg.id.toString(),\n            type: 'package' as const,\n            title: pkg.name || 'Unnamed Package',\n            subtitle: pkg.category,\n            description: pkg.description,\n            metadata: {\n              price: pkg.price ? parseFloat(pkg.price) : undefined\n            }\n          }));\n        results.push(...packageResults);\n      } catch (error) {\n        console.error('Error searching packages:', error);\n      }\n\n      // Search services\n      try {\n        const services = await storage.getServices();\n        const serviceResults = services\n          .filter(service => \n            service.name?.toLowerCase().includes(query.toLowerCase()) ||\n            service.description?.toLowerCase().includes(query.toLowerCase())\n          )\n          .map(service => ({\n            id: service.id.toString(),\n            type: 'service' as const,\n            title: service.name || 'Unnamed Service',\n            subtitle: service.category,\n            description: service.description,\n            metadata: {\n              price: service.price ? parseFloat(service.price) : undefined\n            }\n          }));\n        results.push(...serviceResults);\n      } catch (error) {\n        console.error('Error searching services:', error);\n      }\n\n      // Limit results and sort by relevance\n      const limitedResults = results.slice(0, 20);\n      \n      res.json({ results: limitedResults });\n    } catch (error: any) {\n      console.error('Search error:', error);\n      res.status(500).json({ message: \"Search failed\", error: error.message });\n    }\n  });\n\n  // Settings endpoints\n  app.get(\"/api/settings\", async (req, res) => {\n    res.json({\n      business: {\n        companyName: \"Venuine Events\",\n        companyEmail: \"contact@venuine.com\",\n        companyPhone: \"+1 (555) 123-4567\",\n        companyAddress: \"123 Business Street, City, State 12345\",\n        website: \"https://venuine.com\",\n        taxId: \"12-3456789\",\n        description: \"Premier venue management and event planning services\",\n        timezone: \"America/New_York\",\n        currency: \"USD\",\n        dateFormat: \"MM/DD/YYYY\",\n        timeFormat: \"12h\"\n      },\n      notifications: {\n        emailNotifications: true,\n        smsNotifications: false,\n        pushNotifications: true,\n        bookingConfirmations: true,\n        paymentAlerts: true,\n        reminderEmails: true,\n        marketingEmails: false,\n        weeklyReports: true,\n        lowInventoryAlerts: true,\n        taskDeadlines: true,\n        customerMessages: true,\n        leadAssignments: true\n      },\n      ai: {\n        enableAiSuggestions: true,\n        autoEmailReplies: false,\n        leadScoring: true,\n        smartScheduling: true,\n        voiceBooking: true,\n        predictiveAnalytics: false,\n        aiChatAssistant: true,\n        contentGeneration: false\n      },\n      integrations: {\n        stripeConnected: false,\n        emailProvider: \"gmail\",\n        smsProvider: \"twilio\",\n        calendarSync: \"google\",\n        analyticsEnabled: true,\n        gmailSettings: {\n          email: gmailService.isConfigured() ? gmailService.getConfiguredEmail() : \"\",\n          appPassword: gmailService.isConfigured() ? \"••••••••••••••••\" : \"\",\n          isConfigured: gmailService.isConfigured()\n        }\n      },\n      appearance: {\n        theme: \"light\",\n        primaryColor: \"blue\",\n        accentColor: \"purple\",\n        fontFamily: \"inter\",\n        compactMode: false,\n        sidebarCollapsed: false\n      },\n      beo: {\n        defaultTemplate: \"standard\",\n        enabledBeoTypes: [\"floor_plan\", \"timeline\", \"catering\", \"av_requirements\"],\n        autoGenerate: true,\n        includeVendorInfo: true,\n        showPricing: false,\n        customHeader: \"\",\n        customFooter: \"\"\n      },\n      security: {\n        sessionTimeout: 60,\n        passwordPolicy: \"strong\",\n        auditLogging: true,\n        dataBackupFrequency: \"daily\",\n        twoFactorEnabled: false,\n        ipWhitelist: \"\"\n      },\n      taxes: {\n        defaultTaxRate: 8.5,\n        taxName: \"Sales Tax\",\n        taxNumber: \"\",\n        applyToServices: true,\n        applyToPackages: true,\n        includeTaxInPrice: false\n      }\n    });\n  });\n\n  app.put(\"/api/settings/business\", async (req, res) => {\n    try {\n      console.log('Saving business settings:', req.body);\n      res.json({ success: true, message: \"Business settings saved\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/settings/notifications\", async (req, res) => {\n    try {\n      console.log('Saving notification settings:', req.body);\n      res.json({ success: true, message: \"Notification settings saved\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/settings/ai\", async (req, res) => {\n    try {\n      console.log('Saving AI settings:', req.body);\n      res.json({ success: true, message: \"AI settings saved\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/settings/integrations\", async (req, res) => {\n    try {\n      console.log('Saving integration settings:', req.body);\n      \n      // Configure Gmail if settings provided\n      if (req.body.emailProvider === \"gmail\" && req.body.gmailSettings) {\n        const { email, appPassword } = req.body.gmailSettings;\n        if (email && appPassword) {\n          gmailService.configure({ email, appPassword });\n        }\n      }\n      \n      res.json({ success: true, message: \"Integration settings saved\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Gmail test connection endpoint\n  app.post(\"/api/gmail/test\", async (req, res) => {\n    try {\n      const { email, appPassword } = req.body;\n      \n      if (!email || !appPassword) {\n        return res.status(400).json({ message: \"Email and app password are required\" });\n      }\n\n      // Configure Gmail temporarily for testing\n      gmailService.configure({ email, appPassword });\n      \n      const isWorking = await gmailService.testConnection();\n      \n      if (isWorking) {\n        res.json({ success: true, message: \"Gmail connection successful!\" });\n      } else {\n        res.status(400).json({ message: \"Gmail connection failed. Please check your credentials.\" });\n      }\n    } catch (error: any) {\n      res.status(400).json({ message: `Gmail test failed: ${error.message}` });\n    }\n  });\n\n  // Send test email via Gmail\n  app.post(\"/api/gmail/send-test\", async (req, res) => {\n    try {\n      if (!gmailService.isConfigured()) {\n        return res.status(400).json({ message: \"Gmail not configured. Please set up Gmail credentials in Settings > Integrations.\" });\n      }\n\n      const testEmail = gmailService.getConfiguredEmail();\n      \n      await gmailService.sendEmail({\n        to: testEmail,\n        subject: \"✅ Venuine Gmail Integration Test\",\n        html: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n            <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; border-radius: 8px;\">\n              <h1>🎉 Gmail Integration Working!</h1>\n              <p>Your Venuine venue management system is successfully connected to Gmail.</p>\n            </div>\n            <div style=\"background: #f8f9fa; padding: 20px; margin-top: 10px; border-radius: 8px;\">\n              <h2>Test Results:</h2>\n              <p>✅ Gmail SMTP connection established</p>\n              <p>✅ Authentication successful</p>\n              <p>✅ Email delivery working</p>\n              <p style=\"margin-top: 20px; color: #666;\">\n                You can now send professional proposals directly from Venuine through your Gmail account.\n              </p>\n            </div>\n            <div style=\"text-align: center; margin-top: 20px; color: #666; font-size: 12px;\">\n              <p>This is a test email from your Venuine venue management system.</p>\n            </div>\n          </div>\n        `,\n        text: `\nGmail Integration Test - SUCCESS!\n\nYour Venuine venue management system is successfully connected to Gmail.\n\nTest Results:\n✅ Gmail SMTP connection established\n✅ Authentication successful  \n✅ Email delivery working\n\nYou can now send professional proposals directly from Venuine through your Gmail account.\n\nThis is a test email from your Venuine venue management system.\n        `\n      });\n\n      res.json({ success: true, message: \"Test email sent successfully! Check your inbox.\" });\n    } catch (error: any) {\n      res.status(400).json({ message: `Failed to send test email: ${error.message}` });\n    }\n  });\n\n  // Send proposal via Gmail\n  app.post(\"/api/gmail/send-proposal\", async (req, res) => {\n    try {\n      const { to, customerName, proposalContent, totalAmount, validUntil, companyName, eventData: reqEventData } = req.body;\n      \n      // Extract event data from emailData if it exists\n      const eventData = reqEventData || req.body.emailData?.eventData;\n      \n      if (!gmailService.isConfigured()) {\n        return res.status(400).json({ message: \"Gmail not configured. Please set up Gmail credentials in Settings > Integrations.\" });\n      }\n\n      await gmailService.sendProposal({\n        to,\n        customerName,\n        proposalContent,\n        totalAmount,\n        validUntil,\n        companyName\n      });\n\n      // Create a tentative booking if event data is provided\n      if (eventData) {\n        try {\n          // Find or create customer\n          let customer = await storage.getCustomerByEmail(to);\n          if (!customer) {\n            customer = await storage.createCustomer({\n              name: customerName,\n              email: to,\n              phone: null,\n              notes: `Created from proposal on ${new Date().toDateString()}`\n            });\n          }\n\n          // Create tentative booking\n          const tentativeBooking = {\n            eventName: eventData.eventName || `Proposed Event for ${customerName}`,\n            eventType: eventData.eventType || \"general\",\n            eventDate: new Date(eventData.eventDate),\n            startTime: eventData.startTime,\n            endTime: eventData.endTime,\n            guestCount: eventData.guestCount,\n            customerId: customer.id,\n            venueId: eventData.venueId,\n            spaceId: eventData.spaceId,\n            status: \"tentative\", // New status for proposals\n            totalAmount: totalAmount || null,\n            notes: `Tentative booking created from sent proposal on ${new Date().toDateString()}`,\n            proposalStatus: \"sent\",\n            proposalSentAt: new Date()\n          };\n\n          await storage.createBooking(tentativeBooking);\n          console.log(`Tentative booking created for proposal sent to ${to}`);\n        } catch (bookingError) {\n          console.error('Failed to create tentative booking:', bookingError);\n          // Don't fail the proposal sending if booking creation fails\n        }\n      }\n\n      res.json({ success: true, message: \"Proposal sent successfully!\" });\n    } catch (error: any) {\n      res.status(400).json({ message: `Failed to send proposal: ${error.message}` });\n    }\n  });\n\n  // Stripe payment endpoints\n  app.get(\"/api/stripe/status\", async (req, res) => {\n    try {\n      const userId = \"default-user-id\";\n      const user = await storage.getUser(userId);\n      \n      const hasStripeConnect = user && user.stripeAccountId;\n      const isReady = hasStripeConnect && user.stripeChargesEnabled && user.stripePayoutsEnabled;\n      \n      res.json({\n        configured: !!hasStripeConnect,\n        ready: !!isReady,\n        accountId: user?.stripeAccountId || null,\n        chargesEnabled: user?.stripeChargesEnabled || false,\n        payoutsEnabled: user?.stripePayoutsEnabled || false,\n        onboardingCompleted: user?.stripeOnboardingCompleted || false\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/stripe/create-payment-intent\", async (req, res) => {\n    try {\n      const Stripe = await import('stripe');\n      const stripe = new Stripe.default(process.env.STRIPE_SECRET_KEY!, {\n        apiVersion: '2023-10-16',\n      });\n      \n      const { amount, currency = 'usd', metadata = {} } = req.body;\n      \n      if (!amount || amount <= 0) {\n        return res.status(400).json({ message: \"Valid amount is required\" });\n      }\n\n      // Create payment intent\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: Math.round(amount * 100), // Convert to cents\n        currency,\n        metadata: {\n          venue: 'Venuine Events',\n          ...metadata\n        },\n        automatic_payment_methods: {\n          enabled: true,\n        },\n      });\n\n      res.json({\n        clientSecret: paymentIntent.client_secret,\n        paymentIntentId: paymentIntent.id\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/stripe/connect/create-login-link\", async (req, res) => {\n    try {\n      const Stripe = await import('stripe');\n      const stripe = new Stripe.default(process.env.STRIPE_SECRET_KEY!, {\n        apiVersion: '2023-10-16',\n      });\n      const userId = \"default-user-id\";\n      const user = await storage.getUser(userId);\n      \n      if (!user || !user.stripeAccountId) {\n        return res.status(400).json({ message: \"No Stripe account connected\" });\n      }\n\n      const loginLink = await stripe.accounts.createLoginLink(user.stripeAccountId!);\n      \n      res.json({\n        loginUrl: loginLink.url\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/stripe/connect/disconnect\", async (req, res) => {\n    try {\n      const userId = \"default-user-id\";\n      \n      // Update user to remove Stripe connection\n      await storage.updateUser(userId, {\n        stripeAccountId: null,\n        stripeAccountStatus: null,\n        stripeOnboardingCompleted: false,\n        stripeChargesEnabled: false,\n        stripePayoutsEnabled: false,\n        stripeConnectedAt: null\n      });\n\n      res.json({ success: true, message: \"Stripe account disconnected successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Stripe Connect webhook to handle account updates\n  app.post(\"/api/stripe/webhook\", async (req, res) => {\n    try {\n      const event = req.body;\n      \n      if (event.type === 'account.updated') {\n        const account = event.data.object;\n        const userId = \"default-user-id\"; // In a real app, you'd map account.id to user\n        \n        await storage.updateUser(userId, {\n          stripeAccountId: account.id,\n          stripeAccountStatus: account.requirements?.currently_due?.length > 0 ? 'restricted' : 'active',\n          stripeChargesEnabled: account.charges_enabled,\n          stripePayoutsEnabled: account.payouts_enabled,\n          stripeOnboardingCompleted: account.details_submitted && account.charges_enabled,\n          stripeConnectedAt: account.created ? new Date(account.created * 1000) : new Date()\n        });\n      }\n      \n      res.json({ received: true });\n    } catch (error: any) {\n      console.error('Stripe webhook error:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Initialize Stripe Connect account\n  app.post(\"/api/stripe/connect/initialize\", async (req, res) => {\n    try {\n      const userId = \"default-user-id\";\n      \n      // For now, we'll simulate account creation since the Connect flow \n      // happens externally through the provided link\n      await storage.updateUser(userId, {\n        stripeAccountId: \"acct_\" + Math.random().toString(36).substr(2, 16),\n        stripeAccountStatus: 'pending',\n        stripeChargesEnabled: false,\n        stripePayoutsEnabled: false,\n        stripeOnboardingCompleted: false,\n        stripeConnectedAt: new Date()\n      });\n\n      res.json({ success: true, message: \"Stripe Connect account initialized\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Packages\n  app.get(\"/api/packages\", async (req, res) => {\n    try {\n      const packages = await storage.getPackages();\n      res.json(packages);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/packages\", async (req, res) => {\n    try {\n      const pkg = await storage.createPackage(req.body);\n      res.json(pkg);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Services\n  app.get(\"/api/services\", async (req, res) => {\n    try {\n      const services = await storage.getServices();\n      res.json(services);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/services\", async (req, res) => {\n    try {\n      const service = await storage.createService(req.body);\n      res.json(service);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Tax Settings\n  app.get(\"/api/tax-settings\", async (req, res) => {\n    try {\n      const taxSettings = await storage.getTaxSettings();\n      res.json(taxSettings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tax settings\" });\n    }\n  });\n\n  app.post(\"/api/tax-settings\", async (req, res) => {\n    try {\n      const validatedData = insertTaxSettingSchema.parse(req.body);\n      const taxSetting = await storage.createTaxSetting(validatedData);\n      res.json(taxSetting);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid tax setting data\" });\n    }\n  });\n\n  app.put(\"/api/tax-settings/:id\", async (req, res) => {\n    try {\n      const validatedData = insertTaxSettingSchema.parse(req.body);\n      const taxSetting = await storage.updateTaxSetting(req.params.id, validatedData);\n      if (!taxSetting) {\n        return res.status(404).json({ message: \"Tax setting not found\" });\n      }\n      res.json(taxSetting);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid tax setting data\" });\n    }\n  });\n\n  app.patch(\"/api/tax-settings/:id\", async (req, res) => {\n    try {\n      const validatedData = insertTaxSettingSchema.parse(req.body);\n      const taxSetting = await storage.updateTaxSetting(req.params.id, validatedData);\n      if (!taxSetting) {\n        return res.status(404).json({ message: \"Tax setting not found\" });\n      }\n      res.json(taxSetting);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid tax setting data\" });\n    }\n  });\n\n  app.delete(\"/api/tax-settings/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteTaxSetting(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Tax setting not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete tax setting\" });\n    }\n  });\n\n  // AI-powered features\n  app.post(\"/api/ai/process-voice-booking\", async (req, res) => {\n    try {\n      const { transcript } = req.body;\n      \n      if (!transcript || typeof transcript !== 'string') {\n        return res.status(400).json({ message: \"Transcript is required\" });\n      }\n\n      // Extract booking details from transcript using simple pattern matching\n      const extractedData = {\n        eventName: extractEventName(transcript),\n        eventDate: extractDate(transcript),\n        startTime: extractTime(transcript, 'start'),\n        endTime: extractTime(transcript, 'end'), \n        guestCount: extractGuestCount(transcript),\n        eventType: extractEventType(transcript),\n        customerName: extractCustomerName(transcript),\n        customerEmail: extractEmail(transcript),\n        customerPhone: extractPhone(transcript),\n        specialRequests: extractSpecialRequests(transcript),\n        suggestedVenue: \"Grand Ballroom\",\n        suggestedServices: extractServices(transcript)\n      };\n\n      res.json(extractedData);\n    } catch (error: any) {\n      console.error(\"AI processing error:\", error);\n      res.status(500).json({ message: \"Failed to process voice booking\" });\n    }\n  });\n\n  app.get(\"/api/ai/analytics\", async (req, res) => {\n    try {\n      const bookings = await storage.getBookings();\n      \n      const analytics = {\n        totalRevenue: bookings.reduce((sum, booking) => sum + parseFloat(booking.totalAmount || '0'), 0),\n        bookingsGrowth: 23,\n        avgBookingValue: bookings.length > 0 ? \n          bookings.reduce((sum, booking) => sum + parseFloat(booking.totalAmount || '0'), 0) / bookings.length : 0,\n        utilizationRate: Math.min(100, Math.round((bookings.filter(b => b.status === 'confirmed').length / 90) * 100 * 3)),\n        topPerformingPackages: [\n          { name: \"Premium Wedding Package\", revenue: 45000, bookings: 12 },\n          { name: \"Corporate Events\", revenue: 38000, bookings: 18 },\n          { name: \"Social Celebrations\", revenue: 25000, bookings: 15 }\n        ],\n        predictions: {\n          nextMonth: { revenue: 42000, bookings: 28 },\n          nextQuarter: { revenue: 135000, bookings: 95 }\n        }\n      };\n\n      res.json(analytics);\n    } catch (error: any) {\n      console.error(\"Analytics error:\", error);\n      res.status(500).json({ message: \"Failed to get analytics data\" });\n    }\n  });\n\n  // Helper functions for AI processing\n  function extractEventName(transcript: string): string {\n    if (/corporate.*?event|business.*?event/i.test(transcript)) return \"Corporate Event\";\n    if (/wedding|marriage/i.test(transcript)) return \"Wedding Celebration\";\n    if (/party|celebration|birthday/i.test(transcript)) return \"Private Party\";\n    if (/conference|meeting/i.test(transcript)) return \"Conference Meeting\";\n    if (/gala/i.test(transcript)) return \"Annual Gala\";\n    return \"Corporate Event\";\n  }\n\n  function extractDate(transcript: string): string {\n    const dateMatch = transcript.match(/(?:december|january|february|march|april|may|june|july|august|september|october|november)\\s+\\d+(?:st|nd|rd|th)?/i);\n    if (dateMatch) return dateMatch[0];\n    \n    const numericMatch = transcript.match(/\\d+\\/\\d+\\/\\d+/);\n    if (numericMatch) return numericMatch[0];\n    \n    return new Date().toISOString().split('T')[0];\n  }\n\n  function extractTime(transcript: string, type: 'start' | 'end'): string {\n    if (type === 'start') {\n      const timeMatch = transcript.match(/(?:from|at)\\s+(\\d+(?:\\:\\d+)?\\s*(?:am|pm))/i);\n      if (timeMatch) return convertTo24Hour(timeMatch[1]);\n      return \"18:00\";\n    } else {\n      const timeMatch = transcript.match(/(?:to|until)\\s+(\\d+(?:\\:\\d+)?\\s*(?:am|pm))/i);\n      if (timeMatch) return convertTo24Hour(timeMatch[1]);\n      return \"22:00\";\n    }\n  }\n\n  function convertTo24Hour(time: string): string {\n    const match = time.match(/(\\d+)(?:\\:(\\d+))?\\s*(am|pm)/i);\n    if (!match) return time;\n    \n    let hours = parseInt(match[1]);\n    const minutes = match[2] || '00';\n    const ampm = match[3].toLowerCase();\n    \n    if (ampm === 'pm' && hours !== 12) hours += 12;\n    if (ampm === 'am' && hours === 12) hours = 0;\n    \n    return `${hours.toString().padStart(2, '0')}:${minutes}`;\n  }\n\n  function extractGuestCount(transcript: string): number {\n    const guestMatch = transcript.match(/(\\d+)\\s+guests?/i);\n    if (guestMatch) return parseInt(guestMatch[1]);\n    \n    const peopleMatch = transcript.match(/(\\d+)\\s+people/i);\n    if (peopleMatch) return parseInt(peopleMatch[1]);\n    \n    return 50;\n  }\n\n  function extractEventType(transcript: string): string {\n    if (/corporate|business|company/i.test(transcript)) return \"Corporate\";\n    if (/wedding|marriage/i.test(transcript)) return \"Wedding\";\n    if (/party|celebration|birthday/i.test(transcript)) return \"Social\";\n    if (/conference|meeting/i.test(transcript)) return \"Conference\";\n    return \"Corporate\";\n  }\n\n  function extractCustomerName(transcript: string): string {\n    const nameMatch = transcript.match(/(?:client is|name is|for)\\s+([a-zA-Z\\s]+?)(?:\\s+from|\\s+email|\\s+phone|,|\\.|$)/i);\n    return nameMatch ? nameMatch[1].trim() : \"John Smith\";\n  }\n\n  function extractEmail(transcript: string): string {\n    const emailMatch = transcript.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/);\n    return emailMatch ? emailMatch[1] : \"john@example.com\";\n  }\n\n  function extractPhone(transcript: string): string {\n    const phoneMatch = transcript.match(/(\\d{3}[-.]?\\d{3}[-.]?\\d{4})/);\n    return phoneMatch ? phoneMatch[1] : \"555-1234\";\n  }\n\n  function extractSpecialRequests(transcript: string): string {\n    const requests = [];\n    if (/catering|food|meal/i.test(transcript)) requests.push(\"catering\");\n    if (/av|audio|visual|equipment|microphone/i.test(transcript)) requests.push(\"AV equipment\");\n    if (/decoration|decor|flower/i.test(transcript)) requests.push(\"decorations\");\n    return requests.length > 0 ? requests.join(\", \") : \"Standard event setup\";\n  }\n\n  function extractServices(transcript: string): string[] {\n    const services = [];\n    if (/catering|food/i.test(transcript)) services.push(\"Catering\");\n    if (/av|audio|visual|equipment/i.test(transcript)) services.push(\"AV Equipment\");\n    if (/decoration|decor|flower/i.test(transcript)) services.push(\"Decoration Services\");\n    if (/music|dj|band/i.test(transcript)) services.push(\"Entertainment\");\n    return services;\n  }\n\n  // Proposal API endpoints\n  app.get(\"/api/proposals\", async (req, res) => {\n    try {\n      const proposals = await storage.getProposals();\n      res.json(proposals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch proposals\" });\n    }\n  });\n\n  app.get(\"/api/proposals/:id\", async (req, res) => {\n    try {\n      const proposal = await storage.getProposal(req.params.id);\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n      res.json(proposal);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch proposal\" });\n    }\n  });\n\n  // Get proposal for public viewing (client-facing)\n  app.get(\"/api/proposals/view/:proposalId\", async (req, res) => {\n    try {\n      const proposal = await storage.getProposal(req.params.proposalId);\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      // Return proposal data formatted for client viewing\n      res.json({\n        id: proposal.id,\n        eventName: proposal.eventName,\n        eventDate: proposal.eventDate,\n        eventTime: proposal.eventTime,\n        venue: proposal.venue,\n        space: proposal.space,\n        guestCount: proposal.guestCount,\n        totalAmount: proposal.totalAmount,\n        status: proposal.status,\n        expiryDate: proposal.expiryDate,\n        acceptedAt: proposal.acceptedAt,\n        declinedAt: proposal.declinedAt,\n        signature: proposal.signature,\n        // Sample event dates and company info for display\n        eventDates: [\n          {\n            date: proposal.eventDate || new Date().toISOString().split('T')[0],\n            startTime: proposal.eventTime?.split(' - ')[0] || \"6:00 PM\",\n            endTime: proposal.eventTime?.split(' - ')[1] || \"11:00 PM\",\n            venue: proposal.venue || \"Grand Ballroom\",\n            space: proposal.space || \"Main Hall\",\n            guestCount: proposal.guestCount || 150,\n            packageName: \"Premium Wedding Package\",\n            services: [\n              { name: \"Full Bar Service\", price: 1500 },\n              { name: \"DJ & Sound System\", price: 800 },\n              { name: \"Wedding Cake\", price: 500 },\n              { name: \"Floral Arrangements\", price: 750 }\n            ]\n          }\n        ],\n        companyInfo: {\n          name: \"Venuine Events\",\n          address: \"123 Celebration Drive, Event City, EC 12345\",\n          phone: \"(555) 123-4567\",\n          email: \"hello@venuine-events.com\"\n        }\n      });\n    } catch (error: any) {\n      console.error('Error fetching proposal for viewing:', error);\n      res.status(500).json({ message: \"Failed to fetch proposal\" });\n    }\n  });\n\n  app.post(\"/api/proposals\", async (req, res) => {\n    try {\n      const validatedData = insertProposalSchema.parse(req.body);\n      const proposal = await storage.createProposal(validatedData);\n      res.status(201).json(proposal);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/proposals/send\", async (req, res) => {\n    try {\n      const validatedData = insertProposalSchema.parse(req.body);\n      const proposal = await storage.createProposal({\n        ...validatedData,\n        status: \"sent\",\n        sentAt: new Date()\n      });\n\n      // Send email to customer via Gmail\n      try {\n        const customer = await storage.getCustomer(proposal.customerId);\n        if (customer?.email && proposal.content) {\n          if (gmailService.isConfigured()) {\n            await gmailService.sendProposal({\n              to: customer.email,\n              customerName: customer.name,\n              proposalContent: proposal.content,\n              totalAmount: proposal.totalAmount || \"0\",\n              validUntil: proposal.validUntil?.toISOString(),\n              companyName: 'Venuine Events'\n            });\n            console.log(`✅ Proposal email sent via Gmail to ${customer.email}`);\n          } else {\n            console.log(`❌ Gmail not configured - proposal email not sent to ${customer.email}`);\n          }\n        }\n      } catch (emailError) {\n        console.error(\"Failed to send proposal email via Gmail:\", emailError);\n      }\n\n      res.status(201).json(proposal);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // New email sending route for proposals\n  app.post(\"/api/proposals/send-email\", async (req, res) => {\n    try {\n      const { proposalId, customerId, emailData, eventData } = req.body;\n      \n      if (!proposalId || !customerId || !emailData) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      // Get customer information\n      const customer = await storage.getCustomer(customerId);\n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n\n      // Get proposal information\n      const proposal = await storage.getProposal(proposalId);\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      // Send email via Gmail\n      try {\n        if (!gmailService.isConfigured()) {\n          return res.status(400).json({ message: \"Gmail not configured. Please set up Gmail credentials in Settings > Integrations.\" });\n        }\n\n        await gmailService.sendEmail({\n          to: emailData.to,\n          subject: emailData.subject,\n          html: emailData.message || `\n            <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n              <h2>Event Proposal</h2>\n              <p>Please view your complete proposal at: ${emailData.proposalViewLink}</p>\n              <p>Best regards,<br>Venuine Events Team</p>\n            </div>\n          `,\n          text: `Event Proposal\\n\\nPlease view your complete proposal at: ${emailData.proposalViewLink}\\n\\nBest regards,\\nVenuine Events Team`\n        });\n\n        // Log communication in database with proposal tracking\n        const communicationData = {\n          customerId: customerId,\n          type: \"proposal\",\n          direction: \"outbound\",\n          subject: emailData.subject,\n          message: emailData.message || `Proposal email sent to ${emailData.to}. View link: ${emailData.proposalViewLink}`,\n          sentBy: \"system\",\n          status: \"sent\"\n        };\n\n        await storage.createCommunication(communicationData);\n\n        // Update proposal status to sent\n        await storage.updateProposal(proposalId, {\n          status: \"sent\",\n          sentAt: new Date()\n        });\n\n        // Create tentative booking if event data is provided\n        if (eventData && eventData.eventName && eventData.eventType && eventData.eventDate && \n            eventData.startTime && eventData.endTime && eventData.guestCount) {\n          try {\n            console.log('Creating tentative booking with event data:', eventData);\n            \n            // Ensure eventDate is a proper Date object\n            const eventDate = eventData.eventDate instanceof Date \n              ? eventData.eventDate \n              : new Date(eventData.eventDate);\n            \n            // Create tentative booking for the proposal\n            const tentativeBookingData = {\n              eventName: eventData.eventName,\n              eventType: eventData.eventType,\n              eventDate: eventDate,\n              startTime: eventData.startTime,\n              endTime: eventData.endTime,\n              guestCount: parseInt(eventData.guestCount) || 50,\n              customerId: customerId,\n              status: 'inquiry', // Start with inquiry status for proposals\n              venueId: eventData.venueId || null,\n              spaceId: eventData.spaceId || null,\n              totalAmount: eventData.totalAmount || '0',\n              notes: `Tentative booking created from proposal ${proposalId}`,\n              proposalStatus: 'sent',\n              proposalSentAt: new Date(),\n              packageId: eventData.packageId || null,\n              selectedServices: eventData.selectedServices || []\n            };\n\n            console.log('Tentative booking data:', tentativeBookingData);\n            \n            const createdBooking = await storage.createBooking(tentativeBookingData);\n            console.log(`✅ Tentative booking created for proposal ${proposalId}:`, createdBooking.id);\n            \n          } catch (bookingError) {\n            console.error('Failed to create tentative booking:', bookingError);\n            // Don't fail the email sending if booking creation fails\n          }\n        } else {\n          console.log('Event data incomplete, skipping tentative booking creation:', eventData);\n        }\n\n        res.json({\n          success: true,\n          messageId: `gmail-${Date.now()}`,\n          communicationLogged: true\n        });\n\n      } catch (emailError) {\n        console.error(\"Email sending failed:\", emailError);\n        \n        // Log failed communication\n        const communicationData = {\n          customerId: customerId,\n          type: \"email\",\n          direction: \"outbound\",\n          subject: emailData.subject,\n          message: `Failed to send proposal email: ${emailError instanceof Error ? emailError.message : 'Unknown error'}`,\n          sentBy: \"system\",\n          status: \"failed\"\n        };\n\n        await storage.createCommunication(communicationData);\n\n        res.status(500).json({\n          success: false,\n          message: \"Failed to send email\",\n          error: emailError instanceof Error ? emailError.message : 'Unknown error'\n        });\n      }\n\n    } catch (error) {\n      console.error(\"Proposal email sending error:\", error);\n      res.status(500).json({ message: \"Failed to process email request\" });\n    }\n  });\n\n  app.post(\"/api/proposals/:id/communications\", async (req, res) => {\n    try {\n      const validatedData = insertCommunicationSchema.parse(req.body);\n      const communication = await storage.createCommunication({\n        ...validatedData,\n        proposalId: req.params.id\n      });\n\n      // If it's an email, simulate sending\n      if (validatedData.type === \"email\" && validatedData.direction === \"outbound\") {\n        console.log(`Email sent for proposal ${req.params.id}: ${validatedData.subject}`);\n      }\n\n      res.status(201).json(communication);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/proposals/:id/communications\", async (req, res) => {\n    try {\n      const communications = await storage.getCommunicationsByProposal(req.params.id);\n      res.json(communications);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch communications\" });\n    }\n  });\n\n  app.post(\"/api/proposals/:id/process-deposit\", async (req, res) => {\n    try {\n      const proposal = await storage.getProposal(req.params.id);\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      // Update proposal to mark deposit as paid\n      const updatedProposal = await storage.updateProposal(req.params.id, {\n        depositPaid: true,\n        depositPaidAt: new Date(),\n        status: \"converted\"\n      });\n\n      // Create payment record\n      const payment = await storage.createPayment({\n        amount: proposal.depositAmount,\n        paymentType: \"deposit\",\n        paymentMethod: \"card\",\n        status: \"completed\",\n        processedAt: new Date()\n      });\n\n      res.json({ proposal: updatedProposal, payment });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/proposals/:id/mark-opened\", async (req, res) => {\n    try {\n      const proposal = await storage.updateProposal(req.params.id, {\n        emailOpened: true,\n        emailOpenedAt: new Date(),\n        status: \"viewed\"\n      });\n      res.json(proposal);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Client-facing proposal view endpoint\n  app.get(\"/api/proposals/view/:customerId\", async (req, res) => {\n    try {\n      const customerId = req.params.customerId;\n      \n      // Get customer information\n      const customer = await storage.getCustomer(customerId);\n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n\n      // Get the latest proposal for this customer\n      const proposals = await storage.getProposals();\n      const customerProposal = proposals.find(p => p.customerId === customerId && p.status !== 'declined');\n      \n      if (!customerProposal) {\n        return res.status(404).json({ message: \"No active proposal found for this customer\" });\n      }\n\n      // Get related booking data if available\n      let eventData = {};\n      try {\n        eventData = JSON.parse(customerProposal.content || '{}');\n      } catch {\n        eventData = {};\n      }\n\n      // Get venue and space information\n      const venues = await storage.getVenues();\n      const spaces = await storage.getSpaces();\n      \n      // Format response for the client proposal view\n      const proposalData = {\n        id: customerProposal.id,\n        eventName: customerProposal.title || 'Event Booking',\n        customerName: customer.name,\n        customerEmail: customer.email,\n        totalAmount: Number(customerProposal.totalAmount) || 0,\n        status: customerProposal.status,\n        proposalSentAt: customerProposal.sentAt?.toISOString() || customerProposal.createdAt.toISOString(),\n        validUntil: customerProposal.validUntil?.toISOString() || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n        eventDates: (eventData as any).eventDates || [{\n          date: new Date().toISOString(),\n          startTime: '18:00',\n          endTime: '23:00',\n          venue: 'Grand Ballroom',\n          space: 'Main Hall',\n          guestCount: 50\n        }],\n        companyInfo: {\n          name: 'Venuine Events',\n          address: '123 Event Street, City, State 12345',\n          phone: '(555) 123-4567',\n          email: 'hello@venuineevents.com'\n        }\n      };\n\n      res.json(proposalData);\n    } catch (error) {\n      console.error('Error fetching proposal view:', error);\n      res.status(500).json({ message: \"Failed to fetch proposal\" });\n    }\n  });\n\n  // Accept proposal endpoint\n  app.post(\"/api/proposals/:id/accept\", async (req, res) => {\n    try {\n      const { signature } = req.body;\n      \n      if (!signature || !signature.trim()) {\n        return res.status(400).json({ message: \"Digital signature is required\" });\n      }\n\n      const proposal = await storage.updateProposal(req.params.id, {\n        status: \"accepted\",\n        acceptedAt: new Date(),\n        signature: signature.trim()\n      });\n\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      res.json({ \n        success: true, \n        message: \"Proposal accepted successfully\",\n        proposal \n      });\n    } catch (error: any) {\n      console.error('Error accepting proposal:', error);\n      res.status(500).json({ message: \"Failed to accept proposal\" });\n    }\n  });\n\n  // Decline proposal endpoint\n  app.post(\"/api/proposals/:id/decline\", async (req, res) => {\n    try {\n      const proposal = await storage.updateProposal(req.params.id, {\n        status: \"declined\",\n        declinedAt: new Date()\n      });\n\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      res.json({ \n        success: true, \n        message: \"Proposal declined\",\n        proposal \n      });\n    } catch (error: any) {\n      console.error('Error declining proposal:', error);\n      res.status(500).json({ message: \"Failed to decline proposal\" });\n    }\n  });\n\n  // Payment notification endpoint for proposals\n  app.post(\"/api/proposals/:id/payment-completed\", async (req, res) => {\n    try {\n      const { paymentAmount, paymentType, paymentMethod, transactionId } = req.body;\n      \n      const proposal = await storage.getProposal(req.params.id);\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      // Update proposal with payment information\n      const updatedProposal = await storage.updateProposal(req.params.id, {\n        depositPaid: true,\n        depositPaidAt: new Date(),\n        status: \"converted\"\n      });\n\n      // Create payment record\n      const payment = await storage.createPayment({\n        amount: paymentAmount.toString(),\n        paymentType: paymentType || \"deposit\",\n        paymentMethod: paymentMethod || \"card\",\n        status: \"completed\",\n        processedAt: new Date(),\n        transactionId: transactionId\n      });\n\n      // Create communication record for payment notification\n      if (proposal.customerId) {\n        await storage.createCommunication({\n          customerId: proposal.customerId,\n          type: \"system\",\n          direction: \"inbound\",\n          subject: \"Payment Received\",\n          message: `Payment of $${paymentAmount} received for proposal \"${proposal.title}\". Payment method: ${paymentMethod}. Transaction ID: ${transactionId}`,\n          sentBy: \"system\",\n          status: \"completed\"\n        });\n      }\n\n      res.json({ \n        success: true, \n        message: \"Payment processed successfully\",\n        proposal: updatedProposal,\n        payment \n      });\n    } catch (error: any) {\n      console.error('Error processing payment:', error);\n      res.status(500).json({ message: \"Failed to process payment\" });\n    }\n  });\n\n  // Create payment intent for proposals (placeholder - requires Stripe secret key)\n  app.post(\"/api/proposals/:id/create-payment-intent\", async (req, res) => {\n    try {\n      const proposal = await storage.getProposal(req.params.id);\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      // This would integrate with Stripe when keys are provided\n      // For now, return a mock client secret for development\n      const clientSecret = `pi_mock_${Date.now()}_secret_mock`;\n      \n      res.json({ \n        clientSecret,\n        amount: Number(proposal.totalAmount) || 0\n      });\n    } catch (error: any) {\n      console.error('Error creating payment intent:', error);\n      res.status(500).json({ message: \"Failed to create payment intent\" });\n    }\n  });\n\n  app.put(\"/api/proposals/:id\", async (req, res) => {\n    try {\n      const proposal = await storage.updateProposal(req.params.id, req.body);\n      res.json(proposal);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/proposals/:id\", async (req, res) => {\n    try {\n      await storage.deleteProposal(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete proposal\" });\n    }\n  });\n\n  // Communications API\n  app.get(\"/api/communications/:bookingId\", async (req, res) => {\n    try {\n      const bookingId = req.params.bookingId;\n      const communications = await storage.getCommunications(bookingId);\n      \n      // Get booking to find customer\n      const booking = await storage.getBooking(bookingId);\n      if (!booking) {\n        return res.json(communications);\n      }\n\n      // Enhance proposal communications with status information\n      const enhancedCommunications = await Promise.all(\n        communications.map(async (comm: any) => {\n          if (comm.type === 'proposal' && booking.customerId) {\n            // Find related proposal for this customer\n            const proposals = await storage.getProposals();\n            const customerProposal = proposals.find(p => \n              p.customerId === booking.customerId && \n              p.status !== 'declined'\n            );\n            \n            if (customerProposal) {\n              return {\n                ...comm,\n                proposalViewed: customerProposal.emailOpened || customerProposal.status === 'viewed',\n                proposalStatus: customerProposal.status,\n                depositPaid: customerProposal.depositPaid,\n                signature: customerProposal.signature ? '✓ Signed' : null\n              };\n            }\n          }\n          return comm;\n        })\n      );\n\n      res.json(enhancedCommunications);\n    } catch (error) {\n      console.error('Communications fetch error:', error);\n      res.status(500).json({ message: \"Failed to fetch communications\" });\n    }\n  });\n\n  app.post(\"/api/communications\", async (req, res) => {\n    try {\n      const validatedCommunication = insertCommunicationSchema.parse(req.body);\n      const communication = await storage.createCommunication(validatedCommunication);\n      res.json(communication);\n    } catch (error) {\n      console.error('Communication creation error:', error);\n      res.status(400).json({ message: \"Invalid communication data\" });\n    }\n  });\n\n  // Settings API endpoints\n  app.get(\"/api/settings/:key?\", async (req, res) => {\n    try {\n      if (req.params.key) {\n        const setting = await storage.getSetting(req.params.key);\n        res.json(setting);\n      } else {\n        const settings = await storage.getSettings();\n        \n        // Convert settings array to nested object structure for frontend\n        const reconstructObject = (flatSettings: any[]) => {\n          const result: any = {};\n          \n          for (const setting of flatSettings) {\n            const keys = setting.key.split('.');\n            let current = result;\n            \n            for (let i = 0; i < keys.length - 1; i++) {\n              if (!current[keys[i]]) {\n                current[keys[i]] = {};\n              }\n              current = current[keys[i]];\n            }\n            \n            current[keys[keys.length - 1]] = setting.value;\n          }\n          \n          return result;\n        };\n        \n        const structuredSettings = reconstructObject(settings);\n        res.json(structuredSettings);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.post(\"/api/settings\", async (req, res) => {\n    try {\n      const validatedData = insertSettingsSchema.parse(req.body);\n      const setting = await storage.createSetting(validatedData);\n      res.status(201).json(setting);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/settings/:key\", async (req, res) => {\n    try {\n      const setting = await storage.updateSetting(req.params.key, req.body.value);\n      res.json(setting);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Batch update endpoint for settings\n  app.put(\"/api/settings\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const results = [];\n      \n      // Flatten the nested object into key-value pairs\n      const flattenObject = (obj: any, prefix = ''): Array<{key: string, value: any}> => {\n        const result: Array<{key: string, value: any}> = [];\n        \n        for (const [key, value] of Object.entries(obj)) {\n          const fullKey = prefix ? `${prefix}.${key}` : key;\n          \n          if (value && typeof value === 'object' && !Array.isArray(value)) {\n            result.push(...flattenObject(value, fullKey));\n          } else {\n            result.push({ key: fullKey, value });\n          }\n        }\n        \n        return result;\n      };\n      \n      const settingsUpdates = flattenObject(updates);\n      \n      // Update each setting\n      for (const update of settingsUpdates) {\n        const setting = await storage.updateSetting(update.key, update.value);\n        results.push(setting);\n      }\n      \n      res.json({ message: \"Settings updated successfully\", count: results.length });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Lead Management Routes\n  \n  // Campaign Sources\n  app.get(\"/api/campaign-sources\", async (req, res) => {\n    try {\n      const sources = await storage.getCampaignSources();\n      res.json(sources);\n    } catch (error) {\n      console.error(\"Error fetching campaign sources:\", error);\n      res.status(500).json({ message: \"Failed to fetch campaign sources\" });\n    }\n  });\n\n  app.post(\"/api/campaign-sources\", async (req, res) => {\n    try {\n      const validatedData = insertCampaignSourceSchema.parse(req.body);\n      const source = await storage.createCampaignSource(validatedData);\n      res.status(201).json(source);\n    } catch (error) {\n      console.error(\"Error creating campaign source:\", error);\n      res.status(500).json({ message: \"Failed to create campaign source\" });\n    }\n  });\n\n  // Tags\n  app.get(\"/api/tags\", async (req, res) => {\n    try {\n      const tags = await storage.getTags();\n      res.json(tags);\n    } catch (error) {\n      console.error(\"Error fetching tags:\", error);\n      res.status(500).json({ message: \"Failed to fetch tags\" });\n    }\n  });\n\n  app.post(\"/api/tags\", async (req, res) => {\n    try {\n      const validatedData = insertTagSchema.parse(req.body);\n      const tag = await storage.createTag(validatedData);\n      res.status(201).json(tag);\n    } catch (error) {\n      console.error(\"Error creating tag:\", error);\n      res.status(500).json({ message: \"Failed to create tag\" });\n    }\n  });\n\n  app.delete(\"/api/tags/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteTag(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Tag not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting tag:\", error);\n      res.status(500).json({ message: \"Failed to delete tag\" });\n    }\n  });\n\n  // Leads\n  app.get(\"/api/leads\", async (req, res) => {\n    try {\n      const { status, source, q } = req.query;\n      const filters = {\n        status: status as string,\n        source: source as string,\n        q: q as string\n      };\n      const leads = await storage.getLeads(filters);\n      res.json(leads);\n    } catch (error) {\n      console.error(\"Error fetching leads:\", error);\n      res.status(500).json({ message: \"Failed to fetch leads\" });\n    }\n  });\n\n  app.get(\"/api/leads/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const lead = await storage.getLead(id);\n      \n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n\n      // Get additional lead data\n      const activities = await storage.getLeadActivities(id);\n      const tags = await storage.getLeadTags(id);\n      const tasks = await storage.getLeadTasks();\n      const leadTasks = tasks.filter(task => task.leadId === id);\n\n      res.json({\n        ...lead,\n        activities,\n        tags,\n        tasks: leadTasks\n      });\n    } catch (error) {\n      console.error(\"Error fetching lead:\", error);\n      res.status(500).json({ message: \"Failed to fetch lead\" });\n    }\n  });\n\n  app.post(\"/api/leads\", async (req, res) => {\n    try {\n      const validatedData = insertLeadSchema.parse(req.body);\n      const lead = await storage.createLead(validatedData);\n\n      // Log initial activity\n      await storage.createLeadActivity({\n        leadId: lead.id,\n        type: \"NOTE\",\n        body: \"Lead submitted through quote form\",\n        meta: { \n          source: validatedData.utmSource || \"direct\",\n          medium: validatedData.utmMedium || \"website\"\n        }\n      });\n\n      // Create initial follow-up task\n      await storage.createLeadTask({\n        leadId: lead.id,\n        title: \"Contact new lead\",\n        description: `Follow up with ${lead.firstName} ${lead.lastName} about their ${lead.eventType} event`,\n        dueAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours from now\n        status: \"OPEN\"\n      });\n\n      res.status(201).json(lead);\n    } catch (error) {\n      console.error(\"Error creating lead:\", error);\n      res.status(500).json({ message: \"Failed to create lead\" });\n    }\n  });\n\n  app.patch(\"/api/leads/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      \n      const originalLead = await storage.getLead(id);\n      if (!originalLead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n\n      const updatedLead = await storage.updateLead(id, updateData);\n      \n      // Log status change if status was updated\n      if (updateData.status && updateData.status !== originalLead.status) {\n        await storage.createLeadActivity({\n          leadId: id,\n          type: \"STATUS_CHANGE\",\n          body: `Status changed from ${originalLead.status} to ${updateData.status}`,\n          meta: { \n            oldStatus: originalLead.status,\n            newStatus: updateData.status\n          }\n        });\n      }\n\n      res.json(updatedLead);\n    } catch (error) {\n      console.error(\"Error updating lead:\", error);\n      res.status(500).json({ message: \"Failed to update lead\" });\n    }\n  });\n\n  app.post(\"/api/leads/:id/convert\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const lead = await storage.getLead(id);\n      \n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n\n      // Create customer from lead data\n      const customerData = {\n        name: `${lead.firstName} ${lead.lastName}`,\n        email: lead.email,\n        phone: lead.phone || \"\",\n        notes: lead.notes || \"\",\n        eventType: lead.eventType,\n        status: \"ACTIVE\",\n        source: \"Lead Conversion\"\n      };\n\n      const customer = await storage.createCustomer(customerData);\n\n      // Update lead status to converted\n      await storage.updateLead(id, { status: \"WON\" });\n\n      // Log the conversion activity\n      await storage.createLeadActivity({\n        leadId: id,\n        type: \"CONVERTED\",\n        body: `Lead converted to customer: ${customer.name}`,\n        meta: { \n          customerId: customer.id,\n          customerName: customer.name\n        }\n      });\n\n      res.json({ customer, message: \"Lead converted to customer successfully\" });\n    } catch (error) {\n      console.error(\"Error converting lead:\", error);\n      res.status(500).json({ message: \"Failed to convert lead\" });\n    }\n  });\n\n  app.post(\"/api/leads/:id/send-proposal\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const lead = await storage.getLead(id);\n      \n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n\n      // First, check if lead has a customer, if not create one\n      let customer;\n      const existingCustomer = await storage.getCustomerByEmail(lead.email);\n      \n      if (existingCustomer) {\n        customer = existingCustomer;\n      } else {\n        // Create customer from lead data\n        const customerData = {\n          name: `${lead.firstName} ${lead.lastName}`,\n          email: lead.email,\n          phone: lead.phone || \"\",\n          notes: lead.notes || \"\",\n          eventType: lead.eventType,\n          status: \"ACTIVE\",\n          source: \"Lead Proposal\"\n        };\n        customer = await storage.createCustomer(customerData);\n      }\n\n      // Generate proposal content based on lead information\n      const proposalContent = `\n# Event Proposal for ${lead.firstName} ${lead.lastName}\n\n## Event Details\n- **Event Type**: ${lead.eventType}\n- **Expected Guests**: ${lead.guestCount || 'TBD'}\n- **Preferred Date**: ${lead.dateStart ? new Date(lead.dateStart).toLocaleDateString() : 'TBD'}\n- **Budget Range**: ${lead.budgetMin || lead.budgetMax ? \n  `$${lead.budgetMin || 0} - $${lead.budgetMax || 'Open'}` : 'To be discussed'}\n\n## Venue Recommendation\nWe have reviewed your requirements and believe our venue would be perfect for your ${lead.eventType} event.\n\n## Services Included\n- Event coordination\n- Setup and breakdown\n- Basic lighting and sound\n- Tables and seating\n\n## Next Steps\nPlease review this proposal and let us know if you have any questions. We'd be happy to schedule a venue tour at your convenience.\n\n${lead.notes ? `\\n## Additional Notes\\n${lead.notes}` : ''}\n      `;\n\n      // Create and send proposal\n      const proposalData = {\n        title: `${lead.eventType} Event Proposal`,\n        content: proposalContent.trim(),\n        customerId: customer.id,\n        status: \"sent\",\n        totalAmount: lead.budgetMax || 5000, // Default estimate if no budget provided\n        depositAmount: (lead.budgetMax || 5000) * 0.3, // 30% deposit\n        sentAt: new Date(),\n        validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // Valid for 30 days\n      };\n\n      const proposal = await storage.createProposal(proposalData);\n\n      // Update lead status to proposal sent and link the proposal\n      await storage.updateLead(id, { \n        status: \"PROPOSAL_SENT\",\n        proposalId: proposal.id \n      });\n\n      // Log the proposal sent activity\n      await storage.createLeadActivity({\n        leadId: id,\n        type: \"PROPOSAL_SENT\",\n        body: `Proposal sent: ${proposal.title}`,\n        meta: { \n          proposalId: proposal.id,\n          customerId: customer.id,\n          proposalTitle: proposal.title\n        }\n      });\n\n      res.json({ proposal, customer, message: \"Proposal sent successfully\" });\n    } catch (error) {\n      console.error(\"Error sending proposal:\", error);\n      res.status(500).json({ message: \"Failed to send proposal\" });\n    }\n  });\n\n  // Lead Activities\n  app.post(\"/api/leads/:id/activities\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertLeadActivitySchema.parse({\n        ...req.body,\n        leadId: id\n      });\n      \n      const activity = await storage.createLeadActivity(validatedData);\n      res.status(201).json(activity);\n    } catch (error) {\n      console.error(\"Error creating lead activity:\", error);\n      res.status(500).json({ message: \"Failed to create lead activity\" });\n    }\n  });\n\n  // Lead Tags\n  app.post(\"/api/leads/:id/tags\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { tagId } = req.body;\n      \n      await storage.addLeadTag(id, tagId);\n      res.status(201).json({ message: \"Tag added to lead\" });\n    } catch (error) {\n      console.error(\"Error adding tag to lead:\", error);\n      res.status(500).json({ message: \"Failed to add tag to lead\" });\n    }\n  });\n\n  app.delete(\"/api/leads/:id/tags/:tagId\", async (req, res) => {\n    try {\n      const { id, tagId } = req.params;\n      \n      await storage.removeLeadTag(id, tagId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error removing tag from lead:\", error);\n      res.status(500).json({ message: \"Failed to remove tag from lead\" });\n    }\n  });\n\n  // Lead Tasks\n  app.get(\"/api/lead-tasks\", async (req, res) => {\n    try {\n      const { assignee, due } = req.query;\n      const filters = {\n        assignee: assignee as string,\n        due: due as string\n      };\n      const tasks = await storage.getLeadTasks(filters);\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error fetching lead tasks:\", error);\n      res.status(500).json({ message: \"Failed to fetch lead tasks\" });\n    }\n  });\n\n  app.post(\"/api/lead-tasks\", async (req, res) => {\n    try {\n      const validatedData = insertLeadTaskSchema.parse(req.body);\n      const task = await storage.createLeadTask(validatedData);\n      res.status(201).json(task);\n    } catch (error) {\n      console.error(\"Error creating lead task:\", error);\n      res.status(500).json({ message: \"Failed to create lead task\" });\n    }\n  });\n\n  app.patch(\"/api/lead-tasks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      const updatedTask = await storage.updateLeadTask(id, updateData);\n      \n      if (!updatedTask) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n      \n      res.json(updatedTask);\n    } catch (error) {\n      console.error(\"Error updating lead task:\", error);\n      res.status(500).json({ message: \"Failed to update lead task\" });\n    }\n  });\n\n  // Tours\n  app.get(\"/api/tours\", async (req, res) => {\n    try {\n      const tours = await storage.getTours();\n      res.json(tours);\n    } catch (error) {\n      console.error(\"Error fetching tours:\", error);\n      res.status(500).json({ message: \"Failed to fetch tours\" });\n    }\n  });\n\n  app.post(\"/api/tours\", async (req, res) => {\n    try {\n      const validatedData = insertTourSchema.parse(req.body);\n      const tour = await storage.createTour(validatedData);\n\n      // Update lead status to TOUR_SCHEDULED\n      if (tour.leadId) {\n        await storage.updateLead(tour.leadId, { status: \"TOUR_SCHEDULED\" });\n        \n        // Log activity\n        await storage.createLeadActivity({\n          leadId: tour.leadId,\n          type: \"TOUR_SCHEDULED\",\n          body: `Venue tour scheduled for ${tour.scheduledAt.toLocaleString()}`,\n          meta: { \n            tourId: tour.id,\n            venueId: tour.venueId,\n            duration: tour.duration\n          }\n        });\n      }\n\n      res.status(201).json(tour);\n    } catch (error) {\n      console.error(\"Error creating tour:\", error);\n      res.status(500).json({ message: \"Failed to create tour\" });\n    }\n  });\n\n  app.patch(\"/api/tours/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      const updatedTour = await storage.updateTour(id, updateData);\n      \n      if (!updatedTour) {\n        return res.status(404).json({ message: \"Tour not found\" });\n      }\n      \n      res.json(updatedTour);\n    } catch (error) {\n      console.error(\"Error updating tour:\", error);\n      res.status(500).json({ message: \"Failed to update tour\" });\n    }\n  });\n\n  // Convert Lead to Customer\n  app.post(\"/api/leads/:id/convert\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const lead = await storage.getLead(id);\n      \n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n\n      // Create customer from lead data\n      const customer = await storage.createCustomer({\n        name: `${lead.firstName} ${lead.lastName}`,\n        email: lead.email,\n        phone: lead.phone || \"\",\n        company: \"\", // Could be added to lead model if needed\n        notes: lead.notes || \"\"\n      });\n\n      // Update lead with converted customer ID and status\n      await storage.updateLead(id, {\n        convertedCustomerId: customer.id,\n        status: \"WON\"\n      });\n\n      // Log conversion activity\n      await storage.createLeadActivity({\n        leadId: id,\n        type: \"STATUS_CHANGE\",\n        body: `Lead converted to customer: ${customer.name}`,\n        meta: { \n          customerId: customer.id,\n          conversionDate: new Date().toISOString()\n        }\n      });\n\n      res.json({\n        customer,\n        lead: await storage.getLead(id)\n      });\n    } catch (error) {\n      console.error(\"Error converting lead to customer:\", error);\n      res.status(500).json({ message: \"Failed to convert lead to customer\" });\n    }\n  });\n\n  // Notification System Endpoints\n  // Test notification settings\n  app.post(\"/api/notifications/test\", async (req, res) => {\n    try {\n      const { type, customerId } = req.body;\n      \n      if (!customerId) {\n        return res.status(400).json({ message: \"Customer ID required\" });\n      }\n\n      const customer = await storage.getCustomer(customerId);\n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n\n      if (!customer.email) {\n        return res.status(400).json({ message: \"Customer email not found\" });\n      }\n\n      // Get notification preferences from settings\n      const settings = await storage.getSettings();\n      const notificationPrefs = {\n        emailNotifications: settings.notifications?.emailNotifications ?? true,\n        pushNotifications: settings.notifications?.pushNotifications ?? false,\n        bookingConfirmations: settings.notifications?.bookingConfirmations ?? true,\n        paymentReminders: settings.notifications?.paymentReminders ?? true,\n        maintenanceAlerts: settings.notifications?.maintenanceAlerts ?? true\n      };\n\n      if (!notificationPrefs.emailNotifications) {\n        return res.status(400).json({ \n          message: \"Email notifications are disabled in settings\",\n          settings: notificationPrefs\n        });\n      }\n\n      const notificationService = new NotificationService(gmailService, notificationPrefs);\n\n      switch (type) {\n        case 'booking':\n          if (!notificationPrefs.bookingConfirmations) {\n            return res.status(400).json({ message: \"Booking confirmations are disabled\" });\n          }\n          \n          // Create a test booking for notification\n          const testBooking = {\n            id: 'test-booking',\n            eventName: 'Test Event Booking',\n            eventType: 'corporate',\n            eventDate: new Date(),\n            startTime: '18:00',\n            endTime: '23:00',\n            guestCount: 50,\n            venueId: 'test-venue',\n            customerId: customer.id,\n            status: 'confirmed',\n            totalAmount: '2500.00',\n            createdAt: new Date()\n          } as any;\n\n          const bookingResult = await notificationService.sendBookingConfirmation(testBooking, customer);\n          res.json({ \n            success: bookingResult, \n            message: bookingResult ? 'Test booking confirmation sent' : 'Failed to send booking confirmation',\n            type: 'booking',\n            customer: { name: customer.name, email: customer.email }\n          });\n          break;\n\n        case 'payment':\n          if (!notificationPrefs.paymentReminders) {\n            return res.status(400).json({ message: \"Payment reminders are disabled\" });\n          }\n\n          const testBookingForPayment = {\n            id: 'test-payment-booking',\n            eventName: 'Test Payment Event',\n            eventType: 'wedding',\n            eventDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 1 week from now\n            startTime: '16:00',\n            endTime: '22:00',\n            guestCount: 100,\n            venueId: 'test-venue',\n            customerId: customer.id,\n            status: 'confirmed',\n            totalAmount: '5000.00',\n            createdAt: new Date()\n          } as any;\n\n          const paymentResult = await notificationService.sendPaymentReminder(testBookingForPayment, customer, 1500);\n          res.json({ \n            success: paymentResult, \n            message: paymentResult ? 'Test payment reminder sent' : 'Failed to send payment reminder',\n            type: 'payment',\n            customer: { name: customer.name, email: customer.email }\n          });\n          break;\n\n        case 'maintenance':\n          if (!notificationPrefs.maintenanceAlerts) {\n            return res.status(400).json({ message: \"Maintenance alerts are disabled\" });\n          }\n\n          const maintenanceResult = await notificationService.sendMaintenanceAlert(\n            'System maintenance scheduled for this weekend. Please backup your data and expect brief downtime between 2-4 AM on Sunday.',\n            [customer.email]\n          );\n          res.json({ \n            success: maintenanceResult, \n            message: maintenanceResult ? 'Test maintenance alert sent' : 'Failed to send maintenance alert',\n            type: 'maintenance',\n            customer: { name: customer.name, email: customer.email }\n          });\n          break;\n\n        default:\n          return res.status(400).json({ \n            message: \"Invalid notification type. Use: booking, payment, or maintenance\" \n          });\n      }\n    } catch (error: any) {\n      console.error('Notification test error:', error);\n      res.status(500).json({ \n        message: \"Failed to send test notification\",\n        error: error.message,\n        details: error.stack\n      });\n    }\n  });\n\n  // Send payment reminders for overdue bookings\n  app.post(\"/api/notifications/payment-reminders\", async (req, res) => {\n    try {\n      const settings = await storage.getSettings();\n      const notificationPrefs = {\n        emailNotifications: settings.notifications?.emailNotifications ?? true,\n        pushNotifications: settings.notifications?.pushNotifications ?? false,\n        bookingConfirmations: settings.notifications?.bookingConfirmations ?? true,\n        paymentReminders: settings.notifications?.paymentReminders ?? true,\n        maintenanceAlerts: settings.notifications?.maintenanceAlerts ?? true\n      };\n\n      if (!notificationPrefs.emailNotifications || !notificationPrefs.paymentReminders) {\n        return res.status(400).json({ \n          message: \"Payment reminders are disabled in settings\",\n          settings: notificationPrefs\n        });\n      }\n\n      const notificationService = new NotificationService(gmailService, notificationPrefs);\n      const bookings = await storage.getBookings();\n      const customers = await storage.getCustomers();\n      \n      // Find bookings with outstanding payments (where deposit is not paid)\n      const overdueBookings = bookings.filter(booking => \n        booking.status === 'confirmed' && \n        !booking.depositPaid &&\n        booking.customerId &&\n        booking.totalAmount\n      );\n\n      const results = [];\n      for (const booking of overdueBookings) {\n        const customer = customers.find(c => c.id === booking.customerId);\n        if (customer && customer.email) {\n          const amountDue = booking.depositAmount ? parseFloat(booking.depositAmount) : parseFloat(booking.totalAmount!) * 0.3;\n          \n          try {\n            const success = await notificationService.sendPaymentReminder(booking, customer, amountDue);\n            results.push({\n              bookingId: booking.id,\n              customerEmail: customer.email,\n              success,\n              amountDue\n            });\n          } catch (error: any) {\n            results.push({\n              bookingId: booking.id,\n              customerEmail: customer.email,\n              success: false,\n              error: error.message\n            });\n          }\n        }\n      }\n\n      res.json({\n        message: `Processed ${results.length} payment reminders`,\n        results,\n        settings: notificationPrefs\n      });\n    } catch (error: any) {\n      console.error('Payment reminders error:', error);\n      res.status(500).json({ message: \"Failed to send payment reminders\" });\n    }\n  });\n\n  // Get notification stats\n  app.get(\"/api/notifications/stats\", async (req, res) => {\n    try {\n      const settings = await storage.getSettings();\n      const notificationPrefs = {\n        emailNotifications: settings.notifications?.emailNotifications ?? true,\n        pushNotifications: settings.notifications?.pushNotifications ?? false,\n        bookingConfirmations: settings.notifications?.bookingConfirmations ?? true,\n        paymentReminders: settings.notifications?.paymentReminders ?? true,\n        maintenanceAlerts: settings.notifications?.maintenanceAlerts ?? true\n      };\n\n      const bookings = await storage.getBookings();\n      const confirmedBookings = bookings.filter(b => b.status === 'confirmed');\n      const overduePayments = bookings.filter(b => \n        b.status === 'confirmed' && \n        !b.depositPaid &&\n        b.totalAmount\n      );\n\n      res.json({\n        notificationSettings: notificationPrefs,\n        stats: {\n          totalBookings: bookings.length,\n          confirmedBookings: confirmedBookings.length,\n          overduePayments: overduePayments.length,\n          gmailConfigured: gmailService ? true : false\n        }\n      });\n    } catch (error: any) {\n      console.error('Notification stats error:', error);\n      res.status(500).json({ message: \"Failed to get notification stats\" });\n    }\n  });\n\n  // ===== PUBLIC API ENDPOINTS =====\n  // Public plans endpoint (for pricing page) - uses actual feature packages from super admin\n  app.get(\"/api/public/plans\", async (req, res) => {\n    try {\n      // Get active feature packages from database\n      const result = await db.execute(sql`\n        SELECT \n          id, name, slug, description, \n          price_monthly, price_yearly, \n          limits, features, billing_modes, \n          trial_days, status\n        FROM feature_packages \n        WHERE status = 'active'\n        ORDER BY price_monthly ASC NULLS LAST\n      `);\n      \n      const plans = result.rows.map((pkg: any) => {\n        const limits = typeof pkg.limits === 'string' ? JSON.parse(pkg.limits) : pkg.limits;\n        const features = typeof pkg.features === 'string' ? JSON.parse(pkg.features) : pkg.features;\n        const billingModes = typeof pkg.billing_modes === 'string' ? JSON.parse(pkg.billing_modes) : pkg.billing_modes;\n        \n        // Convert feature flags to human readable feature list\n        const featureList = [];\n        const featureMap = {\n          'dashboard-analytics': 'Smart booking management',\n          'event-management': 'Event & Booking Management',\n          'customer-management': 'Customer database',\n          'lead-management': 'Lead management & scoring',\n          'proposal-system': 'Professional proposals',\n          'stripe-payments': 'Stripe payment processing',\n          'venue-management': 'Multi-venue management',\n          'service-packages': 'Service & package management',\n          'gmail-integration': 'Gmail integration',\n          'task-management': 'Task & team management',\n          'ai-voice-booking': 'AI voice-to-text booking',\n          'ai-scheduling': 'Smart AI scheduling',\n          'ai-email-replies': 'AI email auto-replies',\n          'ai-lead-scoring': 'AI lead priority scoring',\n          'ai-insights': 'AI-powered insights',\n          'ai-proposal-generation': 'AI proposal content generation',\n          'mobile-responsive': 'Mobile-responsive interface',\n          'audit-logs': 'Audit logging & security',\n          'custom-branding': 'Custom branding & themes',\n          'priority-support': 'Priority customer support',\n          'api-access': 'API access',\n          'advanced-reporting': 'Advanced reports & export',\n          'calendar-integration': 'Calendar integration',\n          'floor-plan-designer': '2D floor plan designer'\n        };\n        \n        Object.entries(features || {}).forEach(([key, enabled]) => {\n          if (enabled && featureMap[key]) {\n            featureList.push(featureMap[key]);\n          }\n        });\n\n        // Add basic features for empty lists\n        if (featureList.length === 0) {\n          featureList.push('Basic venue management', 'Email support', 'Mobile access');\n        }\n        \n        return {\n          id: pkg.id,\n          name: pkg.name,\n          slug: pkg.slug,\n          description: pkg.description || `Perfect for ${pkg.name.toLowerCase()} venue management needs.`,\n          billingModes: billingModes || {\n            monthly: { amount: Math.round((pkg.price_monthly || 29.99) * 100), currency: \"USD\" },\n            yearly: { amount: Math.round((pkg.price_yearly || 299.90) * 100), currency: \"USD\" }\n          },\n          limits: {\n            venues: limits?.maxVenues || 1,\n            staff: limits?.maxUsers || 5,\n            monthlyBookings: limits?.maxBookings || 100,\n            maxSpacesPerVenue: limits?.maxSpacesPerVenue || 10\n          },\n          flags: {\n            stripe: features?.['stripe-payments'] || false,\n            analytics: features?.['dashboard-analytics'] || false,\n            customBranding: features?.['custom-branding'] || false,\n            prioritySupport: features?.['priority-support'] || false\n          },\n          trialDays: pkg.trial_days || 14,\n          features: featureList\n        };\n      });\n      \n      res.json(plans);\n    } catch (error) {\n      console.error(\"Error fetching plans:\", error);\n      res.status(500).json({ message: \"Failed to fetch plans\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":145830},"shared/feature-packages.ts":{"content":"// Pre-defined VENUIN feature packages with comprehensive feature sets\n\nexport const VENUIN_FEATURES = {\n  'dashboard-analytics': 'Dashboard & Analytics',\n  'event-management': 'Event & Booking Management', \n  'customer-management': 'Customer Management',\n  'lead-management': 'Lead Management & Scoring',\n  'proposal-system': 'Proposal Generation & Tracking',\n  'stripe-payments': 'Payment Processing (Stripe Connect)',\n  'venue-management': 'Multi-Venue Management',\n  'service-packages': 'Service & Package Management',\n  'gmail-integration': 'Gmail Integration',\n  'task-management': 'Task & Team Management',\n  'ai-voice-booking': 'AI Voice-to-Text Booking',\n  'ai-scheduling': 'Smart AI Scheduling',\n  'ai-email-replies': 'AI Email Auto-Replies',\n  'ai-lead-scoring': 'AI Lead Priority Scoring',\n  'ai-insights': 'AI-Powered Insights',\n  'ai-proposal-generation': 'AI Proposal Content Generation',\n  'mobile-responsive': 'Mobile-Responsive Interface',\n  'audit-logs': 'Audit Logging & Security',\n  'custom-branding': 'Custom Branding & Themes',\n  'priority-support': 'Priority Customer Support',\n  'api-access': 'API Access',\n  'advanced-reporting': 'Advanced Reports & Export',\n  'calendar-integration': 'Calendar Integration',\n  'floor-plan-designer': '2D Floor Plan Designer'\n};\n\nexport interface FeaturePackage {\n  id: string;\n  name: string;\n  slug: string;\n  description: string;\n  priceMonthly: number;\n  priceYearly: number;\n  features: Record<string, boolean>;\n  limits: {\n    maxUsers: number;\n    maxVenues: number;\n    maxSpacesPerVenue: number;\n  };\n  popular?: boolean;\n  status: 'active' | 'draft' | 'archived';\n}\n\n// Predefined feature packages for VENUIN\nexport const DEFAULT_FEATURE_PACKAGES: FeaturePackage[] = [\n  {\n    id: 'starter',\n    name: 'Starter',\n    slug: 'starter',\n    description: 'Perfect for small venues and event spaces getting started with professional management.',\n    priceMonthly: 29,\n    priceYearly: 299,\n    features: {\n      'dashboard-analytics': true,\n      'event-management': true,\n      'customer-management': true,\n      'venue-management': true,\n      'mobile-responsive': true,\n      'gmail-integration': true\n    },\n    limits: {\n      maxUsers: 3,\n      maxVenues: 1,\n      maxSpacesPerVenue: 5\n    },\n    status: 'active'\n  },\n  {\n    id: 'professional',\n    name: 'Professional',\n    slug: 'professional',\n    description: 'Complete venue management solution with lead generation, proposals, and basic AI features.',\n    priceMonthly: 79,\n    priceYearly: 799,\n    popular: true,\n    features: {\n      'dashboard-analytics': true,\n      'event-management': true,\n      'customer-management': true,\n      'lead-management': true,\n      'proposal-system': true,\n      'venue-management': true,\n      'service-packages': true,\n      'task-management': true,\n      'mobile-responsive': true,\n      'gmail-integration': true,\n      'calendar-integration': true,\n      'advanced-reporting': true,\n      'ai-lead-scoring': true,\n      'ai-insights': true\n    },\n    limits: {\n      maxUsers: 10,\n      maxVenues: 3,\n      maxSpacesPerVenue: 15\n    },\n    status: 'active'\n  },\n  {\n    id: 'enterprise',\n    name: 'Enterprise',\n    slug: 'enterprise',\n    description: 'Full-featured platform with payments, all AI capabilities, and unlimited everything.',\n    priceMonthly: 149,\n    priceYearly: 1499,\n    features: {\n      'dashboard-analytics': true,\n      'event-management': true,\n      'customer-management': true,\n      'lead-management': true,\n      'proposal-system': true,\n      'stripe-payments': true,\n      'venue-management': true,\n      'service-packages': true,\n      'gmail-integration': true,\n      'task-management': true,\n      'ai-voice-booking': true,\n      'ai-scheduling': true,\n      'ai-email-replies': true,\n      'ai-lead-scoring': true,\n      'ai-insights': true,\n      'ai-proposal-generation': true,\n      'mobile-responsive': true,\n      'audit-logs': true,\n      'custom-branding': true,\n      'priority-support': true,\n      'api-access': true,\n      'advanced-reporting': true,\n      'calendar-integration': true,\n      'floor-plan-designer': true\n    },\n    limits: {\n      maxUsers: -1, // unlimited\n      maxVenues: -1, // unlimited\n      maxSpacesPerVenue: -1 // unlimited\n    },\n    status: 'active'\n  }\n];\n\n// Helper function to check if a tenant has access to a specific feature\nexport function hasFeatureAccess(tenantFeatures: Record<string, boolean>, featureKey: string): boolean {\n  return tenantFeatures?.[featureKey] === true;\n}\n\n// Helper function to get feature-limited value\nexport function getFeatureLimit(tenantLimits: any, limitKey: string): number {\n  const limit = tenantLimits?.[limitKey];\n  return limit === -1 ? Infinity : (limit || 0);\n}","size_bytes":4752},"server/middleware/tenant.ts":{"content":"import type { Request, Response, NextFunction } from 'express';\nimport { storage } from '../storage';\n\nexport interface TenantRequest extends Request {\n  tenant?: {\n    id: string;\n    name: string;\n    subdomain: string;\n    status: string;\n    subscriptionPackageId: string;\n  };\n}\n\n// Removed subdomain functionality - using path-based routing only\n\n// Extract tenant from path (e.g., /api/tenant/testvenue/dashboard)\nexport function extractTenantFromPath(path: string): string | null {\n  const pathMatch = path.match(/^\\/api\\/tenant\\/([^\\/]+)/);\n  return pathMatch ? pathMatch[1] : null;\n}\n\n// Middleware to resolve tenant from path only\nexport async function resolveTenant(req: TenantRequest, res: Response, next: NextFunction) {\n  try {\n    // Extract tenant from path (/api/tenant/slug/...)\n    const tenantSlug = extractTenantFromPath(req.path);\n    \n    if (tenantSlug) {\n      // Find tenant by slug\n      const tenants = Array.from(storage.tenants.values());\n      const tenant = tenants.find(t => t.subdomain === tenantSlug); // Keep using subdomain field as tenant slug\n      \n      if (tenant) {\n        req.tenant = {\n          id: tenant.id,\n          name: tenant.name,\n          subdomain: tenant.subdomain,\n          status: tenant.status,\n          subscriptionPackageId: tenant.subscriptionPackageId\n        };\n      }\n    }\n    \n    next();\n  } catch (error) {\n    console.error('Error resolving tenant:', error);\n    next();\n  }\n}\n\n// Middleware to require valid tenant\nexport function requireTenant(req: TenantRequest, res: Response, next: NextFunction) {\n  if (!req.tenant) {\n    return res.status(404).json({ \n      message: 'Tenant not found. Please check your tenant path.',\n      code: 'TENANT_NOT_FOUND'\n    });\n  }\n  \n  // Check if tenant is active\n  if (req.tenant.status === 'suspended') {\n    return res.status(403).json({ \n      message: 'This account has been suspended. Please contact support.',\n      code: 'TENANT_SUSPENDED'\n    });\n  }\n  \n  if (req.tenant.status === 'inactive') {\n    return res.status(403).json({ \n      message: 'This account is inactive. Please contact support.',\n      code: 'TENANT_INACTIVE'\n    });\n  }\n  \n  next();\n}\n\n// Middleware to check trial status\nexport function checkTrialStatus(req: TenantRequest, res: Response, next: NextFunction) {\n  if (!req.tenant) {\n    return next();\n  }\n  \n  const tenant = storage.tenants.get(req.tenant.id);\n  if (!tenant) {\n    return next();\n  }\n  \n  // Check if trial has expired\n  if (tenant.status === 'trial' && tenant.trialEndsAt && new Date() > tenant.trialEndsAt) {\n    return res.status(402).json({ \n      message: 'Your trial has expired. Please set up billing to continue.',\n      code: 'TRIAL_EXPIRED',\n      trialEndsAt: tenant.trialEndsAt\n    });\n  }\n  \n  next();\n}\n\n// Middleware to filter data by tenant\nexport function filterByTenant(req: TenantRequest, res: Response, next: NextFunction) {\n  if (req.tenant) {\n    // Add tenant context to request for data filtering\n    req.query.tenantId = req.tenant.id;\n  }\n  \n  next();\n}","size_bytes":3043},"client/src/components/simple-tax-settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Plus, Trash2, Edit, CreditCard } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { TaxSetting, InsertTaxSetting } from \"@shared/schema\";\n\ninterface TaxFormData {\n  name: string;\n  rate: string;\n  isActive: boolean;\n  isDefault: boolean;\n}\n\nconst defaultForm: TaxFormData = {\n  name: \"\",\n  rate: \"\",\n  isActive: true,\n  isDefault: false\n};\n\nexport function SimpleTaxSettings() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingItem, setEditingItem] = useState<TaxSetting | null>(null);\n  const [formData, setFormData] = useState<TaxFormData>(defaultForm);\n\n  // Fetch tax settings\n  const { data: taxSettings = [], isLoading } = useQuery({\n    queryKey: [\"/api/tax-settings\"],\n  });\n\n  const taxSettingsData = taxSettings as TaxSetting[];\n\n  // Create tax setting mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertTaxSetting) => {\n      return apiRequest(\"POST\", `/api/tax-settings`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tax-settings\"] });\n      setIsAddDialogOpen(false);\n      setFormData(defaultForm);\n      setEditingItem(null);\n      toast({\n        title: \"Success\",\n        description: \"Tax setting created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create tax setting\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update tax setting mutation\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertTaxSetting> }) => {\n      return apiRequest(\"PATCH\", `/api/tax-settings/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tax-settings\"] });\n      setEditingItem(null);\n      setFormData(defaultForm);\n      setIsAddDialogOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"Tax setting updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update tax setting\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete tax setting mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/tax-settings/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tax-settings\"] });\n      toast({\n        title: \"Success\",\n        description: \"Tax setting deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete tax setting\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = () => {\n    if (!formData.name || !formData.rate) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (isNaN(parseFloat(formData.rate))) {\n      toast({\n        title: \"Error\",\n        description: \"Rate must be a valid number\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const data: InsertTaxSetting = {\n      name: formData.name,\n      rate: formData.rate,\n      isActive: formData.isActive,\n      isDefault: formData.isDefault,\n    };\n\n    if (editingItem) {\n      updateMutation.mutate({ id: editingItem.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (item: TaxSetting) => {\n    setEditingItem(item);\n    setFormData({\n      name: item.name,\n      rate: item.rate,\n      isActive: item.isActive || true,\n      isDefault: item.isDefault || false,\n    });\n    setIsAddDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this tax setting?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const resetForm = () => {\n    setFormData(defaultForm);\n    setEditingItem(null);\n  };\n\n  if (isLoading) {\n    return <div>Loading tax settings...</div>;\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <CreditCard className=\"w-5 h-5 text-emerald-600\" />\n            Tax Settings\n          </CardTitle>\n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button onClick={resetForm} className=\"bg-emerald-600 hover:bg-emerald-700\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Tax Setting\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingItem ? \"Edit\" : \"Add\"} Tax Setting\n                </DialogTitle>\n              </DialogHeader>\n              \n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">Name *</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                    placeholder=\"e.g., Sales Tax, VAT\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"rate\">Rate *</Label>\n                  <Input\n                    id=\"rate\"\n                    value={formData.rate}\n                    onChange={(e) => setFormData({ ...formData, rate: e.target.value })}\n                    placeholder=\"e.g., 8.25\"\n                    type=\"number\"\n                    step=\"0.01\"\n                  />\n                  <p className=\"text-xs text-slate-500\">\n                    Enter the rate as a percentage (e.g., 8.25 for 8.25%)\n                  </p>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"isActive\">Active</Label>\n                  <Switch\n                    id=\"isActive\"\n                    checked={formData.isActive}\n                    onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"isDefault\">Default Tax</Label>\n                  <Switch\n                    id=\"isDefault\"\n                    checked={formData.isDefault}\n                    onCheckedChange={(checked) => setFormData({ ...formData, isDefault: checked })}\n                  />\n                </div>\n\n                <div className=\"flex gap-2 pt-4\">\n                  <Button\n                    onClick={handleSubmit}\n                    disabled={createMutation.isPending || updateMutation.isPending}\n                    className=\"flex-1\"\n                  >\n                    {editingItem ? \"Update\" : \"Create\"}\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => setIsAddDialogOpen(false)}>\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        {taxSettingsData.length === 0 ? (\n          <p className=\"text-slate-500 text-center py-8\">\n            No tax settings configured yet. Add your first tax setting to get started.\n          </p>\n        ) : (\n          <div className=\"space-y-3\">\n            {taxSettingsData.map((tax) => (\n              <div\n                key={tax.id}\n                className=\"flex items-center justify-between p-4 border rounded-lg bg-slate-50\"\n              >\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2\">\n                    <h4 className=\"font-medium\">{tax.name}</h4>\n                    {tax.isDefault && (\n                      <span className=\"px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded\">\n                        Default\n                      </span>\n                    )}\n                    {!tax.isActive && (\n                      <span className=\"px-2 py-1 text-xs bg-gray-100 text-gray-800 rounded\">\n                        Inactive\n                      </span>\n                    )}\n                  </div>\n                  <p className=\"text-sm text-slate-600 mt-1\">\n                    Rate: {tax.rate}%\n                  </p>\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => handleEdit(tax)}\n                  >\n                    <Edit className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => handleDelete(tax.id)}\n                    disabled={deleteMutation.isPending}\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":10032},"client/src/pages/SuperAdminDirectAccess.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { Shield, ArrowRight } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginData = z.infer<typeof loginSchema>;\n\nexport default function SuperAdminDirectAccess() {\n  const [, setLocation] = useLocation();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  const form = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"yonasfasil.sl@gmail.com\", // Pre-filled for convenience\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginData) => {\n    setIsSubmitting(true);\n    \n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n        credentials: 'include',\n      });\n\n      const result = await response.json();\n\n      if (response.ok && result.user?.isSuperAdmin) {\n        toast({\n          title: \"Super Admin Access Granted\",\n          description: \"Welcome to the platform administration panel\",\n        });\n        setLocation('/admin');\n      } else if (response.ok && !result.user?.isSuperAdmin) {\n        toast({\n          title: \"Access Denied\",\n          description: \"This account does not have super admin privileges\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Login Failed\",\n          description: result.message || \"Invalid credentials\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error('Super admin login error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Login failed. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-red-50 to-orange-50 p-4\">\n      <Card className=\"w-full max-w-md border-red-200\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <Shield className=\"h-8 w-8 text-red-600\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-red-700\">Super Admin Access</CardTitle>\n          <CardDescription>\n            Platform Administration Panel\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Super Admin Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"email\"\n                        disabled={isSubmitting}\n                        className=\"bg-red-50/50\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"password\"\n                        disabled={isSubmitting}\n                        className=\"bg-red-50/50\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button \n                type=\"submit\" \n                className=\"w-full bg-red-600 hover:bg-red-700\"\n                disabled={isSubmitting}\n              >\n                {isSubmitting ? (\n                  \"Authenticating...\"\n                ) : (\n                  <>\n                    Access Admin Panel\n                    <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </>\n                )}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n            <div className=\"flex items-start\">\n              <Shield className=\"h-4 w-4 text-yellow-600 mt-0.5 mr-2\" />\n              <div className=\"text-sm text-yellow-700\">\n                <p className=\"font-medium\">Super Admin Panel Includes:</p>\n                <ul className=\"mt-2 list-disc list-inside space-y-1\">\n                  <li>User Management & Analytics</li>\n                  <li>Tenant Oversight & Control</li>\n                  <li>Feature Package Management</li>\n                  <li>Platform Analytics & Reports</li>\n                  <li>User Impersonation for Support</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5689},"client/src/components/feature-gating/FeatureButton.tsx":{"content":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { useTenantFeatures } from '@/hooks/useTenantFeatures';\nimport { Lock } from 'lucide-react';\nimport { toast } from '@/hooks/use-toast';\n\ninterface FeatureButtonProps extends React.ComponentProps<typeof Button> {\n  feature: string;\n  children: React.ReactNode;\n  upgradeMessage?: string;\n}\n\nexport function FeatureButton({ \n  feature, \n  children, \n  onClick,\n  upgradeMessage,\n  ...props \n}: FeatureButtonProps) {\n  const { hasFeature, tenantInfo } = useTenantFeatures();\n\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!hasFeature(feature)) {\n      e.preventDefault();\n      toast({\n        title: \"Upgrade Required\",\n        description: upgradeMessage || `This feature requires a higher plan. Upgrade your ${tenantInfo?.planName || 'current'} plan to continue.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (onClick) {\n      onClick(e);\n    }\n  };\n\n  return (\n    <Button \n      {...props}\n      onClick={handleClick}\n      disabled={!hasFeature(feature) || props.disabled}\n      className={`${props.className} ${!hasFeature(feature) ? 'opacity-75' : ''}`}\n    >\n      {!hasFeature(feature) && <Lock className=\"w-4 h-4 mr-2\" />}\n      {children}\n    </Button>\n  );\n}","size_bytes":1311},"client/src/components/feature-gating/FeatureGate.tsx":{"content":"import React from 'react';\nimport { useTenantFeatures } from '@/hooks/useTenantFeatures';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Lock, Crown, Zap } from 'lucide-react';\n\ninterface FeatureGateProps {\n  feature: string;\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n  showUpgradePrompt?: boolean;\n  upgradeMessage?: string;\n}\n\nexport function FeatureGate({ \n  feature, \n  children, \n  fallback, \n  showUpgradePrompt = true,\n  upgradeMessage\n}: FeatureGateProps) {\n  const { hasFeature, tenantInfo, isLoading } = useTenantFeatures();\n\n  if (isLoading) {\n    return (\n      <div className=\"h-8 bg-gray-200 animate-pulse rounded\"></div>\n    );\n  }\n\n  if (hasFeature(feature)) {\n    return <>{children}</>;\n  }\n\n  if (fallback) {\n    return <>{fallback}</>;\n  }\n\n  if (!showUpgradePrompt) {\n    return null;\n  }\n\n  return (\n    <FeatureUpgradePrompt \n      feature={feature} \n      message={upgradeMessage}\n      currentPlan={tenantInfo?.planName || 'Free'}\n    />\n  );\n}\n\ninterface FeatureUpgradePromptProps {\n  feature: string;\n  message?: string;\n  currentPlan: string;\n}\n\nfunction FeatureUpgradePrompt({ feature, message, currentPlan }: FeatureUpgradePromptProps) {\n  const featureNames: Record<string, string> = {\n    'venue-management': 'Venue Management',\n    'customer-management': 'Customer Management', \n    'lead-management': 'Lead Management',\n    'proposal-system': 'Proposal System',\n    'task-management': 'Task Management',\n    'ai-features': 'AI Features',\n    'stripe-payments': 'Payment Processing',\n    'gmail-integration': 'Gmail Integration',\n    'reporting-analytics': 'Advanced Reporting',\n    'custom-branding': 'Custom Branding',\n    'api-access': 'API Access',\n    'priority-support': 'Priority Support'\n  };\n\n  const featureName = featureNames[feature] || feature;\n\n  const handleUpgrade = () => {\n    // Navigate to billing/upgrade page\n    window.location.href = '/billing';\n  };\n\n  return (\n    <Card className=\"border-amber-200 bg-amber-50\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center gap-2 text-amber-800\">\n          <Lock className=\"w-5 h-5\" />\n          {featureName} Upgrade Required\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <p className=\"text-sm text-amber-700 mb-4\">\n          {message || `${featureName} is not available in your ${currentPlan} plan. Upgrade to access this feature.`}\n        </p>\n        <div className=\"flex gap-2\">\n          <Button \n            onClick={handleUpgrade}\n            className=\"bg-amber-600 hover:bg-amber-700 text-white\"\n            size=\"sm\"\n          >\n            <Crown className=\"w-4 h-4 mr-2\" />\n            Upgrade Plan\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            Learn More\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Usage limit display component\ninterface UsageLimitDisplayProps {\n  limitName: string;\n  currentUsage: number;\n  maxAllowed: number;\n  unitName?: string;\n}\n\nexport function UsageLimitDisplay({ \n  limitName, \n  currentUsage, \n  maxAllowed,\n  unitName = 'items'\n}: UsageLimitDisplayProps) {\n  const usagePercentage = maxAllowed > 0 ? (currentUsage / maxAllowed) * 100 : 0;\n  const isNearLimit = usagePercentage >= 80;\n  const isAtLimit = currentUsage >= maxAllowed;\n\n  return (\n    <Card className={`${isAtLimit ? 'border-red-200 bg-red-50' : isNearLimit ? 'border-amber-200 bg-amber-50' : ''}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <span className=\"text-sm font-medium\">\n            {limitName} Usage\n          </span>\n          <span className={`text-sm font-medium ${isAtLimit ? 'text-red-600' : isNearLimit ? 'text-amber-600' : 'text-green-600'}`}>\n            {currentUsage} / {maxAllowed === -1 ? '∞' : maxAllowed} {unitName}\n          </span>\n        </div>\n        \n        {maxAllowed !== -1 && (\n          <div className=\"w-full bg-gray-200 rounded-full h-2 mb-2\">\n            <div \n              className={`h-2 rounded-full transition-all ${\n                isAtLimit ? 'bg-red-500' : isNearLimit ? 'bg-amber-500' : 'bg-green-500'\n              }`}\n              style={{ width: `${Math.min(usagePercentage, 100)}%` }}\n            />\n          </div>\n        )}\n        \n        {isAtLimit && (\n          <div className=\"flex items-center gap-2 mt-2\">\n            <Zap className=\"w-4 h-4 text-red-500\" />\n            <p className=\"text-xs text-red-600\">\n              You've reached your limit. Upgrade to continue.\n            </p>\n          </div>\n        )}\n        \n        {isNearLimit && !isAtLimit && (\n          <div className=\"flex items-center gap-2 mt-2\">\n            <Zap className=\"w-4 h-4 text-amber-500\" />\n            <p className=\"text-xs text-amber-600\">\n              You're approaching your limit. Consider upgrading.\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5071},"client/src/pages/auth/SignupWithPackages.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Calendar, AlertCircle, Eye, EyeOff, Check, Zap, Users, Building, Crown } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nconst signupSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n  firstName: z.string().min(2, \"First name must be at least 2 characters\"),\n  lastName: z.string().min(2, \"Last name must be at least 2 characters\"),\n  packageId: z.string().min(1, \"Please select a package\"),\n  companyName: z.string().min(2, \"Company name must be at least 2 characters\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype SignupData = z.infer<typeof signupSchema>;\n\ninterface FeaturePackage {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  billingCycle: string;\n  features: Record<string, boolean>;\n  limits: Record<string, number>;\n}\n\nexport default function SignupWithPackages() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [error, setError] = useState<string>(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [currentStep, setCurrentStep] = useState(1);\n\n  const { data: packages = [], isLoading: packagesLoading } = useQuery({\n    queryKey: ['/api/public/plans'],\n  });\n\n  const form = useForm<SignupData>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      packageId: \"\",\n      companyName: \"\",\n    },\n  });\n\n  const selectedPackage = (packages as FeaturePackage[]).find((pkg: FeaturePackage) => pkg.id === form.watch('packageId'));\n\n  const onSubmit = async (data: SignupData) => {\n    setIsSubmitting(true);\n    setError(\"\");\n    \n    try {\n      const response = await fetch('/api/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n        credentials: 'include',\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        toast({\n          title: \"Account created!\",\n          description: \"Welcome to VENUIN. Redirecting to your dashboard...\",\n        });\n        // Redirect to tenant dashboard\n        if (result.tenant?.slug) {\n          setLocation(`/t/${result.tenant.slug}/app`);\n        } else {\n          setLocation('/');\n        }\n      } else {\n        const result = await response.json();\n        setError(result.message || \"Failed to create account\");\n      }\n    } catch (error) {\n      console.error('Signup error:', error);\n      setError(\"Failed to create account. Please try again.\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const getPackageIcon = (packageId: string) => {\n    switch (packageId) {\n      case 'starter': return <Building className=\"w-6 h-6\" />;\n      case 'professional': return <Zap className=\"w-6 h-6\" />;\n      case 'enterprise': return <Crown className=\"w-6 h-6\" />;\n      default: return <Building className=\"w-6 h-6\" />;\n    }\n  };\n\n  const getPackageColor = (packageId: string) => {\n    switch (packageId) {\n      case 'starter': return 'border-blue-200 bg-blue-50 hover:border-blue-300';\n      case 'professional': return 'border-purple-200 bg-purple-50 hover:border-purple-300';\n      case 'enterprise': return 'border-orange-200 bg-orange-50 hover:border-orange-300';\n      default: return 'border-gray-200 bg-gray-50 hover:border-gray-300';\n    }\n  };\n\n  const renderPackageSelection = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h2 className=\"text-2xl font-bold\">Choose Your Plan</h2>\n        <p className=\"text-gray-600 mt-2\">Select the perfect plan for your venue business</p>\n      </div>\n\n      {packagesLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <div key={i} className=\"h-64 bg-gray-100 animate-pulse rounded-lg\"></div>\n          ))}\n        </div>\n      ) : (\n        <FormField\n          control={form.control}\n          name=\"packageId\"\n          render={({ field }) => (\n            <FormItem>\n              <FormControl>\n                <RadioGroup\n                  onValueChange={field.onChange}\n                  value={field.value}\n                  className=\"grid grid-cols-1 md:grid-cols-3 gap-4\"\n                >\n                  {(packages as FeaturePackage[]).map((pkg: FeaturePackage) => (\n                    <div key={pkg.id} className=\"relative\">\n                      <RadioGroupItem\n                        value={pkg.id}\n                        id={pkg.id}\n                        className=\"sr-only\"\n                      />\n                      <Label\n                        htmlFor={pkg.id}\n                        className={`block cursor-pointer rounded-lg border-2 p-6 transition-all ${\n                          field.value === pkg.id \n                            ? 'border-blue-500 bg-blue-50 ring-2 ring-blue-200' \n                            : getPackageColor(pkg.id)\n                        }`}\n                      >\n                        <div className=\"text-center\">\n                          <div className=\"flex justify-center mb-4\">\n                            {getPackageIcon(pkg.id)}\n                          </div>\n                          <h3 className=\"text-xl font-semibold\">{pkg.name}</h3>\n                          <div className=\"mt-2\">\n                            <span className=\"text-3xl font-bold\">${pkg.price}</span>\n                            <span className=\"text-gray-500\">/{pkg.billingCycle}</span>\n                          </div>\n                          <p className=\"text-sm text-gray-600 mt-2\">{pkg.description}</p>\n                          \n                          <div className=\"mt-4 space-y-2\">\n                            {Object.entries(pkg.features || {})\n                              .filter(([_, enabled]) => enabled)\n                              .slice(0, 5)\n                              .map(([feature, _]) => (\n                                <div key={feature} className=\"flex items-center text-sm\">\n                                  <Check className=\"w-4 h-4 text-green-500 mr-2\" />\n                                  <span className=\"capitalize\">\n                                    {feature.replace(/_/g, ' ')}\n                                  </span>\n                                </div>\n                              ))}\n                          </div>\n\n                          {pkg.limits && (\n                            <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                              <div className=\"text-sm text-gray-600\">\n                                {pkg.limits.max_bookings_per_month === -1 ? (\n                                  <span>Unlimited bookings</span>\n                                ) : (\n                                  <span>{pkg.limits.max_bookings_per_month} bookings/month</span>\n                                )}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n\n                        {field.value === pkg.id && (\n                          <div className=\"absolute top-2 right-2\">\n                            <div className=\"w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center\">\n                              <Check className=\"w-4 h-4 text-white\" />\n                            </div>\n                          </div>\n                        )}\n                      </Label>\n                    </div>\n                  ))}\n                </RadioGroup>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      )}\n\n      <div className=\"flex justify-between\">\n        <div></div>\n        <Button \n          type=\"button\" \n          onClick={() => setCurrentStep(2)}\n          disabled={!form.watch('packageId')}\n        >\n          Continue to Account Details\n        </Button>\n      </div>\n    </div>\n  );\n\n  const renderAccountForm = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h2 className=\"text-2xl font-bold\">Create Your Account</h2>\n        <p className=\"text-gray-600 mt-2\">\n          Set up your account for the <strong>{selectedPackage?.name}</strong> plan\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <FormField\n          control={form.control}\n          name=\"firstName\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>First Name</FormLabel>\n              <FormControl>\n                <Input\n                  {...field}\n                  placeholder=\"Enter your first name\"\n                  disabled={isSubmitting}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"lastName\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Last Name</FormLabel>\n              <FormControl>\n                <Input\n                  {...field}\n                  placeholder=\"Enter your last name\"\n                  disabled={isSubmitting}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n\n      <FormField\n        control={form.control}\n        name=\"email\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Email</FormLabel>\n            <FormControl>\n              <Input\n                {...field}\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                disabled={isSubmitting}\n              />\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n\n      <FormField\n        control={form.control}\n        name=\"companyName\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Company Name</FormLabel>\n            <FormControl>\n              <Input\n                {...field}\n                placeholder=\"Enter your company/venue name\"\n                disabled={isSubmitting}\n              />\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n\n      <FormField\n        control={form.control}\n        name=\"password\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Password</FormLabel>\n            <FormControl>\n              <div className=\"relative\">\n                <Input\n                  {...field}\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Create a password (min 6 characters)\"\n                  disabled={isSubmitting}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  disabled={isSubmitting}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n\n      <FormField\n        control={form.control}\n        name=\"confirmPassword\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Confirm Password</FormLabel>\n            <FormControl>\n              <div className=\"relative\">\n                <Input\n                  {...field}\n                  type={showConfirmPassword ? \"text\" : \"password\"}\n                  placeholder=\"Confirm your password\"\n                  disabled={isSubmitting}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  disabled={isSubmitting}\n                >\n                  {showConfirmPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n\n      <div className=\"flex justify-between\">\n        <Button \n          type=\"button\" \n          variant=\"outline\"\n          onClick={() => setCurrentStep(1)}\n        >\n          Back to Plans\n        </Button>\n        <Button \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {isSubmitting ? \"Creating account...\" : \"Create Account\"}\n        </Button>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-6xl\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"flex items-center justify-center gap-2\">\n            <Calendar className=\"w-6 h-6\" />\n            Join VENUIN\n          </CardTitle>\n          <CardDescription>\n            Create your account to start managing your venue\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {error && (\n            <Alert variant=\"destructive\" className=\"mb-4\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              {currentStep === 1 && renderPackageSelection()}\n              {currentStep === 2 && renderAccountForm()}\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Already have an account?{\" \"}\n              <Link href=\"/login\" className=\"text-blue-600 hover:underline\">\n                Sign in\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":15558},"shared/status-utils.ts":{"content":"// Event status management utilities\n\nexport type EventStatus = \n  | \"inquiry\" \n  | \"pending\" \n  | \"tentative\" \n  | \"confirmed\" \n  | \"confirmed_deposit_paid\" \n  | \"confirmed_fully_paid\" \n  | \"completed\" \n  | \"cancelled\";\n\nexport interface StatusConfig {\n  label: string;\n  description: string;\n  color: string;\n  bgColor: string;\n  borderColor: string;\n  textColor: string;\n  nextStatuses: EventStatus[];\n  canEdit: boolean;\n  isCompleted: boolean;\n  isActive: boolean;\n}\n\nexport const STATUS_CONFIGS: Record<EventStatus, StatusConfig> = {\n  inquiry: {\n    label: \"Inquiry\",\n    description: \"Initial inquiry received, needs follow-up\",\n    color: \"#6b7280\", // gray-500\n    bgColor: \"bg-gray-50\",\n    borderColor: \"border-gray-200\", \n    textColor: \"text-gray-700\",\n    nextStatuses: [\"pending\", \"cancelled\"],\n    canEdit: true,\n    isCompleted: false,\n    isActive: true\n  },\n  pending: {\n    label: \"Proposal Shared\", \n    description: \"Proposal sent to client, awaiting response\",\n    color: \"#f59e0b\", // amber-500\n    bgColor: \"bg-amber-50\",\n    borderColor: \"border-amber-200\",\n    textColor: \"text-amber-700\",\n    nextStatuses: [\"tentative\", \"cancelled\"],\n    canEdit: true,\n    isCompleted: false,\n    isActive: true\n  },\n  tentative: {\n    label: \"Tentative\",\n    description: \"Tentative booking, awaiting confirmation\",\n    color: \"#3b82f6\", // blue-500\n    bgColor: \"bg-blue-50\",\n    borderColor: \"border-blue-200\",\n    textColor: \"text-blue-700\",\n    nextStatuses: [\"confirmed_deposit_paid\", \"cancelled\"],\n    canEdit: true,\n    isCompleted: false,\n    isActive: true\n  },\n  confirmed: {\n    label: \"Confirmed\",\n    description: \"Booking confirmed by client\",\n    color: \"#10b981\", // emerald-500\n    bgColor: \"bg-emerald-50\",\n    borderColor: \"border-emerald-200\",\n    textColor: \"text-emerald-700\",\n    nextStatuses: [\"completed\", \"cancelled\"],\n    canEdit: true,\n    isCompleted: false,\n    isActive: true\n  },\n  confirmed_deposit_paid: {\n    label: \"Confirmed Deposited\",\n    description: \"Deposit received, balance payment pending\",\n    color: \"#8b5cf6\", // violet-500  \n    bgColor: \"bg-violet-50\",\n    borderColor: \"border-violet-200\",\n    textColor: \"text-violet-700\",\n    nextStatuses: [\"confirmed_fully_paid\", \"cancelled\"],\n    canEdit: true,\n    isCompleted: false,\n    isActive: true\n  },\n  confirmed_fully_paid: {\n    label: \"Confirmed Paid\",\n    description: \"All payments received, event ready\",\n    color: \"#10b981\", // emerald-500\n    bgColor: \"bg-emerald-50\", \n    borderColor: \"border-emerald-200\",\n    textColor: \"text-emerald-700\",\n    nextStatuses: [\"completed\", \"cancelled\"],\n    canEdit: true,\n    isCompleted: false,\n    isActive: true\n  },\n  completed: {\n    label: \"Completed\",\n    description: \"Event successfully completed\",\n    color: \"#059669\", // emerald-600\n    bgColor: \"bg-green-50\",\n    borderColor: \"border-green-200\",\n    textColor: \"text-green-700\",\n    nextStatuses: [],\n    canEdit: false,\n    isCompleted: true,\n    isActive: false\n  },\n  cancelled: {\n    label: \"Cancelled\",\n    description: \"Event has been cancelled\",\n    color: \"#dc2626\", // red-600\n    bgColor: \"bg-red-50\",\n    borderColor: \"border-red-200\", \n    textColor: \"text-red-700\",\n    nextStatuses: [],\n    canEdit: false,\n    isCompleted: true,\n    isActive: false\n  }\n};\n\n// Get status configuration with legacy mapping\nexport function getStatusConfig(status: EventStatus | string): StatusConfig {\n  // Handle legacy statuses by mapping them to new ones\n  const statusMap: Record<string, EventStatus> = {\n    'confirmed': 'confirmed',\n    'confirmed_fully_paid': 'confirmed_fully_paid',\n    'confirmed_deposit_paid': 'confirmed_deposit_paid',\n    'pending': 'pending',\n    'proposal_shared': 'pending',\n    'completed': 'completed',\n    'cancelled': 'cancelled',\n    'inquiry': 'inquiry',\n    'tentative': 'tentative'\n  };\n  \n  const mappedStatus = statusMap[status] || status as EventStatus;\n  return STATUS_CONFIGS[mappedStatus] || STATUS_CONFIGS['inquiry'];\n}\n\n// Get status color for calendar display\nexport function getStatusColor(status: EventStatus | string): string {\n  // Handle legacy statuses by mapping them to new ones\n  const statusMap: Record<string, EventStatus> = {\n    'confirmed': 'confirmed',\n    'confirmed_fully_paid': 'confirmed_fully_paid',\n    'confirmed_deposit_paid': 'confirmed_deposit_paid',\n    'pending': 'pending',\n    'proposal_shared': 'pending',\n    'completed': 'completed',\n    'cancelled': 'cancelled',\n    'inquiry': 'inquiry',\n    'tentative': 'tentative'\n  };\n  \n  const mappedStatus = statusMap[status] || status as EventStatus;\n  return STATUS_CONFIGS[mappedStatus]?.color || STATUS_CONFIGS['inquiry'].color;\n}\n\n// Get status label\nexport function getStatusLabel(status: EventStatus | string): string {\n  // Handle legacy statuses by mapping them to new ones\n  const statusMap: Record<string, EventStatus> = {\n    'confirmed': 'confirmed',\n    'confirmed_fully_paid': 'confirmed_fully_paid',\n    'confirmed_deposit_paid': 'confirmed_deposit_paid',\n    'pending': 'pending',\n    'proposal_shared': 'pending',\n    'completed': 'completed',\n    'cancelled': 'cancelled',\n    'inquiry': 'inquiry',\n    'tentative': 'tentative'\n  };\n  \n  const mappedStatus = statusMap[status] || status as EventStatus;\n  return STATUS_CONFIGS[mappedStatus]?.label || status.toString();\n}\n\n// Get next possible statuses\nexport function getNextStatuses(currentStatus: EventStatus | string): EventStatus[] {\n  // Handle legacy statuses by mapping them to new ones\n  const statusMap: Record<string, EventStatus> = {\n    'confirmed': 'confirmed',\n    'confirmed_fully_paid': 'confirmed_fully_paid',\n    'confirmed_deposit_paid': 'confirmed_deposit_paid',\n    'pending': 'pending',\n    'proposal_shared': 'pending',\n    'completed': 'completed',\n    'cancelled': 'cancelled',\n    'inquiry': 'inquiry',\n    'tentative': 'tentative'\n  };\n  \n  const mappedStatus = statusMap[currentStatus] || currentStatus as EventStatus;\n  return STATUS_CONFIGS[mappedStatus]?.nextStatuses || [];\n}\n\n// Check if status can be edited\nexport function canEditStatus(status: EventStatus | string): boolean {\n  // Handle legacy statuses by mapping them to new ones\n  const statusMap: Record<string, EventStatus> = {\n    'confirmed': 'tentative',\n    'confirmed_fully_paid': 'confirmed',\n    'confirmed_deposit_paid': 'confirmed',\n    'pending': 'pending',\n    'proposal_shared': 'pending',\n    'completed': 'completed',\n    'cancelled': 'cancelled'\n  };\n  \n  const mappedStatus = statusMap[status] || status as EventStatus;\n  return STATUS_CONFIGS[mappedStatus]?.canEdit ?? true; // Default to true if status not found\n}\n\n// Check if event is completed\nexport function isEventCompleted(status: EventStatus): boolean {\n  return STATUS_CONFIGS[status].isCompleted;\n}\n\n// Check if event is active (can have future actions)\nexport function isEventActive(status: EventStatus): boolean {\n  return STATUS_CONFIGS[status].isActive;\n}\n\n// Auto-update status based on payment state\nexport function getAutoStatus(\n  proposalStatus: string | null,\n  depositPaid: boolean, \n  totalPaid: number,\n  totalAmount: number,\n  eventDate: Date,\n  currentStatus: EventStatus\n): EventStatus {\n  const now = new Date();\n  const eventPassed = eventDate < now;\n  \n  // If event is completed, don't change\n  if (currentStatus === \"completed\" || currentStatus === \"cancelled\") {\n    return currentStatus;\n  }\n  \n  // Auto-complete if event passed and fully paid\n  if (eventPassed && totalPaid >= totalAmount) {\n    return \"completed\";\n  }\n  \n  // If fully paid\n  if (totalPaid >= totalAmount) {\n    return \"confirmed_fully_paid\";\n  }\n  \n  // If deposit paid\n  if (depositPaid) {\n    return \"confirmed_deposit_paid\";\n  }\n  \n  // If proposal accepted but no payment\n  if (proposalStatus === \"accepted\") {\n    return \"tentative\";\n  }\n  \n  // If proposal sent\n  if (proposalStatus === \"sent\" || proposalStatus === \"viewed\") {\n    return \"pending\";\n  }\n  \n  // Default to inquiry\n  return \"inquiry\";\n}\n\n// Get status badge classes for UI components\nexport function getStatusBadgeClasses(status: EventStatus): string {\n  const config = STATUS_CONFIGS[status];\n  return `${config.bgColor} ${config.textColor} ${config.borderColor} border`;\n}\n\n// Get all statuses for dropdowns/selects\nexport function getAllStatuses(): { value: EventStatus; label: string; description: string }[] {\n  return Object.entries(STATUS_CONFIGS).map(([value, config]) => ({\n    value: value as EventStatus,\n    label: config.label,\n    description: config.description\n  }));\n}","size_bytes":8533},"client/src/components/events/status-selector.tsx":{"content":"import { useState } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  getStatusConfig, \n  getNextStatuses, \n  canEditStatus,\n  getAllStatuses, \n  type EventStatus \n} from \"@shared/status-utils\";\nimport { CancellationModal } from \"./cancellation-modal\";\n\ninterface StatusSelectorProps {\n  currentStatus: EventStatus | string;\n  onStatusChange?: (newStatus: EventStatus) => void;\n  readonly?: boolean;\n  showAllStatuses?: boolean;\n  eventId?: string;\n  eventTitle?: string;\n}\n\nexport function StatusSelector({ \n  currentStatus, \n  onStatusChange, \n  readonly = false,\n  showAllStatuses = false,\n  eventId,\n  eventTitle \n}: StatusSelectorProps) {\n  const [showCancellationModal, setShowCancellationModal] = useState(false);\n  const statusConfig = getStatusConfig(currentStatus);\n  \n  // If readonly, just show the current status badge\n  if (readonly || !canEditStatus(currentStatus as EventStatus)) {\n    return (\n      <Badge \n        className={`${statusConfig.bgColor} ${statusConfig.textColor} ${statusConfig.borderColor} border text-sm px-3 py-1`}\n      >\n        {statusConfig.label}\n      </Badge>\n    );\n  }\n\n  // Determine available statuses - show all statuses for easy selection in modal\n  const availableStatuses = getAllStatuses();\n\n  const handleStatusChange = (value: string) => {\n    if (value === \"cancelled\") {\n      // Show cancellation modal instead of directly changing status\n      setShowCancellationModal(true);\n    } else {\n      onStatusChange?.(value as EventStatus);\n    }\n  };\n\n  return (\n    <>\n      <Select\n        value={currentStatus}\n        onValueChange={handleStatusChange}\n      >\n        <SelectTrigger className=\"w-fit min-w-32 h-9\">\n          <SelectValue>\n            <Badge \n              className={`${statusConfig.bgColor} ${statusConfig.textColor} ${statusConfig.borderColor} border text-sm px-3 py-1`}\n            >\n              {statusConfig.label}\n            </Badge>\n          </SelectValue>\n        </SelectTrigger>\n        <SelectContent>\n          {availableStatuses.map((status) => {\n            const config = getStatusConfig(status.value);\n            return (\n              <SelectItem key={status.value} value={status.value}>\n                <div className=\"flex items-center gap-2\">\n                  <div \n                    className=\"w-2 h-2 rounded-full\"\n                    style={{ backgroundColor: config.color }}\n                  />\n                  <div className=\"flex flex-col\">\n                    <span className=\"font-medium\">{config.label}</span>\n                    <span className=\"text-xs text-slate-500\">{config.description}</span>\n                  </div>\n                </div>\n              </SelectItem>\n            );\n          })}\n        </SelectContent>\n      </Select>\n\n      {eventId && eventTitle && (\n        <CancellationModal\n          isOpen={showCancellationModal}\n          onClose={() => setShowCancellationModal(false)}\n          eventId={eventId}\n          eventTitle={eventTitle}\n        />\n      )}\n    </>\n  );\n}\n\ninterface StatusBadgeProps {\n  status: EventStatus | string;\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nexport function StatusBadge({ status, size = \"md\" }: StatusBadgeProps) {\n  const config = getStatusConfig(status);\n  \n  const sizeClasses = {\n    sm: \"text-xs px-2 py-1\",\n    md: \"text-sm px-3 py-1\",\n    lg: \"text-base px-4 py-2\"\n  };\n  \n  return (\n    <Badge \n      className={`${config.bgColor} ${config.textColor} ${config.borderColor} border ${sizeClasses[size]}`}\n    >\n      {config.label}\n    </Badge>\n  );\n}\n\ninterface StatusIndicatorProps {\n  status: EventStatus | string;\n  size?: number;\n}\n\nexport function StatusIndicator({ status, size = 8 }: StatusIndicatorProps) {\n  const config = getStatusConfig(status);\n  \n  return (\n    <div \n      className=\"rounded-full\"\n      style={{ \n        backgroundColor: config.color,\n        width: `${size}px`,\n        height: `${size}px`\n      }}\n      title={config.label}\n    />\n  );\n}","size_bytes":4086},"client/src/pages/payment-checkout.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements, PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, CreditCard, Shield, ArrowLeft, Loader2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\ninterface PaymentCheckoutProps {\n  proposalId: string;\n  clientSecret: string;\n  proposalData: any;\n}\n\nfunction PaymentForm({ proposalId, clientSecret, proposalData }: PaymentCheckoutProps) {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [paymentStatus, setPaymentStatus] = useState<'idle' | 'processing' | 'succeeded' | 'failed'>('idle');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!stripe || !elements) return;\n\n    setIsProcessing(true);\n    setPaymentStatus('processing');\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: `${window.location.origin}/proposal/${proposalId}/success`,\n      },\n      redirect: 'if_required'\n    });\n\n    if (error) {\n      setErrorMessage(error.message || 'An unexpected error occurred');\n      setPaymentStatus('failed');\n      setIsProcessing(false);\n    } else {\n      setPaymentStatus('succeeded');\n      // Redirect to success page\n      window.location.href = `/proposal/${proposalId}/success`;\n    }\n  };\n\n  if (paymentStatus === 'succeeded') {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <CheckCircle className=\"w-8 h-8 text-green-600\" />\n        </div>\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Payment Successful!</h2>\n        <p className=\"text-gray-600\">Thank you for your payment. We'll be in touch soon!</p>\n      </div>\n    );\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <Shield className=\"w-5 h-5 text-blue-600\" />\n          <span className=\"font-medium text-blue-900\">Secure Payment</span>\n        </div>\n        <p className=\"text-blue-700 text-sm\">\n          Your payment is processed securely through Stripe. We never store your payment information.\n        </p>\n      </div>\n\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n        <PaymentElement />\n      </div>\n\n      {errorMessage && (\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n          <p className=\"text-red-700 text-sm\">{errorMessage}</p>\n        </div>\n      )}\n\n      <Button\n        type=\"submit\"\n        disabled={!stripe || isProcessing}\n        size=\"lg\"\n        className=\"w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white font-semibold py-4 rounded-lg shadow-lg\"\n      >\n        {isProcessing ? (\n          <>\n            <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n            Processing Payment...\n          </>\n        ) : (\n          <>\n            <CreditCard className=\"w-5 h-5 mr-2\" />\n            Pay ${proposalData?.totalAmount || '0'}\n          </>\n        )}\n      </Button>\n    </form>\n  );\n}\n\nexport default function PaymentCheckout() {\n  const [location] = useLocation();\n  const proposalId = location.split('/')[2]; // Extract from /proposal/:id/payment\n  \n  const { data: proposalData, isLoading: proposalLoading } = useQuery({\n    queryKey: [\"/api/proposals/public\", proposalId],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/proposals/public/${proposalId}`);\n      return response.json();\n    },\n    enabled: !!proposalId,\n  });\n\n  const { data: paymentIntent, isLoading: paymentLoading } = useQuery({\n    queryKey: [\"/api/create-payment-intent\", proposalId],\n    queryFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/create-payment-intent\", {\n        proposalId,\n        amount: proposalData?.totalAmount || 0,\n        connectAccountId: proposalData?.connectAccountId // For Stripe Connect\n      });\n      return response.json();\n    },\n    enabled: !!proposalData,\n  });\n\n  if (proposalLoading || paymentLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-indigo-50/30 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin w-12 h-12 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Setting up your payment...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!proposalData || !paymentIntent?.clientSecret) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-indigo-50/30 flex items-center justify-center\">\n        <div className=\"text-center max-w-md mx-auto px-6\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Payment Setup Error</h1>\n          <p className=\"text-gray-600 mb-4\">Unable to set up payment for this proposal.</p>\n          <Button onClick={() => window.history.back()} variant=\"outline\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Go Back\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const appearance = {\n    theme: 'stripe' as const,\n    variables: {\n      colorPrimary: '#2563eb',\n      colorBackground: '#ffffff',\n      colorText: '#1f2937',\n      colorDanger: '#dc2626',\n      fontFamily: 'system-ui, sans-serif',\n      spacingUnit: '4px',\n      borderRadius: '8px',\n    },\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-indigo-50/30\">\n      <div className=\"max-w-2xl mx-auto px-6 py-20\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">Complete Your Payment</h1>\n          <p className=\"text-gray-600\">Secure payment for {proposalData.title}</p>\n        </div>\n\n        <div className=\"grid gap-8\">\n          {/* Payment Summary */}\n          <Card className=\"shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>Payment Summary</span>\n                <Badge className=\"bg-green-100 text-green-700 hover:bg-green-100\">\n                  Stripe Connect Secure\n                </Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Event</span>\n                  <span className=\"font-medium\">{proposalData.title}</span>\n                </div>\n                {proposalData.depositAmount && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Deposit Amount</span>\n                    <span className=\"font-medium\">${proposalData.depositAmount}</span>\n                  </div>\n                )}\n                <hr className=\"my-3\" />\n                <div className=\"flex justify-between text-lg font-bold\">\n                  <span>Total Amount</span>\n                  <span>${proposalData.totalAmount}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Payment Form */}\n          <Card className=\"shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n            <CardHeader>\n              <CardTitle>Payment Information</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Elements \n                stripe={stripePromise} \n                options={{ \n                  clientSecret: paymentIntent.clientSecret,\n                  appearance \n                }}\n              >\n                <PaymentForm \n                  proposalId={proposalId}\n                  clientSecret={paymentIntent.clientSecret}\n                  proposalData={proposalData}\n                />\n              </Elements>\n            </CardContent>\n          </Card>\n\n          {/* Test Card Info */}\n          <Card className=\"shadow-lg border border-yellow-200 bg-yellow-50\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"font-semibold text-yellow-800 mb-3\">Test Payment Instructions</h3>\n              <div className=\"space-y-2 text-sm text-yellow-700\">\n                <p><strong>Success:</strong> Use card number 4000 0000 0000 0002</p>\n                <p><strong>Declined:</strong> Use card number 4000 0000 0000 0341</p>\n                <p>Use any future date for expiry and any 3-digit CVC</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9321},"client/src/pages/payment-success.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { CheckCircle, Calendar, Mail, ArrowRight, Download } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function PaymentSuccess() {\n  const [location] = useLocation();\n  const proposalId = location.split('/')[2]; // Extract from /proposal/:id/success\n  \n  const { data: proposalData, isLoading } = useQuery({\n    queryKey: [\"/api/proposals/public\", proposalId],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/proposals/public/${proposalId}`);\n      return response.json();\n    },\n    enabled: !!proposalId,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-indigo-50/30 flex items-center justify-center\">\n        <div className=\"animate-spin w-12 h-12 border-4 border-green-500 border-t-transparent rounded-full\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-50/30\">\n      {/* Success Header */}\n      <div className=\"bg-gradient-to-r from-green-600 to-emerald-600 text-white py-20\">\n        <div className=\"max-w-4xl mx-auto px-6 text-center\">\n          <div className=\"w-24 h-24 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <CheckCircle className=\"w-12 h-12 text-white\" />\n          </div>\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-4\">Payment Successful!</h1>\n          <p className=\"text-xl text-green-100 max-w-2xl mx-auto\">\n            Thank you for your payment. Your event booking is now confirmed and we're excited to make your event extraordinary.\n          </p>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-4xl mx-auto px-6 py-16\">\n        <div className=\"grid md:grid-cols-2 gap-8\">\n          {/* Confirmation Details */}\n          <Card className=\"shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n            <CardContent className=\"p-8\">\n              <div className=\"flex items-center gap-3 mb-6\">\n                <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                </div>\n                <h2 className=\"text-2xl font-bold text-gray-900\">Booking Confirmed</h2>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <p className=\"text-sm text-gray-500 mb-1\">Event</p>\n                  <p className=\"font-semibold text-gray-900\">{proposalData?.title}</p>\n                </div>\n                \n                <div>\n                  <p className=\"text-sm text-gray-500 mb-1\">Total Paid</p>\n                  <p className=\"font-semibold text-gray-900 text-2xl\">${proposalData?.totalAmount}</p>\n                </div>\n                \n                <div>\n                  <p className=\"text-sm text-gray-500 mb-1\">Payment Status</p>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    <span className=\"text-green-600 font-medium\">Paid & Confirmed</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Next Steps */}\n          <Card className=\"shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n            <CardContent className=\"p-8\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">What Happens Next?</h2>\n              \n              <div className=\"space-y-6\">\n                <div className=\"flex gap-4\">\n                  <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                    <Mail className=\"w-4 h-4 text-blue-600\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-1\">Confirmation Email</h3>\n                    <p className=\"text-gray-600 text-sm\">You'll receive a detailed confirmation email within the next few minutes with your receipt and event details.</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex gap-4\">\n                  <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                    <Calendar className=\"w-4 h-4 text-purple-600\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-1\">Event Planning</h3>\n                    <p className=\"text-gray-600 text-sm\">Our team will contact you within 24 hours to finalize event details and coordinate logistics.</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex gap-4\">\n                  <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                    <Download className=\"w-4 h-4 text-green-600\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-1\">Documentation</h3>\n                    <p className=\"text-gray-600 text-sm\">Contracts and event documentation will be prepared and sent for your review.</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Contact Information */}\n        <Card className=\"mt-8 shadow-xl border-0 bg-gradient-to-r from-blue-50 to-indigo-50\">\n          <CardContent className=\"p-8 text-center\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Questions? We're Here to Help</h2>\n            <p className=\"text-gray-600 mb-6\">\n              Our event planning team is ready to assist you with any questions about your upcoming event.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button size=\"lg\" className=\"bg-blue-600 hover:bg-blue-700\">\n                <Mail className=\"w-5 h-5 mr-2\" />\n                Contact Event Team\n              </Button>\n              <Button variant=\"outline\" size=\"lg\">\n                <Calendar className=\"w-5 h-5 mr-2\" />\n                View Event Details\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Stripe Connect Info */}\n        <div className=\"mt-8 text-center\">\n          <p className=\"text-sm text-gray-500\">\n            Payment processed securely through Stripe Connect\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6813},"server/services/email-monitor.ts":{"content":"import { storage } from '../storage';\nimport { gmailService } from './gmail';\nimport { ImapFlow } from 'imapflow';\n\ninterface EmailMonitorConfig {\n  email: string;\n  appPassword: string;\n}\n\ninterface ParsedEmailReply {\n  from: string;\n  subject: string;\n  content: string;\n  receivedDate: Date;\n  messageId: string; // Unique email message ID\n  inReplyTo?: string;\n  references?: string[];\n  proposalId?: string;\n}\n\nexport class EmailMonitorService {\n  private config: EmailMonitorConfig | null = null;\n  private monitoringActive = false;\n  private monitoringInterval: NodeJS.Timeout | null = null;\n  private lastCheckTime: Date = new Date();\n  private processedMessageIds = new Set<string>(); // Track processed message IDs\n\n  constructor(config?: EmailMonitorConfig) {\n    if (config) {\n      this.configure(config);\n    }\n  }\n\n  configure(config: EmailMonitorConfig) {\n    this.config = config;\n    // Configure Gmail service with the same credentials for monitoring\n    gmailService.configure({ email: config.email, appPassword: config.appPassword });\n    console.log('Email monitoring configured for:', config.email);\n  }\n\n  async startMonitoring(): Promise<void> {\n    if (!this.config) {\n      throw new Error('Email monitor not configured');\n    }\n\n    if (this.monitoringActive) {\n      console.log('Email monitoring already active');\n      return;\n    }\n\n    // Test Gmail connection first\n    const isConnected = await gmailService.testConnection();\n    if (!isConnected) {\n      throw new Error('Gmail connection failed. Please check your credentials.');\n    }\n\n    console.log('✅ Email monitoring started - checking for new customer replies every 30 seconds');\n    this.monitoringActive = true;\n    this.lastCheckTime = new Date();\n    \n    // Start periodic monitoring\n    this.startPeriodicCheck();\n  }\n\n  private startPeriodicCheck(): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n    }\n\n    // Check for new emails every 30 seconds\n    this.monitoringInterval = setInterval(async () => {\n      if (this.monitoringActive) {\n        await this.checkForNewReplies();\n      }\n    }, 30000);\n\n    // Also check immediately\n    setTimeout(() => this.checkForNewReplies(), 1000);\n  }\n\n  private async checkForNewReplies(): Promise<void> {\n    if (!this.config || !gmailService.isConfigured()) {\n      return;\n    }\n\n    try {\n      console.log('🔍 Checking for new customer email replies...');\n      \n      // Get all recent inbound emails since last check\n      const recentEmails = await this.fetchRecentInboundEmails();\n      \n      if (recentEmails.length > 0) {\n        console.log(`Found ${recentEmails.length} recent emails to process`);\n        \n        for (const email of recentEmails) {\n          await this.processIncomingEmail(email);\n        }\n      }\n      \n      this.lastCheckTime = new Date();\n      \n    } catch (error) {\n      console.error('Error checking for email replies:', error);\n    }\n  }\n\n  private async fetchRecentInboundEmails(): Promise<any[]> {\n    if (!this.config) return [];\n\n    let client: ImapFlow | null = null;\n    \n    try {\n      // Connect to Gmail using IMAP\n      client = new ImapFlow({\n        host: 'imap.gmail.com',\n        port: 993,\n        secure: true,\n        auth: {\n          user: this.config.email,\n          pass: this.config.appPassword\n        }\n      });\n\n      await client.connect();\n      \n      // Open inbox\n      await client.mailboxOpen('INBOX');\n      \n      // Search for emails received since last check that are NOT from our own email\n      const searchCriteria = {\n        since: this.lastCheckTime,\n        not: {\n          from: this.config.email // Exclude emails from our own address\n        }\n      };\n      \n      const messageList = await client.search(searchCriteria);\n      const emails = [];\n      \n      for await (const message of client.fetch(messageList, { \n        envelope: true, \n        bodyStructure: true,\n        bodyParts: ['TEXT'] \n      })) {\n        try {\n          if (!message.envelope) continue;\n          \n          const envelope = message.envelope;\n          const from = envelope.from?.[0]?.address;\n          const subject = envelope.subject;\n          const date = envelope.date;\n          const messageId = envelope.messageId || `${from}-${date?.getTime()}-${Math.random()}`;\n          \n          if (!from || !subject || !date) continue;\n          \n          // Skip if already processed\n          if (this.processedMessageIds.has(messageId)) {\n            console.log(`⏭️ Skipping already processed email: ${messageId.substring(0, 50)}...`);\n            continue;\n          }\n          \n          // Get text content\n          let content = '';\n          if (message.bodyParts && message.bodyParts.get('TEXT')) {\n            content = message.bodyParts.get('TEXT')?.toString('utf8') || '';\n          } else {\n            content = 'Customer replied to proposal'; // fallback\n          }\n          \n          emails.push({\n            from,\n            subject,\n            content,\n            date,\n            messageId\n          });\n          \n        } catch (msgError) {\n          console.error('Error processing message:', msgError);\n          continue;\n        }\n      }\n      \n      return emails;\n      \n    } catch (error) {\n      console.error('Error fetching emails from Gmail:', error);\n      return [];\n    } finally {\n      if (client) {\n        try {\n          await client.logout();\n        } catch (logoutError) {\n          console.error('Error closing IMAP connection:', logoutError);\n        }\n      }\n    }\n  }\n\n  private async processIncomingEmail(email: any): Promise<void> {\n    try {\n      // Mark this message as processed to prevent duplicates\n      this.processedMessageIds.add(email.messageId);\n      \n      const parsedReply: ParsedEmailReply = {\n        from: email.from,\n        subject: email.subject,\n        content: this.cleanEmailContent(email.content),\n        receivedDate: new Date(email.date),\n        messageId: email.messageId\n      };\n\n      // Try to match this reply to a proposal\n      const proposalId = await this.findProposalForReply(parsedReply);\n      if (!proposalId) {\n        console.log('No matching proposal found for email reply from:', parsedReply.from);\n        return;\n      }\n\n      // Check if this exact message has already been recorded in the database\n      const existingComm = await storage.getCommunicationByMessageId(email.messageId);\n      if (existingComm) {\n        console.log(`⏭️ Email already recorded in database: ${email.messageId.substring(0, 50)}...`);\n        return;\n      }\n\n      console.log(`📧 Customer reply detected! Recording for proposal ${proposalId}`);\n      await this.recordCustomerReply(proposalId, parsedReply);\n      \n    } catch (error) {\n      console.error('Error processing incoming email:', error);\n    }\n  }\n\n  // Webhook endpoint to receive email notifications\n  async processWebhookEmail(emailData: {\n    from: string;\n    subject: string;\n    content: string;\n    receivedAt: string;\n  }): Promise<boolean> {\n    try {\n      const parsedReply: ParsedEmailReply = {\n        from: emailData.from,\n        subject: emailData.subject,\n        content: this.cleanEmailContent(emailData.content),\n        receivedDate: new Date(emailData.receivedAt)\n      };\n\n      // Try to match this reply to a proposal\n      const proposalId = await this.findProposalForReply(parsedReply);\n      if (!proposalId) {\n        console.log('No matching proposal found for email reply from:', parsedReply.from);\n        return false;\n      }\n\n      // Record the customer reply\n      await this.recordCustomerReply(proposalId, parsedReply);\n      return true;\n    } catch (error) {\n      console.error('Error processing webhook email:', error);\n      return false;\n    }\n  }\n\n  // Manual method to record customer reply\n  async recordManualReply(data: {\n    proposalId: string;\n    customerEmail: string;\n    subject: string;\n    content: string;\n    receivedAt?: string;\n  }): Promise<boolean> {\n    try {\n      const parsedReply: ParsedEmailReply = {\n        from: data.customerEmail,\n        subject: data.subject,\n        content: this.cleanEmailContent(data.content),\n        receivedDate: data.receivedAt ? new Date(data.receivedAt) : new Date()\n      };\n\n      await this.recordCustomerReply(data.proposalId, parsedReply);\n      return true;\n    } catch (error) {\n      console.error('Error recording manual reply:', error);\n      return false;\n    }\n  }\n\n  private cleanEmailContent(content: string): string {\n    // Remove common email signatures and quoted text\n    const lines = content.split('\\n');\n    const cleanedLines: string[] = [];\n    \n    for (const line of lines) {\n      const trimmedLine = line.trim();\n      \n      // Stop at common quote indicators\n      if (trimmedLine.startsWith('>') || \n          trimmedLine.startsWith('On ') || \n          trimmedLine.includes('wrote:') ||\n          trimmedLine.includes('From:') ||\n          trimmedLine.includes('Sent:') ||\n          trimmedLine.includes('To:') ||\n          trimmedLine.includes('Subject:')) {\n        break;\n      }\n      \n      cleanedLines.push(line);\n    }\n    \n    return cleanedLines.join('\\n').trim();\n  }\n\n  private async findProposalForReply(reply: ParsedEmailReply): Promise<string | null> {\n    try {\n      // First, try to find by customer email\n      const proposals = await storage.getProposals();\n      \n      for (const proposal of proposals) {\n        // Check if the email is from the proposal's customer\n        const customer = await storage.getCustomer(proposal.customerId);\n        if (customer && customer.email === reply.from) {\n          // Additional validation: check if proposal was sent recently (within last 30 days)\n          const proposalDate = new Date(proposal.sentAt || proposal.createdAt);\n          const thirtyDaysAgo = new Date();\n          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n          \n          if (proposalDate > thirtyDaysAgo) {\n            console.log(`✅ Found matching proposal ${proposal.id} for customer reply from ${reply.from}`);\n            return proposal.id;\n          }\n        }\n      }\n      \n      console.log(`No recent proposal found for email from ${reply.from}`);\n      return null;\n    } catch (error) {\n      console.error('Error finding proposal for reply:', error);\n      return null;\n    }\n  }\n\n  private async recordCustomerReply(proposalId: string, reply: ParsedEmailReply): Promise<void> {\n    try {\n      const proposal = await storage.getProposal(proposalId);\n      if (!proposal) {\n        console.error('Proposal not found:', proposalId);\n        return;\n      }\n\n      const communicationData = {\n        proposalId,\n        customerId: proposal.customerId,\n        type: 'email' as const,\n        direction: 'inbound' as const,\n        subject: reply.subject,\n        message: reply.content,\n        sender: reply.from,\n        recipient: this.config?.email || 'venue',\n        emailMessageId: reply.messageId,\n        status: 'received' as const,\n        sentAt: reply.receivedDate,\n      };\n\n      await storage.createCommunication(communicationData);\n      \n      console.log(`✅ Recorded customer reply for proposal ${proposalId} from ${reply.from}`);\n    } catch (error) {\n      console.error('Error recording customer reply:', error);\n    }\n  }\n\n  async stopMonitoring(): Promise<void> {\n    this.monitoringActive = false;\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n    console.log('Email monitoring stopped');\n  }\n\n  isMonitoring(): boolean {\n    return this.monitoringActive;\n  }\n\n  isConfigured(): boolean {\n    return this.config !== null;\n  }\n\n  isMonitoring(): boolean {\n    return this.monitoringActive;\n  }\n\n  isConfigured(): boolean {\n    return this.config !== null;\n  }\n}\n\n// Global instance\nexport const emailMonitorService = new EmailMonitorService();","size_bytes":11991},"client/src/pages/audit-logs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Clock, User, FileText, AlertTriangle, Info, Shield, Zap, Search, Filter, RefreshCw } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface AuditLog {\n  id: string;\n  userId?: string;\n  action: string;\n  resourceType: string;\n  resourceId?: string;\n  details?: any;\n  ipAddress?: string;\n  userAgent?: string;\n  severity: 'INFO' | 'WARNING' | 'ERROR';\n  createdAt: string;\n}\n\ninterface AuditLogStats {\n  totalLogs: number;\n  recentActions: number;\n  errorCount: number;\n  topUsers: Array<{ userId: string; count: number; userName?: string }>;\n  topActions: Array<{ action: string; count: number }>;\n}\n\nexport default function AuditLogsPage() {\n  const [filters, setFilters] = useState({\n    userId: \"\",\n    action: \"\",\n    resourceType: \"\",\n    severity: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    limit: 50,\n    offset: 0\n  });\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  // Fetch audit logs\n  const { data: logs = [], isLoading: logsLoading, refetch: refetchLogs } = useQuery<AuditLog[]>({\n    queryKey: ['/api/audit-logs', filters],\n    retry: false,\n  });\n\n  // Fetch audit log stats\n  const { data: stats, isLoading: statsLoading, refetch: refetchStats } = useQuery<AuditLogStats>({\n    queryKey: ['/api/audit-logs/stats'],\n    retry: false,\n  });\n\n  const handleFilterChange = (key: string, value: string) => {\n    setFilters(prev => ({ ...prev, [key]: value, offset: 0 }));\n  };\n\n  const handleSearch = (term: string) => {\n    setSearchTerm(term);\n    setFilters(prev => ({ ...prev, action: term, offset: 0 }));\n  };\n\n  const clearFilters = () => {\n    setFilters({\n      userId: \"\",\n      action: \"\",\n      resourceType: \"\",\n      severity: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      limit: 50,\n      offset: 0\n    });\n    setSearchTerm(\"\");\n  };\n\n  const refreshData = () => {\n    refetchLogs();\n    refetchStats();\n  };\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case 'ERROR':\n        return <AlertTriangle className=\"w-4 h-4 text-red-500\" />;\n      case 'WARNING':\n        return <AlertTriangle className=\"w-4 h-4 text-yellow-500\" />;\n      case 'INFO':\n      default:\n        return <Info className=\"w-4 h-4 text-blue-500\" />;\n    }\n  };\n\n  const getSeverityBadgeVariant = (severity: string) => {\n    switch (severity) {\n      case 'ERROR':\n        return 'destructive';\n      case 'WARNING':\n        return 'outline';\n      case 'INFO':\n      default:\n        return 'secondary';\n    }\n  };\n\n  const formatUserAgent = (userAgent?: string) => {\n    if (!userAgent) return 'Unknown';\n    \n    // Extract browser name from user agent\n    if (userAgent.includes('Chrome')) return 'Chrome';\n    if (userAgent.includes('Firefox')) return 'Firefox';\n    if (userAgent.includes('Safari')) return 'Safari';\n    if (userAgent.includes('Edge')) return 'Edge';\n    return 'Other Browser';\n  };\n\n  const getResourceTypeIcon = (resourceType: string) => {\n    switch (resourceType.toLowerCase()) {\n      case 'booking':\n      case 'event':\n        return <Calendar className=\"w-4 h-4 text-purple-500\" />;\n      case 'user':\n      case 'customer':\n        return <User className=\"w-4 h-4 text-green-500\" />;\n      case 'venue':\n      case 'space':\n        return <Shield className=\"w-4 h-4 text-orange-500\" />;\n      case 'proposal':\n      case 'communication':\n        return <FileText className=\"w-4 h-4 text-blue-500\" />;\n      case 'system':\n        return <Zap className=\"w-4 h-4 text-indigo-500\" />;\n      default:\n        return <FileText className=\"w-4 h-4 text-gray-500\" />;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Audit Logs</h1>\n          <p className=\"text-gray-600 dark:text-gray-300\">Monitor all system activities and user actions</p>\n        </div>\n        <Button onClick={refreshData} variant=\"outline\" size=\"sm\">\n          <RefreshCw className=\"w-4 h-4 mr-2\" />\n          Refresh\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      {stats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-blue-100 dark:bg-blue-900 rounded-lg\">\n                <FileText className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Logs</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{stats.totalLogs}</p>\n              </div>\n            </div>\n          </Card>\n          \n          <Card className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-green-100 dark:bg-green-900 rounded-lg\">\n                <Clock className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Recent (24h)</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{stats.recentActions}</p>\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-red-100 dark:bg-red-900 rounded-lg\">\n                <AlertTriangle className=\"w-6 h-6 text-red-600 dark:text-red-400\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Errors</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{stats.errorCount}</p>\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-purple-100 dark:bg-purple-900 rounded-lg\">\n                <User className=\"w-6 h-6 text-purple-600 dark:text-purple-400\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Active Users</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{stats.topUsers.length}</p>\n              </div>\n            </div>\n          </Card>\n        </div>\n      )}\n\n      {/* Filters */}\n      <Card className=\"p-6\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center gap-2 mb-4\">\n            <Filter className=\"w-5 h-5 text-gray-500\" />\n            <h3 className=\"font-semibold text-gray-900 dark:text-white\">Filters</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search actions...\"\n                value={searchTerm}\n                onChange={(e) => handleSearch(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-actions\"\n              />\n            </div>\n            \n            <Select value={filters.resourceType} onValueChange={(value) => handleFilterChange('resourceType', value)}>\n              <SelectTrigger data-testid=\"select-resource-type\">\n                <SelectValue placeholder=\"Resource Type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Types</SelectItem>\n                <SelectItem value=\"booking\">Booking</SelectItem>\n                <SelectItem value=\"customer\">Customer</SelectItem>\n                <SelectItem value=\"venue\">Venue</SelectItem>\n                <SelectItem value=\"space\">Space</SelectItem>\n                <SelectItem value=\"proposal\">Proposal</SelectItem>\n                <SelectItem value=\"communication\">Communication</SelectItem>\n                <SelectItem value=\"user\">User</SelectItem>\n                <SelectItem value=\"system\">System</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={filters.severity} onValueChange={(value) => handleFilterChange('severity', value)}>\n              <SelectTrigger data-testid=\"select-severity\">\n                <SelectValue placeholder=\"Severity\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Severities</SelectItem>\n                <SelectItem value=\"INFO\">Info</SelectItem>\n                <SelectItem value=\"WARNING\">Warning</SelectItem>\n                <SelectItem value=\"ERROR\">Error</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Input\n              type=\"datetime-local\"\n              value={filters.startDate}\n              onChange={(e) => handleFilterChange('startDate', e.target.value)}\n              placeholder=\"Start Date\"\n              data-testid=\"input-start-date\"\n            />\n\n            <Input\n              type=\"datetime-local\"\n              value={filters.endDate}\n              onChange={(e) => handleFilterChange('endDate', e.target.value)}\n              placeholder=\"End Date\"\n              data-testid=\"input-end-date\"\n            />\n\n            <Button onClick={clearFilters} variant=\"outline\" data-testid=\"button-clear-filters\">\n              Clear Filters\n            </Button>\n          </div>\n        </div>\n      </Card>\n\n      {/* Audit Logs Table */}\n      <Card className=\"p-6\">\n        <div className=\"space-y-4\">\n          <h3 className=\"font-semibold text-gray-900 dark:text-white\">Activity Log</h3>\n          \n          {logsLoading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <RefreshCw className=\"w-6 h-6 animate-spin text-gray-400\" />\n              <span className=\"ml-2 text-gray-500\">Loading audit logs...</span>\n            </div>\n          ) : logs.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <FileText className=\"w-12 h-12 text-gray-300 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">No audit logs found</p>\n            </div>\n          ) : (\n            <div className=\"space-y-2\">\n              {logs.map((log) => (\n                <div key={log.id} className=\"border rounded-lg p-4 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"flex-shrink-0 mt-1\">\n                      {getSeverityIcon(log.severity)}\n                    </div>\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        <div className=\"flex items-center gap-2\">\n                          {getResourceTypeIcon(log.resourceType)}\n                          <span className=\"font-medium text-gray-900 dark:text-white\">{log.action}</span>\n                        </div>\n                        \n                        <Badge variant={getSeverityBadgeVariant(log.severity) as any}>\n                          {log.severity}\n                        </Badge>\n                        \n                        <span className=\"text-sm text-gray-500\">\n                          {format(new Date(log.createdAt), 'MMM d, yyyy h:mm a')}\n                        </span>\n                      </div>\n                      \n                      <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n                        Resource: <span className=\"font-medium\">{log.resourceType}</span>\n                        {log.resourceId && <span> • ID: {log.resourceId}</span>}\n                      </div>\n                      \n                      {log.details && (\n                        <div className=\"text-sm bg-gray-100 dark:bg-gray-700 rounded p-2 mb-2\">\n                          <pre className=\"whitespace-pre-wrap font-mono text-xs\">\n                            {typeof log.details === 'string' ? log.details : JSON.stringify(log.details, null, 2)}\n                          </pre>\n                        </div>\n                      )}\n                      \n                      <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                        {log.userId && (\n                          <span>\n                            <User className=\"w-3 h-3 inline mr-1\" />\n                            User: {log.userId}\n                          </span>\n                        )}\n                        \n                        {log.ipAddress && (\n                          <span>IP: {log.ipAddress}</span>\n                        )}\n                        \n                        <span>\n                          Browser: {formatUserAgent(log.userAgent)}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n          \n          {logs.length === filters.limit && (\n            <div className=\"text-center pt-4\">\n              <Button \n                onClick={() => setFilters(prev => ({ ...prev, offset: prev.offset + prev.limit }))}\n                variant=\"outline\"\n                data-testid=\"button-load-more\"\n              >\n                Load More\n              </Button>\n            </div>\n          )}\n        </div>\n      </Card>\n\n      {/* Top Actions */}\n      {stats && stats.topActions.length > 0 && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card className=\"p-6\">\n            <h3 className=\"font-semibold text-gray-900 dark:text-white mb-4\">Top Actions</h3>\n            <div className=\"space-y-3\">\n              {stats.topActions.slice(0, 8).map((item, index) => (\n                <div key={item.action} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      {index + 1}.\n                    </span>\n                    <span className=\"text-sm text-gray-900 dark:text-white\">{item.action}</span>\n                  </div>\n                  <Badge variant=\"outline\">{item.count}</Badge>\n                </div>\n              ))}\n            </div>\n          </Card>\n\n          <Card className=\"p-6\">\n            <h3 className=\"font-semibold text-gray-900 dark:text-white mb-4\">Top Users</h3>\n            <div className=\"space-y-3\">\n              {stats.topUsers.slice(0, 8).map((user, index) => (\n                <div key={user.userId} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      {index + 1}.\n                    </span>\n                    <span className=\"text-sm text-gray-900 dark:text-white\">\n                      {user.userName || user.userId}\n                    </span>\n                  </div>\n                  <Badge variant=\"outline\">{user.count}</Badge>\n                </div>\n              ))}\n            </div>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":15722},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n\n// Role-based access control middleware\nexport const requireRole = (requiredRoles: string[]): RequestHandler => {\n  return async (req, res, next) => {\n    const user = req.user as any;\n    if (!req.isAuthenticated() || !user.claims?.sub) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    try {\n      const dbUser = await storage.getUser(user.claims.sub);\n      if (!dbUser) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      if (!requiredRoles.includes(dbUser.role)) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      next();\n    } catch (error) {\n      console.error(\"Role check error:\", error);\n      res.status(500).json({ message: \"Authentication error\" });\n    }\n  };\n};\n\n// Admin access middleware\nexport const requireAdmin = requireRole(['admin']);\n\n// Staff or admin access middleware  \nexport const requireStaff = requireRole(['admin', 'staff']);","size_bytes":5182},"client/src/pages/companies.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Building2, Users, Phone, Mail, Globe, MapPin, Plus, Edit, Trash2, Search, Eye } from \"lucide-react\";\nimport { type Company, type Customer } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Companies() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [editingCompany, setEditingCompany] = useState<Company | null>(null);\n  const [viewingCompany, setViewingCompany] = useState<Company | null>(null);\n  const [viewingCustomers, setViewingCustomers] = useState<Customer[]>([]);\n  const { toast } = useToast();\n\n  // Form states\n  const [formData, setFormData] = useState({\n    name: \"\",\n    industry: \"\",\n    description: \"\",\n    website: \"\",\n    address: \"\",\n    phone: \"\",\n    email: \"\",\n    notes: \"\"\n  });\n\n  const { data: companies = [], isLoading } = useQuery<Company[]>({\n    queryKey: [\"/api/companies\"],\n  });\n\n  const { data: customers = [] } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      return apiRequest(\"POST\", \"/api/companies\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      setIsCreateModalOpen(false);\n      resetForm();\n      toast({\n        title: \"Success\",\n        description: \"Company created successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create company\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: { id: string; updates: Partial<typeof formData> }) => {\n      return apiRequest(\"PATCH\", `/api/companies/${data.id}`, data.updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      setEditingCompany(null);\n      resetForm();\n      toast({\n        title: \"Success\",\n        description: \"Company updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update company\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/companies/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      toast({\n        title: \"Success\",\n        description: \"Company deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete company\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      industry: \"\",\n      description: \"\",\n      website: \"\",\n      address: \"\",\n      phone: \"\",\n      email: \"\",\n      notes: \"\"\n    });\n  };\n\n  const handleEdit = (company: Company) => {\n    setEditingCompany(company);\n    setFormData({\n      name: company.name,\n      industry: company.industry || \"\",\n      description: company.description || \"\",\n      website: company.website || \"\",\n      address: company.address || \"\",\n      phone: company.phone || \"\",\n      email: company.email || \"\",\n      notes: company.notes || \"\"\n    });\n  };\n\n  const handleView = async (company: Company) => {\n    setViewingCompany(company);\n    // Fetch company customers\n    const companyCustomers = customers.filter((c: Customer) => c.companyId === company.id);\n    setViewingCustomers(companyCustomers);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingCompany) {\n      updateMutation.mutate({ id: editingCompany.id, updates: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const filteredCompanies = companies.filter((company) =>\n    company.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (company.industry && company.industry.toLowerCase().includes(searchTerm.toLowerCase()))\n  );\n\n  const getCompanyCustomerCount = (companyId: string) => {\n    return customers.filter((c) => c.companyId === companyId).length;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Companies</h1>\n          <p className=\"text-muted-foreground\">\n            Manage your business clients and corporate relationships\n          </p>\n        </div>\n        <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-company\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Company\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add New Company</DialogTitle>\n              <DialogDescription>\n                Create a new business client profile\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Company Name *</Label>\n                <Input\n                  id=\"name\"\n                  data-testid=\"input-company-name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"industry\">Industry</Label>\n                <Input\n                  id=\"industry\"\n                  data-testid=\"input-company-industry\"\n                  value={formData.industry}\n                  onChange={(e) => setFormData(prev => ({ ...prev, industry: e.target.value }))}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  data-testid=\"input-company-email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Phone</Label>\n                <Input\n                  id=\"phone\"\n                  data-testid=\"input-company-phone\"\n                  value={formData.phone}\n                  onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"website\">Website</Label>\n                <Input\n                  id=\"website\"\n                  data-testid=\"input-company-website\"\n                  value={formData.website}\n                  onChange={(e) => setFormData(prev => ({ ...prev, website: e.target.value }))}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"address\">Address</Label>\n                <Textarea\n                  id=\"address\"\n                  data-testid=\"input-company-address\"\n                  value={formData.address}\n                  onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}\n                  rows={2}\n                />\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsCreateModalOpen(false);\n                    resetForm();\n                  }}\n                  data-testid=\"button-cancel-company\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createMutation.isPending}\n                  data-testid=\"button-save-company\"\n                >\n                  {createMutation.isPending ? \"Creating...\" : \"Create Company\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Search */}\n      <div className=\"flex items-center space-x-2 max-w-md\">\n        <Search className=\"w-4 h-4 text-muted-foreground\" />\n        <Input\n          placeholder=\"Search companies...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          data-testid=\"input-search-companies\"\n          className=\"flex-1\"\n        />\n      </div>\n\n      {/* Companies Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredCompanies.map((company: Company) => (\n          <Card key={company.id} className=\"hover:shadow-md transition-shadow\">\n            <CardHeader>\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <Building2 className=\"w-5 h-5 text-primary\" />\n                  <CardTitle className=\"text-lg\" data-testid={`text-company-name-${company.id}`}>\n                    {company.name}\n                  </CardTitle>\n                </div>\n                <div className=\"flex space-x-1\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => handleView(company)}\n                    data-testid={`button-view-company-${company.id}`}\n                  >\n                    <Eye className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => handleEdit(company)}\n                    data-testid={`button-edit-company-${company.id}`}\n                  >\n                    <Edit className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => deleteMutation.mutate(company.id)}\n                    data-testid={`button-delete-company-${company.id}`}\n                  >\n                    <Trash2 className=\"w-4 h-4 text-red-500\" />\n                  </Button>\n                </div>\n              </div>\n              {company.industry && (\n                <Badge variant=\"secondary\" data-testid={`text-company-industry-${company.id}`}>\n                  {company.industry}\n                </Badge>\n              )}\n              {company.description && (\n                <CardDescription data-testid={`text-company-description-${company.id}`}>\n                  {company.description}\n                </CardDescription>\n              )}\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-center text-sm text-muted-foreground\">\n                <Users className=\"w-4 h-4 mr-2\" />\n                <span data-testid={`text-company-customers-${company.id}`}>\n                  {getCompanyCustomerCount(company.id)} employees\n                </span>\n              </div>\n              {company.email && (\n                <div className=\"flex items-center text-sm text-muted-foreground\">\n                  <Mail className=\"w-4 h-4 mr-2\" />\n                  <span data-testid={`text-company-email-${company.id}`}>\n                    {company.email}\n                  </span>\n                </div>\n              )}\n              {company.phone && (\n                <div className=\"flex items-center text-sm text-muted-foreground\">\n                  <Phone className=\"w-4 h-4 mr-2\" />\n                  <span data-testid={`text-company-phone-${company.id}`}>\n                    {company.phone}\n                  </span>\n                </div>\n              )}\n              {company.website && (\n                <div className=\"flex items-center text-sm text-muted-foreground\">\n                  <Globe className=\"w-4 h-4 mr-2\" />\n                  <a\n                    href={company.website}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"text-blue-600 hover:underline\"\n                    data-testid={`link-company-website-${company.id}`}\n                  >\n                    {company.website}\n                  </a>\n                </div>\n              )}\n              {company.address && (\n                <div className=\"flex items-start text-sm text-muted-foreground\">\n                  <MapPin className=\"w-4 h-4 mr-2 mt-0.5\" />\n                  <span data-testid={`text-company-address-${company.id}`}>\n                    {company.address}\n                  </span>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {filteredCompanies.length === 0 && !isLoading && (\n        <div className=\"text-center py-12\">\n          <Building2 className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-medium mb-2\">No companies found</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            {searchTerm ? \"Try adjusting your search terms\" : \"Get started by adding your first company\"}\n          </p>\n          {!searchTerm && (\n            <Button onClick={() => setIsCreateModalOpen(true)} data-testid=\"button-create-first-company\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Company\n            </Button>\n          )}\n        </div>\n      )}\n\n      {/* Edit Modal */}\n      <Dialog open={!!editingCompany} onOpenChange={() => {\n        setEditingCompany(null);\n        resetForm();\n      }}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Company</DialogTitle>\n            <DialogDescription>\n              Update company information\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-name\">Company Name *</Label>\n              <Input\n                id=\"edit-name\"\n                data-testid=\"input-edit-company-name\"\n                value={formData.name}\n                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-industry\">Industry</Label>\n              <Input\n                id=\"edit-industry\"\n                data-testid=\"input-edit-company-industry\"\n                value={formData.industry}\n                onChange={(e) => setFormData(prev => ({ ...prev, industry: e.target.value }))}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-email\">Email</Label>\n              <Input\n                id=\"edit-email\"\n                type=\"email\"\n                data-testid=\"input-edit-company-email\"\n                value={formData.email}\n                onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-phone\">Phone</Label>\n              <Input\n                id=\"edit-phone\"\n                data-testid=\"input-edit-company-phone\"\n                value={formData.phone}\n                onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-website\">Website</Label>\n              <Input\n                id=\"edit-website\"\n                data-testid=\"input-edit-company-website\"\n                value={formData.website}\n                onChange={(e) => setFormData(prev => ({ ...prev, website: e.target.value }))}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-address\">Address</Label>\n              <Textarea\n                id=\"edit-address\"\n                data-testid=\"input-edit-company-address\"\n                value={formData.address}\n                onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}\n                rows={2}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-notes\">Notes</Label>\n              <Textarea\n                id=\"edit-notes\"\n                data-testid=\"input-edit-company-notes\"\n                value={formData.notes}\n                onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n                rows={3}\n              />\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  setEditingCompany(null);\n                  resetForm();\n                }}\n                data-testid=\"button-cancel-edit-company\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={updateMutation.isPending}\n                data-testid=\"button-save-edit-company\"\n              >\n                {updateMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* View Company Details Modal */}\n      <Dialog open={!!viewingCompany} onOpenChange={() => {\n        setViewingCompany(null);\n        setViewingCustomers([]);\n      }}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <Building2 className=\"w-5 h-5\" />\n              <span>{viewingCompany?.name}</span>\n            </DialogTitle>\n            <DialogDescription>\n              Company details and employee contacts\n            </DialogDescription>\n          </DialogHeader>\n          \n          {viewingCompany && (\n            <div className=\"space-y-6\">\n              {/* Company Info */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Industry</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {viewingCompany.industry || \"Not specified\"}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <Badge variant={viewingCompany.isActive ? \"default\" : \"secondary\"}>\n                    {viewingCompany.isActive ? \"Active\" : \"Inactive\"}\n                  </Badge>\n                </div>\n                {viewingCompany.email && (\n                  <div>\n                    <Label className=\"text-sm font-medium\">Email</Label>\n                    <p className=\"text-sm text-muted-foreground\">{viewingCompany.email}</p>\n                  </div>\n                )}\n                {viewingCompany.phone && (\n                  <div>\n                    <Label className=\"text-sm font-medium\">Phone</Label>\n                    <p className=\"text-sm text-muted-foreground\">{viewingCompany.phone}</p>\n                  </div>\n                )}\n                {viewingCompany.website && (\n                  <div className=\"col-span-2\">\n                    <Label className=\"text-sm font-medium\">Website</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      <a\n                        href={viewingCompany.website}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-blue-600 hover:underline\"\n                      >\n                        {viewingCompany.website}\n                      </a>\n                    </p>\n                  </div>\n                )}\n                {viewingCompany.address && (\n                  <div className=\"col-span-2\">\n                    <Label className=\"text-sm font-medium\">Address</Label>\n                    <p className=\"text-sm text-muted-foreground\">{viewingCompany.address}</p>\n                  </div>\n                )}\n                {viewingCompany.description && (\n                  <div className=\"col-span-2\">\n                    <Label className=\"text-sm font-medium\">Description</Label>\n                    <p className=\"text-sm text-muted-foreground\">{viewingCompany.description}</p>\n                  </div>\n                )}\n                {viewingCompany.notes && (\n                  <div className=\"col-span-2\">\n                    <Label className=\"text-sm font-medium\">Notes</Label>\n                    <p className=\"text-sm text-muted-foreground\">{viewingCompany.notes}</p>\n                  </div>\n                )}\n              </div>\n\n              {/* Employee Contacts */}\n              <div>\n                <h4 className=\"font-medium mb-3 flex items-center\">\n                  <Users className=\"w-4 h-4 mr-2\" />\n                  Employee Contacts ({viewingCustomers.length})\n                </h4>\n                {viewingCustomers.length > 0 ? (\n                  <div className=\"space-y-2\">\n                    {viewingCustomers.map((customer) => (\n                      <Card key={customer.id} className=\"p-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h5 className=\"font-medium\">{customer.name}</h5>\n                            <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                              {customer.jobTitle && <span>{customer.jobTitle}</span>}\n                              {customer.department && <span>• {customer.department}</span>}\n                            </div>\n                          </div>\n                          <div className=\"text-right text-sm text-muted-foreground\">\n                            <div>{customer.email}</div>\n                            {customer.phone && <div>{customer.phone}</div>}\n                          </div>\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-sm text-muted-foreground\">No employee contacts found</p>\n                )}\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":23607},"GMAIL_TROUBLESHOOTING.md":{"content":"# Gmail Authentication Troubleshooting Guide\n\n## The Issue: \"Invalid credentials\" Error\n\nThis error happens when Gmail App Password authentication fails. Here's how to fix it:\n\n## Step-by-Step Solution\n\n### 1. Generate a Fresh Gmail App Password\n\n**IMPORTANT**: You must use a Gmail App Password, NOT your regular Gmail password.\n\n1. Go to your Google Account: https://myaccount.google.com/\n2. Click \"Security\" in the left sidebar\n3. Make sure 2-Factor Authentication is ON (required for App Passwords)\n4. Scroll down and click \"App passwords\"\n5. Click \"Select app\" → Choose \"Mail\" or \"Other (Custom name)\"\n6. Click \"Generate\"\n7. **Copy the 16-character password immediately** (format: `abcd efgh ijkl mnop`)\n\n### 2. Common Mistakes to Avoid\n\n❌ **Don't use your regular Gmail password**\n❌ **Don't include spaces when copying the App Password**  \n❌ **Don't reuse old App Passwords that might have expired**\n❌ **Don't use your account recovery password**\n\n✅ **Use only the 16-character App Password**\n✅ **Copy it exactly as Google provides it**\n✅ **Generate fresh App Passwords when they stop working**\n\n### 3. Test Your Credentials\n\n1. Go to Settings → Integrations\n2. Enter your **full Gmail address** (example@gmail.com)\n3. Paste the **16-character App Password** in the App Password field\n4. Click \"Test Connection\"\n5. If it works, click \"Start Monitoring\"\n\n### 4. If It Still Doesn't Work\n\n**Generate a NEW App Password**:\n- Delete the old one from your Google Account\n- Create a brand new App Password\n- Use the new password in the system\n\n**Check Your Gmail Settings**:\n- Make sure IMAP is enabled in Gmail settings\n- Go to Settings → Forwarding and POP/IMAP → Enable IMAP\n\n**Security Check**:\n- Sometimes Google blocks unusual activity\n- Check your Gmail \"Recent security activity\" for any blocked attempts\n- Approve the access if asked\n\n## Why This Happens\n\nGmail App Passwords can:\n- Expire over time\n- Get revoked by Google security systems  \n- Stop working if your account security changes\n- Fail if 2FA gets disabled and re-enabled\n\nThe solution is always to **generate a fresh App Password** when authentication fails.\n\n## Success Indicators\n\nWhen it's working correctly, you'll see:\n- \"Gmail Connected!\" message after testing\n- \"Email monitoring started successfully\" when you start monitoring\n- Customer replies automatically appear in proposal communication history\n\n## Still Having Issues?\n\n1. Try using a different browser to generate the App Password\n2. Make sure your Gmail account doesn't have unusual security restrictions\n3. Contact Google Support if you can't generate App Passwords\n4. Check if your organization (if using G Suite) allows App Passwords","size_bytes":2697},"STRIPE_CONNECT_TEST_GUIDE.md":{"content":"# Stripe Connect Testing Guide\n\n## The Problem You're Experiencing\nWhen you click the Connect onboarding link, Stripe is asking for real bank account information. This happens because:\n\n1. **Test vs Live Mode**: Your Connect account might be in live mode\n2. **Account Type**: Express accounts still require some real verification in test mode\n3. **Test Data Requirements**: You need to use specific test information\n\n## How to Test Stripe Connect Properly\n\n### Option 1: Use Test Mode Express Account (Recommended)\n1. **Ensure Test Mode**: Verify your Stripe keys start with `sk_test_` and `pk_test_`\n2. **Create Test Express Account**: Use the endpoint `/api/stripe/connect/create-test-account`\n3. **Use Test Data During Onboarding**:\n   - **Phone**: Use `000-000-0000` (test phone number)\n   - **SSN**: Use `000-00-0000` (test SSN)\n   - **Bank Account**: Use test routing number `110000000` and account `000123456789`\n   - **Address**: Use any US address like `123 Main St, San Francisco, CA 94102`\n\n### Option 2: Skip Connect for Testing\nFor pure payment testing without venue payouts:\n```bash\n# Test regular Stripe payments without Connect\ncurl -X POST \"http://localhost:5000/api/create-payment-intent\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"amount\": 100, \"proposalId\": \"test\"}'\n```\n\n### Option 3: Use Stripe Test Connect Accounts\nStripe provides pre-made test accounts:\n- **Test Account ID**: `acct_test_123456789`\n- Use this directly in payment intents for testing\n\n## Test Cards for Connect Payments\n- **Success**: `4000000000000002`\n- **Declined**: `4000000000000341` \n- **Requires Authentication**: `4000002500003155`\n\n## Test Information for Onboarding\nWhen Stripe asks for information during Connect onboarding, use these TEST values:\n\n### Personal Information\n- **Name**: Test Venue Owner\n- **Email**: test@example.com\n- **Phone**: 000-000-0000\n- **SSN**: 000-00-0000 (for US accounts)\n\n### Business Information  \n- **Business Name**: Test Venue LLC\n- **EIN**: 00-0000000\n- **Business Address**: 123 Test St, San Francisco, CA 94102\n\n### Bank Account (Test)\n- **Routing Number**: 110000000\n- **Account Number**: 000123456789\n- **Account Type**: Checking\n\n## Important Notes\n1. **In test mode, you NEVER need real information**\n2. **If it asks for real data, you're likely in live mode**\n3. **Test mode Express accounts skip most verification steps**\n4. **All test data above is provided by Stripe for testing purposes**\n\n## Troubleshooting\nIf you're still seeing requests for real information:\n1. Double-check your API keys are test keys (`sk_test_...`)\n2. Ensure you're using the test dashboard (https://dashboard.stripe.com/test/)\n3. Create a fresh test Express account\n4. Use the exact test values listed above\n\nThe key is making sure you're in TEST MODE throughout the entire process!","size_bytes":2811},"client/src/components/events/cancellation-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { X } from \"lucide-react\";\n\ninterface CancellationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  eventId: string;\n  eventTitle: string;\n}\n\nconst CANCELLATION_REASONS = [\n  \"Client requested cancellation\",\n  \"Venue unavailable\",\n  \"Weather conditions\", \n  \"Budget constraints\",\n  \"Schedule conflict\",\n  \"Health/safety concerns\",\n  \"Vendor issues\",\n  \"Other\"\n];\n\nexport function CancellationModal({ isOpen, onClose, eventId, eventTitle }: CancellationModalProps) {\n  const [selectedReason, setSelectedReason] = useState(\"\");\n  const [customReason, setCustomReason] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const cancelEventMutation = useMutation({\n    mutationFn: async ({ reason }: { reason: string }) => {\n      return await apiRequest(\"PATCH\", `/api/bookings/${eventId}`, {\n        status: \"cancelled\",\n        cancellationReason: reason,\n        cancelledAt: new Date().toISOString()\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Event Cancelled\",\n        description: `\"${eventTitle}\" has been cancelled successfully.`,\n      });\n      \n      // Invalidate relevant queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/metrics\"] });\n      \n      onClose();\n      resetForm();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to cancel event. Please try again.\",\n        variant: \"destructive\",\n      });\n      console.error(\"Failed to cancel event:\", error);\n    },\n  });\n\n  const resetForm = () => {\n    setSelectedReason(\"\");\n    setCustomReason(\"\");\n  };\n\n  const handleSubmit = () => {\n    const finalReason = selectedReason === \"Other\" ? customReason : selectedReason;\n    \n    if (!finalReason.trim()) {\n      toast({\n        title: \"Reason Required\",\n        description: \"Please select or enter a cancellation reason.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    cancelEventMutation.mutate({ reason: finalReason.trim() });\n  };\n\n  const handleClose = () => {\n    if (cancelEventMutation.isPending) return;\n    onClose();\n    resetForm();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader className=\"flex flex-row items-center justify-between\">\n          <DialogTitle>Cancel Event</DialogTitle>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={handleClose}\n            disabled={cancelEventMutation.isPending}\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          <div className=\"text-sm text-gray-600\">\n            Are you sure you want to cancel \"{eventTitle}\"? Please provide a reason for cancellation.\n          </div>\n\n          <div className=\"space-y-4\">\n            <Label className=\"text-base font-medium\">Reason for Cancellation</Label>\n            \n            <RadioGroup \n              value={selectedReason} \n              onValueChange={setSelectedReason}\n              className=\"space-y-2\"\n            >\n              {CANCELLATION_REASONS.map((reason) => (\n                <div key={reason} className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value={reason} id={reason} />\n                  <Label \n                    htmlFor={reason}\n                    className=\"text-sm font-normal cursor-pointer flex-1\"\n                  >\n                    {reason}\n                  </Label>\n                </div>\n              ))}\n            </RadioGroup>\n\n            {selectedReason === \"Other\" && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"custom-reason\" className=\"text-sm\">\n                  Please specify:\n                </Label>\n                <Textarea\n                  id=\"custom-reason\"\n                  placeholder=\"Enter the specific reason for cancellation...\"\n                  value={customReason}\n                  onChange={(e) => setCustomReason(e.target.value)}\n                  className=\"min-h-[80px]\"\n                />\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex gap-3 justify-end\">\n            <Button\n              variant=\"outline\"\n              onClick={handleClose}\n              disabled={cancelEventMutation.isPending}\n            >\n              Keep Event\n            </Button>\n            <Button\n              onClick={handleSubmit}\n              disabled={cancelEventMutation.isPending || !selectedReason}\n              variant=\"destructive\"\n            >\n              {cancelEventMutation.isPending ? \"Cancelling...\" : \"Cancel Event\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5467},"BLUEHOST_DEPLOYMENT.md":{"content":"# 🚀 Deploying VenueFlow to Bluehost\n\n## 📋 Pre-Deployment Checklist\n\n### What You'll Need\n- [ ] Bluehost account with your domain\n- [ ] FTP/cPanel access credentials\n- [ ] Node.js app support (check with Bluehost)\n- [ ] Subdomain wildcard support\n\n## 🔧 Step 1: Prepare Your Application\n\n### Build the Production Version\n```bash\n# In your local development environment\nnpm run build\n\n# Create deployment package\nnpm run build:production\n```\n\n### Create Production Environment File\nCreate `.env.production` file:\n```bash\n# Database (you may need to use Bluehost's MySQL instead)\nDATABASE_URL=mysql://username:password@localhost:3306/venueflow_db\n\n# JWT & Authentication\nJWT_SECRET=your-super-secure-256-bit-secret-key-here\nSUPER_ADMIN_EMAIL=admin@yourdomain.com\nSUPER_ADMIN_PASSWORD_HASH=$2a$10$your-hashed-password-here\n\n# Email Configuration (use your domain email)\nSMTP_HOST=mail.yourdomain.com\nSMTP_PORT=587\nSMTP_USER=noreply@yourdomain.com\nSMTP_PASS=your-email-password\nSMTP_FROM=noreply@yourdomain.com\n\n# Stripe Configuration\nSTRIPE_PUBLISHABLE_KEY=pk_live_your_stripe_key\nSTRIPE_SECRET_KEY=sk_live_your_stripe_key\nSTRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret\n\n# Application URLs\nNODE_ENV=production\nPORT=3000\nFRONTEND_URL=https://yourdomain.com\nAPI_URL=https://yourdomain.com\n\n# Security\nCORS_ORIGINS=https://yourdomain.com,https://www.yourdomain.com,https://*.yourdomain.com\nRATE_LIMIT_WINDOW_MS=900000\nRATE_LIMIT_MAX_REQUESTS=100\n```\n\n## 🌐 Step 2: Bluehost Configuration\n\n### Option A: Bluehost with Node.js Support\n\nIf Bluehost supports Node.js apps:\n\n1. **Access cPanel**\n   - Log into your Bluehost account\n   - Go to cPanel → \"Software\" section\n   - Look for \"Node.js App\" or \"Node.js Selector\"\n\n2. **Create Node.js Application**\n   ```\n   Node.js Version: 18.x or higher\n   Application Root: public_html\n   Application URL: yourdomain.com\n   Application Startup File: server/index.js\n   ```\n\n3. **Upload Files**\n   - Use File Manager or FTP\n   - Upload all files to `public_html/`\n   - Make sure `.env.production` is uploaded\n\n4. **Install Dependencies**\n   ```bash\n   # In cPanel Terminal or SSH\n   cd public_html\n   npm install --production\n   ```\n\n### Option B: Bluehost with Static Hosting + External API\n\nIf Bluehost doesn't support Node.js:\n\n1. **Deploy Frontend to Bluehost**\n   - Build static version: `npm run build:static`\n   - Upload `dist/` folder contents to `public_html/`\n\n2. **Deploy Backend to Node.js Hosting**\n   - Use services like Railway, Render, or DigitalOcean\n   - Update API URLs in frontend\n\n## 🗄️ Step 3: Database Setup\n\n### Bluehost MySQL Setup\n\n1. **Create Database in cPanel**\n   - Go to cPanel → \"Databases\" → \"MySQL Databases\"\n   - Create database: `venueflow_db`\n   - Create user with full privileges\n\n2. **Update Database Connection**\n   ```javascript\n   // Update your database connection for MySQL\n   DATABASE_URL=mysql://username:password@localhost:3306/venueflow_db\n   ```\n\n3. **Convert PostgreSQL to MySQL** (if needed)\n   - Update schema files to use MySQL syntax\n   - Modify data types as needed\n\n## 🚀 Step 4: Upload and Configure\n\n### File Upload Methods\n\n**Method 1: FTP Client (Recommended)**\n```bash\n# Using FileZilla or similar\nHost: ftp.yourdomain.com\nUsername: your-ftp-username\nPassword: your-ftp-password\nPort: 21\n\n# Upload entire project to public_html/\n```\n\n**Method 2: cPanel File Manager**\n1. Compress your project: `zip -r venueflow.zip .`\n2. Upload zip file in cPanel File Manager\n3. Extract in `public_html/`\n\n**Method 3: Git (if available)**\n```bash\n# If Bluehost supports Git\ncd public_html\ngit clone https://github.com/yourusername/venueflow.git .\n```\n\n### Set File Permissions\n```bash\n# Set correct permissions\nchmod 755 public_html/\nchmod 644 public_html/.env.production\nchmod +x public_html/server/index.js\n```\n\n## 🌍 Step 5: Domain and Subdomain Setup\n\n### Configure Wildcard Subdomains\n\n1. **In Bluehost cPanel**\n   - Go to \"Subdomains\" section\n   - Create wildcard subdomain: `*`\n   - Point to same directory as main domain\n\n2. **Alternative: Manual Subdomain Creation**\n   ```\n   Create subdomains for common patterns:\n   - demo.yourdomain.com\n   - test.yourdomain.com\n   - *.yourdomain.com (if supported)\n   ```\n\n### SSL Certificate Setup\n\n1. **Enable SSL in cPanel**\n   - Go to \"SSL/TLS\" section\n   - Enable \"Force HTTPS Redirect\"\n   - Install Let's Encrypt certificate\n\n2. **Wildcard SSL** (if needed)\n   - May require paid SSL certificate\n   - Contact Bluehost support for wildcard SSL\n\n## ⚙️ Step 6: Application Configuration\n\n### Update Package.json for Bluehost\n```json\n{\n  \"scripts\": {\n    \"start\": \"node server/index.js\",\n    \"build\": \"tsc && npm run build:client\",\n    \"build:client\": \"vite build\",\n    \"production\": \"NODE_ENV=production npm start\"\n  },\n  \"engines\": {\n    \"node\": \">=18.0.0\",\n    \"npm\": \">=8.0.0\"\n  }\n}\n```\n\n### Create Startup Script\n```bash\n# Create start.sh\n#!/bin/bash\ncd /home/username/public_html\nexport NODE_ENV=production\nnpm start\n```\n\n## 📧 Step 7: Email Configuration\n\n### Bluehost Email Setup\n\n1. **Create Email Account**\n   - cPanel → \"Email Accounts\"\n   - Create: `noreply@yourdomain.com`\n\n2. **SMTP Settings**\n   ```\n   SMTP_HOST=mail.yourdomain.com\n   SMTP_PORT=587\n   SMTP_SECURE=false\n   SMTP_USER=noreply@yourdomain.com\n   SMTP_PASS=your-email-password\n   ```\n\n## 💳 Step 8: Stripe Configuration\n\n### Webhook Setup\n1. **In Stripe Dashboard**\n   - Add webhook endpoint: `https://yourdomain.com/api/webhooks/stripe`\n   - Select events:\n     - `customer.subscription.created`\n     - `customer.subscription.updated`\n     - `invoice.payment_succeeded`\n     - `invoice.payment_failed`\n\n2. **Test Webhook**\n   ```bash\n   # Test webhook delivery\n   curl -X POST https://yourdomain.com/api/webhooks/stripe \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"test\": true}'\n   ```\n\n## 🔍 Step 9: Testing Deployment\n\n### Basic Tests\n```bash\n# Test main site\ncurl https://yourdomain.com\n\n# Test API\ncurl https://yourdomain.com/api/public/packages\n\n# Test subdomain (if configured)\ncurl https://demo.yourdomain.com\n```\n\n### Frontend Tests\n- [ ] Landing page loads\n- [ ] Signup flow works\n- [ ] Super admin login\n- [ ] Package selection\n- [ ] Payment integration\n\n## 🐛 Step 10: Troubleshooting\n\n### Common Bluehost Issues\n\n**Issue 1: Node.js Not Supported**\n```\nSolution: Use static hosting + external API\n- Deploy frontend to Bluehost\n- Deploy backend to Railway/Render/DigitalOcean\n- Update API URLs\n```\n\n**Issue 2: Subdomain Issues**\n```\nSolution: Manual subdomain creation\n- Create each tenant subdomain manually\n- Use subdirectory routing instead: yourdomain.com/tenant/demo\n```\n\n**Issue 3: Database Connection Issues**\n```\nSolution: Check MySQL configuration\n- Verify database credentials\n- Check MySQL version compatibility\n- Update connection string format\n```\n\n**Issue 4: File Permissions**\n```bash\n# Fix permissions\nfind public_html/ -type f -exec chmod 644 {} \\;\nfind public_html/ -type d -exec chmod 755 {} \\;\nchmod +x public_html/server/index.js\n```\n\n### Log Files\n```bash\n# Check error logs in cPanel\n# Look for:\n- Error Logs\n- Access Logs\n- Node.js app logs (if available)\n```\n\n## 📞 Step 11: Go Live Checklist\n\n### Pre-Launch\n- [ ] Domain points to Bluehost\n- [ ] SSL certificate installed\n- [ ] Environment variables configured\n- [ ] Database created and connected\n- [ ] Email sending configured\n- [ ] Stripe webhooks working\n- [ ] All tests passing\n\n### Launch\n- [ ] Update DNS if needed\n- [ ] Test complete signup flow\n- [ ] Verify email notifications\n- [ ] Test payment processing\n- [ ] Monitor error logs\n\n### Post-Launch\n- [ ] Set up monitoring\n- [ ] Configure backups\n- [ ] Test subdomain routing\n- [ ] Verify super admin access\n\n## 🆘 Alternative Solutions\n\n### If Bluehost Doesn't Support Node.js\n\n**Option 1: Hybrid Deployment**\n```\nFrontend: Bluehost (static files)\nBackend: Railway.app or Render.com\nDatabase: PlanetScale or Railway\n```\n\n**Option 2: Full Migration**\n```\nConsider moving to:\n- DigitalOcean App Platform\n- Railway.app\n- Render.com\n- Vercel + PlanetScale\n```\n\n**Option 3: Static Export**\n```bash\n# Export as static site\nnpm run build:static\n# Upload only frontend files\n# Use serverless functions for API\n```\n\n## 📚 Additional Resources\n\n- [Bluehost Node.js Documentation](https://www.bluehost.com/help/article/nodejs-support)\n- [Bluehost cPanel Guide](https://www.bluehost.com/help/cpanel)\n- [Bluehost SSL Setup](https://www.bluehost.com/help/article/ssl-certificates)\n\n---\n\n🎉 **Ready to deploy to Bluehost!** Follow these steps and your VenueFlow SaaS platform will be live!","size_bytes":8586},"DEPLOYMENT.md":{"content":"# 🚀 VenueFlow SaaS Platform - Production Deployment Guide\n\n## 📋 Pre-Deployment Checklist\n\n### Environment Setup\n- [ ] Set up production PostgreSQL database\n- [ ] Configure environment variables (copy from `.env.example`)\n- [ ] Set up Stripe account and obtain API keys\n- [ ] Configure SMTP service for email notifications\n- [ ] Set up SSL certificate for HTTPS\n- [ ] Configure domain and subdomain DNS\n\n### Security Configuration\n- [ ] Generate strong JWT secret\n- [ ] Hash super admin password with bcrypt\n- [ ] Configure CORS origins for production domains\n- [ ] Set up rate limiting for production traffic\n- [ ] Configure Content Security Policy headers\n\n## 🔧 Environment Variables\n\nCreate a `.env` file with the following variables:\n\n```bash\n# Database\nDATABASE_URL=postgresql://username:password@host:5432/venueflow_prod\n\n# JWT & Authentication\nJWT_SECRET=your-256-bit-secret-key-here\nSUPER_ADMIN_EMAIL=admin@yourcompany.com\nSUPER_ADMIN_PASSWORD_HASH=your-bcrypt-hashed-password\n\n# Email Configuration\nSMTP_HOST=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USER=your-email@company.com\nSMTP_PASS=your-app-password\nSMTP_FROM=noreply@yourcompany.com\n\n# Stripe Payment Processing\nSTRIPE_PUBLISHABLE_KEY=pk_live_your_live_key\nSTRIPE_SECRET_KEY=sk_live_your_live_key\nSTRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret\n\n# Application\nNODE_ENV=production\nPORT=3000\nFRONTEND_URL=https://yourdomain.com\nAPI_URL=https://api.yourdomain.com\n\n# Security\nCORS_ORIGINS=https://yourdomain.com,https://www.yourdomain.com,https://*.yourdomain.com\nRATE_LIMIT_WINDOW_MS=900000\nRATE_LIMIT_MAX_REQUESTS=100\nMAX_REQUEST_SIZE=10mb\n\n# Logging\nLOG_LEVEL=info\nLOG_FILE=/var/log/venueflow/app.log\n```\n\n## 🗄️ Database Setup\n\n### PostgreSQL Installation & Configuration\n\n```bash\n# Install PostgreSQL\nsudo apt update\nsudo apt install postgresql postgresql-contrib\n\n# Create database and user\nsudo -u postgres createuser --interactive venueflow\nsudo -u postgres createdb venueflow_prod\nsudo -u postgres psql -c \"ALTER USER venueflow PASSWORD 'secure_password';\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE venueflow_prod TO venueflow;\"\n```\n\n### Run Database Migrations\n\n```bash\n# Install dependencies\nnpm install\n\n# Run database migrations (if using a migration system)\nnpm run db:migrate\n\n# Seed initial data\nnpm run db:seed\n```\n\n## 🎯 Stripe Configuration\n\n### 1. Create Stripe Products and Prices\n\n```bash\n# Create products for each subscription tier\nstripe products create --name=\"Starter Plan\" --description=\"Perfect for small venues\"\nstripe products create --name=\"Professional Plan\" --description=\"For growing businesses\"\nstripe products create --name=\"Enterprise Plan\" --description=\"For large organizations\"\n\n# Create recurring prices for each product\nstripe prices create --product=prod_starter --unit-amount=2999 --currency=usd --recurring interval=month\nstripe prices create --product=prod_professional --unit-amount=7999 --currency=usd --recurring interval=month\nstripe prices create --product=prod_enterprise --unit-amount=19999 --currency=usd --recurring interval=month\n```\n\n### 2. Configure Webhooks\n\nAdd webhook endpoint: `https://yourdomain.com/api/webhooks/stripe`\n\nRequired events:\n- `customer.subscription.created`\n- `customer.subscription.updated`\n- `customer.subscription.deleted`\n- `invoice.payment_succeeded`\n- `invoice.payment_failed`\n\n## 🌐 DNS & Domain Setup\n\n### Main Domain\n```\nyourdomain.com → Your application server\nwww.yourdomain.com → Redirect to yourdomain.com\n```\n\n### Subdomain Wildcard\n```\n*.yourdomain.com → Your application server\n```\n\n### SSL Certificate\n```bash\n# Using Let's Encrypt with Certbot\nsudo apt install certbot python3-certbot-nginx\nsudo certbot --nginx -d yourdomain.com -d www.yourdomain.com -d *.yourdomain.com\n```\n\n## 🚢 Deployment Options\n\n### Option 1: Docker Deployment\n\n```dockerfile\n# Dockerfile\nFROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package*.json ./\nRUN npm ci --only=production\n\nCOPY . .\nRUN npm run build\n\nEXPOSE 3000\n\nCMD [\"npm\", \"start\"]\n```\n\n```yaml\n# docker-compose.yml\nversion: '3.8'\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n    env_file:\n      - .env\n    depends_on:\n      - postgres\n      - redis\n\n  postgres:\n    image: postgres:15\n    environment:\n      POSTGRES_DB: venueflow_prod\n      POSTGRES_USER: venueflow\n      POSTGRES_PASSWORD: secure_password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\n  redis:\n    image: redis:7-alpine\n    volumes:\n      - redis_data:/data\n\nvolumes:\n  postgres_data:\n  redis_data:\n```\n\n### Option 2: Traditional Server Deployment\n\n```bash\n# Install Node.js and PM2\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\nsudo npm install -g pm2\n\n# Deploy application\ngit clone https://github.com/yourusername/venueflow.git\ncd venueflow\nnpm install\nnpm run build\n\n# Start with PM2\npm2 start ecosystem.config.js\npm2 save\npm2 startup\n```\n\n### Option 3: Cloud Deployment (AWS/GCP/Azure)\n\n#### AWS with Elastic Beanstalk\n```bash\n# Install EB CLI\npip install awsebcli\n\n# Initialize and deploy\neb init\neb create production\neb deploy\n```\n\n## 🔒 Security Hardening\n\n### Server Security\n```bash\n# Update system\nsudo apt update && sudo apt upgrade -y\n\n# Configure firewall\nsudo ufw allow ssh\nsudo ufw allow 80\nsudo ufw allow 443\nsudo ufw enable\n\n# Install fail2ban\nsudo apt install fail2ban\nsudo systemctl enable fail2ban\n```\n\n### Application Security\n- [ ] Enable HTTPS only\n- [ ] Configure security headers (already implemented)\n- [ ] Set up rate limiting (already implemented)\n- [ ] Regular security updates\n- [ ] Monitor for vulnerabilities\n\n## 📊 Monitoring & Logging\n\n### Application Monitoring\n```bash\n# Install monitoring tools\nnpm install -g @newrelic/cli\nnewrelic install\n\n# Set up log rotation\nsudo vim /etc/logrotate.d/venueflow\n```\n\n### Health Checks\n```javascript\n// Add to your Express app\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n});\n```\n\n## 🔄 Backup Strategy\n\n### Database Backups\n```bash\n# Daily automated backups\ncrontab -e\n# Add: 0 2 * * * pg_dump venueflow_prod | gzip > /backups/db_$(date +%Y%m%d).sql.gz\n```\n\n### File Backups\n```bash\n# Backup uploaded files\nrsync -av /app/uploads/ /backups/uploads/\n```\n\n## 🚀 Post-Deployment\n\n### 1. Verify Deployment\n- [ ] Test landing page loads\n- [ ] Test signup flow\n- [ ] Test super admin login\n- [ ] Test Stripe webhooks\n- [ ] Test email notifications\n- [ ] Test subdomain routing\n\n### 2. Create Super Admin Account\n```bash\n# Generate password hash\nnode -e \"console.log(require('bcryptjs').hashSync('your-secure-password', 10))\"\n\n# Update environment variable\nSUPER_ADMIN_PASSWORD_HASH=generated-hash\n```\n\n### 3. Configure DNS\n- [ ] Set up wildcard subdomain\n- [ ] Configure SSL for subdomains\n- [ ] Test tenant subdomain access\n\n### 4. Test Payment Flow\n- [ ] Create test subscription\n- [ ] Verify webhook delivery\n- [ ] Test trial expiration\n- [ ] Test payment failure handling\n\n## 📈 Scaling Considerations\n\n### Performance Optimization\n- Implement Redis for caching\n- Use CDN for static assets\n- Database query optimization\n- Load balancing for multiple instances\n\n### High Availability\n- Multi-region deployment\n- Database replication\n- Automated failover\n- Regular disaster recovery testing\n\n## 🐛 Troubleshooting\n\n### Common Issues\n\n1. **Subdomain not resolving**\n   - Check DNS wildcard configuration\n   - Verify SSL certificate covers subdomains\n\n2. **Stripe webhooks failing**\n   - Verify webhook URL is accessible\n   - Check webhook secret matches\n\n3. **Email notifications not working**\n   - Verify SMTP credentials\n   - Check spam folder\n   - Verify email service allows app passwords\n\n4. **Rate limiting too strict**\n   - Adjust `RATE_LIMIT_MAX_REQUESTS`\n   - Implement user-specific rate limiting\n\n### Log Analysis\n```bash\n# View application logs\npm2 logs venueflow\n\n# Check system logs\nsudo journalctl -u venueflow -f\n\n# Database logs\nsudo tail -f /var/log/postgresql/postgresql-15-main.log\n```\n\n## 📞 Support\n\nFor deployment support:\n- Email: support@venueflow.com\n- Documentation: https://docs.venueflow.com\n- Issues: https://github.com/venueflow/platform/issues\n\n---\n\n🎉 **Congratulations!** Your VenueFlow SaaS platform is now ready for production customers!","size_bytes":8384},"server/middleware/security.ts":{"content":"import helmet from 'helmet';\nimport rateLimit from 'express-rate-limit';\nimport mongoSanitize from 'express-mongo-sanitize';\nimport compression from 'compression';\nimport cors from 'cors';\nimport type { Express, Request, Response, NextFunction } from 'express';\n\n// Security middleware configuration\nexport function setupSecurity(app: Express) {\n  // Helmet for security headers\n  app.use(helmet({\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [\"'self'\"],\n        styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\n        fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\n        imgSrc: [\"'self'\", \"data:\", \"https:\", \"blob:\"],\n        scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\", \"https://js.stripe.com\"], // Added Stripe.js\n        connectSrc: [\"'self'\", \"https://api.stripe.com\", \"ws:\", \"wss:\"],\n        frameSrc: [\"'self'\", \"https://js.stripe.com\"],\n      },\n    },\n    crossOriginEmbedderPolicy: false, // Disable for better compatibility\n  }));\n\n  // CORS configuration\n  const corsOptions = {\n    origin: function (origin: string | undefined, callback: (err: Error | null, allow?: boolean) => void) {\n      // In development, allow all origins for easier testing\n      if (process.env.NODE_ENV === 'development') {\n        return callback(null, true);\n      }\n      \n      const allowedOrigins = (process.env.CORS_ORIGINS || 'http://localhost:5000').split(',');\n      \n      // Allow requests with no origin (mobile apps, Postman, etc.)\n      if (!origin) return callback(null, true);\n      \n      if (allowedOrigins.indexOf(origin) !== -1) {\n        callback(null, true);\n      } else {\n        callback(new Error('Not allowed by CORS'));\n      }\n    },\n    credentials: true,\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],\n    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],\n  };\n\n  app.use(cors(corsOptions));\n\n  // Rate limiting\n  const rateLimitWindowMs = parseInt(process.env.RATE_LIMIT_WINDOW_MS || '900000'); // 15 minutes\n  const rateLimitMax = parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '100');\n\n  // General rate limit (more permissive in development)\n  const generalLimiter = rateLimit({\n    windowMs: rateLimitWindowMs,\n    max: process.env.NODE_ENV === 'development' ? 10000 : rateLimitMax, // Much higher limit in dev\n    message: {\n      error: 'Too many requests from this IP, please try again later.',\n      retryAfter: Math.ceil(rateLimitWindowMs / 1000),\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n    // Fix for trust proxy issue in development\n    keyGenerator: process.env.NODE_ENV === 'development' \n      ? (req) => 'dev-key' // Single key for all requests in dev\n      : undefined, // Use default IP-based key in production\n    skip: (req) => {\n      // Skip rate limiting for static assets and vite HMR\n      return req.path.includes('.') || req.path.startsWith('/src/') || req.path.startsWith('/@vite') || req.path.startsWith('/node_modules');\n    }\n  });\n\n  // Strict rate limit for auth endpoints\n  const authLimiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: process.env.NODE_ENV === 'development' ? 1000 : 5, // Higher limit in dev\n    message: {\n      error: 'Too many authentication attempts, please try again later.',\n      retryAfter: 900, // 15 minutes\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n    // Fix for trust proxy issue in development\n    keyGenerator: process.env.NODE_ENV === 'development' \n      ? (req) => 'dev-auth-key' // Single key for all requests in dev\n      : undefined, // Use default IP-based key in production\n  });\n\n  // API rate limit for high-frequency endpoints\n  const apiLimiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 1000, // Higher limit for API endpoints\n    message: {\n      error: 'API rate limit exceeded, please try again later.',\n      retryAfter: 900,\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n  });\n\n  // Apply rate limiting\n  app.use('/api/auth', authLimiter);\n  app.use('/api/super-admin/login', authLimiter);\n  app.use('/api/public/signup', authLimiter);\n  app.use('/api', apiLimiter);\n  app.use(generalLimiter);\n\n  // Data sanitization against NoSQL query injection\n  app.use(mongoSanitize());\n\n  // Compression middleware\n  app.use(compression());\n\n  // Custom security headers\n  app.use((req: Request, res: Response, next: NextFunction) => {\n    // Remove X-Powered-By header\n    res.removeHeader('X-Powered-By');\n    \n    // Add custom security headers\n    res.setHeader('X-Content-Type-Options', 'nosniff');\n    res.setHeader('X-Frame-Options', 'DENY');\n    res.setHeader('X-XSS-Protection', '1; mode=block');\n    res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');\n    \n    // HSTS for HTTPS (only in production)\n    if (process.env.NODE_ENV === 'production') {\n      res.setHeader('Strict-Transport-Security', 'max-age=31536000; includeSubDomains; preload');\n    }\n    \n    next();\n  });\n}\n\n// Input validation middleware\nexport function validateInput(req: Request, res: Response, next: NextFunction) {\n  // Basic input sanitization\n  const sanitizeObject = (obj: any): any => {\n    if (typeof obj === 'string') {\n      // Remove potential XSS patterns\n      return obj.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n               .replace(/javascript:/gi, '')\n               .replace(/vbscript:/gi, '')\n               .replace(/onload/gi, '')\n               .replace(/onerror/gi, '');\n    }\n    \n    if (Array.isArray(obj)) {\n      return obj.map(sanitizeObject);\n    }\n    \n    if (obj && typeof obj === 'object') {\n      const sanitized: any = {};\n      for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          sanitized[key] = sanitizeObject(obj[key]);\n        }\n      }\n      return sanitized;\n    }\n    \n    return obj;\n  };\n\n  if (req.body) {\n    req.body = sanitizeObject(req.body);\n  }\n  \n  if (req.query) {\n    req.query = sanitizeObject(req.query);\n  }\n  \n  if (req.params) {\n    req.params = sanitizeObject(req.params);\n  }\n\n  next();\n}\n\n// Request size limiting\nexport function setupRequestLimits(app: Express) {\n  const maxRequestSize = process.env.MAX_REQUEST_SIZE || '10mb';\n  \n  app.use((req: Request, res: Response, next: NextFunction) => {\n    // Set timeout for requests\n    req.setTimeout(30000, () => {\n      res.status(408).json({ error: 'Request timeout' });\n    });\n    \n    next();\n  });\n}\n\n// Error handling middleware\nexport function setupErrorHandling(app: Express) {\n  // 404 handler\n  app.use((req: Request, res: Response, next: NextFunction) => {\n    if (req.path.startsWith('/api/')) {\n      res.status(404).json({ \n        error: 'API endpoint not found',\n        path: req.path,\n        method: req.method \n      });\n    } else {\n      next();\n    }\n  });\n\n  // Global error handler\n  app.use((err: any, req: Request, res: Response, next: NextFunction) => {\n    console.error('Global error handler:', err);\n    \n    // Don't leak error details in production\n    const isDevelopment = process.env.NODE_ENV === 'development';\n    \n    const status = err.status || err.statusCode || 500;\n    const message = isDevelopment ? err.message : 'Internal server error';\n    const stack = isDevelopment ? err.stack : undefined;\n    \n    res.status(status).json({\n      error: message,\n      ...(isDevelopment && { stack, details: err })\n    });\n  });\n}\n\n// Logging middleware\nexport function setupLogging(app: Express) {\n  if (process.env.NODE_ENV === 'production') {\n    app.use((req: Request, res: Response, next: NextFunction) => {\n      const start = Date.now();\n      \n      res.on('finish', () => {\n        const duration = Date.now() - start;\n        const logData = {\n          method: req.method,\n          url: req.url,\n          status: res.statusCode,\n          duration: `${duration}ms`,\n          ip: req.ip || req.connection.remoteAddress,\n          userAgent: req.headers['user-agent'],\n          timestamp: new Date().toISOString(),\n        };\n        \n        console.log(JSON.stringify(logData));\n      });\n      \n      next();\n    });\n  }\n}","size_bytes":8143},"server/middleware/tenant-isolation.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { db } from '../db';\nimport { users, tenants } from '@shared/schema';\nimport { eq } from 'drizzle-orm';\n\n// Extend Express Request to include tenant info\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: {\n        id: string;\n        tenantId: string | null;\n        role: string;\n        permissions: string[];\n      };\n      tenant?: {\n        id: string;\n        name: string;\n        status: string;\n        subscriptionPackageId: string;\n      };\n    }\n  }\n}\n\n/**\n * Extract tenant information from subdomain or custom domain\n */\nexport function extractTenantFromHost(hostname: string): string | null {\n  // Handle localhost development\n  if (hostname === 'localhost' || hostname.startsWith('localhost:')) {\n    return null; // Super admin or development mode\n  }\n\n  // Extract subdomain (e.g., \"marriott\" from \"marriott.yourdomain.com\")\n  const parts = hostname.split('.');\n  if (parts.length >= 3) {\n    return parts[0]; // subdomain\n  }\n\n  // Could also handle custom domains here by looking up in database\n  return null;\n}\n\n/**\n * Middleware to identify and validate tenant based on request\n */\nexport async function tenantIdentification(req: Request, res: Response, next: NextFunction) {\n  try {\n    const hostname = req.get('host') || '';\n    const tenantSubdomain = extractTenantFromHost(hostname);\n\n    if (tenantSubdomain) {\n      // Look up tenant by subdomain\n      const tenant = await db\n        .select()\n        .from(tenants)\n        .where(eq(tenants.subdomain, tenantSubdomain))\n        .limit(1);\n\n      if (tenant.length === 0) {\n        return res.status(404).json({ error: 'Tenant not found' });\n      }\n\n      const tenantData = tenant[0];\n\n      // Check if tenant is active\n      if (tenantData.status === 'suspended' || tenantData.status === 'cancelled') {\n        return res.status(403).json({ error: 'Account suspended' });\n      }\n\n      // Add tenant info to request\n      req.tenant = {\n        id: tenantData.id,\n        name: tenantData.name,\n        status: tenantData.status,\n        subscriptionPackageId: tenantData.subscriptionPackageId,\n      };\n    }\n\n    next();\n  } catch (error) {\n    console.error('Tenant identification error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n}\n\n/**\n * Middleware to ensure user belongs to the current tenant\n */\nexport function requireTenantUser(req: Request, res: Response, next: NextFunction) {\n  if (!req.user) {\n    return res.status(401).json({ error: 'Authentication required' });\n  }\n\n  if (!req.tenant) {\n    return res.status(400).json({ error: 'No tenant context' });\n  }\n\n  // Super admin can access any tenant\n  if (req.user.role === 'super_admin') {\n    return next();\n  }\n\n  // User must belong to the current tenant\n  if (req.user.tenantId !== req.tenant.id) {\n    return res.status(403).json({ error: 'Access denied' });\n  }\n\n  next();\n}\n\n/**\n * Middleware to require super admin role\n */\nexport function requireSuperAdmin(req: Request, res: Response, next: NextFunction) {\n  if (!req.user || req.user.role !== 'super_admin') {\n    return res.status(403).json({ error: 'Super admin access required' });\n  }\n  next();\n}\n\n/**\n * Middleware to require tenant admin role\n */\nexport function requireTenantAdmin(req: Request, res: Response, next: NextFunction) {\n  if (!req.user) {\n    return res.status(401).json({ error: 'Authentication required' });\n  }\n\n  // Super admin can act as tenant admin\n  if (req.user.role === 'super_admin') {\n    return next();\n  }\n\n  // Must be tenant admin for the current tenant\n  if (req.user.role !== 'tenant_admin' || req.user.tenantId !== req.tenant?.id) {\n    return res.status(403).json({ error: 'Tenant admin access required' });\n  }\n\n  next();\n}\n\n/**\n * Helper function to add tenant filter to queries\n */\nexport function addTenantFilter(req: Request): string | null {\n  // Super admin sees all data\n  if (req.user?.role === 'super_admin') {\n    return null;\n  }\n\n  // Return current tenant ID for filtering\n  return req.tenant?.id || null;\n}\n\n/**\n * Validate that user can only access their tenant's data\n */\nexport function validateTenantAccess(userTenantId: string | null, requestTenantId: string, req: Request): boolean {\n  // Super admin can access any tenant's data\n  if (req.user?.role === 'super_admin') {\n    return true;\n  }\n\n  // User can only access their own tenant's data\n  return userTenantId === requestTenantId;\n}","size_bytes":4485},"server/services/notification-email.ts":{"content":"import nodemailer from 'nodemailer';\n\nexport interface EmailConfig {\n  host: string;\n  port: number;\n  secure?: boolean;\n  auth: {\n    user: string;\n    pass: string;\n  };\n}\n\nexport interface WelcomeEmailData {\n  name: string;\n  email: string;\n  organizationName: string;\n  subdomain: string;\n  trialDays: number;\n  loginUrl: string;\n  checkoutUrl?: string;\n}\n\nexport interface EmailTemplateData {\n  to: string;\n  from?: string;\n  subject: string;\n  html: string;\n  text?: string;\n}\n\nexport class NotificationEmailService {\n  private transporter: nodemailer.Transporter | null = null;\n\n  constructor() {\n    this.initializeTransporter();\n  }\n\n  private initializeTransporter() {\n    const config: EmailConfig = {\n      host: process.env.SMTP_HOST || 'smtp.gmail.com',\n      port: parseInt(process.env.SMTP_PORT || '587'),\n      secure: false, // true for 465, false for other ports\n      auth: {\n        user: process.env.SMTP_USER || '',\n        pass: process.env.SMTP_PASS || '',\n      },\n    };\n\n    // Only initialize if credentials are provided\n    if (config.auth.user && config.auth.pass) {\n      this.transporter = nodemailer.createTransporter(config);\n    } else {\n      console.warn('Email service not configured - SMTP credentials missing');\n    }\n  }\n\n  // Allow dynamic configuration (used by super admin config)\n  async configure(config: EmailConfig) {\n    this.transporter = nodemailer.createTransporter(config);\n  }\n\n  async sendEmail(data: EmailTemplateData): Promise<boolean> {\n    if (!this.transporter) {\n      console.warn('Email service not configured - cannot send email');\n      return false;\n    }\n\n    try {\n      const mailOptions = {\n        from: data.from || process.env.SMTP_FROM || process.env.SMTP_USER,\n        to: data.to,\n        subject: data.subject,\n        html: data.html,\n        text: data.text,\n      };\n\n      const result = await this.transporter.sendMail(mailOptions);\n      console.log('Email sent successfully:', result.messageId);\n      return true;\n    } catch (error) {\n      console.error('Failed to send email:', error);\n      return false;\n    }\n  }\n\n  async sendWelcomeEmail(data: WelcomeEmailData): Promise<boolean> {\n    const html = this.generateWelcomeEmailHTML(data);\n    const text = this.generateWelcomeEmailText(data);\n\n    return this.sendEmail({\n      to: data.email,\n      subject: `Welcome to VenueFlow, ${data.name}! 🎉`,\n      html,\n      text,\n    });\n  }\n\n  private generateWelcomeEmailHTML(data: WelcomeEmailData): string {\n    return `\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Welcome to VenueFlow</title>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }\n        .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }\n        .button { display: inline-block; padding: 12px 24px; background: #4f46e5; color: white; text-decoration: none; border-radius: 6px; margin: 10px 5px; }\n        .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }\n        .highlight { background: #e0e7ff; padding: 15px; border-radius: 6px; margin: 15px 0; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>🎉 Welcome to VenueFlow!</h1>\n        <p>Your venue management platform is ready</p>\n    </div>\n    \n    <div class=\"content\">\n        <h2>Hi ${data.name},</h2>\n        \n        <p>Congratulations! Your VenueFlow account for <strong>${data.organizationName}</strong> has been successfully created.</p>\n        \n        <div class=\"highlight\">\n            <h3>🚀 Your Account Details:</h3>\n            <ul>\n                <li><strong>Organization:</strong> ${data.organizationName}</li>\n                <li><strong>Subdomain:</strong> ${data.subdomain}.yourdomain.com</li>\n                <li><strong>Email:</strong> ${data.email}</li>\n                <li><strong>Trial Period:</strong> ${data.trialDays} days</li>\n            </ul>\n        </div>\n        \n        <h3>🎯 What's Next?</h3>\n        <ol>\n            <li><strong>Access Your Dashboard:</strong> Log in to start managing your venues</li>\n            <li><strong>Set Up Your Venues:</strong> Add your first venue and spaces</li>\n            <li><strong>Configure Services:</strong> Set up your service offerings</li>\n            <li><strong>Start Taking Bookings:</strong> Begin accepting venue reservations</li>\n        </ol>\n        \n        <div style=\"text-align: center; margin: 30px 0;\">\n            <a href=\"${data.loginUrl}\" class=\"button\">Access Dashboard</a>\n            ${data.checkoutUrl ? `<a href=\"${data.checkoutUrl}\" class=\"button\" style=\"background: #059669;\">Set Up Billing</a>` : ''}\n        </div>\n        \n        <h3>📖 Getting Started Resources:</h3>\n        <ul>\n            <li>📚 <a href=\"#\">User Guide</a> - Learn the basics</li>\n            <li>🎥 <a href=\"#\">Video Tutorials</a> - Watch how-to videos</li>\n            <li>💬 <a href=\"#\">Help Center</a> - Get support when you need it</li>\n            <li>📞 <a href=\"mailto:support@venueflow.com\">Contact Support</a> - We're here to help!</li>\n        </ul>\n        \n        <p>We're excited to help you streamline your venue management and grow your business!</p>\n        \n        <p>Best regards,<br>\n        The VenueFlow Team</p>\n    </div>\n    \n    <div class=\"footer\">\n        <p>© 2024 VenueFlow. All rights reserved.</p>\n        <p>You received this email because you signed up for a VenueFlow account.</p>\n    </div>\n</body>\n</html>\n    `;\n  }\n\n  private generateWelcomeEmailText(data: WelcomeEmailData): string {\n    return `\nWelcome to VenueFlow, ${data.name}!\n\nCongratulations! Your VenueFlow account for ${data.organizationName} has been successfully created.\n\nYour Account Details:\n- Organization: ${data.organizationName}\n- Subdomain: ${data.subdomain}.yourdomain.com\n- Email: ${data.email}\n- Trial Period: ${data.trialDays} days\n\nWhat's Next?\n1. Access Your Dashboard: ${data.loginUrl}\n2. Set Up Your Venues: Add your first venue and spaces\n3. Configure Services: Set up your service offerings\n4. Start Taking Bookings: Begin accepting venue reservations\n\n${data.checkoutUrl ? `Set Up Billing: ${data.checkoutUrl}` : ''}\n\nGetting Started Resources:\n- User Guide: Learn the basics\n- Video Tutorials: Watch how-to videos\n- Help Center: Get support when you need it\n- Contact Support: support@venueflow.com\n\nWe're excited to help you streamline your venue management and grow your business!\n\nBest regards,\nThe VenueFlow Team\n\n© 2024 VenueFlow. All rights reserved.\nYou received this email because you signed up for a VenueFlow account.\n    `;\n  }\n\n  async sendPasswordResetEmail(email: string, resetLink: string, name: string): Promise<boolean> {\n    const html = `\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Reset Your Password</title>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n        .button { display: inline-block; padding: 12px 24px; background: #4f46e5; color: white; text-decoration: none; border-radius: 6px; margin: 10px 0; }\n    </style>\n</head>\n<body>\n    <h2>Reset Your Password</h2>\n    <p>Hi ${name},</p>\n    <p>You requested to reset your password for your VenueFlow account.</p>\n    <p>Click the button below to reset your password:</p>\n    <a href=\"${resetLink}\" class=\"button\">Reset Password</a>\n    <p>If you didn't request this, please ignore this email.</p>\n    <p>This link will expire in 1 hour for security reasons.</p>\n    <p>Best regards,<br>The VenueFlow Team</p>\n</body>\n</html>\n    `;\n\n    return this.sendEmail({\n      to: email,\n      subject: 'Reset Your VenueFlow Password',\n      html,\n      text: `Hi ${name}, Click this link to reset your password: ${resetLink}`,\n    });\n  }\n}\n\nexport const notificationEmailService = new NotificationEmailService();","size_bytes":8164},"server/services/stripe.ts":{"content":"import Stripe from 'stripe';\n\n// Initialize Stripe with secret key\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY || 'sk_test_your_stripe_secret_key', {\n  apiVersion: '2024-06-20',\n});\n\nexport interface CreateCustomerData {\n  email: string;\n  name: string;\n  metadata?: Record<string, string>;\n}\n\nexport interface CreateSubscriptionData {\n  customerId: string;\n  priceId: string;\n  trialPeriodDays?: number;\n  metadata?: Record<string, string>;\n}\n\nexport interface CreateCheckoutSessionData {\n  customerId: string;\n  priceId: string;\n  successUrl: string;\n  cancelUrl: string;\n  trialPeriodDays?: number;\n  metadata?: Record<string, string>;\n}\n\nexport class StripeService {\n  // Create a Stripe customer\n  async createCustomer(data: CreateCustomerData): Promise<Stripe.Customer> {\n    try {\n      const customer = await stripe.customers.create({\n        email: data.email,\n        name: data.name,\n        metadata: data.metadata || {},\n      });\n      return customer;\n    } catch (error) {\n      console.error('Error creating Stripe customer:', error);\n      throw new Error('Failed to create customer');\n    }\n  }\n\n  // Create a subscription\n  async createSubscription(data: CreateSubscriptionData): Promise<Stripe.Subscription> {\n    try {\n      const subscription = await stripe.subscriptions.create({\n        customer: data.customerId,\n        items: [\n          {\n            price: data.priceId,\n          },\n        ],\n        trial_period_days: data.trialPeriodDays,\n        metadata: data.metadata || {},\n        payment_behavior: 'default_incomplete',\n        payment_settings: { save_default_payment_method: 'on_subscription' },\n        expand: ['latest_invoice.payment_intent'],\n      });\n      return subscription;\n    } catch (error) {\n      console.error('Error creating Stripe subscription:', error);\n      throw new Error('Failed to create subscription');\n    }\n  }\n\n  // Create a checkout session\n  async createCheckoutSession(data: CreateCheckoutSessionData): Promise<Stripe.Checkout.Session> {\n    try {\n      const session = await stripe.checkout.sessions.create({\n        customer: data.customerId,\n        payment_method_types: ['card'],\n        line_items: [\n          {\n            price: data.priceId,\n            quantity: 1,\n          },\n        ],\n        mode: 'subscription',\n        success_url: data.successUrl,\n        cancel_url: data.cancelUrl,\n        subscription_data: {\n          trial_period_days: data.trialPeriodDays,\n          metadata: data.metadata || {},\n        },\n        allow_promotion_codes: true,\n      });\n      return session;\n    } catch (error) {\n      console.error('Error creating Stripe checkout session:', error);\n      throw new Error('Failed to create checkout session');\n    }\n  }\n\n  // Get customer by ID\n  async getCustomer(customerId: string): Promise<Stripe.Customer | null> {\n    try {\n      const customer = await stripe.customers.retrieve(customerId);\n      return customer as Stripe.Customer;\n    } catch (error) {\n      console.error('Error retrieving Stripe customer:', error);\n      return null;\n    }\n  }\n\n  // Get subscription by ID\n  async getSubscription(subscriptionId: string): Promise<Stripe.Subscription | null> {\n    try {\n      const subscription = await stripe.subscriptions.retrieve(subscriptionId);\n      return subscription;\n    } catch (error) {\n      console.error('Error retrieving Stripe subscription:', error);\n      return null;\n    }\n  }\n\n  // Cancel subscription\n  async cancelSubscription(subscriptionId: string): Promise<Stripe.Subscription> {\n    try {\n      const subscription = await stripe.subscriptions.cancel(subscriptionId);\n      return subscription;\n    } catch (error) {\n      console.error('Error canceling Stripe subscription:', error);\n      throw new Error('Failed to cancel subscription');\n    }\n  }\n\n  // Update subscription\n  async updateSubscription(\n    subscriptionId: string,\n    data: { priceId?: string; metadata?: Record<string, string> }\n  ): Promise<Stripe.Subscription> {\n    try {\n      const updateData: Stripe.SubscriptionUpdateParams = {};\n      \n      if (data.priceId) {\n        updateData.items = [{ price: data.priceId }];\n      }\n      \n      if (data.metadata) {\n        updateData.metadata = data.metadata;\n      }\n\n      const subscription = await stripe.subscriptions.update(subscriptionId, updateData);\n      return subscription;\n    } catch (error) {\n      console.error('Error updating Stripe subscription:', error);\n      throw new Error('Failed to update subscription');\n    }\n  }\n\n  // Handle webhook events\n  async handleWebhook(payload: string, signature: string): Promise<Stripe.Event | null> {\n    try {\n      const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\n      if (!webhookSecret) {\n        throw new Error('Stripe webhook secret not configured');\n      }\n\n      const event = stripe.webhooks.constructEvent(payload, signature, webhookSecret);\n      return event;\n    } catch (error) {\n      console.error('Error handling Stripe webhook:', error);\n      return null;\n    }\n  }\n\n  // Create price for subscription package\n  async createPrice(data: {\n    productId: string;\n    amount: number; // in cents\n    currency: string;\n    interval: 'month' | 'year';\n    metadata?: Record<string, string>;\n  }): Promise<Stripe.Price> {\n    try {\n      const price = await stripe.prices.create({\n        product: data.productId,\n        unit_amount: data.amount,\n        currency: data.currency,\n        recurring: {\n          interval: data.interval,\n        },\n        metadata: data.metadata || {},\n      });\n      return price;\n    } catch (error) {\n      console.error('Error creating Stripe price:', error);\n      throw new Error('Failed to create price');\n    }\n  }\n\n  // Create product for subscription package\n  async createProduct(data: {\n    name: string;\n    description?: string;\n    metadata?: Record<string, string>;\n  }): Promise<Stripe.Product> {\n    try {\n      const product = await stripe.products.create({\n        name: data.name,\n        description: data.description,\n        metadata: data.metadata || {},\n      });\n      return product;\n    } catch (error) {\n      console.error('Error creating Stripe product:', error);\n      throw new Error('Failed to create product');\n    }\n  }\n}\n\nexport const stripeService = new StripeService();","size_bytes":6321},"client/src/pages/landing.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { \n  ArrowRight, \n  Check, \n  Star, \n  Users, \n  Calendar, \n  DollarSign,\n  Building,\n  Shield,\n  Zap,\n  Globe,\n  ChevronRight,\n  Play\n} from \"lucide-react\";\nimport { type SubscriptionPackage } from \"@shared/schema\";\n\nexport default function Landing() {\n  const [selectedTab, setSelectedTab] = useState(\"features\");\n\n  // Fetch packages for pricing section\n  const { data: packages = [] } = useQuery<SubscriptionPackage[]>({\n    queryKey: [\"/api/public/packages\"],\n  });\n\n  const features = [\n    {\n      icon: <Calendar className=\"w-8 h-8 text-blue-600\" />,\n      title: \"Smart Booking Management\",\n      description: \"Streamline reservations with intelligent scheduling and automated confirmations.\"\n    },\n    {\n      icon: <Users className=\"w-8 h-8 text-green-600\" />,\n      title: \"Customer Relationship Tools\", \n      description: \"Build lasting relationships with integrated CRM and communication tools.\"\n    },\n    {\n      icon: <DollarSign className=\"w-8 h-8 text-purple-600\" />,\n      title: \"Revenue Optimization\",\n      description: \"Maximize profits with dynamic pricing and detailed analytics insights.\"\n    },\n    {\n      icon: <Shield className=\"w-8 h-8 text-orange-600\" />,\n      title: \"Enterprise Security\",\n      description: \"Bank-level security with data encryption and compliance standards.\"\n    },\n    {\n      icon: <Globe className=\"w-8 h-8 text-teal-600\" />,\n      title: \"Multi-Location Support\",\n      description: \"Manage multiple venues from one centralized dashboard.\"\n    },\n    {\n      icon: <Zap className=\"w-8 h-8 text-red-600\" />,\n      title: \"AI-Powered Insights\",\n      description: \"Get intelligent recommendations to grow your business.\"\n    }\n  ];\n\n  const testimonials = [\n    {\n      name: \"Sarah Johnson\",\n      role: \"Event Manager, Grand Ballroom\",\n      content: \"This platform transformed how we manage bookings. Our efficiency increased by 300% in just 2 months!\",\n      rating: 5\n    },\n    {\n      name: \"Michael Chen\", \n      role: \"Owner, Chen Wedding Venues\",\n      content: \"The automated proposals and customer communication features saved us 20 hours per week.\",\n      rating: 5\n    },\n    {\n      name: \"Emma Rodriguez\",\n      role: \"Operations Director, Corporate Events Co\",\n      content: \"Finally, a venue management system that actually understands our business needs.\",\n      rating: 5\n    }\n  ];\n\n  const getPackageIcon = (name: string) => {\n    switch (name.toLowerCase()) {\n      case 'starter': return <Zap className=\"w-6 h-6\" />;\n      case 'professional': return <Building className=\"w-6 h-6\" />;\n      case 'enterprise': return <Shield className=\"w-6 h-6\" />;\n      default: return <Star className=\"w-6 h-6\" />;\n    }\n  };\n\n  const parseFeatures = (features: any): string[] => {\n    if (Array.isArray(features)) return features;\n    if (typeof features === 'string') {\n      try {\n        return JSON.parse(features);\n      } catch {\n        return [];\n      }\n    }\n    return [];\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Navigation */}\n      <nav className=\"border-b bg-white/95 backdrop-blur supports-[backdrop-filter]:bg-white/60 sticky top-0 z-50\">\n        <div className=\"container mx-auto px-4 h-16 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n              <Building className=\"w-5 h-5 text-white\" />\n            </div>\n            <span className=\"text-xl font-bold\">VenueFlow</span>\n          </div>\n          <div className=\"hidden md:flex items-center space-x-8\">\n            <a href=\"#features\" className=\"text-gray-600 hover:text-gray-900 transition-colors\">Features</a>\n            <a href=\"#pricing\" className=\"text-gray-600 hover:text-gray-900 transition-colors\">Pricing</a>\n            <a href=\"#testimonials\" className=\"text-gray-600 hover:text-gray-900 transition-colors\">Reviews</a>\n            <Button variant=\"outline\" asChild>\n              <a href=\"/super-admin/login\">Admin</a>\n            </Button>\n            <Button asChild>\n              <a href=\"/signup\">Start Free Trial</a>\n            </Button>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"py-20 bg-gradient-to-br from-blue-50 via-white to-purple-50\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <Badge className=\"mb-4\" variant=\"secondary\">\n            🚀 Now with AI-powered insights\n          </Badge>\n          <h1 className=\"text-5xl md:text-6xl font-bold text-gray-900 mb-6 leading-tight\">\n            The Complete\n            <span className=\"text-blue-600\"> Venue Management</span>\n            <br />Platform\n          </h1>\n          <p className=\"text-xl text-gray-600 mb-8 max-w-2xl mx-auto\">\n            Streamline bookings, delight customers, and grow revenue with the only venue management system you'll ever need.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n            <Button size=\"lg\" asChild className=\"text-lg px-8 py-6\">\n              <a href=\"/signup\">\n                Start Free 14-Day Trial\n                <ArrowRight className=\"ml-2 w-5 h-5\" />\n              </a>\n            </Button>\n            <Button size=\"lg\" variant=\"outline\" className=\"text-lg px-8 py-6\">\n              <Play className=\"mr-2 w-5 h-5\" />\n              Watch Demo\n            </Button>\n          </div>\n          <div className=\"flex items-center justify-center space-x-8 text-sm text-gray-500\">\n            <div className=\"flex items-center\">\n              <Check className=\"w-4 h-4 text-green-500 mr-2\" />\n              No credit card required\n            </div>\n            <div className=\"flex items-center\">\n              <Check className=\"w-4 h-4 text-green-500 mr-2\" />\n              Setup in 5 minutes\n            </div>\n            <div className=\"flex items-center\">\n              <Check className=\"w-4 h-4 text-green-500 mr-2\" />\n              Cancel anytime\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Social Proof */}\n      <section className=\"py-12 bg-gray-50\">\n        <div className=\"container mx-auto px-4\">\n          <p className=\"text-center text-gray-600 mb-8\">Trusted by 500+ venue businesses worldwide</p>\n          <div className=\"flex justify-center items-center space-x-12 opacity-60\">\n            {/* Placeholder for customer logos */}\n            <div className=\"text-2xl font-bold text-gray-400\">Marriott</div>\n            <div className=\"text-2xl font-bold text-gray-400\">Hilton</div>\n            <div className=\"text-2xl font-bold text-gray-400\">Hyatt</div>\n            <div className=\"text-2xl font-bold text-gray-400\">Westin</div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Everything you need to manage venues</h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              From booking management to customer relationships, we've got every aspect of your venue business covered.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"border-0 shadow-lg hover:shadow-xl transition-shadow duration-300\">\n                <CardHeader>\n                  <div className=\"mb-4\">{feature.icon}</div>\n                  <CardTitle className=\"text-xl\">{feature.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-600\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section id=\"pricing\" className=\"py-20 bg-gray-50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Simple, transparent pricing</h2>\n            <p className=\"text-xl text-gray-600\">Start free, scale as you grow. No hidden fees.</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n            {packages.map((pkg, index) => (\n              <Card \n                key={pkg.id} \n                className={`relative ${\n                  pkg.name.toLowerCase() === 'professional' \n                    ? 'border-blue-500 shadow-xl scale-105' \n                    : 'border-gray-200'\n                }`}\n              >\n                {pkg.name.toLowerCase() === 'professional' && (\n                  <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                    <Badge className=\"bg-blue-600 text-white\">Most Popular</Badge>\n                  </div>\n                )}\n                <CardHeader className=\"text-center\">\n                  <div className=\"flex justify-center mb-4 text-blue-600\">\n                    {getPackageIcon(pkg.name)}\n                  </div>\n                  <CardTitle className=\"text-2xl\">{pkg.name}</CardTitle>\n                  <div className=\"text-4xl font-bold mt-4\">\n                    ${pkg.price}\n                    <span className=\"text-lg font-normal text-gray-600\">/{pkg.billingInterval}</span>\n                  </div>\n                  <p className=\"text-gray-600 mt-2\">{pkg.description}</p>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-3 mb-8\">\n                    <li className=\"flex items-center\">\n                      <Check className=\"w-5 h-5 text-green-500 mr-3\" />\n                      {pkg.maxVenues} venue{pkg.maxVenues !== 1 ? 's' : ''}\n                    </li>\n                    <li className=\"flex items-center\">\n                      <Check className=\"w-5 h-5 text-green-500 mr-3\" />\n                      {pkg.maxUsers} team member{pkg.maxUsers !== 1 ? 's' : ''}\n                    </li>\n                    <li className=\"flex items-center\">\n                      <Check className=\"w-5 h-5 text-green-500 mr-3\" />\n                      {pkg.maxBookingsPerMonth} bookings/month\n                    </li>\n                    {parseFeatures(pkg.features).slice(0, 4).map((feature) => (\n                      <li key={feature} className=\"flex items-center\">\n                        <Check className=\"w-5 h-5 text-green-500 mr-3\" />\n                        {feature.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                      </li>\n                    ))}\n                  </ul>\n                  <Button \n                    className=\"w-full\" \n                    variant={pkg.name.toLowerCase() === 'professional' ? 'default' : 'outline'}\n                    asChild\n                  >\n                    <a href=\"/signup\">\n                      Start {pkg.trialDays}-day free trial\n                    </a>\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <p className=\"text-gray-600\">\n              Need something custom? <a href=\"mailto:sales@venueflow.com\" className=\"text-blue-600 hover:underline\">Contact our sales team</a>\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials */}\n      <section id=\"testimonials\" className=\"py-20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Loved by venue owners everywhere</h2>\n            <p className=\"text-xl text-gray-600\">See what our customers have to say</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, index) => (\n              <Card key={index} className=\"border-0 shadow-lg\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex mb-4\">\n                    {[...Array(testimonial.rating)].map((_, i) => (\n                      <Star key={i} className=\"w-5 h-5 text-yellow-400 fill-current\" />\n                    ))}\n                  </div>\n                  <p className=\"text-gray-600 mb-6 italic\">\"{testimonial.content}\"</p>\n                  <div>\n                    <div className=\"font-semibold\">{testimonial.name}</div>\n                    <div className=\"text-sm text-gray-500\">{testimonial.role}</div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-blue-600 text-white\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-4xl font-bold mb-4\">Ready to transform your venue business?</h2>\n          <p className=\"text-xl mb-8 opacity-90\">Join hundreds of venue owners who've already made the switch</p>\n          <Button size=\"lg\" variant=\"secondary\" asChild className=\"text-lg px-8 py-6\">\n            <a href=\"/signup\">\n              Start Your Free Trial Today\n              <ChevronRight className=\"ml-2 w-5 h-5\" />\n            </a>\n          </Button>\n          <p className=\"mt-4 text-blue-100\">No credit card required • 14-day free trial • Setup in minutes</p>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"py-12 bg-gray-900 text-white\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n                  <Building className=\"w-5 h-5 text-white\" />\n                </div>\n                <span className=\"text-xl font-bold\">VenueFlow</span>\n              </div>\n              <p className=\"text-gray-400\">The complete venue management platform for modern businesses.</p>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Product</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#features\" className=\"hover:text-white\">Features</a></li>\n                <li><a href=\"#pricing\" className=\"hover:text-white\">Pricing</a></li>\n                <li><a href=\"/signup\" className=\"hover:text-white\">Sign Up</a></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Support</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"mailto:support@venueflow.com\" className=\"hover:text-white\">Help Center</a></li>\n                <li><a href=\"mailto:contact@venueflow.com\" className=\"hover:text-white\">Contact Us</a></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Company</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white\">About</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Privacy</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Terms</a></li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-gray-800 mt-8 pt-8 text-center text-gray-400\">\n            <p>&copy; 2024 VenueFlow. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":16005},"client/src/pages/signup.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  CheckCircle, \n  ArrowRight, \n  Building,\n  Users,\n  Calendar,\n  Star,\n  Shield,\n  Zap\n} from \"lucide-react\";\nimport { type SubscriptionPackage, type InsertTenant } from \"@shared/schema\";\n\ninterface SignupFormData {\n  // Organization details\n  organizationName: string;\n  subdomain: string;\n  \n  // Admin user details\n  fullName: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n  \n  // Selected package\n  packageId: string;\n  \n  // Agreement\n  agreeToTerms: boolean;\n}\n\nexport default function Signup() {\n  const { toast } = useToast();\n  const [step, setStep] = useState(1);\n  const [selectedPackage, setSelectedPackage] = useState<string>(\"\");\n  const [formData, setFormData] = useState<SignupFormData>({\n    organizationName: \"\",\n    subdomain: \"\",\n    fullName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    packageId: \"\",\n    agreeToTerms: false,\n  });\n\n  // Fetch available packages\n  const { data: packages = [] } = useQuery<SubscriptionPackage[]>({\n    queryKey: [\"/api/public/packages\"],\n    select: (data) => data?.filter(pkg => pkg.isActive) || []\n  });\n\n  const signupMutation = useMutation({\n    mutationFn: (data: SignupFormData) =>\n      apiRequest(\"/api/public/signup\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: (response) => {\n      toast({ title: \"Account created successfully! Welcome aboard!\" });\n      // Redirect to tenant dashboard or login\n      window.location.href = `https://${formData.subdomain}.yourdomain.com/dashboard`;\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Signup failed\", \n        description: error.message, \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const validateStep = (currentStep: number) => {\n    switch (currentStep) {\n      case 1:\n        return selectedPackage !== \"\";\n      case 2:\n        return formData.organizationName && formData.subdomain;\n      case 3:\n        return formData.fullName && formData.email && formData.password && \n               formData.password === formData.confirmPassword && formData.agreeToTerms;\n      default:\n        return false;\n    }\n  };\n\n  const handleNext = () => {\n    if (validateStep(step)) {\n      if (step === 1) {\n        setFormData(prev => ({ ...prev, packageId: selectedPackage }));\n      }\n      setStep(step + 1);\n    } else {\n      toast({ title: \"Please complete all required fields\", variant: \"destructive\" });\n    }\n  };\n\n  const handleSubmit = () => {\n    if (validateStep(3)) {\n      signupMutation.mutate(formData);\n    }\n  };\n\n  const getPackageIcon = (packageName: string) => {\n    switch (packageName.toLowerCase()) {\n      case 'starter': return <Zap className=\"w-8 h-8 text-blue-600\" />;\n      case 'professional': return <Building className=\"w-8 h-8 text-purple-600\" />;\n      case 'enterprise': return <Shield className=\"w-8 h-8 text-green-600\" />;\n      default: return <Star className=\"w-8 h-8 text-gray-600\" />;\n    }\n  };\n\n  const parseFeatures = (features: any): string[] => {\n    if (Array.isArray(features)) return features;\n    if (typeof features === 'string') {\n      try {\n        return JSON.parse(features);\n      } catch {\n        return [];\n      }\n    }\n    return [];\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-2\">\n            Start Your Venue Management Journey\n          </h1>\n          <p className=\"text-xl text-gray-600\">\n            Choose your plan and create your account in minutes\n          </p>\n        </div>\n\n        {/* Progress Indicator */}\n        <div className=\"flex justify-center mb-8\">\n          <div className=\"flex items-center space-x-4\">\n            {[1, 2, 3].map((stepNumber) => (\n              <div key={stepNumber} className=\"flex items-center\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                  step >= stepNumber \n                    ? 'bg-blue-600 text-white' \n                    : 'bg-gray-200 text-gray-600'\n                }`}>\n                  {step > stepNumber ? <CheckCircle className=\"w-5 h-5\" /> : stepNumber}\n                </div>\n                {stepNumber < 3 && (\n                  <div className={`w-12 h-1 mx-2 ${\n                    step > stepNumber ? 'bg-blue-600' : 'bg-gray-200'\n                  }`} />\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Step 1: Package Selection */}\n          {step === 1 && (\n            <div className=\"space-y-6\">\n              <div className=\"text-center\">\n                <h2 className=\"text-2xl font-bold mb-2\">Choose Your Plan</h2>\n                <p className=\"text-gray-600\">Select the perfect package for your venue business</p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                {packages.map((pkg) => (\n                  <Card \n                    key={pkg.id} \n                    className={`cursor-pointer transition-all ${\n                      selectedPackage === pkg.id \n                        ? 'border-blue-500 ring-2 ring-blue-200' \n                        : 'hover:border-gray-300'\n                    }`}\n                    onClick={() => setSelectedPackage(pkg.id)}\n                  >\n                    <CardHeader className=\"text-center\">\n                      <div className=\"flex justify-center mb-4\">\n                        {getPackageIcon(pkg.name)}\n                      </div>\n                      <CardTitle className=\"text-xl\">{pkg.name}</CardTitle>\n                      <div className=\"text-3xl font-bold\">\n                        ${pkg.price}\n                        <span className=\"text-sm font-normal text-gray-600\">\n                          /{pkg.billingInterval}\n                        </span>\n                      </div>\n                      {pkg.trialDays && (\n                        <Badge variant=\"secondary\" className=\"mt-2\">\n                          {pkg.trialDays} day free trial\n                        </Badge>\n                      )}\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center text-sm\">\n                          <Building className=\"w-4 h-4 mr-2 text-gray-500\" />\n                          {pkg.maxVenues} venue{pkg.maxVenues !== 1 ? 's' : ''}\n                        </div>\n                        <div className=\"flex items-center text-sm\">\n                          <Users className=\"w-4 h-4 mr-2 text-gray-500\" />\n                          {pkg.maxUsers} team member{pkg.maxUsers !== 1 ? 's' : ''}\n                        </div>\n                        <div className=\"flex items-center text-sm\">\n                          <Calendar className=\"w-4 h-4 mr-2 text-gray-500\" />\n                          {pkg.maxBookingsPerMonth} bookings/month\n                        </div>\n                        \n                        {parseFeatures(pkg.features).length > 0 && (\n                          <div className=\"pt-3 border-t\">\n                            <div className=\"text-sm font-medium mb-2\">Features:</div>\n                            <div className=\"space-y-1\">\n                              {parseFeatures(pkg.features).slice(0, 3).map((feature) => (\n                                <div key={feature} className=\"flex items-center text-xs text-gray-600\">\n                                  <CheckCircle className=\"w-3 h-3 mr-1 text-green-500\" />\n                                  {feature.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                      \n                      {selectedPackage === pkg.id && (\n                        <div className=\"mt-4 p-2 bg-blue-50 rounded text-center\">\n                          <CheckCircle className=\"w-5 h-5 text-blue-600 mx-auto\" />\n                          <div className=\"text-sm text-blue-600 font-medium\">Selected</div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n\n              <div className=\"flex justify-center\">\n                <Button \n                  onClick={handleNext} \n                  disabled={!selectedPackage}\n                  size=\"lg\"\n                  className=\"px-8\"\n                >\n                  Continue\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {/* Step 2: Organization Details */}\n          {step === 2 && (\n            <Card className=\"max-w-lg mx-auto\">\n              <CardHeader>\n                <CardTitle>Organization Details</CardTitle>\n                <p className=\"text-gray-600\">Tell us about your venue business</p>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"organizationName\">Organization Name *</Label>\n                  <Input\n                    id=\"organizationName\"\n                    value={formData.organizationName}\n                    onChange={(e) => setFormData(prev => ({ ...prev, organizationName: e.target.value }))}\n                    placeholder=\"Your Venue Company\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"subdomain\">Choose Your Subdomain *</Label>\n                  <div className=\"flex\">\n                    <Input\n                      id=\"subdomain\"\n                      value={formData.subdomain}\n                      onChange={(e) => setFormData(prev => ({ \n                        ...prev, \n                        subdomain: e.target.value.toLowerCase().replace(/[^a-z0-9-]/g, '') \n                      }))}\n                      placeholder=\"yourcompany\"\n                      className=\"rounded-r-none\"\n                      required\n                    />\n                    <div className=\"px-3 py-2 bg-gray-100 border border-l-0 rounded-r text-sm text-gray-600\">\n                      .yourdomain.com\n                    </div>\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    This will be your unique URL: {formData.subdomain || 'yourcompany'}.yourdomain.com\n                  </p>\n                </div>\n\n                <div className=\"flex gap-2 pt-4\">\n                  <Button variant=\"outline\" onClick={() => setStep(1)}>\n                    Back\n                  </Button>\n                  <Button onClick={handleNext} className=\"flex-1\">\n                    Continue\n                    <ArrowRight className=\"w-4 h-4 ml-2\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Step 3: Account Creation */}\n          {step === 3 && (\n            <Card className=\"max-w-lg mx-auto\">\n              <CardHeader>\n                <CardTitle>Create Your Account</CardTitle>\n                <p className=\"text-gray-600\">Set up your admin credentials</p>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"fullName\">Full Name *</Label>\n                  <Input\n                    id=\"fullName\"\n                    value={formData.fullName}\n                    onChange={(e) => setFormData(prev => ({ ...prev, fullName: e.target.value }))}\n                    placeholder=\"John Doe\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"email\">Email Address *</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                    placeholder=\"john@yourcompany.com\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"password\">Password *</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    value={formData.password}\n                    onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}\n                    placeholder=\"••••••••\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"confirmPassword\">Confirm Password *</Label>\n                  <Input\n                    id=\"confirmPassword\"\n                    type=\"password\"\n                    value={formData.confirmPassword}\n                    onChange={(e) => setFormData(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                    placeholder=\"••••••••\"\n                    required\n                  />\n                  {formData.password !== formData.confirmPassword && formData.confirmPassword && (\n                    <p className=\"text-xs text-red-500 mt-1\">Passwords do not match</p>\n                  )}\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"agreeToTerms\"\n                    checked={formData.agreeToTerms}\n                    onCheckedChange={(checked) => setFormData(prev => ({ ...prev, agreeToTerms: !!checked }))}\n                  />\n                  <Label htmlFor=\"agreeToTerms\" className=\"text-sm\">\n                    I agree to the <a href=\"/terms\" className=\"text-blue-600 hover:underline\">Terms of Service</a> and{\" \"}\n                    <a href=\"/privacy\" className=\"text-blue-600 hover:underline\">Privacy Policy</a> *\n                  </Label>\n                </div>\n\n                <div className=\"flex gap-2 pt-4\">\n                  <Button variant=\"outline\" onClick={() => setStep(2)}>\n                    Back\n                  </Button>\n                  <Button \n                    onClick={handleSubmit} \n                    className=\"flex-1\"\n                    disabled={signupMutation.isPending}\n                  >\n                    {signupMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"text-center mt-12 text-gray-600\">\n          <p>Already have an account? <a href=\"/login\" className=\"text-blue-600 hover:underline\">Sign in</a></p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15650},"client/src/pages/super-admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Users, \n  Building, \n  CreditCard, \n  TrendingUp, \n  Settings,\n  Plus,\n  Search,\n  MoreVertical,\n  CheckCircle,\n  AlertCircle,\n  XCircle,\n  LogOut\n} from \"lucide-react\";\nimport { type Tenant, type SubscriptionPackage } from \"@shared/schema\";\nimport { PackageManagementModal } from \"@/components/super-admin/package-management-modal\";\nimport { TenantManagementModal } from \"@/components/super-admin/tenant-management-modal\";\nimport { TenantDetailModal } from \"@/components/super-admin/tenant-detail-modal\";\nimport SuperAdminSettings from \"@/components/super-admin/super-admin-settings\";\n\nexport default function SuperAdminDashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [showPackageModal, setShowPackageModal] = useState(false);\n  const [editingPackage, setEditingPackage] = useState<SubscriptionPackage | undefined>();\n  const [showTenantModal, setShowTenantModal] = useState(false);\n  const [selectedTenant, setSelectedTenant] = useState<Tenant | null>(null);\n  const [showTenantDetail, setShowTenantDetail] = useState(false);\n\n  const handleLogout = () => {\n    localStorage.removeItem('super_admin_token');\n    setLocation('/super-admin/login');\n  };\n\n  // Fetch data\n  const { data: tenants = [] } = useQuery<Tenant[]>({\n    queryKey: [\"/api/super-admin/tenants\"],\n  });\n\n  const { data: packages = [] } = useQuery<SubscriptionPackage[]>({\n    queryKey: [\"/api/super-admin/packages\"],\n  });\n\n  const { data: analytics } = useQuery({\n    queryKey: [\"/api/super-admin/analytics\"],\n    select: (data) => data || {\n      totalTenants: tenants.length,\n      activeTenants: tenants.filter(t => t.status === 'active').length,\n      trialTenants: tenants.filter(t => t.status === 'trial').length,\n      monthlyRevenue: 12450,\n      growthRate: 15.2\n    }\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'trial': return 'bg-blue-100 text-blue-800';\n      case 'suspended': return 'bg-yellow-100 text-yellow-800';\n      case 'cancelled': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'active': return <CheckCircle className=\"w-4 h-4\" />;\n      case 'trial': return <AlertCircle className=\"w-4 h-4\" />;\n      case 'suspended': return <AlertCircle className=\"w-4 h-4\" />;\n      case 'cancelled': return <XCircle className=\"w-4 h-4\" />;\n      default: return <AlertCircle className=\"w-4 h-4\" />;\n    }\n  };\n\n  const filteredTenants = tenants.filter(tenant =>\n    tenant.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    tenant.subdomain?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Super Admin Dashboard</h1>\n          <p className=\"text-muted-foreground\">Manage your SaaS platform</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button onClick={() => setShowTenantModal(true)}>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Tenant\n          </Button>\n          <Button variant=\"outline\" onClick={handleLogout}>\n            <LogOut className=\"w-4 h-4 mr-2\" />\n            Logout\n          </Button>\n        </div>\n      </div>\n\n      {/* Analytics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Tenants</CardTitle>\n            <Building className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics?.totalTenants || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">All organizations</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Tenants</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics?.activeTenants || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">Paying customers</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Monthly Revenue</CardTitle>\n            <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">${analytics?.monthlyRevenue?.toLocaleString() || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">Recurring revenue</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Growth Rate</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics?.growthRate || 0}%</div>\n            <p className=\"text-xs text-muted-foreground\">Month over month</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content */}\n      <Tabs defaultValue=\"tenants\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"tenants\">Tenants</TabsTrigger>\n          <TabsTrigger value=\"packages\">Packages</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"tenants\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle>Tenant Management</CardTitle>\n                <div className=\"flex gap-2\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                    <input\n                      placeholder=\"Search tenants...\"\n                      className=\"pl-8 pr-4 py-2 border rounded-md\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                    />\n                  </div>\n                  <Button onClick={() => setShowTenantModal(true)}>\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Tenant\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {filteredTenants.map((tenant) => (\n                  <div key={tenant.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                        <Building className=\"w-5 h-5 text-blue-600\" />\n                      </div>\n                      <div>\n                        <div className=\"font-medium\">{tenant.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {tenant.subdomain}.yourdomain.com\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                      <Badge className={getStatusColor(tenant.status)}>\n                        <div className=\"flex items-center space-x-1\">\n                          {getStatusIcon(tenant.status)}\n                          <span className=\"capitalize\">{tenant.status}</span>\n                        </div>\n                      </Badge>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {tenant.currentUsers || 0} users\n                      </div>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => {\n                          setSelectedTenant(tenant);\n                          setShowTenantDetail(true);\n                        }}\n                      >\n                        <MoreVertical className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"packages\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle>Subscription Packages</CardTitle>\n                <Button onClick={() => setShowPackageModal(true)}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create Package\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {packages.map((pkg) => (\n                  <Card key={pkg.id} className=\"relative\">\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">{pkg.name}</CardTitle>\n                      <div className=\"text-2xl font-bold\">\n                        ${pkg.price}\n                        <span className=\"text-sm font-normal text-muted-foreground\">\n                          /{pkg.billingInterval}\n                        </span>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2 text-sm\">\n                        <div>• {pkg.maxVenues} venues</div>\n                        <div>• {pkg.maxUsers} users</div>\n                        <div>• {pkg.maxBookingsPerMonth} bookings/month</div>\n                        <div>• {pkg.trialDays} day trial</div>\n                      </div>\n                      <div className=\"mt-4 flex justify-between items-center\">\n                        <Badge variant={pkg.isActive ? \"default\" : \"secondary\"}>\n                          {pkg.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => {\n                            setEditingPackage(pkg);\n                            setShowPackageModal(true);\n                          }}\n                        >\n                          <Settings className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Platform Analytics</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-muted-foreground\">\n                Analytics dashboard coming soon...\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"settings\" className=\"space-y-4\">\n          <SuperAdminSettings />\n        </TabsContent>\n      </Tabs>\n\n      {/* Modals */}\n      <PackageManagementModal\n        open={showPackageModal}\n        onOpenChange={(open) => {\n          setShowPackageModal(open);\n          if (!open) setEditingPackage(undefined);\n        }}\n        package={editingPackage}\n      />\n      \n      <TenantManagementModal\n        open={showTenantModal}\n        onOpenChange={setShowTenantModal}\n      />\n\n      <TenantDetailModal\n        tenant={selectedTenant}\n        open={showTenantDetail}\n        onOpenChange={(open) => {\n          setShowTenantDetail(open);\n          if (!open) setSelectedTenant(null);\n        }}\n      />\n    </div>\n  );\n}","size_bytes":12993},"client/src/pages/super-admin-login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Shield, Eye, EyeOff } from \"lucide-react\";\n\nexport default function SuperAdminLogin() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [credentials, setCredentials] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const [showPassword, setShowPassword] = useState(false);\n\n  const loginMutation = useMutation({\n    mutationFn: (loginData: { email: string; password: string }) =>\n      apiRequest(\"/api/super-admin/login\", {\n        method: \"POST\",\n        body: JSON.stringify(loginData),\n      }),\n    onSuccess: (response) => {\n      // Store auth token\n      localStorage.setItem(\"super_admin_token\", response.token);\n      toast({ title: \"Login successful\", description: \"Welcome to Super Admin Dashboard\" });\n      // Redirect to super admin dashboard\n      setLocation(\"/super-admin\");\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Login failed\", \n        description: error.message || \"Invalid credentials\", \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!credentials.email || !credentials.password) {\n      toast({ title: \"Please enter both email and password\", variant: \"destructive\" });\n      return;\n    }\n    loginMutation.mutate(credentials);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center mb-4\">\n            <Shield className=\"w-6 h-6 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl\">Super Admin Portal</CardTitle>\n          <p className=\"text-gray-600\">Sign in to manage your SaaS platform</p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"email\">Email Address</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={credentials.email}\n                onChange={(e) => setCredentials(prev => ({ ...prev, email: e.target.value }))}\n                placeholder=\"admin@yourcompany.com\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={credentials.password}\n                  onChange={(e) => setCredentials(prev => ({ ...prev, password: e.target.value }))}\n                  placeholder=\"••••••••\"\n                  required\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={loginMutation.isPending}\n            >\n              {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center text-sm text-gray-600\">\n            <p>Default credentials for testing:</p>\n            <p className=\"font-mono text-xs bg-gray-100 p-2 rounded mt-2\">\n              Email: admin@yourcompany.com<br />\n              Password: password\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4494},"client/src/components/super-admin/package-management-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { X } from \"lucide-react\";\nimport { type SubscriptionPackage, type InsertSubscriptionPackage } from \"@shared/schema\";\n\ninterface Props {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  package?: SubscriptionPackage;\n}\n\nconst AVAILABLE_FEATURES = [\n  // Core Features (Trial + Starter+)\n  { id: \"dashboard_analytics\", name: \"Dashboard & Analytics\", description: \"Core dashboard with basic metrics and insights\", category: \"core\" },\n  { id: \"venue_management\", name: \"Venue Management\", description: \"Create and manage venue spaces and amenities\", category: \"core\" },\n  { id: \"event_booking\", name: \"Event Booking\", description: \"Calendar view and event booking system\", category: \"core\" },\n  { id: \"customer_management\", name: \"Customer Management\", description: \"Manage customer profiles and contact information\", category: \"core\" },\n  { id: \"proposal_system\", name: \"Proposal System\", description: \"Generate and send event proposals to customers\", category: \"core\" },\n  { id: \"payment_processing\", name: \"Payment Processing\", description: \"Accept payments and manage transactions\", category: \"core\" },\n  \n  // Advanced Features (Professional+)\n  { id: \"leads_management\", name: \"Leads Management\", description: \"Advanced lead tracking and conversion tools\", category: \"advanced\" },\n  { id: \"ai_analytics\", name: \"AI-Powered Analytics\", description: \"Smart insights and predictive analytics\", category: \"advanced\" },\n  { id: \"voice_booking\", name: \"Voice-to-Text Booking\", description: \"Create bookings using voice commands\", category: \"advanced\" },\n  { id: \"floor_plans\", name: \"Floor Plans & Setup Styles\", description: \"Interactive floor plan designer and setup templates\", category: \"advanced\" },\n  { id: \"advanced_reports\", name: \"Advanced Reports\", description: \"Detailed revenue and performance reports\", category: \"advanced\" },\n  { id: \"task_management\", name: \"Task Management\", description: \"Team collaboration and task tracking\", category: \"advanced\" },\n  \n  // Premium Features (Enterprise)\n  { id: \"custom_branding\", name: \"Custom Branding\", description: \"White-label your venue platform\", category: \"premium\" },\n  { id: \"api_access\", name: \"API Access\", description: \"Full REST API access for integrations\", category: \"premium\" },\n  { id: \"priority_support\", name: \"Priority Support\", description: \"24/7 premium customer support\", category: \"premium\" },\n  { id: \"advanced_integrations\", name: \"Advanced Integrations\", description: \"Connect to external CRM and marketing tools\", category: \"premium\" },\n  { id: \"multi_location\", name: \"Multi-Location Support\", description: \"Manage multiple venue locations\", category: \"premium\" },\n  { id: \"custom_fields\", name: \"Custom Fields\", description: \"Create custom booking and customer fields\", category: \"premium\" },\n];\n\nexport function PackageManagementModal({ open, onOpenChange, package: editPackage }: Props) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [formData, setFormData] = useState<Partial<InsertSubscriptionPackage>>({\n    name: editPackage?.name || \"\",\n    description: editPackage?.description || \"\",\n    price: editPackage?.price || \"0\",\n    billingInterval: editPackage?.billingInterval || \"monthly\",\n    trialDays: editPackage?.trialDays || 14,\n    maxVenues: editPackage?.maxVenues || 1,\n    maxUsers: editPackage?.maxUsers || 3,\n    maxBookingsPerMonth: editPackage?.maxBookingsPerMonth || 100,\n    features: editPackage?.features || [],\n    isActive: editPackage?.isActive ?? true,\n    sortOrder: editPackage?.sortOrder || 0,\n  });\n\n  const createPackageMutation = useMutation({\n    mutationFn: (data: InsertSubscriptionPackage) =>\n      apiRequest(\"/api/super-admin/packages\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/super-admin/packages\"] });\n      toast({ title: \"Package created successfully\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error creating package\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const updatePackageMutation = useMutation({\n    mutationFn: (data: Partial<InsertSubscriptionPackage>) =>\n      apiRequest(`/api/super-admin/packages/${editPackage?.id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/super-admin/packages\"] });\n      toast({ title: \"Package updated successfully\" });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error updating package\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name || !formData.price) {\n      toast({ title: \"Please fill in all required fields\", variant: \"destructive\" });\n      return;\n    }\n\n    const submitData = {\n      ...formData,\n      price: formData.price.toString(),\n      features: Array.isArray(formData.features) ? formData.features : [],\n    } as InsertSubscriptionPackage;\n\n    if (editPackage) {\n      updatePackageMutation.mutate(submitData);\n    } else {\n      createPackageMutation.mutate(submitData);\n    }\n  };\n\n  const toggleFeature = (featureId: string) => {\n    const currentFeatures = Array.isArray(formData.features) ? formData.features : [];\n    const hasFeature = currentFeatures.includes(featureId);\n    \n    setFormData(prev => ({\n      ...prev,\n      features: hasFeature\n        ? currentFeatures.filter(f => f !== featureId)\n        : [...currentFeatures, featureId]\n    }));\n  };\n\n  const selectedFeatures = Array.isArray(formData.features) ? formData.features : [];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>\n            {editPackage ? \"Edit Package\" : \"Create New Package\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Basic Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Basic Information</h3>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"name\">Package Name *</Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder=\"e.g., Professional\"\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"price\">Price *</Label>\n                <Input\n                  id=\"price\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={formData.price}\n                  onChange={(e) => setFormData(prev => ({ ...prev, price: e.target.value }))}\n                  placeholder=\"29.99\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description || \"\"}\n                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                placeholder=\"Brief description of the package\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"billingInterval\">Billing Interval</Label>\n                <Select\n                  value={formData.billingInterval}\n                  onValueChange={(value) => setFormData(prev => ({ ...prev, billingInterval: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"monthly\">Monthly</SelectItem>\n                    <SelectItem value=\"yearly\">Yearly</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"trialDays\">Trial Days</Label>\n                <Input\n                  id=\"trialDays\"\n                  type=\"number\"\n                  value={formData.trialDays}\n                  onChange={(e) => setFormData(prev => ({ ...prev, trialDays: parseInt(e.target.value) }))}\n                  placeholder=\"14\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Limits */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Package Limits</h3>\n            \n            <div className=\"grid grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"maxVenues\">Max Venues</Label>\n                <Input\n                  id=\"maxVenues\"\n                  type=\"number\"\n                  value={formData.maxVenues}\n                  onChange={(e) => setFormData(prev => ({ ...prev, maxVenues: parseInt(e.target.value) }))}\n                  placeholder=\"1\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"maxUsers\">Max Users</Label>\n                <Input\n                  id=\"maxUsers\"\n                  type=\"number\"\n                  value={formData.maxUsers}\n                  onChange={(e) => setFormData(prev => ({ ...prev, maxUsers: parseInt(e.target.value) }))}\n                  placeholder=\"3\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"maxBookingsPerMonth\">Max Bookings/Month</Label>\n                <Input\n                  id=\"maxBookingsPerMonth\"\n                  type=\"number\"\n                  value={formData.maxBookingsPerMonth}\n                  onChange={(e) => setFormData(prev => ({ ...prev, maxBookingsPerMonth: parseInt(e.target.value) }))}\n                  placeholder=\"100\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Features */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Features by Category</h3>\n            \n            {/* Core Features */}\n            <div>\n              <h4 className=\"font-medium text-green-700 mb-2\">Core Features (All Plans)</h4>\n              <div className=\"grid grid-cols-1 gap-2\">\n                {AVAILABLE_FEATURES.filter(f => f.category === 'core').map((feature) => (\n                  <div\n                    key={feature.id}\n                    className={`p-3 border rounded-lg cursor-pointer transition-colors ${\n                      selectedFeatures.includes(feature.id)\n                        ? 'border-green-500 bg-green-50'\n                        : 'border-gray-200 hover:border-gray-300'\n                    }`}\n                    onClick={() => toggleFeature(feature.id)}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">{feature.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">{feature.description}</div>\n                      </div>\n                      {selectedFeatures.includes(feature.id) && (\n                        <Badge className=\"bg-green-100 text-green-800\">Included</Badge>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Advanced Features */}\n            <div>\n              <h4 className=\"font-medium text-blue-700 mb-2\">Advanced Features (Professional+)</h4>\n              <div className=\"grid grid-cols-1 gap-2\">\n                {AVAILABLE_FEATURES.filter(f => f.category === 'advanced').map((feature) => (\n                  <div\n                    key={feature.id}\n                    className={`p-3 border rounded-lg cursor-pointer transition-colors ${\n                      selectedFeatures.includes(feature.id)\n                        ? 'border-blue-500 bg-blue-50'\n                        : 'border-gray-200 hover:border-gray-300'\n                    }`}\n                    onClick={() => toggleFeature(feature.id)}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">{feature.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">{feature.description}</div>\n                      </div>\n                      {selectedFeatures.includes(feature.id) && (\n                        <Badge className=\"bg-blue-100 text-blue-800\">Included</Badge>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Premium Features */}\n            <div>\n              <h4 className=\"font-medium text-purple-700 mb-2\">Premium Features (Enterprise)</h4>\n              <div className=\"grid grid-cols-1 gap-2\">\n                {AVAILABLE_FEATURES.filter(f => f.category === 'premium').map((feature) => (\n                  <div\n                    key={feature.id}\n                    className={`p-3 border rounded-lg cursor-pointer transition-colors ${\n                      selectedFeatures.includes(feature.id)\n                        ? 'border-purple-500 bg-purple-50'\n                        : 'border-gray-200 hover:border-gray-300'\n                    }`}\n                    onClick={() => toggleFeature(feature.id)}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">{feature.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">{feature.description}</div>\n                      </div>\n                      {selectedFeatures.includes(feature.id) && (\n                        <Badge className=\"bg-purple-100 text-purple-800\">Included</Badge>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Settings */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Settings</h3>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"isActive\"\n                  checked={formData.isActive}\n                  onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: checked }))}\n                />\n                <Label htmlFor=\"isActive\">Active Package</Label>\n              </div>\n\n              <div>\n                <Label htmlFor=\"sortOrder\">Sort Order</Label>\n                <Input\n                  id=\"sortOrder\"\n                  type=\"number\"\n                  value={formData.sortOrder}\n                  onChange={(e) => setFormData(prev => ({ ...prev, sortOrder: parseInt(e.target.value) }))}\n                  placeholder=\"0\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n            <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={createPackageMutation.isPending || updatePackageMutation.isPending}\n            >\n              {editPackage ? \"Update Package\" : \"Create Package\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":16571},"client/src/components/super-admin/tenant-detail-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Users, \n  Package, \n  Settings, \n  Crown, \n  Check, \n  X, \n  Plus,\n  Trash2,\n  Edit3,\n  AlertTriangle,\n  Building\n} from \"lucide-react\";\nimport { type Tenant, type SubscriptionPackage, type User } from \"@shared/schema\";\n\ninterface Props {\n  tenant: Tenant | null;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\ninterface TenantUser extends User {\n  permissions: string[];\n}\n\ninterface FeatureAccess {\n  [featureId: string]: boolean;\n}\n\nconst FEATURE_DESCRIPTIONS = {\n  dashboard_analytics: \"Core dashboard with basic metrics and insights\",\n  venue_management: \"Create and manage venue spaces and amenities\", \n  event_booking: \"Calendar view and event booking system\",\n  customer_management: \"Manage customer profiles and contact information\",\n  proposal_system: \"Generate and send event proposals to customers\",\n  payment_processing: \"Accept payments and manage transactions\",\n  leads_management: \"Advanced lead tracking and conversion tools\",\n  ai_analytics: \"Smart insights and predictive analytics\",\n  voice_booking: \"Create bookings using voice commands\",\n  floor_plans: \"Interactive floor plan designer and setup templates\",\n  advanced_reports: \"Detailed revenue and performance reports\",\n  task_management: \"Team collaboration and task tracking\",\n  custom_branding: \"White-label your venue platform\",\n  api_access: \"Full REST API access for integrations\",\n  priority_support: \"24/7 premium customer support\",\n  advanced_integrations: \"Connect to external CRM and marketing tools\",\n  multi_location: \"Manage multiple venue locations\",\n  custom_fields: \"Create custom booking and customer fields\"\n};\n\nexport function TenantDetailModal({ tenant, open, onOpenChange }: Props) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [editData, setEditData] = useState({\n    name: \"\",\n    subdomain: \"\",\n    customDomain: \"\",\n    status: \"trial\",\n    subscriptionPackageId: \"\",\n    primaryColor: \"#3b82f6\",\n    notes: \"\"\n  });\n\n  const [newUserData, setNewUserData] = useState({\n    username: \"\",\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    role: \"tenant_user\"\n  });\n\n  const [showAddUser, setShowAddUser] = useState(false);\n\n  // Fetch tenant details including users\n  const { data: tenantUsers = [] } = useQuery<TenantUser[]>({\n    queryKey: [`/api/super-admin/tenants/${tenant?.id}/users`],\n    enabled: !!tenant?.id && open\n  });\n\n  // Fetch available packages\n  const { data: packages = [] } = useQuery<SubscriptionPackage[]>({\n    queryKey: [\"/api/super-admin/packages\"],\n    enabled: open\n  });\n\n  // Get current package for this tenant\n  const currentPackage = packages.find(pkg => pkg.id === tenant?.subscriptionPackageId);\n  const packageFeatures = Array.isArray(currentPackage?.features) ? currentPackage.features : [];\n\n  // Update local state when tenant changes\n  useEffect(() => {\n    if (tenant) {\n      setEditData({\n        name: tenant.name || \"\",\n        subdomain: tenant.subdomain || \"\",\n        customDomain: tenant.customDomain || \"\",\n        status: tenant.status || \"trial\",\n        subscriptionPackageId: tenant.subscriptionPackageId || \"\",\n        primaryColor: tenant.primaryColor || \"#3b82f6\",\n        notes: \"\"\n      });\n    }\n  }, [tenant]);\n\n  // Update tenant mutation\n  const updateTenantMutation = useMutation({\n    mutationFn: (data: Partial<Tenant>) =>\n      apiRequest(`/api/super-admin/tenants/${tenant?.id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      toast({ title: \"Tenant updated successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/super-admin/tenants\"] });\n      queryClient.invalidateQueries({ queryKey: [`/api/super-admin/tenants/${tenant?.id}/users`] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error updating tenant\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  // Add user mutation\n  const addUserMutation = useMutation({\n    mutationFn: (userData: typeof newUserData) =>\n      apiRequest(`/api/super-admin/tenants/${tenant?.id}/users`, {\n        method: \"POST\",\n        body: JSON.stringify(userData),\n      }),\n    onSuccess: () => {\n      toast({ title: \"User added successfully\" });\n      queryClient.invalidateQueries({ queryKey: [`/api/super-admin/tenants/${tenant?.id}/users`] });\n      setNewUserData({ username: \"\", name: \"\", email: \"\", password: \"\", role: \"tenant_user\" });\n      setShowAddUser(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error adding user\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: (userId: string) =>\n      apiRequest(`/api/super-admin/tenants/${tenant?.id}/users/${userId}`, {\n        method: \"DELETE\",\n      }),\n    onSuccess: () => {\n      toast({ title: \"User removed successfully\" });\n      queryClient.invalidateQueries({ queryKey: [`/api/super-admin/tenants/${tenant?.id}/users`] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error removing user\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const handleUpdateTenant = () => {\n    updateTenantMutation.mutate(editData);\n  };\n\n  const handleAddUser = () => {\n    if (!newUserData.username || !newUserData.name || !newUserData.email || !newUserData.password) {\n      toast({ title: \"Please fill in all required fields\", variant: \"destructive\" });\n      return;\n    }\n    addUserMutation.mutate({ ...newUserData, tenantId: tenant?.id });\n  };\n\n  const formatFeatureName = (featureId: string) => {\n    return featureId.split('_').map(word => \n      word.charAt(0).toUpperCase() + word.slice(1)\n    ).join(' ');\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'trial': return 'bg-blue-100 text-blue-800';\n      case 'suspended': return 'bg-yellow-100 text-yellow-800';\n      case 'cancelled': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'tenant_admin': return 'bg-purple-100 text-purple-800';\n      case 'tenant_user': return 'bg-blue-100 text-blue-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (!tenant) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Building className=\"w-5 h-5\" />\n            {tenant.name} - Tenant Details\n          </DialogTitle>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"package\">Package & Features</TabsTrigger>\n            <TabsTrigger value=\"users\">Users</TabsTrigger>\n            <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Basic Information</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Organization Name</Label>\n                    <Input\n                      id=\"name\"\n                      value={editData.name}\n                      onChange={(e) => setEditData(prev => ({ ...prev, name: e.target.value }))}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"subdomain\">Subdomain</Label>\n                    <Input\n                      id=\"subdomain\"\n                      value={editData.subdomain}\n                      onChange={(e) => setEditData(prev => ({ ...prev, subdomain: e.target.value }))}\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      URL: /api/tenant/{editData.subdomain}/dashboard\n                    </p>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"customDomain\">Custom Domain</Label>\n                    <Input\n                      id=\"customDomain\"\n                      value={editData.customDomain}\n                      onChange={(e) => setEditData(prev => ({ ...prev, customDomain: e.target.value }))}\n                      placeholder=\"bookings.company.com\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"status\">Status</Label>\n                    <Select \n                      value={editData.status} \n                      onValueChange={(value) => setEditData(prev => ({ ...prev, status: value }))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"trial\">Trial</SelectItem>\n                        <SelectItem value=\"active\">Active</SelectItem>\n                        <SelectItem value=\"suspended\">Suspended</SelectItem>\n                        <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Usage Statistics</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <span>Current Users:</span>\n                    <Badge variant=\"outline\">{tenant.currentUsers || 0}</Badge>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Current Venues:</span>\n                    <Badge variant=\"outline\">{tenant.currentVenues || 0}</Badge>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Monthly Bookings:</span>\n                    <Badge variant=\"outline\">{tenant.monthlyBookings || 0}</Badge>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Status:</span>\n                    <Badge className={getStatusColor(tenant.status)}>\n                      {tenant.status}\n                    </Badge>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Created:</span>\n                    <span className=\"text-sm text-muted-foreground\">\n                      {new Date(tenant.createdAt).toLocaleDateString()}\n                    </span>\n                  </div>\n                  {tenant.trialEndsAt && (\n                    <div className=\"flex justify-between\">\n                      <span>Trial Ends:</span>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {new Date(tenant.trialEndsAt).toLocaleDateString()}\n                      </span>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n                Cancel\n              </Button>\n              <Button \n                onClick={handleUpdateTenant}\n                disabled={updateTenantMutation.isPending}\n              >\n                {updateTenantMutation.isPending ? \"Updating...\" : \"Update Tenant\"}\n              </Button>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"package\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Current Package Assignment</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"packageId\">Subscription Package</Label>\n                  <Select \n                    value={editData.subscriptionPackageId} \n                    onValueChange={(value) => setEditData(prev => ({ ...prev, subscriptionPackageId: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select a package\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"\">No Package (Trial)</SelectItem>\n                      {packages.map((pkg) => (\n                        <SelectItem key={pkg.id} value={pkg.id}>\n                          {pkg.name} - ${pkg.price}/{pkg.billingInterval}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {currentPackage && (\n                  <div className=\"mt-6\">\n                    <h3 className=\"text-lg font-medium mb-4\">Package Details: {currentPackage.name}</h3>\n                    <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                      <div>\n                        <span className=\"font-medium\">Price:</span> ${currentPackage.price}/{currentPackage.billingInterval}\n                      </div>\n                      <div>\n                        <span className=\"font-medium\">Trial Days:</span> {currentPackage.trialDays}\n                      </div>\n                      <div>\n                        <span className=\"font-medium\">Max Venues:</span> {currentPackage.maxVenues}\n                      </div>\n                      <div>\n                        <span className=\"font-medium\">Max Users:</span> {currentPackage.maxUsers}\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-medium mb-2\">Included Features:</h4>\n                      <div className=\"grid grid-cols-1 gap-2\">\n                        {Object.keys(FEATURE_DESCRIPTIONS).map((featureId) => {\n                          const isIncluded = packageFeatures.includes(featureId);\n                          return (\n                            <div\n                              key={featureId}\n                              className={`p-3 border rounded-lg flex items-center justify-between ${\n                                isIncluded ? 'border-green-200 bg-green-50' : 'border-gray-200 bg-gray-50'\n                              }`}\n                            >\n                              <div>\n                                <div className=\"font-medium\">\n                                  {formatFeatureName(featureId)}\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  {FEATURE_DESCRIPTIONS[featureId as keyof typeof FEATURE_DESCRIPTIONS]}\n                                </div>\n                              </div>\n                              <div className=\"flex items-center\">\n                                {isIncluded ? (\n                                  <Badge className=\"bg-green-100 text-green-800\">\n                                    <Check className=\"w-4 h-4 mr-1\" />\n                                    Included\n                                  </Badge>\n                                ) : (\n                                  <Badge variant=\"secondary\">\n                                    <X className=\"w-4 h-4 mr-1\" />\n                                    Blocked\n                                  </Badge>\n                                )}\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {!currentPackage && editData.subscriptionPackageId === \"\" && (\n                  <div className=\"p-4 border border-yellow-200 rounded-lg bg-yellow-50\">\n                    <div className=\"flex items-center gap-2\">\n                      <AlertTriangle className=\"w-5 h-5 text-yellow-600\" />\n                      <span className=\"font-medium text-yellow-800\">Trial Mode</span>\n                    </div>\n                    <p className=\"text-sm text-yellow-700 mt-1\">\n                      This tenant is in trial mode with basic features only.\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"users\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <CardTitle className=\"text-lg\">Tenant Users</CardTitle>\n                  <Button onClick={() => setShowAddUser(true)}>\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add User\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {tenantUsers.map((user) => (\n                    <div key={user.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                          <Users className=\"w-5 h-5 text-blue-600\" />\n                        </div>\n                        <div>\n                          <div className=\"font-medium\">{user.name}</div>\n                          <div className=\"text-sm text-muted-foreground\">{user.email}</div>\n                          <div className=\"text-sm text-muted-foreground\">@{user.username}</div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-4\">\n                        <Badge className={getRoleColor(user.role)}>\n                          {user.role === 'tenant_admin' ? (\n                            <>\n                              <Crown className=\"w-3 h-3 mr-1\" />\n                              Admin\n                            </>\n                          ) : (\n                            'User'\n                          )}\n                        </Badge>\n                        <Badge variant={user.isActive ? \"default\" : \"secondary\"}>\n                          {user.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => deleteUserMutation.mutate(user.id)}\n                          disabled={deleteUserMutation.isPending}\n                        >\n                          <Trash2 className=\"w-4 h-4 text-red-500\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n\n                  {showAddUser && (\n                    <div className=\"p-4 border rounded-lg bg-gray-50\">\n                      <h4 className=\"font-medium mb-3\">Add New User</h4>\n                      <div className=\"grid grid-cols-2 gap-3\">\n                        <div>\n                          <Label htmlFor=\"newUsername\">Username</Label>\n                          <Input\n                            id=\"newUsername\"\n                            value={newUserData.username}\n                            onChange={(e) => setNewUserData(prev => ({ ...prev, username: e.target.value }))}\n                            placeholder=\"john_doe\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"newName\">Full Name</Label>\n                          <Input\n                            id=\"newName\"\n                            value={newUserData.name}\n                            onChange={(e) => setNewUserData(prev => ({ ...prev, name: e.target.value }))}\n                            placeholder=\"John Doe\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"newEmail\">Email</Label>\n                          <Input\n                            id=\"newEmail\"\n                            type=\"email\"\n                            value={newUserData.email}\n                            onChange={(e) => setNewUserData(prev => ({ ...prev, email: e.target.value }))}\n                            placeholder=\"john@example.com\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"newPassword\">Password</Label>\n                          <Input\n                            id=\"newPassword\"\n                            type=\"password\"\n                            value={newUserData.password}\n                            onChange={(e) => setNewUserData(prev => ({ ...prev, password: e.target.value }))}\n                            placeholder=\"••••••••\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"newRole\">Role</Label>\n                          <Select \n                            value={newUserData.role} \n                            onValueChange={(value) => setNewUserData(prev => ({ ...prev, role: value }))}\n                          >\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"tenant_user\">User</SelectItem>\n                              <SelectItem value=\"tenant_admin\">Admin</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                      <div className=\"flex justify-end space-x-2 mt-4\">\n                        <Button variant=\"outline\" onClick={() => setShowAddUser(false)}>\n                          Cancel\n                        </Button>\n                        <Button \n                          onClick={handleAddUser}\n                          disabled={addUserMutation.isPending}\n                        >\n                          {addUserMutation.isPending ? \"Adding...\" : \"Add User\"}\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"settings\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Advanced Settings</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"primaryColor\">Primary Color</Label>\n                  <Input\n                    id=\"primaryColor\"\n                    type=\"color\"\n                    value={editData.primaryColor}\n                    onChange={(e) => setEditData(prev => ({ ...prev, primaryColor: e.target.value }))}\n                    className=\"w-20 h-10\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"notes\">Admin Notes</Label>\n                  <Textarea\n                    id=\"notes\"\n                    value={editData.notes}\n                    onChange={(e) => setEditData(prev => ({ ...prev, notes: e.target.value }))}\n                    placeholder=\"Internal notes about this tenant...\"\n                    rows={4}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":25031},"server/middleware/feature-access.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"../storage\";\nimport { type TenantRequest } from \"./tenant\";\n\nexport interface FeatureRequest extends TenantRequest {\n  hasFeature?: (featureId: string) => boolean;\n}\n\n// Mapping of feature IDs to their descriptions and categories\nexport const AVAILABLE_FEATURES = {\n  // Core Features\n  dashboard_analytics: {\n    name: \"Dashboard & Analytics\",\n    description: \"Core dashboard with basic metrics and insights\",\n    category: \"core\"\n  },\n  venue_management: {\n    name: \"Venue Management\", \n    description: \"Create and manage venue spaces and amenities\",\n    category: \"core\"\n  },\n  event_booking: {\n    name: \"Event Booking\",\n    description: \"Calendar view and event booking system\", \n    category: \"core\"\n  },\n  customer_management: {\n    name: \"Customer Management\",\n    description: \"Manage customer profiles and contact information\",\n    category: \"core\"\n  },\n  proposal_system: {\n    name: \"Proposal System\",\n    description: \"Generate and send event proposals to customers\",\n    category: \"core\"\n  },\n  payment_processing: {\n    name: \"Payment Processing\",\n    description: \"Accept payments and manage transactions\",\n    category: \"core\"\n  },\n  \n  // Advanced Features\n  leads_management: {\n    name: \"Leads Management\",\n    description: \"Advanced lead tracking and conversion tools\",\n    category: \"advanced\"\n  },\n  ai_analytics: {\n    name: \"AI-Powered Analytics\", \n    description: \"Smart insights and predictive analytics\",\n    category: \"advanced\"\n  },\n  voice_booking: {\n    name: \"Voice-to-Text Booking\",\n    description: \"Create bookings using voice commands\",\n    category: \"advanced\"\n  },\n  floor_plans: {\n    name: \"Floor Plans & Setup Styles\",\n    description: \"Interactive floor plan designer and setup templates\", \n    category: \"advanced\"\n  },\n  advanced_reports: {\n    name: \"Advanced Reports\",\n    description: \"Detailed revenue and performance reports\",\n    category: \"advanced\"\n  },\n  task_management: {\n    name: \"Task Management\",\n    description: \"Team collaboration and task tracking\",\n    category: \"advanced\"\n  },\n  \n  // Premium Features\n  custom_branding: {\n    name: \"Custom Branding\",\n    description: \"White-label your venue platform\",\n    category: \"premium\"\n  },\n  api_access: {\n    name: \"API Access\",\n    description: \"Full REST API access for integrations\",\n    category: \"premium\"\n  },\n  priority_support: {\n    name: \"Priority Support\", \n    description: \"24/7 premium customer support\",\n    category: \"premium\"\n  },\n  advanced_integrations: {\n    name: \"Advanced Integrations\",\n    description: \"Connect to external CRM and marketing tools\",\n    category: \"premium\"\n  },\n  multi_location: {\n    name: \"Multi-Location Support\",\n    description: \"Manage multiple venue locations\",\n    category: \"premium\"\n  },\n  custom_fields: {\n    name: \"Custom Fields\",\n    description: \"Create custom booking and customer fields\",\n    category: \"premium\"\n  }\n};\n\n// Basic trial features that are always available\nconst TRIAL_FEATURES = [\n  'dashboard_analytics',\n  'venue_management', \n  'event_booking',\n  'customer_management'\n];\n\n/**\n * Get the features available to a tenant based on their subscription package\n */\nexport function getTenantFeatures(tenantId: string): string[] {\n  const tenant = storage.tenants.get(tenantId);\n  if (!tenant) {\n    return TRIAL_FEATURES;\n  }\n\n  // If no package assigned, return trial features\n  if (!tenant.subscriptionPackageId) {\n    return TRIAL_FEATURES;\n  }\n\n  // Get the subscription package\n  const subscriptionPackage = storage.subscriptionPackages.get(tenant.subscriptionPackageId);\n  if (!subscriptionPackage || !subscriptionPackage.isActive) {\n    return TRIAL_FEATURES;\n  }\n\n  // Return package features or trial features if package has no features defined\n  const packageFeatures = Array.isArray(subscriptionPackage.features) ? subscriptionPackage.features : [];\n  return packageFeatures.length > 0 ? packageFeatures : TRIAL_FEATURES;\n}\n\n/**\n * Check if a tenant has access to a specific feature\n */\nexport function hasFeatureAccess(tenantId: string, featureId: string): boolean {\n  const availableFeatures = getTenantFeatures(tenantId);\n  return availableFeatures.includes(featureId);\n}\n\n/**\n * Middleware to add feature checking functionality to requests\n */\nexport function addFeatureAccess(req: FeatureRequest, res: Response, next: NextFunction) {\n  if (!req.tenant) {\n    return next();\n  }\n\n  // Add hasFeature function to request object\n  req.hasFeature = (featureId: string) => {\n    return hasFeatureAccess(req.tenant!.id, featureId);\n  };\n\n  next();\n}\n\n/**\n * Middleware to require a specific feature for an endpoint\n */\nexport function requireFeature(featureId: string) {\n  return (req: FeatureRequest, res: Response, next: NextFunction) => {\n    if (!req.tenant) {\n      return res.status(401).json({ \n        message: \"Authentication required\",\n        code: \"AUTH_REQUIRED\"\n      });\n    }\n\n    if (!hasFeatureAccess(req.tenant.id, featureId)) {\n      const feature = AVAILABLE_FEATURES[featureId as keyof typeof AVAILABLE_FEATURES];\n      return res.status(403).json({ \n        message: `This feature (${feature?.name || featureId}) is not available in your current subscription plan`,\n        code: \"FEATURE_NOT_AVAILABLE\",\n        featureId,\n        featureName: feature?.name,\n        upgradeRequired: true\n      });\n    }\n\n    next();\n  };\n}\n\n/**\n * Endpoint to get available features for a tenant\n */\nexport function getFeaturesForTenant(req: FeatureRequest, res: Response) {\n  if (!req.tenant) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n\n  const availableFeatures = getTenantFeatures(req.tenant.id);\n  const featureDetails = availableFeatures.map(featureId => ({\n    id: featureId,\n    ...AVAILABLE_FEATURES[featureId as keyof typeof AVAILABLE_FEATURES],\n    enabled: true\n  }));\n\n  // Add disabled features for reference\n  const allFeatureIds = Object.keys(AVAILABLE_FEATURES);\n  const disabledFeatures = allFeatureIds\n    .filter(featureId => !availableFeatures.includes(featureId))\n    .map(featureId => ({\n      id: featureId,\n      ...AVAILABLE_FEATURES[featureId as keyof typeof AVAILABLE_FEATURES],\n      enabled: false\n    }));\n\n  res.json({\n    tenant: req.tenant,\n    package: req.tenant.subscriptionPackageId ? storage.subscriptionPackages.get(req.tenant.subscriptionPackageId) : null,\n    features: {\n      enabled: featureDetails,\n      disabled: disabledFeatures,\n      total: allFeatureIds.length,\n      available: availableFeatures.length\n    }\n  });\n}\n\n/**\n * Check package limits (users, venues, bookings)\n */\nexport function checkPackageLimits(tenantId: string): {\n  usersWithinLimit: boolean;\n  venuesWithinLimit: boolean;\n  bookingsWithinLimit: boolean;\n  limits: {\n    maxUsers: number;\n    maxVenues: number; \n    maxBookingsPerMonth: number;\n    currentUsers: number;\n    currentVenues: number;\n    currentBookings: number;\n  };\n} {\n  const tenant = storage.tenants.get(tenantId);\n  if (!tenant) {\n    return {\n      usersWithinLimit: false,\n      venuesWithinLimit: false,\n      bookingsWithinLimit: false,\n      limits: {\n        maxUsers: 0,\n        maxVenues: 0,\n        maxBookingsPerMonth: 0,\n        currentUsers: 0,\n        currentVenues: 0,\n        currentBookings: 0\n      }\n    };\n  }\n\n  // Get package limits or defaults for trial\n  let maxUsers = 3;\n  let maxVenues = 1;\n  let maxBookingsPerMonth = 50;\n\n  if (tenant.subscriptionPackageId) {\n    const subscriptionPackage = storage.subscriptionPackages.get(tenant.subscriptionPackageId);\n    if (subscriptionPackage && subscriptionPackage.isActive) {\n      maxUsers = subscriptionPackage.maxUsers || 3;\n      maxVenues = subscriptionPackage.maxVenues || 1;\n      maxBookingsPerMonth = subscriptionPackage.maxBookingsPerMonth || 50;\n    }\n  }\n\n  const currentUsers = tenant.currentUsers || 0;\n  const currentVenues = tenant.currentVenues || 0;\n  const currentBookings = tenant.monthlyBookings || 0;\n\n  return {\n    usersWithinLimit: currentUsers < maxUsers,\n    venuesWithinLimit: currentVenues < maxVenues,\n    bookingsWithinLimit: currentBookings < maxBookingsPerMonth,\n    limits: {\n      maxUsers,\n      maxVenues,\n      maxBookingsPerMonth,\n      currentUsers,\n      currentVenues,\n      currentBookings\n    }\n  };\n}\n\n/**\n * Middleware to check package limits before allowing actions\n */\nexport function requireWithinLimits(limitType: 'users' | 'venues' | 'bookings') {\n  return (req: FeatureRequest, res: Response, next: NextFunction) => {\n    if (!req.tenant) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    const limits = checkPackageLimits(req.tenant.id);\n    \n    let withinLimit = false;\n    let limitName = '';\n    let current = 0;\n    let max = 0;\n\n    switch (limitType) {\n      case 'users':\n        withinLimit = limits.usersWithinLimit;\n        limitName = 'users';\n        current = limits.limits.currentUsers;\n        max = limits.limits.maxUsers;\n        break;\n      case 'venues':\n        withinLimit = limits.venuesWithinLimit;\n        limitName = 'venues';\n        current = limits.limits.currentVenues;\n        max = limits.limits.maxVenues;\n        break;\n      case 'bookings':\n        withinLimit = limits.bookingsWithinLimit;\n        limitName = 'bookings per month';\n        current = limits.limits.currentBookings;\n        max = limits.limits.maxBookingsPerMonth;\n        break;\n    }\n\n    if (!withinLimit) {\n      return res.status(403).json({\n        message: `You have reached your ${limitName} limit (${current}/${max}). Please upgrade your subscription to add more.`,\n        code: \"LIMIT_EXCEEDED\",\n        limitType,\n        current,\n        max,\n        upgradeRequired: true\n      });\n    }\n\n    next();\n  };\n}","size_bytes":9801}}}