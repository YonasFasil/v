1) Roles & responsibilities
	•	Superadmin (platform): manage tenants, plans, billing status, impersonation, audits.
	•	Tenant Owner/Admin (account): billing portal, venues/spaces, team & permissions, settings.
	•	Staff/Viewer (per-tenant): limited by permissions; viewer = read-only.

2) URL map (simple + predictable)
	•	Public: / (home), /features, /pricing, /signup, /login, /privacy, /terms
	•	Tenant app: /t/:tenantSlug/app/... (dashboard, venues, bookings, customers, proposals, payments, reports, settings)
	•	Superadmin: /super-admin/... (tenants, plans, analytics, activity, impersonate)
	•	Webhooks: /api/webhooks/stripe-billing, /api/webhooks/stripe-connect
	•	Health: /healthz

3) Data model (core tables)
	•	users (global)
	•	superAdmins(userId)
	•	tenants(id, name, slug, status: active|past_due|canceled|suspended, planSlug, stripeCustomerId, stripeSubscriptionId, trialEnd, stripeConnectAccountId, connectStatus)
	•	tenantUsers(tenantId, userId, role: owner|admin|manager|staff|viewer, permissions JSONB, scopes JSONB, UNIQUE(tenantId,userId))
	•	featurePackages(id, name, slug, status: draft|active|archived, billingModes {monthly/yearly}, stripeProductId, stripePriceIds {monthly?,yearly?}, limits JSON, flags JSON, trialDays, sortOrder)
	•	auditLogs(id, actorUserId, tenantId?, action, entity, meta JSON, ip, userAgent, createdAt)

Multi-tenancy: single Postgres db with tenantId on all business rows + a global query guard (optionally add Postgres RLS).

4) Auth & session
	•	Email/password with email verification.
	•	Session cookies (httpOnly, secure, sameSite=strict), short-lived for superadmin.
	•	“Mode switcher” for users who are both superadmin and tenant users (rotate session on switch).
	•	MFA mandatory for superadmin and tenant owners.

5) Public website & signup
	•	/features pulls from GET /api/public/features (auto-summarize existing capabilities; don’t hardcode).
	•	/pricing pulls from GET /api/public/plans (only active plans; monthly/yearly; trial).
	•	/signup: company, admin name, email, password, plan, interval → Stripe Billing Checkout → webhook provisions tenant → /t/:slug/app/onboarding.

6) Stripe split (two flows, one platform account)
	•	Billing (you ⇄ tenants): Stripe Billing for your SaaS plans. Webhooks: checkout.session.completed, invoice.payment_*, customer.subscription.* → keep tenants.status in sync.
	•	Connect (tenants ⇄ their clients): Stripe Connect for event/deposit/balance payments. Onboarding from Tenant Settings. Block charges until requirements are complete. (Optional) application_fee_amount if you want a per-transaction cut.

7) Staff permissions (allowlist)
	•	Store booleans in tenantUsers.permissions (omitted = denied). Suggested keys:
	•	events:view/create/edit/cancel
	•	proposals:view/create/send/edit
	•	customers:view/create/edit
	•	payments:view/record/refund
	•	venues:view/manage, spaces:view/manage
	•	reports:view, communications:send_email/send_sms, ai:use
	•	settings:manage, team:manage, billing:manage
	•	Optional scopes.allowedVenueIds to restrict actions to specific venues.
	•	Presets for quick setup (Coordinator, Sales, Finance, Viewer).

8) Enforcement & guardrails (server-first)
	•	Middleware: authGuard → tenantGuard → statusGate → planEnforcer → permissionGuard.
	•	statusGate:
	•	active = full; past_due = read-only except Billing; canceled/suspended = Billing-only.
	•	planEnforcer: enforce featurePackages.limits (venues, spacesPerVenue, staff, monthlyBookings). Return structured 402 with upgrade hint.
	•	permissionGuard: map each route to a permission; 403 on deny; UI hides buttons accordingly.
	•	Impersonation: banner, time-limit, “reason” field, full audit.

9) Onboarding (after provisioning)
	1.	Confirm venue → 2) Add spaces → 3) Invite team (choose preset).
Show usage meter (e.g., “12/50 bookings this month”) if easy.

10) Ops & safety
	•	.env.example with Stripe keys (Billing & Connect), webhook secrets, Neon URL, session secret, cookie domain, Gmail, Gemini.
	•	OpenAPI spec + Postman collection.
	•	/healthz (app, DB, session). Rate limits for auth, signup, payments, AI.
	•	Backups + restore runbook; soft-delete tenants; owner transfer flow.
	•	Playwright e2e covering signup, webhook state changes, permission gates, plan limits.

11) “Done” checklist
	•	Public site lists active plans; /signup works end-to-end with Stripe Billing.
	•	Tenant is provisioned only after email verify + successful checkout.
	•	Tenant Owner can add staff and toggle granular permissions; server enforces; UI hides.
	•	Connect onboarding allows tenants to collect from clients; blocked until requirements complete.
	•	Plan limits + status gates enforced server-side; clear upgrade or past-due messaging.
	•	Superadmin can manage tenants, plans, impersonate (safely), and see audits.