import { useState } from "react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import { Send, User, Calendar, MapPin, Users, DollarSign } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { format } from "date-fns";

interface EventDate {
  date: Date;
  startTime: string;
  endTime: string;
  venue: string;
  space: string;
  guestCount: number;
  totalAmount: number;
}

interface EmailPreviewModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  eventData: {
    eventName: string;
    customerId: string;
    eventDates: EventDate[];
    totalAmount: number;
    customerData?: {
      name: string;
      email: string;
      company?: string;
    };
  };
  onSend: (proposalId: string) => void;
}

export function EmailPreviewModal({
  open,
  onOpenChange,
  eventData,
  onSend
}: EmailPreviewModalProps) {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  
  const [emailSubject, setEmailSubject] = useState(
    `Event Proposal: ${eventData.eventName}`
  );
  const [emailMessage, setEmailMessage] = useState(`
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background: #3b82f6; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0;">
        <h1 style="margin: 0;">Venuine Events</h1>
        <p style="margin: 5px 0 0 0;">Your Event Proposal</p>
      </div>
      
      <div style="background: #f8fafc; padding: 30px; border-radius: 0 0 8px 8px;">
        <h2 style="color: #1f2937;">Dear ${eventData.customerData?.name || 'Valued Customer'},</h2>
        
        <p>Thank you for considering Venuine Events for your upcoming event. We're excited to present you with a customized proposal for <strong>${eventData.eventName}</strong>.</p>
        
        <div style="background: white; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #3b82f6;">
          <h3 style="color: #1f2937; margin-top: 0;">Event Details</h3>
          ${eventData.eventDates.map(eventDate => `
            <div style="margin-bottom: 15px; padding-bottom: 15px; border-bottom: 1px solid #e5e7eb;">
              <p><strong>üìÖ Date:</strong> ${format(eventDate.date, 'MMMM d, yyyy')}</p>
              <p><strong>üïê Time:</strong> ${eventDate.startTime} - ${eventDate.endTime}</p>
              <p><strong>üìç Location:</strong> ${eventDate.venue} - ${eventDate.space}</p>
              <p><strong>üë• Guest Count:</strong> ${eventDate.guestCount} guests</p>
            </div>
          `).join('')}
          
          <div style="margin-top: 20px; padding: 15px; background: #ecfdf5; border-radius: 6px; border: 1px solid #10b981;">
            <p style="margin: 0; font-size: 18px; font-weight: bold; color: #065f46;">
              üí∞ Total Investment: $${eventData.totalAmount.toFixed(2)}
            </p>
          </div>
        </div>
        
        <p>This proposal includes all the details and services we've discussed to make your event memorable and successful. Our experienced team will be with you every step of the way to ensure everything runs smoothly.</p>
        
        <p>Please review the complete proposal details and let us know if you have any questions or would like to make any adjustments. We're here to make your vision come to life!</p>
        
        <p>Best regards,<br>
        <strong>The Venuine Events Team</strong></p>
      </div>
      
      <div style="text-align: center; margin-top: 20px; padding: 15px; color: #6b7280; font-size: 12px;">
        <p>This proposal was generated by Venuine Event Management System</p>
      </div>
    </div>
  `);

  const sendEmailMutation = useMutation({
    mutationFn: async (emailData: any) => {
      return await apiRequest("/api/proposals/send-email", {
        method: "POST",
        body: JSON.stringify(emailData),
        headers: {
          "Content-Type": "application/json"
        }
      });
    },
    onSuccess: (data) => {
      toast({
        title: "Email Sent Successfully",
        description: "Your proposal has been sent to the customer and logged in communications.",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/communications"] });
      queryClient.invalidateQueries({ queryKey: ["/api/proposals"] });
      queryClient.invalidateQueries({ queryKey: ["/api/bookings"] }); // Refresh bookings to show tentative booking
      onOpenChange(false);
    },
    onError: (error) => {
      console.error("Email sending failed:", error);
      toast({
        title: "Email Failed",
        description: error instanceof Error ? error.message : "Failed to send email. Please try again.",
        variant: "destructive",
      });
    }
  });

  const handleSendEmail = async () => {
    if (!eventData.customerData?.email) {
      toast({
        title: "Missing Email",
        description: "Customer email address is required to send the proposal.",
        variant: "destructive",
      });
      return;
    }

    // Check if email is configured before attempting to send
    try {
      const emailStatusResponse = await apiRequest("GET", "/api/gmail/status");
      const emailStatus = await emailStatusResponse.json();
      
      if (!emailStatus.configured) {
        toast({
          title: "Email Not Configured",
          description: "Please set up Gmail credentials in Settings > Integrations before sending proposals.",
          variant: "destructive",
        });
        return;
      }
    } catch (error) {
      toast({
        title: "Email Configuration Error",
        description: "Unable to verify email configuration. Please check Settings > Integrations.",
        variant: "destructive",
      });
      return;
    }

    // Create a temporary proposal to get an ID (in a real app, this might be handled differently)
    const proposalId = `proposal_${Date.now()}`;
    
    const emailData = {
      proposalId: proposalId,
      customerId: eventData.customerId,
      emailData: {
        to: eventData.customerData.email,
        subject: emailSubject,
        message: emailMessage,
        proposalViewLink: `${window.location.origin}/proposals/${proposalId}` // This would be a real link in production
      },
      // Include event data to create tentative booking
      eventData: {
        eventName: eventData.eventName || "Event Proposal",
        eventType: "general",
        eventDate: eventData.eventDates?.[0]?.date || new Date(),
        startTime: eventData.eventDates?.[0]?.startTime || "09:00",
        endTime: eventData.eventDates?.[0]?.endTime || "17:00",
        guestCount: eventData.eventDates?.[0]?.guestCount || 50,
        venueId: null, // Will be set when customer selects venue
        spaceId: null  // Will be set when customer selects space
      }
    };

    sendEmailMutation.mutate(emailData);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Send className="h-5 w-5" />
            Email Preview & Send
          </DialogTitle>
        </DialogHeader>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Email Configuration */}
          <div className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Email Configuration</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="email-to">To</Label>
                  <Input
                    id="email-to"
                    value={eventData.customerData?.email || ""}
                    disabled
                    className="bg-gray-50"
                  />
                </div>
                
                <div>
                  <Label htmlFor="email-subject">Subject</Label>
                  <Input
                    id="email-subject"
                    value={emailSubject}
                    onChange={(e) => setEmailSubject(e.target.value)}
                    placeholder="Event Proposal Subject"
                  />
                </div>
                
                <div>
                  <Label htmlFor="email-message">Email Message</Label>
                  <Textarea
                    id="email-message"
                    value={emailMessage}
                    onChange={(e) => setEmailMessage(e.target.value)}
                    rows={12}
                    className="font-mono text-sm"
                    placeholder="Email content with HTML formatting..."
                  />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center gap-2">
                  <User className="h-4 w-4" />
                  Customer Information
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                <div className="flex justify-between">
                  <span className="text-gray-600">Name:</span>
                  <span>{eventData.customerData?.name || 'N/A'}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Email:</span>
                  <span>{eventData.customerData?.email || 'N/A'}</span>
                </div>
                {eventData.customerData?.company && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Company:</span>
                    <span>{eventData.customerData.company}</span>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Email Preview */}
          <div className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Email Preview</CardTitle>
              </CardHeader>
              <CardContent>
                <div 
                  className="border rounded-lg p-4 bg-white max-h-[400px] overflow-y-auto"
                  dangerouslySetInnerHTML={{ __html: emailMessage }}
                />
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center gap-2">
                  <Calendar className="h-4 w-4" />
                  Event Summary
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className="font-medium">{eventData.eventName}</span>
                  <Badge variant="outline">{eventData.eventDates.length} event{eventData.eventDates.length > 1 ? 's' : ''}</Badge>
                </div>
                
                <Separator />
                
                {eventData.eventDates.map((eventDate, index) => (
                  <div key={index} className="space-y-2 p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center gap-2 text-sm">
                      <Calendar className="h-3 w-3" />
                      <span>{format(eventDate.date, 'MMM d, yyyy')}</span>
                      <span className="text-gray-500">‚Ä¢</span>
                      <span>{eventDate.startTime} - {eventDate.endTime}</span>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-gray-600">
                      <MapPin className="h-3 w-3" />
                      <span>{eventDate.venue} - {eventDate.space}</span>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-gray-600">
                      <Users className="h-3 w-3" />
                      <span>{eventDate.guestCount} guests</span>
                    </div>
                  </div>
                ))}
                
                <Separator />
                
                <div className="flex items-center justify-between font-medium text-lg">
                  <span className="flex items-center gap-2">
                    <DollarSign className="h-4 w-4" />
                    Total:
                  </span>
                  <span>${eventData.totalAmount.toFixed(2)}</span>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex justify-end gap-3 pt-4 border-t">
          <Button 
            variant="outline" 
            onClick={() => onOpenChange(false)}
          >
            Cancel
          </Button>
          <Button 
            onClick={handleSendEmail}
            disabled={sendEmailMutation.isPending || !eventData.customerData?.email}
            className="min-w-[120px]"
          >
            <Send className="h-4 w-4 mr-2" />
            {sendEmailMutation.isPending ? "Sending..." : "Send Email"}
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}